// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			jwt, err := vault.NewPlugin(ctx, "jwt", &vault.PluginArgs{
//				Type:    pulumi.String("auth"),
//				Name:    pulumi.String("jwt"),
//				Command: pulumi.String("vault-plugin-auth-jwt"),
//				Version: pulumi.String("v0.17.0"),
//				Sha256:  pulumi.String("6bd0a803ed742aa3ce35e4fa23d2c8d550e6c1567bf63410cec489c28b68b0fc"),
//				Envs: pulumi.StringArray{
//					pulumi.String("HTTP_PROXY=http://proxy.example.com:8080"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vault.NewAuthBackend(ctx, "jwt_auth", &vault.AuthBackendArgs{
//				Type: jwt.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Plugins can be imported using `:type/name/:name` or `:type/version/:version/name/:name` as the ID if the version is non-empty, e.g.
//
// ```sh
// $ pulumi import vault:index/plugin:Plugin jwt auth/name/jwt
// ```
// ```sh
// $ pulumi import vault:index/plugin:Plugin jwt auth/version/v0.17.0/name/jwt
// ```
type Plugin struct {
	pulumi.CustomResourceState

	// List of additional args to pass to the plugin.
	Args pulumi.StringArrayOutput `pulumi:"args"`
	// Command to execute the plugin, relative to the server's configured `pluginDirectory`.
	Command pulumi.StringOutput `pulumi:"command"`
	// List of additional environment variables to run the plugin with in KEY=VALUE form.
	Envs pulumi.StringArrayOutput `pulumi:"envs"`
	// Name of the plugin.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies OCI image to run. If specified, setting
	// `command`, `args`, and `env` will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	OciImage pulumi.StringPtrOutput `pulumi:"ociImage"`
	// Vault plugin runtime to use if `ociImage` is specified.
	Runtime pulumi.StringPtrOutput `pulumi:"runtime"`
	// SHA256 sum of the plugin binary.
	Sha256 pulumi.StringOutput `pulumi:"sha256"`
	// Type of plugin; one of "auth", "secret", or "database".
	Type pulumi.StringOutput `pulumi:"type"`
	// Semantic version of the plugin.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewPlugin registers a new resource with the given unique name, arguments, and options.
func NewPlugin(ctx *pulumi.Context,
	name string, args *PluginArgs, opts ...pulumi.ResourceOption) (*Plugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Command == nil {
		return nil, errors.New("invalid value for required argument 'Command'")
	}
	if args.Sha256 == nil {
		return nil, errors.New("invalid value for required argument 'Sha256'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Envs != nil {
		args.Envs = pulumi.ToSecret(args.Envs).(pulumi.StringArrayInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"envs",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plugin
	err := ctx.RegisterResource("vault:index/plugin:Plugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlugin gets an existing Plugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginState, opts ...pulumi.ResourceOption) (*Plugin, error) {
	var resource Plugin
	err := ctx.ReadResource("vault:index/plugin:Plugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plugin resources.
type pluginState struct {
	// List of additional args to pass to the plugin.
	Args []string `pulumi:"args"`
	// Command to execute the plugin, relative to the server's configured `pluginDirectory`.
	Command *string `pulumi:"command"`
	// List of additional environment variables to run the plugin with in KEY=VALUE form.
	Envs []string `pulumi:"envs"`
	// Name of the plugin.
	Name *string `pulumi:"name"`
	// Specifies OCI image to run. If specified, setting
	// `command`, `args`, and `env` will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	OciImage *string `pulumi:"ociImage"`
	// Vault plugin runtime to use if `ociImage` is specified.
	Runtime *string `pulumi:"runtime"`
	// SHA256 sum of the plugin binary.
	Sha256 *string `pulumi:"sha256"`
	// Type of plugin; one of "auth", "secret", or "database".
	Type *string `pulumi:"type"`
	// Semantic version of the plugin.
	Version *string `pulumi:"version"`
}

type PluginState struct {
	// List of additional args to pass to the plugin.
	Args pulumi.StringArrayInput
	// Command to execute the plugin, relative to the server's configured `pluginDirectory`.
	Command pulumi.StringPtrInput
	// List of additional environment variables to run the plugin with in KEY=VALUE form.
	Envs pulumi.StringArrayInput
	// Name of the plugin.
	Name pulumi.StringPtrInput
	// Specifies OCI image to run. If specified, setting
	// `command`, `args`, and `env` will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	OciImage pulumi.StringPtrInput
	// Vault plugin runtime to use if `ociImage` is specified.
	Runtime pulumi.StringPtrInput
	// SHA256 sum of the plugin binary.
	Sha256 pulumi.StringPtrInput
	// Type of plugin; one of "auth", "secret", or "database".
	Type pulumi.StringPtrInput
	// Semantic version of the plugin.
	Version pulumi.StringPtrInput
}

func (PluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginState)(nil)).Elem()
}

type pluginArgs struct {
	// List of additional args to pass to the plugin.
	Args []string `pulumi:"args"`
	// Command to execute the plugin, relative to the server's configured `pluginDirectory`.
	Command string `pulumi:"command"`
	// List of additional environment variables to run the plugin with in KEY=VALUE form.
	Envs []string `pulumi:"envs"`
	// Name of the plugin.
	Name *string `pulumi:"name"`
	// Specifies OCI image to run. If specified, setting
	// `command`, `args`, and `env` will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	OciImage *string `pulumi:"ociImage"`
	// Vault plugin runtime to use if `ociImage` is specified.
	Runtime *string `pulumi:"runtime"`
	// SHA256 sum of the plugin binary.
	Sha256 string `pulumi:"sha256"`
	// Type of plugin; one of "auth", "secret", or "database".
	Type string `pulumi:"type"`
	// Semantic version of the plugin.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Plugin resource.
type PluginArgs struct {
	// List of additional args to pass to the plugin.
	Args pulumi.StringArrayInput
	// Command to execute the plugin, relative to the server's configured `pluginDirectory`.
	Command pulumi.StringInput
	// List of additional environment variables to run the plugin with in KEY=VALUE form.
	Envs pulumi.StringArrayInput
	// Name of the plugin.
	Name pulumi.StringPtrInput
	// Specifies OCI image to run. If specified, setting
	// `command`, `args`, and `env` will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	OciImage pulumi.StringPtrInput
	// Vault plugin runtime to use if `ociImage` is specified.
	Runtime pulumi.StringPtrInput
	// SHA256 sum of the plugin binary.
	Sha256 pulumi.StringInput
	// Type of plugin; one of "auth", "secret", or "database".
	Type pulumi.StringInput
	// Semantic version of the plugin.
	Version pulumi.StringPtrInput
}

func (PluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginArgs)(nil)).Elem()
}

type PluginInput interface {
	pulumi.Input

	ToPluginOutput() PluginOutput
	ToPluginOutputWithContext(ctx context.Context) PluginOutput
}

func (*Plugin) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (i *Plugin) ToPluginOutput() PluginOutput {
	return i.ToPluginOutputWithContext(context.Background())
}

func (i *Plugin) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginOutput)
}

// PluginArrayInput is an input type that accepts PluginArray and PluginArrayOutput values.
// You can construct a concrete instance of `PluginArrayInput` via:
//
//	PluginArray{ PluginArgs{...} }
type PluginArrayInput interface {
	pulumi.Input

	ToPluginArrayOutput() PluginArrayOutput
	ToPluginArrayOutputWithContext(context.Context) PluginArrayOutput
}

type PluginArray []PluginInput

func (PluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (i PluginArray) ToPluginArrayOutput() PluginArrayOutput {
	return i.ToPluginArrayOutputWithContext(context.Background())
}

func (i PluginArray) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginArrayOutput)
}

// PluginMapInput is an input type that accepts PluginMap and PluginMapOutput values.
// You can construct a concrete instance of `PluginMapInput` via:
//
//	PluginMap{ "key": PluginArgs{...} }
type PluginMapInput interface {
	pulumi.Input

	ToPluginMapOutput() PluginMapOutput
	ToPluginMapOutputWithContext(context.Context) PluginMapOutput
}

type PluginMap map[string]PluginInput

func (PluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (i PluginMap) ToPluginMapOutput() PluginMapOutput {
	return i.ToPluginMapOutputWithContext(context.Background())
}

func (i PluginMap) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginMapOutput)
}

type PluginOutput struct{ *pulumi.OutputState }

func (PluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (o PluginOutput) ToPluginOutput() PluginOutput {
	return o
}

func (o PluginOutput) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return o
}

// List of additional args to pass to the plugin.
func (o PluginOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringArrayOutput { return v.Args }).(pulumi.StringArrayOutput)
}

// Command to execute the plugin, relative to the server's configured `pluginDirectory`.
func (o PluginOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Command }).(pulumi.StringOutput)
}

// List of additional environment variables to run the plugin with in KEY=VALUE form.
func (o PluginOutput) Envs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringArrayOutput { return v.Envs }).(pulumi.StringArrayOutput)
}

// Name of the plugin.
func (o PluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies OCI image to run. If specified, setting
// `command`, `args`, and `env` will update the container's entrypoint, args, and
// environment variables (append-only) respectively.
func (o PluginOutput) OciImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.OciImage }).(pulumi.StringPtrOutput)
}

// Vault plugin runtime to use if `ociImage` is specified.
func (o PluginOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.Runtime }).(pulumi.StringPtrOutput)
}

// SHA256 sum of the plugin binary.
func (o PluginOutput) Sha256() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Sha256 }).(pulumi.StringOutput)
}

// Type of plugin; one of "auth", "secret", or "database".
func (o PluginOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Semantic version of the plugin.
func (o PluginOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type PluginArrayOutput struct{ *pulumi.OutputState }

func (PluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Plugin)(nil)).Elem()
}

func (o PluginArrayOutput) ToPluginArrayOutput() PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) ToPluginArrayOutputWithContext(ctx context.Context) PluginArrayOutput {
	return o
}

func (o PluginArrayOutput) Index(i pulumi.IntInput) PluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].([]*Plugin)[vs[1].(int)]
	}).(PluginOutput)
}

type PluginMapOutput struct{ *pulumi.OutputState }

func (PluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Plugin)(nil)).Elem()
}

func (o PluginMapOutput) ToPluginMapOutput() PluginMapOutput {
	return o
}

func (o PluginMapOutput) ToPluginMapOutputWithContext(ctx context.Context) PluginMapOutput {
	return o
}

func (o PluginMapOutput) MapIndex(k pulumi.StringInput) PluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Plugin {
		return vs[0].(map[string]*Plugin)[vs[1].(string)]
	}).(PluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginInput)(nil)).Elem(), &Plugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginArrayInput)(nil)).Elem(), PluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginMapInput)(nil)).Elem(), PluginMap{})
	pulumi.RegisterOutputType(PluginOutput{})
	pulumi.RegisterOutputType(PluginArrayOutput{})
	pulumi.RegisterOutputType(PluginMapOutput{})
}
