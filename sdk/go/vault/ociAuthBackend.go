// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vault.NewOciAuthBackend(ctx, "example", &vault.OciAuthBackendArgs{
//				Path:          pulumi.Any(exampleVaultAuthBackend.Path),
//				HomeTenancyId: pulumi.String("ocid1.tenancy.oc1..aaaaaaaah7zkvaffv26pzyauoe2zbnionqvhvsexamplee557wakiofi4ysgqq"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OCI auth backends can be imported using the backend's `path`, e.g.
//
// ```sh
// $ pulumi import vault:index/ociAuthBackend:OciAuthBackend example oci
// ```
type OciAuthBackend struct {
	pulumi.CustomResourceState

	// The accessor of the auth backend
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// A description of the auth backend.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation pulumi.BoolPtrOutput `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	DisableRemount pulumi.BoolPtrOutput `pulumi:"disableRemount"`
	// The Tenancy OCID of your OCI account.
	HomeTenancyId pulumi.StringOutput `pulumi:"homeTenancyId"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Unique name of the auth backend to configure.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod pulumi.IntPtrOutput `pulumi:"rotationPeriod"`
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule pulumi.StringPtrOutput `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow pulumi.IntPtrOutput `pulumi:"rotationWindow"`
	// Extra configuration block. Structure is documented below.
	//
	// The `tune` block is used to tune the auth backend:
	Tune OciAuthBackendTuneOutput `pulumi:"tune"`
}

// NewOciAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewOciAuthBackend(ctx *pulumi.Context,
	name string, args *OciAuthBackendArgs, opts ...pulumi.ResourceOption) (*OciAuthBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HomeTenancyId == nil {
		return nil, errors.New("invalid value for required argument 'HomeTenancyId'")
	}
	if args.HomeTenancyId != nil {
		args.HomeTenancyId = pulumi.ToSecret(args.HomeTenancyId).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"homeTenancyId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OciAuthBackend
	err := ctx.RegisterResource("vault:index/ociAuthBackend:OciAuthBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOciAuthBackend gets an existing OciAuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOciAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OciAuthBackendState, opts ...pulumi.ResourceOption) (*OciAuthBackend, error) {
	var resource OciAuthBackend
	err := ctx.ReadResource("vault:index/ociAuthBackend:OciAuthBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OciAuthBackend resources.
type ociAuthBackendState struct {
	// The accessor of the auth backend
	Accessor *string `pulumi:"accessor"`
	// A description of the auth backend.
	Description *string `pulumi:"description"`
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `pulumi:"disableRemount"`
	// The Tenancy OCID of your OCI account.
	HomeTenancyId *string `pulumi:"homeTenancyId"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Unique name of the auth backend to configure.
	Path *string `pulumi:"path"`
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow *int `pulumi:"rotationWindow"`
	// Extra configuration block. Structure is documented below.
	//
	// The `tune` block is used to tune the auth backend:
	Tune *OciAuthBackendTune `pulumi:"tune"`
}

type OciAuthBackendState struct {
	// The accessor of the auth backend
	Accessor pulumi.StringPtrInput
	// A description of the auth backend.
	Description pulumi.StringPtrInput
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	DisableRemount pulumi.BoolPtrInput
	// The Tenancy OCID of your OCI account.
	HomeTenancyId pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Unique name of the auth backend to configure.
	Path pulumi.StringPtrInput
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod pulumi.IntPtrInput
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow pulumi.IntPtrInput
	// Extra configuration block. Structure is documented below.
	//
	// The `tune` block is used to tune the auth backend:
	Tune OciAuthBackendTunePtrInput
}

func (OciAuthBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*ociAuthBackendState)(nil)).Elem()
}

type ociAuthBackendArgs struct {
	// A description of the auth backend.
	Description *string `pulumi:"description"`
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `pulumi:"disableRemount"`
	// The Tenancy OCID of your OCI account.
	HomeTenancyId string `pulumi:"homeTenancyId"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Unique name of the auth backend to configure.
	Path *string `pulumi:"path"`
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow *int `pulumi:"rotationWindow"`
	// Extra configuration block. Structure is documented below.
	//
	// The `tune` block is used to tune the auth backend:
	Tune *OciAuthBackendTune `pulumi:"tune"`
}

// The set of arguments for constructing a OciAuthBackend resource.
type OciAuthBackendArgs struct {
	// A description of the auth backend.
	Description pulumi.StringPtrInput
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	DisableRemount pulumi.BoolPtrInput
	// The Tenancy OCID of your OCI account.
	HomeTenancyId pulumi.StringInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Unique name of the auth backend to configure.
	Path pulumi.StringPtrInput
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod pulumi.IntPtrInput
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow pulumi.IntPtrInput
	// Extra configuration block. Structure is documented below.
	//
	// The `tune` block is used to tune the auth backend:
	Tune OciAuthBackendTunePtrInput
}

func (OciAuthBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ociAuthBackendArgs)(nil)).Elem()
}

type OciAuthBackendInput interface {
	pulumi.Input

	ToOciAuthBackendOutput() OciAuthBackendOutput
	ToOciAuthBackendOutputWithContext(ctx context.Context) OciAuthBackendOutput
}

func (*OciAuthBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**OciAuthBackend)(nil)).Elem()
}

func (i *OciAuthBackend) ToOciAuthBackendOutput() OciAuthBackendOutput {
	return i.ToOciAuthBackendOutputWithContext(context.Background())
}

func (i *OciAuthBackend) ToOciAuthBackendOutputWithContext(ctx context.Context) OciAuthBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciAuthBackendOutput)
}

// OciAuthBackendArrayInput is an input type that accepts OciAuthBackendArray and OciAuthBackendArrayOutput values.
// You can construct a concrete instance of `OciAuthBackendArrayInput` via:
//
//	OciAuthBackendArray{ OciAuthBackendArgs{...} }
type OciAuthBackendArrayInput interface {
	pulumi.Input

	ToOciAuthBackendArrayOutput() OciAuthBackendArrayOutput
	ToOciAuthBackendArrayOutputWithContext(context.Context) OciAuthBackendArrayOutput
}

type OciAuthBackendArray []OciAuthBackendInput

func (OciAuthBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciAuthBackend)(nil)).Elem()
}

func (i OciAuthBackendArray) ToOciAuthBackendArrayOutput() OciAuthBackendArrayOutput {
	return i.ToOciAuthBackendArrayOutputWithContext(context.Background())
}

func (i OciAuthBackendArray) ToOciAuthBackendArrayOutputWithContext(ctx context.Context) OciAuthBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciAuthBackendArrayOutput)
}

// OciAuthBackendMapInput is an input type that accepts OciAuthBackendMap and OciAuthBackendMapOutput values.
// You can construct a concrete instance of `OciAuthBackendMapInput` via:
//
//	OciAuthBackendMap{ "key": OciAuthBackendArgs{...} }
type OciAuthBackendMapInput interface {
	pulumi.Input

	ToOciAuthBackendMapOutput() OciAuthBackendMapOutput
	ToOciAuthBackendMapOutputWithContext(context.Context) OciAuthBackendMapOutput
}

type OciAuthBackendMap map[string]OciAuthBackendInput

func (OciAuthBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciAuthBackend)(nil)).Elem()
}

func (i OciAuthBackendMap) ToOciAuthBackendMapOutput() OciAuthBackendMapOutput {
	return i.ToOciAuthBackendMapOutputWithContext(context.Background())
}

func (i OciAuthBackendMap) ToOciAuthBackendMapOutputWithContext(ctx context.Context) OciAuthBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OciAuthBackendMapOutput)
}

type OciAuthBackendOutput struct{ *pulumi.OutputState }

func (OciAuthBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OciAuthBackend)(nil)).Elem()
}

func (o OciAuthBackendOutput) ToOciAuthBackendOutput() OciAuthBackendOutput {
	return o
}

func (o OciAuthBackendOutput) ToOciAuthBackendOutputWithContext(ctx context.Context) OciAuthBackendOutput {
	return o
}

// The accessor of the auth backend
func (o OciAuthBackendOutput) Accessor() pulumi.StringOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.StringOutput { return v.Accessor }).(pulumi.StringOutput)
}

// A description of the auth backend.
func (o OciAuthBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Stops rotation of the root credential until set to false.
func (o OciAuthBackendOutput) DisableAutomatedRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.BoolPtrOutput { return v.DisableAutomatedRotation }).(pulumi.BoolPtrOutput)
}

// If set, opts out of mount migration on path updates.
func (o OciAuthBackendOutput) DisableRemount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.BoolPtrOutput { return v.DisableRemount }).(pulumi.BoolPtrOutput)
}

// The Tenancy OCID of your OCI account.
func (o OciAuthBackendOutput) HomeTenancyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.StringOutput { return v.HomeTenancyId }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
// *Available only for Vault Enterprise*.
func (o OciAuthBackendOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Unique name of the auth backend to configure.
func (o OciAuthBackendOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
func (o OciAuthBackendOutput) RotationPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.IntPtrOutput { return v.RotationPeriod }).(pulumi.IntPtrOutput)
}

// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
func (o OciAuthBackendOutput) RotationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.StringPtrOutput { return v.RotationSchedule }).(pulumi.StringPtrOutput)
}

// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
func (o OciAuthBackendOutput) RotationWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OciAuthBackend) pulumi.IntPtrOutput { return v.RotationWindow }).(pulumi.IntPtrOutput)
}

// Extra configuration block. Structure is documented below.
//
// The `tune` block is used to tune the auth backend:
func (o OciAuthBackendOutput) Tune() OciAuthBackendTuneOutput {
	return o.ApplyT(func(v *OciAuthBackend) OciAuthBackendTuneOutput { return v.Tune }).(OciAuthBackendTuneOutput)
}

type OciAuthBackendArrayOutput struct{ *pulumi.OutputState }

func (OciAuthBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OciAuthBackend)(nil)).Elem()
}

func (o OciAuthBackendArrayOutput) ToOciAuthBackendArrayOutput() OciAuthBackendArrayOutput {
	return o
}

func (o OciAuthBackendArrayOutput) ToOciAuthBackendArrayOutputWithContext(ctx context.Context) OciAuthBackendArrayOutput {
	return o
}

func (o OciAuthBackendArrayOutput) Index(i pulumi.IntInput) OciAuthBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OciAuthBackend {
		return vs[0].([]*OciAuthBackend)[vs[1].(int)]
	}).(OciAuthBackendOutput)
}

type OciAuthBackendMapOutput struct{ *pulumi.OutputState }

func (OciAuthBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OciAuthBackend)(nil)).Elem()
}

func (o OciAuthBackendMapOutput) ToOciAuthBackendMapOutput() OciAuthBackendMapOutput {
	return o
}

func (o OciAuthBackendMapOutput) ToOciAuthBackendMapOutputWithContext(ctx context.Context) OciAuthBackendMapOutput {
	return o
}

func (o OciAuthBackendMapOutput) MapIndex(k pulumi.StringInput) OciAuthBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OciAuthBackend {
		return vs[0].(map[string]*OciAuthBackend)[vs[1].(string)]
	}).(OciAuthBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OciAuthBackendInput)(nil)).Elem(), &OciAuthBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciAuthBackendArrayInput)(nil)).Elem(), OciAuthBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OciAuthBackendMapInput)(nil)).Elem(), OciAuthBackendMap{})
	pulumi.RegisterOutputType(OciAuthBackendOutput{})
	pulumi.RegisterOutputType(OciAuthBackendArrayOutput{})
	pulumi.RegisterOutputType(OciAuthBackendMapOutput{})
}
