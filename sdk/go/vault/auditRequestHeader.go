// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages additional request headers that appear in audited requests.
//
// > **Note**
// Because of the way the [sys/config/auditing/request-headers API](https://www.vaultproject.io/api-docs/system/config-auditing)
// is implemented in Vault, this resource will manage existing audited headers with
// matching names without requiring import.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vault.NewAuditRequestHeader(ctx, "xForwardedFor", &vault.AuditRequestHeaderArgs{
//				Hmac: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AuditRequestHeader struct {
	pulumi.CustomResourceState

	// Whether this header's value should be HMAC'd in the audit logs.
	Hmac pulumi.BoolPtrOutput `pulumi:"hmac"`
	// The name of the request header to audit.
	Name pulumi.StringOutput `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
}

// NewAuditRequestHeader registers a new resource with the given unique name, arguments, and options.
func NewAuditRequestHeader(ctx *pulumi.Context,
	name string, args *AuditRequestHeaderArgs, opts ...pulumi.ResourceOption) (*AuditRequestHeader, error) {
	if args == nil {
		args = &AuditRequestHeaderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuditRequestHeader
	err := ctx.RegisterResource("vault:index/auditRequestHeader:AuditRequestHeader", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuditRequestHeader gets an existing AuditRequestHeader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuditRequestHeader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuditRequestHeaderState, opts ...pulumi.ResourceOption) (*AuditRequestHeader, error) {
	var resource AuditRequestHeader
	err := ctx.ReadResource("vault:index/auditRequestHeader:AuditRequestHeader", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuditRequestHeader resources.
type auditRequestHeaderState struct {
	// Whether this header's value should be HMAC'd in the audit logs.
	Hmac *bool `pulumi:"hmac"`
	// The name of the request header to audit.
	Name *string `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
}

type AuditRequestHeaderState struct {
	// Whether this header's value should be HMAC'd in the audit logs.
	Hmac pulumi.BoolPtrInput
	// The name of the request header to audit.
	Name pulumi.StringPtrInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
}

func (AuditRequestHeaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*auditRequestHeaderState)(nil)).Elem()
}

type auditRequestHeaderArgs struct {
	// Whether this header's value should be HMAC'd in the audit logs.
	Hmac *bool `pulumi:"hmac"`
	// The name of the request header to audit.
	Name *string `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a AuditRequestHeader resource.
type AuditRequestHeaderArgs struct {
	// Whether this header's value should be HMAC'd in the audit logs.
	Hmac pulumi.BoolPtrInput
	// The name of the request header to audit.
	Name pulumi.StringPtrInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
}

func (AuditRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*auditRequestHeaderArgs)(nil)).Elem()
}

type AuditRequestHeaderInput interface {
	pulumi.Input

	ToAuditRequestHeaderOutput() AuditRequestHeaderOutput
	ToAuditRequestHeaderOutputWithContext(ctx context.Context) AuditRequestHeaderOutput
}

func (*AuditRequestHeader) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditRequestHeader)(nil)).Elem()
}

func (i *AuditRequestHeader) ToAuditRequestHeaderOutput() AuditRequestHeaderOutput {
	return i.ToAuditRequestHeaderOutputWithContext(context.Background())
}

func (i *AuditRequestHeader) ToAuditRequestHeaderOutputWithContext(ctx context.Context) AuditRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditRequestHeaderOutput)
}

// AuditRequestHeaderArrayInput is an input type that accepts AuditRequestHeaderArray and AuditRequestHeaderArrayOutput values.
// You can construct a concrete instance of `AuditRequestHeaderArrayInput` via:
//
//	AuditRequestHeaderArray{ AuditRequestHeaderArgs{...} }
type AuditRequestHeaderArrayInput interface {
	pulumi.Input

	ToAuditRequestHeaderArrayOutput() AuditRequestHeaderArrayOutput
	ToAuditRequestHeaderArrayOutputWithContext(context.Context) AuditRequestHeaderArrayOutput
}

type AuditRequestHeaderArray []AuditRequestHeaderInput

func (AuditRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditRequestHeader)(nil)).Elem()
}

func (i AuditRequestHeaderArray) ToAuditRequestHeaderArrayOutput() AuditRequestHeaderArrayOutput {
	return i.ToAuditRequestHeaderArrayOutputWithContext(context.Background())
}

func (i AuditRequestHeaderArray) ToAuditRequestHeaderArrayOutputWithContext(ctx context.Context) AuditRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditRequestHeaderArrayOutput)
}

// AuditRequestHeaderMapInput is an input type that accepts AuditRequestHeaderMap and AuditRequestHeaderMapOutput values.
// You can construct a concrete instance of `AuditRequestHeaderMapInput` via:
//
//	AuditRequestHeaderMap{ "key": AuditRequestHeaderArgs{...} }
type AuditRequestHeaderMapInput interface {
	pulumi.Input

	ToAuditRequestHeaderMapOutput() AuditRequestHeaderMapOutput
	ToAuditRequestHeaderMapOutputWithContext(context.Context) AuditRequestHeaderMapOutput
}

type AuditRequestHeaderMap map[string]AuditRequestHeaderInput

func (AuditRequestHeaderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditRequestHeader)(nil)).Elem()
}

func (i AuditRequestHeaderMap) ToAuditRequestHeaderMapOutput() AuditRequestHeaderMapOutput {
	return i.ToAuditRequestHeaderMapOutputWithContext(context.Background())
}

func (i AuditRequestHeaderMap) ToAuditRequestHeaderMapOutputWithContext(ctx context.Context) AuditRequestHeaderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditRequestHeaderMapOutput)
}

type AuditRequestHeaderOutput struct{ *pulumi.OutputState }

func (AuditRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditRequestHeader)(nil)).Elem()
}

func (o AuditRequestHeaderOutput) ToAuditRequestHeaderOutput() AuditRequestHeaderOutput {
	return o
}

func (o AuditRequestHeaderOutput) ToAuditRequestHeaderOutputWithContext(ctx context.Context) AuditRequestHeaderOutput {
	return o
}

// Whether this header's value should be HMAC'd in the audit logs.
func (o AuditRequestHeaderOutput) Hmac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuditRequestHeader) pulumi.BoolPtrOutput { return v.Hmac }).(pulumi.BoolPtrOutput)
}

// The name of the request header to audit.
func (o AuditRequestHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuditRequestHeader) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Target namespace. (requires Enterprise)
func (o AuditRequestHeaderOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditRequestHeader) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

type AuditRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (AuditRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditRequestHeader)(nil)).Elem()
}

func (o AuditRequestHeaderArrayOutput) ToAuditRequestHeaderArrayOutput() AuditRequestHeaderArrayOutput {
	return o
}

func (o AuditRequestHeaderArrayOutput) ToAuditRequestHeaderArrayOutputWithContext(ctx context.Context) AuditRequestHeaderArrayOutput {
	return o
}

func (o AuditRequestHeaderArrayOutput) Index(i pulumi.IntInput) AuditRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuditRequestHeader {
		return vs[0].([]*AuditRequestHeader)[vs[1].(int)]
	}).(AuditRequestHeaderOutput)
}

type AuditRequestHeaderMapOutput struct{ *pulumi.OutputState }

func (AuditRequestHeaderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditRequestHeader)(nil)).Elem()
}

func (o AuditRequestHeaderMapOutput) ToAuditRequestHeaderMapOutput() AuditRequestHeaderMapOutput {
	return o
}

func (o AuditRequestHeaderMapOutput) ToAuditRequestHeaderMapOutputWithContext(ctx context.Context) AuditRequestHeaderMapOutput {
	return o
}

func (o AuditRequestHeaderMapOutput) MapIndex(k pulumi.StringInput) AuditRequestHeaderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuditRequestHeader {
		return vs[0].(map[string]*AuditRequestHeader)[vs[1].(string)]
	}).(AuditRequestHeaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditRequestHeaderInput)(nil)).Elem(), &AuditRequestHeader{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditRequestHeaderArrayInput)(nil)).Elem(), AuditRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditRequestHeaderMapInput)(nil)).Elem(), AuditRequestHeaderMap{})
	pulumi.RegisterOutputType(AuditRequestHeaderOutput{})
	pulumi.RegisterOutputType(AuditRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(AuditRequestHeaderMapOutput{})
}
