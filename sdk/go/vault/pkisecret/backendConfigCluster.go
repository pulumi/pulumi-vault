// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows setting the cluster-local's API mount path and AIA distribution point on a particular performance replication cluster.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault"
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/pkiSecret"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			root, err := vault.NewMount(ctx, "root", &vault.MountArgs{
//				Path:                   pulumi.String("pki-root"),
//				Type:                   pulumi.String("pki"),
//				Description:            pulumi.String("root PKI"),
//				DefaultLeaseTtlSeconds: pulumi.Int(8640000),
//				MaxLeaseTtlSeconds:     pulumi.Int(8640000),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pkiSecret.NewBackendConfigCluster(ctx, "example", &pkiSecret.BackendConfigClusterArgs{
//				Backend: root.Path,
//				Path:    pulumi.String("http://127.0.0.1:8200/v1/pki-root"),
//				AiaPath: pulumi.String("http://127.0.0.1:8200/v1/pki-root"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// The PKI config cluster can be imported using the resource's `id`.
// In the case of the example above the `id` would be `pki-root/config/cluster`,
// where the `pki-root` component is the resource's `backend`, e.g.
//
// ```sh
// $ pulumi import vault:pkiSecret/backendConfigCluster:BackendConfigCluster example pki-root/config/cluster
// ```
type BackendConfigCluster struct {
	pulumi.CustomResourceState

	// Specifies the path to this performance replication cluster's AIA distribution point.
	AiaPath pulumi.StringPtrOutput `pulumi:"aiaPath"`
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the path to this performance replication cluster's API mount path.
	Path pulumi.StringPtrOutput `pulumi:"path"`
}

// NewBackendConfigCluster registers a new resource with the given unique name, arguments, and options.
func NewBackendConfigCluster(ctx *pulumi.Context,
	name string, args *BackendConfigClusterArgs, opts ...pulumi.ResourceOption) (*BackendConfigCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendConfigCluster
	err := ctx.RegisterResource("vault:pkiSecret/backendConfigCluster:BackendConfigCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendConfigCluster gets an existing BackendConfigCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendConfigCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendConfigClusterState, opts ...pulumi.ResourceOption) (*BackendConfigCluster, error) {
	var resource BackendConfigCluster
	err := ctx.ReadResource("vault:pkiSecret/backendConfigCluster:BackendConfigCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendConfigCluster resources.
type backendConfigClusterState struct {
	// Specifies the path to this performance replication cluster's AIA distribution point.
	AiaPath *string `pulumi:"aiaPath"`
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend *string `pulumi:"backend"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies the path to this performance replication cluster's API mount path.
	Path *string `pulumi:"path"`
}

type BackendConfigClusterState struct {
	// Specifies the path to this performance replication cluster's AIA distribution point.
	AiaPath pulumi.StringPtrInput
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies the path to this performance replication cluster's API mount path.
	Path pulumi.StringPtrInput
}

func (BackendConfigClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigClusterState)(nil)).Elem()
}

type backendConfigClusterArgs struct {
	// Specifies the path to this performance replication cluster's AIA distribution point.
	AiaPath *string `pulumi:"aiaPath"`
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend string `pulumi:"backend"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies the path to this performance replication cluster's API mount path.
	Path *string `pulumi:"path"`
}

// The set of arguments for constructing a BackendConfigCluster resource.
type BackendConfigClusterArgs struct {
	// Specifies the path to this performance replication cluster's AIA distribution point.
	AiaPath pulumi.StringPtrInput
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend pulumi.StringInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies the path to this performance replication cluster's API mount path.
	Path pulumi.StringPtrInput
}

func (BackendConfigClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigClusterArgs)(nil)).Elem()
}

type BackendConfigClusterInput interface {
	pulumi.Input

	ToBackendConfigClusterOutput() BackendConfigClusterOutput
	ToBackendConfigClusterOutputWithContext(ctx context.Context) BackendConfigClusterOutput
}

func (*BackendConfigCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigCluster)(nil)).Elem()
}

func (i *BackendConfigCluster) ToBackendConfigClusterOutput() BackendConfigClusterOutput {
	return i.ToBackendConfigClusterOutputWithContext(context.Background())
}

func (i *BackendConfigCluster) ToBackendConfigClusterOutputWithContext(ctx context.Context) BackendConfigClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigClusterOutput)
}

// BackendConfigClusterArrayInput is an input type that accepts BackendConfigClusterArray and BackendConfigClusterArrayOutput values.
// You can construct a concrete instance of `BackendConfigClusterArrayInput` via:
//
//	BackendConfigClusterArray{ BackendConfigClusterArgs{...} }
type BackendConfigClusterArrayInput interface {
	pulumi.Input

	ToBackendConfigClusterArrayOutput() BackendConfigClusterArrayOutput
	ToBackendConfigClusterArrayOutputWithContext(context.Context) BackendConfigClusterArrayOutput
}

type BackendConfigClusterArray []BackendConfigClusterInput

func (BackendConfigClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigCluster)(nil)).Elem()
}

func (i BackendConfigClusterArray) ToBackendConfigClusterArrayOutput() BackendConfigClusterArrayOutput {
	return i.ToBackendConfigClusterArrayOutputWithContext(context.Background())
}

func (i BackendConfigClusterArray) ToBackendConfigClusterArrayOutputWithContext(ctx context.Context) BackendConfigClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigClusterArrayOutput)
}

// BackendConfigClusterMapInput is an input type that accepts BackendConfigClusterMap and BackendConfigClusterMapOutput values.
// You can construct a concrete instance of `BackendConfigClusterMapInput` via:
//
//	BackendConfigClusterMap{ "key": BackendConfigClusterArgs{...} }
type BackendConfigClusterMapInput interface {
	pulumi.Input

	ToBackendConfigClusterMapOutput() BackendConfigClusterMapOutput
	ToBackendConfigClusterMapOutputWithContext(context.Context) BackendConfigClusterMapOutput
}

type BackendConfigClusterMap map[string]BackendConfigClusterInput

func (BackendConfigClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigCluster)(nil)).Elem()
}

func (i BackendConfigClusterMap) ToBackendConfigClusterMapOutput() BackendConfigClusterMapOutput {
	return i.ToBackendConfigClusterMapOutputWithContext(context.Background())
}

func (i BackendConfigClusterMap) ToBackendConfigClusterMapOutputWithContext(ctx context.Context) BackendConfigClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigClusterMapOutput)
}

type BackendConfigClusterOutput struct{ *pulumi.OutputState }

func (BackendConfigClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigCluster)(nil)).Elem()
}

func (o BackendConfigClusterOutput) ToBackendConfigClusterOutput() BackendConfigClusterOutput {
	return o
}

func (o BackendConfigClusterOutput) ToBackendConfigClusterOutputWithContext(ctx context.Context) BackendConfigClusterOutput {
	return o
}

// Specifies the path to this performance replication cluster's AIA distribution point.
func (o BackendConfigClusterOutput) AiaPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigCluster) pulumi.StringPtrOutput { return v.AiaPath }).(pulumi.StringPtrOutput)
}

// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
func (o BackendConfigClusterOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigCluster) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o BackendConfigClusterOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigCluster) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the path to this performance replication cluster's API mount path.
func (o BackendConfigClusterOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigCluster) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

type BackendConfigClusterArrayOutput struct{ *pulumi.OutputState }

func (BackendConfigClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigCluster)(nil)).Elem()
}

func (o BackendConfigClusterArrayOutput) ToBackendConfigClusterArrayOutput() BackendConfigClusterArrayOutput {
	return o
}

func (o BackendConfigClusterArrayOutput) ToBackendConfigClusterArrayOutputWithContext(ctx context.Context) BackendConfigClusterArrayOutput {
	return o
}

func (o BackendConfigClusterArrayOutput) Index(i pulumi.IntInput) BackendConfigClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendConfigCluster {
		return vs[0].([]*BackendConfigCluster)[vs[1].(int)]
	}).(BackendConfigClusterOutput)
}

type BackendConfigClusterMapOutput struct{ *pulumi.OutputState }

func (BackendConfigClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigCluster)(nil)).Elem()
}

func (o BackendConfigClusterMapOutput) ToBackendConfigClusterMapOutput() BackendConfigClusterMapOutput {
	return o
}

func (o BackendConfigClusterMapOutput) ToBackendConfigClusterMapOutputWithContext(ctx context.Context) BackendConfigClusterMapOutput {
	return o
}

func (o BackendConfigClusterMapOutput) MapIndex(k pulumi.StringInput) BackendConfigClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendConfigCluster {
		return vs[0].(map[string]*BackendConfigCluster)[vs[1].(string)]
	}).(BackendConfigClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigClusterInput)(nil)).Elem(), &BackendConfigCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigClusterArrayInput)(nil)).Elem(), BackendConfigClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigClusterMapInput)(nil)).Elem(), BackendConfigClusterMap{})
	pulumi.RegisterOutputType(BackendConfigClusterOutput{})
	pulumi.RegisterOutputType(BackendConfigClusterArrayOutput{})
	pulumi.RegisterOutputType(BackendConfigClusterMapOutput{})
}
