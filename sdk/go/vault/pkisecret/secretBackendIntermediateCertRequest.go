// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/pkiSecret"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pkiSecret.NewSecretBackendIntermediateCertRequest(ctx, "test", &pkiSecret.SecretBackendIntermediateCertRequestArgs{
//				Backend:    pulumi.Any(vault_mount.Pki.Path),
//				Type:       pulumi.String("internal"),
//				CommonName: pulumi.String("app.my.domain"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				vault_mount.Pki,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SecretBackendIntermediateCertRequest struct {
	pulumi.CustomResourceState

	// Adds a Basic Constraints extension with 'CA: true'.
	// Only needed as a workaround in some compatibility scenarios with Active Directory
	// Certificate Services
	AddBasicConstraints pulumi.BoolPtrOutput `pulumi:"addBasicConstraints"`
	// List of alternative names
	AltNames pulumi.StringArrayOutput `pulumi:"altNames"`
	// The PKI secret backend the resource belongs to.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// CN of intermediate to create
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// The country
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// The CSR
	Csr pulumi.StringOutput `pulumi:"csr"`
	// Flag to exclude CN from SANs
	ExcludeCnFromSans pulumi.BoolPtrOutput `pulumi:"excludeCnFromSans"`
	// The format of data
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// List of alternative IPs
	IpSans pulumi.StringArrayOutput `pulumi:"ipSans"`
	// The number of bits to use
	KeyBits pulumi.IntPtrOutput `pulumi:"keyBits"`
	// The ID of the generated key.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// When a new key is created with this request, optionally specifies
	// the name for this. The global ref `default` may not be used as a name.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// Specifies the key (either default, by name, or by identifier) to use
	// for generating this request. Only suitable for `type=existing` requests.
	KeyRef pulumi.StringOutput `pulumi:"keyRef"`
	// The desired key type
	KeyType pulumi.StringPtrOutput `pulumi:"keyType"`
	// The locality
	Locality pulumi.StringPtrOutput `pulumi:"locality"`
	// The ID of the previously configured managed key. This field is
	// required if `type` is `kms` and it conflicts with `managedKeyName`
	ManagedKeyId pulumi.StringPtrOutput `pulumi:"managedKeyId"`
	// The name of the previously configured managed key. This field is
	// required if `type` is `kms`  and it conflicts with `managedKeyId`
	ManagedKeyName pulumi.StringPtrOutput `pulumi:"managedKeyName"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The organization
	Organization pulumi.StringPtrOutput `pulumi:"organization"`
	// List of other SANs
	OtherSans pulumi.StringArrayOutput `pulumi:"otherSans"`
	// The organization unit
	Ou pulumi.StringPtrOutput `pulumi:"ou"`
	// The postal code
	PostalCode pulumi.StringPtrOutput `pulumi:"postalCode"`
	// The private key
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The private key format
	PrivateKeyFormat pulumi.StringPtrOutput `pulumi:"privateKeyFormat"`
	// The private key type
	PrivateKeyType pulumi.StringOutput `pulumi:"privateKeyType"`
	// The province
	Province pulumi.StringPtrOutput `pulumi:"province"`
	// The street address
	StreetAddress pulumi.StringPtrOutput `pulumi:"streetAddress"`
	// Type of intermediate to create. Must be either \"exported\" or \"internal\"
	// or \"kms\"
	Type pulumi.StringOutput `pulumi:"type"`
	// List of alternative URIs
	UriSans pulumi.StringArrayOutput `pulumi:"uriSans"`
}

// NewSecretBackendIntermediateCertRequest registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendIntermediateCertRequest(ctx *pulumi.Context,
	name string, args *SecretBackendIntermediateCertRequestArgs, opts ...pulumi.ResourceOption) (*SecretBackendIntermediateCertRequest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretBackendIntermediateCertRequest
	err := ctx.RegisterResource("vault:pkiSecret/secretBackendIntermediateCertRequest:SecretBackendIntermediateCertRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackendIntermediateCertRequest gets an existing SecretBackendIntermediateCertRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendIntermediateCertRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendIntermediateCertRequestState, opts ...pulumi.ResourceOption) (*SecretBackendIntermediateCertRequest, error) {
	var resource SecretBackendIntermediateCertRequest
	err := ctx.ReadResource("vault:pkiSecret/secretBackendIntermediateCertRequest:SecretBackendIntermediateCertRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackendIntermediateCertRequest resources.
type secretBackendIntermediateCertRequestState struct {
	// Adds a Basic Constraints extension with 'CA: true'.
	// Only needed as a workaround in some compatibility scenarios with Active Directory
	// Certificate Services
	AddBasicConstraints *bool `pulumi:"addBasicConstraints"`
	// List of alternative names
	AltNames []string `pulumi:"altNames"`
	// The PKI secret backend the resource belongs to.
	Backend *string `pulumi:"backend"`
	// CN of intermediate to create
	CommonName *string `pulumi:"commonName"`
	// The country
	Country *string `pulumi:"country"`
	// The CSR
	Csr *string `pulumi:"csr"`
	// Flag to exclude CN from SANs
	ExcludeCnFromSans *bool `pulumi:"excludeCnFromSans"`
	// The format of data
	Format *string `pulumi:"format"`
	// List of alternative IPs
	IpSans []string `pulumi:"ipSans"`
	// The number of bits to use
	KeyBits *int `pulumi:"keyBits"`
	// The ID of the generated key.
	KeyId *string `pulumi:"keyId"`
	// When a new key is created with this request, optionally specifies
	// the name for this. The global ref `default` may not be used as a name.
	KeyName *string `pulumi:"keyName"`
	// Specifies the key (either default, by name, or by identifier) to use
	// for generating this request. Only suitable for `type=existing` requests.
	KeyRef *string `pulumi:"keyRef"`
	// The desired key type
	KeyType *string `pulumi:"keyType"`
	// The locality
	Locality *string `pulumi:"locality"`
	// The ID of the previously configured managed key. This field is
	// required if `type` is `kms` and it conflicts with `managedKeyName`
	ManagedKeyId *string `pulumi:"managedKeyId"`
	// The name of the previously configured managed key. This field is
	// required if `type` is `kms`  and it conflicts with `managedKeyId`
	ManagedKeyName *string `pulumi:"managedKeyName"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The organization
	Organization *string `pulumi:"organization"`
	// List of other SANs
	OtherSans []string `pulumi:"otherSans"`
	// The organization unit
	Ou *string `pulumi:"ou"`
	// The postal code
	PostalCode *string `pulumi:"postalCode"`
	// The private key
	PrivateKey *string `pulumi:"privateKey"`
	// The private key format
	PrivateKeyFormat *string `pulumi:"privateKeyFormat"`
	// The private key type
	PrivateKeyType *string `pulumi:"privateKeyType"`
	// The province
	Province *string `pulumi:"province"`
	// The street address
	StreetAddress *string `pulumi:"streetAddress"`
	// Type of intermediate to create. Must be either \"exported\" or \"internal\"
	// or \"kms\"
	Type *string `pulumi:"type"`
	// List of alternative URIs
	UriSans []string `pulumi:"uriSans"`
}

type SecretBackendIntermediateCertRequestState struct {
	// Adds a Basic Constraints extension with 'CA: true'.
	// Only needed as a workaround in some compatibility scenarios with Active Directory
	// Certificate Services
	AddBasicConstraints pulumi.BoolPtrInput
	// List of alternative names
	AltNames pulumi.StringArrayInput
	// The PKI secret backend the resource belongs to.
	Backend pulumi.StringPtrInput
	// CN of intermediate to create
	CommonName pulumi.StringPtrInput
	// The country
	Country pulumi.StringPtrInput
	// The CSR
	Csr pulumi.StringPtrInput
	// Flag to exclude CN from SANs
	ExcludeCnFromSans pulumi.BoolPtrInput
	// The format of data
	Format pulumi.StringPtrInput
	// List of alternative IPs
	IpSans pulumi.StringArrayInput
	// The number of bits to use
	KeyBits pulumi.IntPtrInput
	// The ID of the generated key.
	KeyId pulumi.StringPtrInput
	// When a new key is created with this request, optionally specifies
	// the name for this. The global ref `default` may not be used as a name.
	KeyName pulumi.StringPtrInput
	// Specifies the key (either default, by name, or by identifier) to use
	// for generating this request. Only suitable for `type=existing` requests.
	KeyRef pulumi.StringPtrInput
	// The desired key type
	KeyType pulumi.StringPtrInput
	// The locality
	Locality pulumi.StringPtrInput
	// The ID of the previously configured managed key. This field is
	// required if `type` is `kms` and it conflicts with `managedKeyName`
	ManagedKeyId pulumi.StringPtrInput
	// The name of the previously configured managed key. This field is
	// required if `type` is `kms`  and it conflicts with `managedKeyId`
	ManagedKeyName pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The organization
	Organization pulumi.StringPtrInput
	// List of other SANs
	OtherSans pulumi.StringArrayInput
	// The organization unit
	Ou pulumi.StringPtrInput
	// The postal code
	PostalCode pulumi.StringPtrInput
	// The private key
	PrivateKey pulumi.StringPtrInput
	// The private key format
	PrivateKeyFormat pulumi.StringPtrInput
	// The private key type
	PrivateKeyType pulumi.StringPtrInput
	// The province
	Province pulumi.StringPtrInput
	// The street address
	StreetAddress pulumi.StringPtrInput
	// Type of intermediate to create. Must be either \"exported\" or \"internal\"
	// or \"kms\"
	Type pulumi.StringPtrInput
	// List of alternative URIs
	UriSans pulumi.StringArrayInput
}

func (SecretBackendIntermediateCertRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendIntermediateCertRequestState)(nil)).Elem()
}

type secretBackendIntermediateCertRequestArgs struct {
	// Adds a Basic Constraints extension with 'CA: true'.
	// Only needed as a workaround in some compatibility scenarios with Active Directory
	// Certificate Services
	AddBasicConstraints *bool `pulumi:"addBasicConstraints"`
	// List of alternative names
	AltNames []string `pulumi:"altNames"`
	// The PKI secret backend the resource belongs to.
	Backend string `pulumi:"backend"`
	// CN of intermediate to create
	CommonName string `pulumi:"commonName"`
	// The country
	Country *string `pulumi:"country"`
	// Flag to exclude CN from SANs
	ExcludeCnFromSans *bool `pulumi:"excludeCnFromSans"`
	// The format of data
	Format *string `pulumi:"format"`
	// List of alternative IPs
	IpSans []string `pulumi:"ipSans"`
	// The number of bits to use
	KeyBits *int `pulumi:"keyBits"`
	// When a new key is created with this request, optionally specifies
	// the name for this. The global ref `default` may not be used as a name.
	KeyName *string `pulumi:"keyName"`
	// Specifies the key (either default, by name, or by identifier) to use
	// for generating this request. Only suitable for `type=existing` requests.
	KeyRef *string `pulumi:"keyRef"`
	// The desired key type
	KeyType *string `pulumi:"keyType"`
	// The locality
	Locality *string `pulumi:"locality"`
	// The ID of the previously configured managed key. This field is
	// required if `type` is `kms` and it conflicts with `managedKeyName`
	ManagedKeyId *string `pulumi:"managedKeyId"`
	// The name of the previously configured managed key. This field is
	// required if `type` is `kms`  and it conflicts with `managedKeyId`
	ManagedKeyName *string `pulumi:"managedKeyName"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The organization
	Organization *string `pulumi:"organization"`
	// List of other SANs
	OtherSans []string `pulumi:"otherSans"`
	// The organization unit
	Ou *string `pulumi:"ou"`
	// The postal code
	PostalCode *string `pulumi:"postalCode"`
	// The private key format
	PrivateKeyFormat *string `pulumi:"privateKeyFormat"`
	// The province
	Province *string `pulumi:"province"`
	// The street address
	StreetAddress *string `pulumi:"streetAddress"`
	// Type of intermediate to create. Must be either \"exported\" or \"internal\"
	// or \"kms\"
	Type string `pulumi:"type"`
	// List of alternative URIs
	UriSans []string `pulumi:"uriSans"`
}

// The set of arguments for constructing a SecretBackendIntermediateCertRequest resource.
type SecretBackendIntermediateCertRequestArgs struct {
	// Adds a Basic Constraints extension with 'CA: true'.
	// Only needed as a workaround in some compatibility scenarios with Active Directory
	// Certificate Services
	AddBasicConstraints pulumi.BoolPtrInput
	// List of alternative names
	AltNames pulumi.StringArrayInput
	// The PKI secret backend the resource belongs to.
	Backend pulumi.StringInput
	// CN of intermediate to create
	CommonName pulumi.StringInput
	// The country
	Country pulumi.StringPtrInput
	// Flag to exclude CN from SANs
	ExcludeCnFromSans pulumi.BoolPtrInput
	// The format of data
	Format pulumi.StringPtrInput
	// List of alternative IPs
	IpSans pulumi.StringArrayInput
	// The number of bits to use
	KeyBits pulumi.IntPtrInput
	// When a new key is created with this request, optionally specifies
	// the name for this. The global ref `default` may not be used as a name.
	KeyName pulumi.StringPtrInput
	// Specifies the key (either default, by name, or by identifier) to use
	// for generating this request. Only suitable for `type=existing` requests.
	KeyRef pulumi.StringPtrInput
	// The desired key type
	KeyType pulumi.StringPtrInput
	// The locality
	Locality pulumi.StringPtrInput
	// The ID of the previously configured managed key. This field is
	// required if `type` is `kms` and it conflicts with `managedKeyName`
	ManagedKeyId pulumi.StringPtrInput
	// The name of the previously configured managed key. This field is
	// required if `type` is `kms`  and it conflicts with `managedKeyId`
	ManagedKeyName pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The organization
	Organization pulumi.StringPtrInput
	// List of other SANs
	OtherSans pulumi.StringArrayInput
	// The organization unit
	Ou pulumi.StringPtrInput
	// The postal code
	PostalCode pulumi.StringPtrInput
	// The private key format
	PrivateKeyFormat pulumi.StringPtrInput
	// The province
	Province pulumi.StringPtrInput
	// The street address
	StreetAddress pulumi.StringPtrInput
	// Type of intermediate to create. Must be either \"exported\" or \"internal\"
	// or \"kms\"
	Type pulumi.StringInput
	// List of alternative URIs
	UriSans pulumi.StringArrayInput
}

func (SecretBackendIntermediateCertRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendIntermediateCertRequestArgs)(nil)).Elem()
}

type SecretBackendIntermediateCertRequestInput interface {
	pulumi.Input

	ToSecretBackendIntermediateCertRequestOutput() SecretBackendIntermediateCertRequestOutput
	ToSecretBackendIntermediateCertRequestOutputWithContext(ctx context.Context) SecretBackendIntermediateCertRequestOutput
}

func (*SecretBackendIntermediateCertRequest) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendIntermediateCertRequest)(nil)).Elem()
}

func (i *SecretBackendIntermediateCertRequest) ToSecretBackendIntermediateCertRequestOutput() SecretBackendIntermediateCertRequestOutput {
	return i.ToSecretBackendIntermediateCertRequestOutputWithContext(context.Background())
}

func (i *SecretBackendIntermediateCertRequest) ToSecretBackendIntermediateCertRequestOutputWithContext(ctx context.Context) SecretBackendIntermediateCertRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendIntermediateCertRequestOutput)
}

func (i *SecretBackendIntermediateCertRequest) ToOutput(ctx context.Context) pulumix.Output[*SecretBackendIntermediateCertRequest] {
	return pulumix.Output[*SecretBackendIntermediateCertRequest]{
		OutputState: i.ToSecretBackendIntermediateCertRequestOutputWithContext(ctx).OutputState,
	}
}

// SecretBackendIntermediateCertRequestArrayInput is an input type that accepts SecretBackendIntermediateCertRequestArray and SecretBackendIntermediateCertRequestArrayOutput values.
// You can construct a concrete instance of `SecretBackendIntermediateCertRequestArrayInput` via:
//
//	SecretBackendIntermediateCertRequestArray{ SecretBackendIntermediateCertRequestArgs{...} }
type SecretBackendIntermediateCertRequestArrayInput interface {
	pulumi.Input

	ToSecretBackendIntermediateCertRequestArrayOutput() SecretBackendIntermediateCertRequestArrayOutput
	ToSecretBackendIntermediateCertRequestArrayOutputWithContext(context.Context) SecretBackendIntermediateCertRequestArrayOutput
}

type SecretBackendIntermediateCertRequestArray []SecretBackendIntermediateCertRequestInput

func (SecretBackendIntermediateCertRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackendIntermediateCertRequest)(nil)).Elem()
}

func (i SecretBackendIntermediateCertRequestArray) ToSecretBackendIntermediateCertRequestArrayOutput() SecretBackendIntermediateCertRequestArrayOutput {
	return i.ToSecretBackendIntermediateCertRequestArrayOutputWithContext(context.Background())
}

func (i SecretBackendIntermediateCertRequestArray) ToSecretBackendIntermediateCertRequestArrayOutputWithContext(ctx context.Context) SecretBackendIntermediateCertRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendIntermediateCertRequestArrayOutput)
}

func (i SecretBackendIntermediateCertRequestArray) ToOutput(ctx context.Context) pulumix.Output[[]*SecretBackendIntermediateCertRequest] {
	return pulumix.Output[[]*SecretBackendIntermediateCertRequest]{
		OutputState: i.ToSecretBackendIntermediateCertRequestArrayOutputWithContext(ctx).OutputState,
	}
}

// SecretBackendIntermediateCertRequestMapInput is an input type that accepts SecretBackendIntermediateCertRequestMap and SecretBackendIntermediateCertRequestMapOutput values.
// You can construct a concrete instance of `SecretBackendIntermediateCertRequestMapInput` via:
//
//	SecretBackendIntermediateCertRequestMap{ "key": SecretBackendIntermediateCertRequestArgs{...} }
type SecretBackendIntermediateCertRequestMapInput interface {
	pulumi.Input

	ToSecretBackendIntermediateCertRequestMapOutput() SecretBackendIntermediateCertRequestMapOutput
	ToSecretBackendIntermediateCertRequestMapOutputWithContext(context.Context) SecretBackendIntermediateCertRequestMapOutput
}

type SecretBackendIntermediateCertRequestMap map[string]SecretBackendIntermediateCertRequestInput

func (SecretBackendIntermediateCertRequestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackendIntermediateCertRequest)(nil)).Elem()
}

func (i SecretBackendIntermediateCertRequestMap) ToSecretBackendIntermediateCertRequestMapOutput() SecretBackendIntermediateCertRequestMapOutput {
	return i.ToSecretBackendIntermediateCertRequestMapOutputWithContext(context.Background())
}

func (i SecretBackendIntermediateCertRequestMap) ToSecretBackendIntermediateCertRequestMapOutputWithContext(ctx context.Context) SecretBackendIntermediateCertRequestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendIntermediateCertRequestMapOutput)
}

func (i SecretBackendIntermediateCertRequestMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SecretBackendIntermediateCertRequest] {
	return pulumix.Output[map[string]*SecretBackendIntermediateCertRequest]{
		OutputState: i.ToSecretBackendIntermediateCertRequestMapOutputWithContext(ctx).OutputState,
	}
}

type SecretBackendIntermediateCertRequestOutput struct{ *pulumi.OutputState }

func (SecretBackendIntermediateCertRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendIntermediateCertRequest)(nil)).Elem()
}

func (o SecretBackendIntermediateCertRequestOutput) ToSecretBackendIntermediateCertRequestOutput() SecretBackendIntermediateCertRequestOutput {
	return o
}

func (o SecretBackendIntermediateCertRequestOutput) ToSecretBackendIntermediateCertRequestOutputWithContext(ctx context.Context) SecretBackendIntermediateCertRequestOutput {
	return o
}

func (o SecretBackendIntermediateCertRequestOutput) ToOutput(ctx context.Context) pulumix.Output[*SecretBackendIntermediateCertRequest] {
	return pulumix.Output[*SecretBackendIntermediateCertRequest]{
		OutputState: o.OutputState,
	}
}

// Adds a Basic Constraints extension with 'CA: true'.
// Only needed as a workaround in some compatibility scenarios with Active Directory
// Certificate Services
func (o SecretBackendIntermediateCertRequestOutput) AddBasicConstraints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.BoolPtrOutput { return v.AddBasicConstraints }).(pulumi.BoolPtrOutput)
}

// List of alternative names
func (o SecretBackendIntermediateCertRequestOutput) AltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringArrayOutput { return v.AltNames }).(pulumi.StringArrayOutput)
}

// The PKI secret backend the resource belongs to.
func (o SecretBackendIntermediateCertRequestOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// CN of intermediate to create
func (o SecretBackendIntermediateCertRequestOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

// The country
func (o SecretBackendIntermediateCertRequestOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// The CSR
func (o SecretBackendIntermediateCertRequestOutput) Csr() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.Csr }).(pulumi.StringOutput)
}

// Flag to exclude CN from SANs
func (o SecretBackendIntermediateCertRequestOutput) ExcludeCnFromSans() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.BoolPtrOutput { return v.ExcludeCnFromSans }).(pulumi.BoolPtrOutput)
}

// The format of data
func (o SecretBackendIntermediateCertRequestOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// List of alternative IPs
func (o SecretBackendIntermediateCertRequestOutput) IpSans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringArrayOutput { return v.IpSans }).(pulumi.StringArrayOutput)
}

// The number of bits to use
func (o SecretBackendIntermediateCertRequestOutput) KeyBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.IntPtrOutput { return v.KeyBits }).(pulumi.IntPtrOutput)
}

// The ID of the generated key.
func (o SecretBackendIntermediateCertRequestOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// When a new key is created with this request, optionally specifies
// the name for this. The global ref `default` may not be used as a name.
func (o SecretBackendIntermediateCertRequestOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// Specifies the key (either default, by name, or by identifier) to use
// for generating this request. Only suitable for `type=existing` requests.
func (o SecretBackendIntermediateCertRequestOutput) KeyRef() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.KeyRef }).(pulumi.StringOutput)
}

// The desired key type
func (o SecretBackendIntermediateCertRequestOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.KeyType }).(pulumi.StringPtrOutput)
}

// The locality
func (o SecretBackendIntermediateCertRequestOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.Locality }).(pulumi.StringPtrOutput)
}

// The ID of the previously configured managed key. This field is
// required if `type` is `kms` and it conflicts with `managedKeyName`
func (o SecretBackendIntermediateCertRequestOutput) ManagedKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.ManagedKeyId }).(pulumi.StringPtrOutput)
}

// The name of the previously configured managed key. This field is
// required if `type` is `kms`  and it conflicts with `managedKeyId`
func (o SecretBackendIntermediateCertRequestOutput) ManagedKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.ManagedKeyName }).(pulumi.StringPtrOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
// *Available only for Vault Enterprise*.
func (o SecretBackendIntermediateCertRequestOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The organization
func (o SecretBackendIntermediateCertRequestOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.Organization }).(pulumi.StringPtrOutput)
}

// List of other SANs
func (o SecretBackendIntermediateCertRequestOutput) OtherSans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringArrayOutput { return v.OtherSans }).(pulumi.StringArrayOutput)
}

// The organization unit
func (o SecretBackendIntermediateCertRequestOutput) Ou() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.Ou }).(pulumi.StringPtrOutput)
}

// The postal code
func (o SecretBackendIntermediateCertRequestOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The private key
func (o SecretBackendIntermediateCertRequestOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// The private key format
func (o SecretBackendIntermediateCertRequestOutput) PrivateKeyFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.PrivateKeyFormat }).(pulumi.StringPtrOutput)
}

// The private key type
func (o SecretBackendIntermediateCertRequestOutput) PrivateKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.PrivateKeyType }).(pulumi.StringOutput)
}

// The province
func (o SecretBackendIntermediateCertRequestOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.Province }).(pulumi.StringPtrOutput)
}

// The street address
func (o SecretBackendIntermediateCertRequestOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringPtrOutput { return v.StreetAddress }).(pulumi.StringPtrOutput)
}

// Type of intermediate to create. Must be either \"exported\" or \"internal\"
// or \"kms\"
func (o SecretBackendIntermediateCertRequestOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// List of alternative URIs
func (o SecretBackendIntermediateCertRequestOutput) UriSans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackendIntermediateCertRequest) pulumi.StringArrayOutput { return v.UriSans }).(pulumi.StringArrayOutput)
}

type SecretBackendIntermediateCertRequestArrayOutput struct{ *pulumi.OutputState }

func (SecretBackendIntermediateCertRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackendIntermediateCertRequest)(nil)).Elem()
}

func (o SecretBackendIntermediateCertRequestArrayOutput) ToSecretBackendIntermediateCertRequestArrayOutput() SecretBackendIntermediateCertRequestArrayOutput {
	return o
}

func (o SecretBackendIntermediateCertRequestArrayOutput) ToSecretBackendIntermediateCertRequestArrayOutputWithContext(ctx context.Context) SecretBackendIntermediateCertRequestArrayOutput {
	return o
}

func (o SecretBackendIntermediateCertRequestArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SecretBackendIntermediateCertRequest] {
	return pulumix.Output[[]*SecretBackendIntermediateCertRequest]{
		OutputState: o.OutputState,
	}
}

func (o SecretBackendIntermediateCertRequestArrayOutput) Index(i pulumi.IntInput) SecretBackendIntermediateCertRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretBackendIntermediateCertRequest {
		return vs[0].([]*SecretBackendIntermediateCertRequest)[vs[1].(int)]
	}).(SecretBackendIntermediateCertRequestOutput)
}

type SecretBackendIntermediateCertRequestMapOutput struct{ *pulumi.OutputState }

func (SecretBackendIntermediateCertRequestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackendIntermediateCertRequest)(nil)).Elem()
}

func (o SecretBackendIntermediateCertRequestMapOutput) ToSecretBackendIntermediateCertRequestMapOutput() SecretBackendIntermediateCertRequestMapOutput {
	return o
}

func (o SecretBackendIntermediateCertRequestMapOutput) ToSecretBackendIntermediateCertRequestMapOutputWithContext(ctx context.Context) SecretBackendIntermediateCertRequestMapOutput {
	return o
}

func (o SecretBackendIntermediateCertRequestMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SecretBackendIntermediateCertRequest] {
	return pulumix.Output[map[string]*SecretBackendIntermediateCertRequest]{
		OutputState: o.OutputState,
	}
}

func (o SecretBackendIntermediateCertRequestMapOutput) MapIndex(k pulumi.StringInput) SecretBackendIntermediateCertRequestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretBackendIntermediateCertRequest {
		return vs[0].(map[string]*SecretBackendIntermediateCertRequest)[vs[1].(string)]
	}).(SecretBackendIntermediateCertRequestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendIntermediateCertRequestInput)(nil)).Elem(), &SecretBackendIntermediateCertRequest{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendIntermediateCertRequestArrayInput)(nil)).Elem(), SecretBackendIntermediateCertRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendIntermediateCertRequestMapInput)(nil)).Elem(), SecretBackendIntermediateCertRequestMap{})
	pulumi.RegisterOutputType(SecretBackendIntermediateCertRequestOutput{})
	pulumi.RegisterOutputType(SecretBackendIntermediateCertRequestArrayOutput{})
	pulumi.RegisterOutputType(SecretBackendIntermediateCertRequestMapOutput{})
}
