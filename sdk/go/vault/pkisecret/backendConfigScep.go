// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows setting the SCEP configuration on a PKI Secret Backend.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault"
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/pkisecret"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			scep, err := vault.NewAuthBackend(ctx, "scep", &vault.AuthBackendArgs{
//				Path: pulumi.String("scep-auth"),
//				Type: pulumi.String("scep"),
//			})
//			if err != nil {
//				return err
//			}
//			scepChallenge, err := vault.NewScepAuthBackendRole(ctx, "scep_challenge", &vault.ScepAuthBackendRoleArgs{
//				Backend:     scep.ID(),
//				Name:        pulumi.String("scep-auth"),
//				DisplayName: pulumi.String("Static challenge for SCEP clients"),
//				AuthType:    pulumi.String("static-challenge"),
//				Challenge:   pulumi.String("ac7e4ada-c8ef-4393-9098-d69d08736833"),
//			})
//			if err != nil {
//				return err
//			}
//			pki, err := vault.NewMount(ctx, "pki", &vault.MountArgs{
//				Path:        pulumi.String("pki_scep"),
//				Type:        pulumi.String("pki"),
//				Description: pulumi.String("PKI secret engine mount"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pkisecret.NewBackendConfigScep(ctx, "test", &pkisecret.BackendConfigScepArgs{
//				Backend:                 pki.Path,
//				Enabled:                 pulumi.Bool(true),
//				DefaultPathPolicy:       pulumi.String("sign-verbatim"),
//				RestrictCaChainToIssuer: pulumi.Bool(true),
//				Authenticators: &pkisecret.BackendConfigScepAuthenticatorsArgs{
//					Scep: pulumi.StringMap{
//						"accessor":  scep.Accessor,
//						"scep_role": scepChallenge.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The PKI config cluster can be imported using the resource's `id`.
// In the case of the example above the `id` would be `pki-root/config/scep`,
// where the `pki-root` component is the resource's `backend`, e.g.
//
// ```sh
// $ pulumi import vault:pkiSecret/backendConfigScep:BackendConfigScep example pki-root/config/scep
// ```
type BackendConfigScep struct {
	pulumi.CustomResourceState

	// List of allowed digest algorithms for SCEP requests.
	AllowedDigestAlgorithms pulumi.StringArrayOutput `pulumi:"allowedDigestAlgorithms"`
	// List of allowed encryption algorithms for SCEP requests.
	AllowedEncryptionAlgorithms pulumi.StringArrayOutput `pulumi:"allowedEncryptionAlgorithms"`
	// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigScepAuthenticatorsOutput `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the SCEP configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
	DefaultPathPolicy pulumi.StringPtrOutput `pulumi:"defaultPathPolicy"`
	// Specifies whether SCEP is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Lists the 3rd party validation of SCEP requests (see below for nested schema).
	ExternalValidations BackendConfigScepExternalValidationArrayOutput `pulumi:"externalValidations"`
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The level of logging verbosity, affects only SCEP logs on this mount.
	//
	// <a id="nestedatt--authenticators"></a>
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
	RestrictCaChainToIssuer pulumi.BoolPtrOutput `pulumi:"restrictCaChainToIssuer"`
}

// NewBackendConfigScep registers a new resource with the given unique name, arguments, and options.
func NewBackendConfigScep(ctx *pulumi.Context,
	name string, args *BackendConfigScepArgs, opts ...pulumi.ResourceOption) (*BackendConfigScep, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendConfigScep
	err := ctx.RegisterResource("vault:pkiSecret/backendConfigScep:BackendConfigScep", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendConfigScep gets an existing BackendConfigScep resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendConfigScep(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendConfigScepState, opts ...pulumi.ResourceOption) (*BackendConfigScep, error) {
	var resource BackendConfigScep
	err := ctx.ReadResource("vault:pkiSecret/backendConfigScep:BackendConfigScep", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendConfigScep resources.
type backendConfigScepState struct {
	// List of allowed digest algorithms for SCEP requests.
	AllowedDigestAlgorithms []string `pulumi:"allowedDigestAlgorithms"`
	// List of allowed encryption algorithms for SCEP requests.
	AllowedEncryptionAlgorithms []string `pulumi:"allowedEncryptionAlgorithms"`
	// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
	Authenticators *BackendConfigScepAuthenticators `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the SCEP configuration from, with no leading or trailing `/`s.
	Backend *string `pulumi:"backend"`
	// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
	DefaultPathPolicy *string `pulumi:"defaultPathPolicy"`
	// Specifies whether SCEP is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Lists the 3rd party validation of SCEP requests (see below for nested schema).
	ExternalValidations []BackendConfigScepExternalValidation `pulumi:"externalValidations"`
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated *string `pulumi:"lastUpdated"`
	// The level of logging verbosity, affects only SCEP logs on this mount.
	//
	// <a id="nestedatt--authenticators"></a>
	LogLevel *string `pulumi:"logLevel"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
	RestrictCaChainToIssuer *bool `pulumi:"restrictCaChainToIssuer"`
}

type BackendConfigScepState struct {
	// List of allowed digest algorithms for SCEP requests.
	AllowedDigestAlgorithms pulumi.StringArrayInput
	// List of allowed encryption algorithms for SCEP requests.
	AllowedEncryptionAlgorithms pulumi.StringArrayInput
	// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigScepAuthenticatorsPtrInput
	// The path to the PKI secret backend to
	// read the SCEP configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringPtrInput
	// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
	DefaultPathPolicy pulumi.StringPtrInput
	// Specifies whether SCEP is enabled.
	Enabled pulumi.BoolPtrInput
	// Lists the 3rd party validation of SCEP requests (see below for nested schema).
	ExternalValidations BackendConfigScepExternalValidationArrayInput
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated pulumi.StringPtrInput
	// The level of logging verbosity, affects only SCEP logs on this mount.
	//
	// <a id="nestedatt--authenticators"></a>
	LogLevel pulumi.StringPtrInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
	RestrictCaChainToIssuer pulumi.BoolPtrInput
}

func (BackendConfigScepState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigScepState)(nil)).Elem()
}

type backendConfigScepArgs struct {
	// List of allowed digest algorithms for SCEP requests.
	AllowedDigestAlgorithms []string `pulumi:"allowedDigestAlgorithms"`
	// List of allowed encryption algorithms for SCEP requests.
	AllowedEncryptionAlgorithms []string `pulumi:"allowedEncryptionAlgorithms"`
	// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
	Authenticators *BackendConfigScepAuthenticators `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the SCEP configuration from, with no leading or trailing `/`s.
	Backend string `pulumi:"backend"`
	// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
	DefaultPathPolicy *string `pulumi:"defaultPathPolicy"`
	// Specifies whether SCEP is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Lists the 3rd party validation of SCEP requests (see below for nested schema).
	ExternalValidations []BackendConfigScepExternalValidation `pulumi:"externalValidations"`
	// The level of logging verbosity, affects only SCEP logs on this mount.
	//
	// <a id="nestedatt--authenticators"></a>
	LogLevel *string `pulumi:"logLevel"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
	RestrictCaChainToIssuer *bool `pulumi:"restrictCaChainToIssuer"`
}

// The set of arguments for constructing a BackendConfigScep resource.
type BackendConfigScepArgs struct {
	// List of allowed digest algorithms for SCEP requests.
	AllowedDigestAlgorithms pulumi.StringArrayInput
	// List of allowed encryption algorithms for SCEP requests.
	AllowedEncryptionAlgorithms pulumi.StringArrayInput
	// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigScepAuthenticatorsPtrInput
	// The path to the PKI secret backend to
	// read the SCEP configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringInput
	// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
	DefaultPathPolicy pulumi.StringPtrInput
	// Specifies whether SCEP is enabled.
	Enabled pulumi.BoolPtrInput
	// Lists the 3rd party validation of SCEP requests (see below for nested schema).
	ExternalValidations BackendConfigScepExternalValidationArrayInput
	// The level of logging verbosity, affects only SCEP logs on this mount.
	//
	// <a id="nestedatt--authenticators"></a>
	LogLevel pulumi.StringPtrInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
	RestrictCaChainToIssuer pulumi.BoolPtrInput
}

func (BackendConfigScepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigScepArgs)(nil)).Elem()
}

type BackendConfigScepInput interface {
	pulumi.Input

	ToBackendConfigScepOutput() BackendConfigScepOutput
	ToBackendConfigScepOutputWithContext(ctx context.Context) BackendConfigScepOutput
}

func (*BackendConfigScep) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigScep)(nil)).Elem()
}

func (i *BackendConfigScep) ToBackendConfigScepOutput() BackendConfigScepOutput {
	return i.ToBackendConfigScepOutputWithContext(context.Background())
}

func (i *BackendConfigScep) ToBackendConfigScepOutputWithContext(ctx context.Context) BackendConfigScepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigScepOutput)
}

// BackendConfigScepArrayInput is an input type that accepts BackendConfigScepArray and BackendConfigScepArrayOutput values.
// You can construct a concrete instance of `BackendConfigScepArrayInput` via:
//
//	BackendConfigScepArray{ BackendConfigScepArgs{...} }
type BackendConfigScepArrayInput interface {
	pulumi.Input

	ToBackendConfigScepArrayOutput() BackendConfigScepArrayOutput
	ToBackendConfigScepArrayOutputWithContext(context.Context) BackendConfigScepArrayOutput
}

type BackendConfigScepArray []BackendConfigScepInput

func (BackendConfigScepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigScep)(nil)).Elem()
}

func (i BackendConfigScepArray) ToBackendConfigScepArrayOutput() BackendConfigScepArrayOutput {
	return i.ToBackendConfigScepArrayOutputWithContext(context.Background())
}

func (i BackendConfigScepArray) ToBackendConfigScepArrayOutputWithContext(ctx context.Context) BackendConfigScepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigScepArrayOutput)
}

// BackendConfigScepMapInput is an input type that accepts BackendConfigScepMap and BackendConfigScepMapOutput values.
// You can construct a concrete instance of `BackendConfigScepMapInput` via:
//
//	BackendConfigScepMap{ "key": BackendConfigScepArgs{...} }
type BackendConfigScepMapInput interface {
	pulumi.Input

	ToBackendConfigScepMapOutput() BackendConfigScepMapOutput
	ToBackendConfigScepMapOutputWithContext(context.Context) BackendConfigScepMapOutput
}

type BackendConfigScepMap map[string]BackendConfigScepInput

func (BackendConfigScepMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigScep)(nil)).Elem()
}

func (i BackendConfigScepMap) ToBackendConfigScepMapOutput() BackendConfigScepMapOutput {
	return i.ToBackendConfigScepMapOutputWithContext(context.Background())
}

func (i BackendConfigScepMap) ToBackendConfigScepMapOutputWithContext(ctx context.Context) BackendConfigScepMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigScepMapOutput)
}

type BackendConfigScepOutput struct{ *pulumi.OutputState }

func (BackendConfigScepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigScep)(nil)).Elem()
}

func (o BackendConfigScepOutput) ToBackendConfigScepOutput() BackendConfigScepOutput {
	return o
}

func (o BackendConfigScepOutput) ToBackendConfigScepOutputWithContext(ctx context.Context) BackendConfigScepOutput {
	return o
}

// List of allowed digest algorithms for SCEP requests.
func (o BackendConfigScepOutput) AllowedDigestAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.StringArrayOutput { return v.AllowedDigestAlgorithms }).(pulumi.StringArrayOutput)
}

// List of allowed encryption algorithms for SCEP requests.
func (o BackendConfigScepOutput) AllowedEncryptionAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.StringArrayOutput { return v.AllowedEncryptionAlgorithms }).(pulumi.StringArrayOutput)
}

// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
func (o BackendConfigScepOutput) Authenticators() BackendConfigScepAuthenticatorsOutput {
	return o.ApplyT(func(v *BackendConfigScep) BackendConfigScepAuthenticatorsOutput { return v.Authenticators }).(BackendConfigScepAuthenticatorsOutput)
}

// The path to the PKI secret backend to
// read the SCEP configuration from, with no leading or trailing `/`s.
func (o BackendConfigScepOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
func (o BackendConfigScepOutput) DefaultPathPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.StringPtrOutput { return v.DefaultPathPolicy }).(pulumi.StringPtrOutput)
}

// Specifies whether SCEP is enabled.
func (o BackendConfigScepOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Lists the 3rd party validation of SCEP requests (see below for nested schema).
func (o BackendConfigScepOutput) ExternalValidations() BackendConfigScepExternalValidationArrayOutput {
	return o.ApplyT(func(v *BackendConfigScep) BackendConfigScepExternalValidationArrayOutput {
		return v.ExternalValidations
	}).(BackendConfigScepExternalValidationArrayOutput)
}

// A read-only timestamp representing the last time the configuration was updated.
func (o BackendConfigScepOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The level of logging verbosity, affects only SCEP logs on this mount.
//
// <a id="nestedatt--authenticators"></a>
func (o BackendConfigScepOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// The namespace of the target resource.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o BackendConfigScepOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
func (o BackendConfigScepOutput) RestrictCaChainToIssuer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigScep) pulumi.BoolPtrOutput { return v.RestrictCaChainToIssuer }).(pulumi.BoolPtrOutput)
}

type BackendConfigScepArrayOutput struct{ *pulumi.OutputState }

func (BackendConfigScepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigScep)(nil)).Elem()
}

func (o BackendConfigScepArrayOutput) ToBackendConfigScepArrayOutput() BackendConfigScepArrayOutput {
	return o
}

func (o BackendConfigScepArrayOutput) ToBackendConfigScepArrayOutputWithContext(ctx context.Context) BackendConfigScepArrayOutput {
	return o
}

func (o BackendConfigScepArrayOutput) Index(i pulumi.IntInput) BackendConfigScepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendConfigScep {
		return vs[0].([]*BackendConfigScep)[vs[1].(int)]
	}).(BackendConfigScepOutput)
}

type BackendConfigScepMapOutput struct{ *pulumi.OutputState }

func (BackendConfigScepMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigScep)(nil)).Elem()
}

func (o BackendConfigScepMapOutput) ToBackendConfigScepMapOutput() BackendConfigScepMapOutput {
	return o
}

func (o BackendConfigScepMapOutput) ToBackendConfigScepMapOutputWithContext(ctx context.Context) BackendConfigScepMapOutput {
	return o
}

func (o BackendConfigScepMapOutput) MapIndex(k pulumi.StringInput) BackendConfigScepOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendConfigScep {
		return vs[0].(map[string]*BackendConfigScep)[vs[1].(string)]
	}).(BackendConfigScepOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigScepInput)(nil)).Elem(), &BackendConfigScep{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigScepArrayInput)(nil)).Elem(), BackendConfigScepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigScepMapInput)(nil)).Elem(), BackendConfigScepMap{})
	pulumi.RegisterOutputType(BackendConfigScepOutput{})
	pulumi.RegisterOutputType(BackendConfigScepArrayOutput{})
	pulumi.RegisterOutputType(BackendConfigScepMapOutput{})
}
