// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows setting the CMPv2 configuration on a PKI Secret Backend
//
// ## Import
//
// The PKI config cluster can be imported using the resource's `id`.
// In the case of the example above the `id` would be `pki-root/config/cmpv2`,
// where the `pki-root` component is the resource's `backend`, e.g.
//
// ```sh
// $ pulumi import vault:pkiSecret/backendConfigCmpv2:BackendConfigCmpv2 example pki-root/config/cmpv2
// ```
type BackendConfigCmpv2 struct {
	pulumi.CustomResourceState

	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	AuditFields pulumi.StringArrayOutput `pulumi:"auditFields"`
	// Lists the mount accessors CMPv2 should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigCmpv2AuthenticatorsOutput `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the CMPv2 configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Specifies the behavior for requests using the non-role-qualified CMPv2 requests. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy pulumi.StringPtrOutput `pulumi:"defaultPathPolicy"`
	// A comma-separated list of validations not to perform on CMPv2 messages.
	//
	// <a id="nestedatt--authenticators"></a>
	DisabledValidations pulumi.StringArrayOutput `pulumi:"disabledValidations"`
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing pulumi.BoolPtrOutput `pulumi:"enableSentinelParsing"`
	// Specifies whether CMPv2 is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
}

// NewBackendConfigCmpv2 registers a new resource with the given unique name, arguments, and options.
func NewBackendConfigCmpv2(ctx *pulumi.Context,
	name string, args *BackendConfigCmpv2Args, opts ...pulumi.ResourceOption) (*BackendConfigCmpv2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendConfigCmpv2
	err := ctx.RegisterResource("vault:pkiSecret/backendConfigCmpv2:BackendConfigCmpv2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendConfigCmpv2 gets an existing BackendConfigCmpv2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendConfigCmpv2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendConfigCmpv2State, opts ...pulumi.ResourceOption) (*BackendConfigCmpv2, error) {
	var resource BackendConfigCmpv2
	err := ctx.ReadResource("vault:pkiSecret/backendConfigCmpv2:BackendConfigCmpv2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendConfigCmpv2 resources.
type backendConfigCmpv2State struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	AuditFields []string `pulumi:"auditFields"`
	// Lists the mount accessors CMPv2 should delegate authentication requests towards (see below for nested schema).
	Authenticators *BackendConfigCmpv2Authenticators `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the CMPv2 configuration from, with no leading or trailing `/`s.
	Backend *string `pulumi:"backend"`
	// Specifies the behavior for requests using the non-role-qualified CMPv2 requests. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy *string `pulumi:"defaultPathPolicy"`
	// A comma-separated list of validations not to perform on CMPv2 messages.
	//
	// <a id="nestedatt--authenticators"></a>
	DisabledValidations []string `pulumi:"disabledValidations"`
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing *bool `pulumi:"enableSentinelParsing"`
	// Specifies whether CMPv2 is enabled.
	Enabled *bool `pulumi:"enabled"`
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated *string `pulumi:"lastUpdated"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
}

type BackendConfigCmpv2State struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	AuditFields pulumi.StringArrayInput
	// Lists the mount accessors CMPv2 should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigCmpv2AuthenticatorsPtrInput
	// The path to the PKI secret backend to
	// read the CMPv2 configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringPtrInput
	// Specifies the behavior for requests using the non-role-qualified CMPv2 requests. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy pulumi.StringPtrInput
	// A comma-separated list of validations not to perform on CMPv2 messages.
	//
	// <a id="nestedatt--authenticators"></a>
	DisabledValidations pulumi.StringArrayInput
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing pulumi.BoolPtrInput
	// Specifies whether CMPv2 is enabled.
	Enabled pulumi.BoolPtrInput
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated pulumi.StringPtrInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
}

func (BackendConfigCmpv2State) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigCmpv2State)(nil)).Elem()
}

type backendConfigCmpv2Args struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	AuditFields []string `pulumi:"auditFields"`
	// Lists the mount accessors CMPv2 should delegate authentication requests towards (see below for nested schema).
	Authenticators *BackendConfigCmpv2Authenticators `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the CMPv2 configuration from, with no leading or trailing `/`s.
	Backend string `pulumi:"backend"`
	// Specifies the behavior for requests using the non-role-qualified CMPv2 requests. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy *string `pulumi:"defaultPathPolicy"`
	// A comma-separated list of validations not to perform on CMPv2 messages.
	//
	// <a id="nestedatt--authenticators"></a>
	DisabledValidations []string `pulumi:"disabledValidations"`
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing *bool `pulumi:"enableSentinelParsing"`
	// Specifies whether CMPv2 is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a BackendConfigCmpv2 resource.
type BackendConfigCmpv2Args struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	AuditFields pulumi.StringArrayInput
	// Lists the mount accessors CMPv2 should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigCmpv2AuthenticatorsPtrInput
	// The path to the PKI secret backend to
	// read the CMPv2 configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringInput
	// Specifies the behavior for requests using the non-role-qualified CMPv2 requests. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy pulumi.StringPtrInput
	// A comma-separated list of validations not to perform on CMPv2 messages.
	//
	// <a id="nestedatt--authenticators"></a>
	DisabledValidations pulumi.StringArrayInput
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing pulumi.BoolPtrInput
	// Specifies whether CMPv2 is enabled.
	Enabled pulumi.BoolPtrInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
}

func (BackendConfigCmpv2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigCmpv2Args)(nil)).Elem()
}

type BackendConfigCmpv2Input interface {
	pulumi.Input

	ToBackendConfigCmpv2Output() BackendConfigCmpv2Output
	ToBackendConfigCmpv2OutputWithContext(ctx context.Context) BackendConfigCmpv2Output
}

func (*BackendConfigCmpv2) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigCmpv2)(nil)).Elem()
}

func (i *BackendConfigCmpv2) ToBackendConfigCmpv2Output() BackendConfigCmpv2Output {
	return i.ToBackendConfigCmpv2OutputWithContext(context.Background())
}

func (i *BackendConfigCmpv2) ToBackendConfigCmpv2OutputWithContext(ctx context.Context) BackendConfigCmpv2Output {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigCmpv2Output)
}

// BackendConfigCmpv2ArrayInput is an input type that accepts BackendConfigCmpv2Array and BackendConfigCmpv2ArrayOutput values.
// You can construct a concrete instance of `BackendConfigCmpv2ArrayInput` via:
//
//	BackendConfigCmpv2Array{ BackendConfigCmpv2Args{...} }
type BackendConfigCmpv2ArrayInput interface {
	pulumi.Input

	ToBackendConfigCmpv2ArrayOutput() BackendConfigCmpv2ArrayOutput
	ToBackendConfigCmpv2ArrayOutputWithContext(context.Context) BackendConfigCmpv2ArrayOutput
}

type BackendConfigCmpv2Array []BackendConfigCmpv2Input

func (BackendConfigCmpv2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigCmpv2)(nil)).Elem()
}

func (i BackendConfigCmpv2Array) ToBackendConfigCmpv2ArrayOutput() BackendConfigCmpv2ArrayOutput {
	return i.ToBackendConfigCmpv2ArrayOutputWithContext(context.Background())
}

func (i BackendConfigCmpv2Array) ToBackendConfigCmpv2ArrayOutputWithContext(ctx context.Context) BackendConfigCmpv2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigCmpv2ArrayOutput)
}

// BackendConfigCmpv2MapInput is an input type that accepts BackendConfigCmpv2Map and BackendConfigCmpv2MapOutput values.
// You can construct a concrete instance of `BackendConfigCmpv2MapInput` via:
//
//	BackendConfigCmpv2Map{ "key": BackendConfigCmpv2Args{...} }
type BackendConfigCmpv2MapInput interface {
	pulumi.Input

	ToBackendConfigCmpv2MapOutput() BackendConfigCmpv2MapOutput
	ToBackendConfigCmpv2MapOutputWithContext(context.Context) BackendConfigCmpv2MapOutput
}

type BackendConfigCmpv2Map map[string]BackendConfigCmpv2Input

func (BackendConfigCmpv2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigCmpv2)(nil)).Elem()
}

func (i BackendConfigCmpv2Map) ToBackendConfigCmpv2MapOutput() BackendConfigCmpv2MapOutput {
	return i.ToBackendConfigCmpv2MapOutputWithContext(context.Background())
}

func (i BackendConfigCmpv2Map) ToBackendConfigCmpv2MapOutputWithContext(ctx context.Context) BackendConfigCmpv2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigCmpv2MapOutput)
}

type BackendConfigCmpv2Output struct{ *pulumi.OutputState }

func (BackendConfigCmpv2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigCmpv2)(nil)).Elem()
}

func (o BackendConfigCmpv2Output) ToBackendConfigCmpv2Output() BackendConfigCmpv2Output {
	return o
}

func (o BackendConfigCmpv2Output) ToBackendConfigCmpv2OutputWithContext(ctx context.Context) BackendConfigCmpv2Output {
	return o
}

// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
func (o BackendConfigCmpv2Output) AuditFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.StringArrayOutput { return v.AuditFields }).(pulumi.StringArrayOutput)
}

// Lists the mount accessors CMPv2 should delegate authentication requests towards (see below for nested schema).
func (o BackendConfigCmpv2Output) Authenticators() BackendConfigCmpv2AuthenticatorsOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) BackendConfigCmpv2AuthenticatorsOutput { return v.Authenticators }).(BackendConfigCmpv2AuthenticatorsOutput)
}

// The path to the PKI secret backend to
// read the CMPv2 configuration from, with no leading or trailing `/`s.
func (o BackendConfigCmpv2Output) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Specifies the behavior for requests using the non-role-qualified CMPv2 requests. Can be sign-verbatim or a role given by role:<role_name>.
func (o BackendConfigCmpv2Output) DefaultPathPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.StringPtrOutput { return v.DefaultPathPolicy }).(pulumi.StringPtrOutput)
}

// A comma-separated list of validations not to perform on CMPv2 messages.
//
// <a id="nestedatt--authenticators"></a>
func (o BackendConfigCmpv2Output) DisabledValidations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.StringArrayOutput { return v.DisabledValidations }).(pulumi.StringArrayOutput)
}

// If set, parse out fields from the provided CSR making them available for Sentinel policies.
func (o BackendConfigCmpv2Output) EnableSentinelParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.BoolPtrOutput { return v.EnableSentinelParsing }).(pulumi.BoolPtrOutput)
}

// Specifies whether CMPv2 is enabled.
func (o BackendConfigCmpv2Output) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A read-only timestamp representing the last time the configuration was updated.
func (o BackendConfigCmpv2Output) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The namespace of the target resource.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o BackendConfigCmpv2Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigCmpv2) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

type BackendConfigCmpv2ArrayOutput struct{ *pulumi.OutputState }

func (BackendConfigCmpv2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigCmpv2)(nil)).Elem()
}

func (o BackendConfigCmpv2ArrayOutput) ToBackendConfigCmpv2ArrayOutput() BackendConfigCmpv2ArrayOutput {
	return o
}

func (o BackendConfigCmpv2ArrayOutput) ToBackendConfigCmpv2ArrayOutputWithContext(ctx context.Context) BackendConfigCmpv2ArrayOutput {
	return o
}

func (o BackendConfigCmpv2ArrayOutput) Index(i pulumi.IntInput) BackendConfigCmpv2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendConfigCmpv2 {
		return vs[0].([]*BackendConfigCmpv2)[vs[1].(int)]
	}).(BackendConfigCmpv2Output)
}

type BackendConfigCmpv2MapOutput struct{ *pulumi.OutputState }

func (BackendConfigCmpv2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigCmpv2)(nil)).Elem()
}

func (o BackendConfigCmpv2MapOutput) ToBackendConfigCmpv2MapOutput() BackendConfigCmpv2MapOutput {
	return o
}

func (o BackendConfigCmpv2MapOutput) ToBackendConfigCmpv2MapOutputWithContext(ctx context.Context) BackendConfigCmpv2MapOutput {
	return o
}

func (o BackendConfigCmpv2MapOutput) MapIndex(k pulumi.StringInput) BackendConfigCmpv2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendConfigCmpv2 {
		return vs[0].(map[string]*BackendConfigCmpv2)[vs[1].(string)]
	}).(BackendConfigCmpv2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigCmpv2Input)(nil)).Elem(), &BackendConfigCmpv2{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigCmpv2ArrayInput)(nil)).Elem(), BackendConfigCmpv2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigCmpv2MapInput)(nil)).Elem(), BackendConfigCmpv2Map{})
	pulumi.RegisterOutputType(BackendConfigCmpv2Output{})
	pulumi.RegisterOutputType(BackendConfigCmpv2ArrayOutput{})
	pulumi.RegisterOutputType(BackendConfigCmpv2MapOutput{})
}
