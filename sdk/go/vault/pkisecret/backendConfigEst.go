// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows setting the EST configuration on a PKI Secret Backend
//
// ## Import
//
// The PKI config cluster can be imported using the resource's `id`.
// In the case of the example above the `id` would be `pki-root/config/est`,
// where the `pki-root` component is the resource's `backend`, e.g.
//
// ```sh
// $ pulumi import vault:pkiSecret/backendConfigEst:BackendConfigEst example pki-root/config/est
// ```
type BackendConfigEst struct {
	pulumi.CustomResourceState

	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	//
	// <a id="nestedatt--authenticators"></a>
	AuditFields pulumi.StringArrayOutput `pulumi:"auditFields"`
	// Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigEstAuthenticatorsOutput `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the EST configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// If set, this mount will register the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
	DefaultMount pulumi.BoolPtrOutput `pulumi:"defaultMount"`
	// Required to be set if defaultMount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy pulumi.StringPtrOutput `pulumi:"defaultPathPolicy"`
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing pulumi.BoolPtrOutput `pulumi:"enableSentinelParsing"`
	// Specifies whether EST is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Configures a pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:<role_name>. Labels must be unique across Vault cluster, and will register .well-known/est/<label> URL paths.
	LabelToPathPolicy pulumi.MapOutput `pulumi:"labelToPathPolicy"`
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
}

// NewBackendConfigEst registers a new resource with the given unique name, arguments, and options.
func NewBackendConfigEst(ctx *pulumi.Context,
	name string, args *BackendConfigEstArgs, opts ...pulumi.ResourceOption) (*BackendConfigEst, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendConfigEst
	err := ctx.RegisterResource("vault:pkiSecret/backendConfigEst:BackendConfigEst", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendConfigEst gets an existing BackendConfigEst resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendConfigEst(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendConfigEstState, opts ...pulumi.ResourceOption) (*BackendConfigEst, error) {
	var resource BackendConfigEst
	err := ctx.ReadResource("vault:pkiSecret/backendConfigEst:BackendConfigEst", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendConfigEst resources.
type backendConfigEstState struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	//
	// <a id="nestedatt--authenticators"></a>
	AuditFields []string `pulumi:"auditFields"`
	// Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
	Authenticators *BackendConfigEstAuthenticators `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the EST configuration from, with no leading or trailing `/`s.
	Backend *string `pulumi:"backend"`
	// If set, this mount will register the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
	DefaultMount *bool `pulumi:"defaultMount"`
	// Required to be set if defaultMount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy *string `pulumi:"defaultPathPolicy"`
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing *bool `pulumi:"enableSentinelParsing"`
	// Specifies whether EST is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Configures a pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:<role_name>. Labels must be unique across Vault cluster, and will register .well-known/est/<label> URL paths.
	LabelToPathPolicy map[string]interface{} `pulumi:"labelToPathPolicy"`
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated *string `pulumi:"lastUpdated"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
}

type BackendConfigEstState struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	//
	// <a id="nestedatt--authenticators"></a>
	AuditFields pulumi.StringArrayInput
	// Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigEstAuthenticatorsPtrInput
	// The path to the PKI secret backend to
	// read the EST configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringPtrInput
	// If set, this mount will register the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
	DefaultMount pulumi.BoolPtrInput
	// Required to be set if defaultMount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy pulumi.StringPtrInput
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing pulumi.BoolPtrInput
	// Specifies whether EST is enabled.
	Enabled pulumi.BoolPtrInput
	// Configures a pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:<role_name>. Labels must be unique across Vault cluster, and will register .well-known/est/<label> URL paths.
	LabelToPathPolicy pulumi.MapInput
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated pulumi.StringPtrInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
}

func (BackendConfigEstState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigEstState)(nil)).Elem()
}

type backendConfigEstArgs struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	//
	// <a id="nestedatt--authenticators"></a>
	AuditFields []string `pulumi:"auditFields"`
	// Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
	Authenticators *BackendConfigEstAuthenticators `pulumi:"authenticators"`
	// The path to the PKI secret backend to
	// read the EST configuration from, with no leading or trailing `/`s.
	Backend string `pulumi:"backend"`
	// If set, this mount will register the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
	DefaultMount *bool `pulumi:"defaultMount"`
	// Required to be set if defaultMount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy *string `pulumi:"defaultPathPolicy"`
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing *bool `pulumi:"enableSentinelParsing"`
	// Specifies whether EST is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Configures a pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:<role_name>. Labels must be unique across Vault cluster, and will register .well-known/est/<label> URL paths.
	LabelToPathPolicy map[string]interface{} `pulumi:"labelToPathPolicy"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a BackendConfigEst resource.
type BackendConfigEstArgs struct {
	// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
	//
	// <a id="nestedatt--authenticators"></a>
	AuditFields pulumi.StringArrayInput
	// Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
	Authenticators BackendConfigEstAuthenticatorsPtrInput
	// The path to the PKI secret backend to
	// read the EST configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringInput
	// If set, this mount will register the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
	DefaultMount pulumi.BoolPtrInput
	// Required to be set if defaultMount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:<role_name>.
	DefaultPathPolicy pulumi.StringPtrInput
	// If set, parse out fields from the provided CSR making them available for Sentinel policies.
	EnableSentinelParsing pulumi.BoolPtrInput
	// Specifies whether EST is enabled.
	Enabled pulumi.BoolPtrInput
	// Configures a pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:<role_name>. Labels must be unique across Vault cluster, and will register .well-known/est/<label> URL paths.
	LabelToPathPolicy pulumi.MapInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
}

func (BackendConfigEstArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigEstArgs)(nil)).Elem()
}

type BackendConfigEstInput interface {
	pulumi.Input

	ToBackendConfigEstOutput() BackendConfigEstOutput
	ToBackendConfigEstOutputWithContext(ctx context.Context) BackendConfigEstOutput
}

func (*BackendConfigEst) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigEst)(nil)).Elem()
}

func (i *BackendConfigEst) ToBackendConfigEstOutput() BackendConfigEstOutput {
	return i.ToBackendConfigEstOutputWithContext(context.Background())
}

func (i *BackendConfigEst) ToBackendConfigEstOutputWithContext(ctx context.Context) BackendConfigEstOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigEstOutput)
}

// BackendConfigEstArrayInput is an input type that accepts BackendConfigEstArray and BackendConfigEstArrayOutput values.
// You can construct a concrete instance of `BackendConfigEstArrayInput` via:
//
//	BackendConfigEstArray{ BackendConfigEstArgs{...} }
type BackendConfigEstArrayInput interface {
	pulumi.Input

	ToBackendConfigEstArrayOutput() BackendConfigEstArrayOutput
	ToBackendConfigEstArrayOutputWithContext(context.Context) BackendConfigEstArrayOutput
}

type BackendConfigEstArray []BackendConfigEstInput

func (BackendConfigEstArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigEst)(nil)).Elem()
}

func (i BackendConfigEstArray) ToBackendConfigEstArrayOutput() BackendConfigEstArrayOutput {
	return i.ToBackendConfigEstArrayOutputWithContext(context.Background())
}

func (i BackendConfigEstArray) ToBackendConfigEstArrayOutputWithContext(ctx context.Context) BackendConfigEstArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigEstArrayOutput)
}

// BackendConfigEstMapInput is an input type that accepts BackendConfigEstMap and BackendConfigEstMapOutput values.
// You can construct a concrete instance of `BackendConfigEstMapInput` via:
//
//	BackendConfigEstMap{ "key": BackendConfigEstArgs{...} }
type BackendConfigEstMapInput interface {
	pulumi.Input

	ToBackendConfigEstMapOutput() BackendConfigEstMapOutput
	ToBackendConfigEstMapOutputWithContext(context.Context) BackendConfigEstMapOutput
}

type BackendConfigEstMap map[string]BackendConfigEstInput

func (BackendConfigEstMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigEst)(nil)).Elem()
}

func (i BackendConfigEstMap) ToBackendConfigEstMapOutput() BackendConfigEstMapOutput {
	return i.ToBackendConfigEstMapOutputWithContext(context.Background())
}

func (i BackendConfigEstMap) ToBackendConfigEstMapOutputWithContext(ctx context.Context) BackendConfigEstMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigEstMapOutput)
}

type BackendConfigEstOutput struct{ *pulumi.OutputState }

func (BackendConfigEstOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigEst)(nil)).Elem()
}

func (o BackendConfigEstOutput) ToBackendConfigEstOutput() BackendConfigEstOutput {
	return o
}

func (o BackendConfigEstOutput) ToBackendConfigEstOutputWithContext(ctx context.Context) BackendConfigEstOutput {
	return o
}

// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
//
// <a id="nestedatt--authenticators"></a>
func (o BackendConfigEstOutput) AuditFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.StringArrayOutput { return v.AuditFields }).(pulumi.StringArrayOutput)
}

// Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
func (o BackendConfigEstOutput) Authenticators() BackendConfigEstAuthenticatorsOutput {
	return o.ApplyT(func(v *BackendConfigEst) BackendConfigEstAuthenticatorsOutput { return v.Authenticators }).(BackendConfigEstAuthenticatorsOutput)
}

// The path to the PKI secret backend to
// read the EST configuration from, with no leading or trailing `/`s.
func (o BackendConfigEstOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// If set, this mount will register the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
func (o BackendConfigEstOutput) DefaultMount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.BoolPtrOutput { return v.DefaultMount }).(pulumi.BoolPtrOutput)
}

// Required to be set if defaultMount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:<role_name>.
func (o BackendConfigEstOutput) DefaultPathPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.StringPtrOutput { return v.DefaultPathPolicy }).(pulumi.StringPtrOutput)
}

// If set, parse out fields from the provided CSR making them available for Sentinel policies.
func (o BackendConfigEstOutput) EnableSentinelParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.BoolPtrOutput { return v.EnableSentinelParsing }).(pulumi.BoolPtrOutput)
}

// Specifies whether EST is enabled.
func (o BackendConfigEstOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Configures a pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:<role_name>. Labels must be unique across Vault cluster, and will register .well-known/est/<label> URL paths.
func (o BackendConfigEstOutput) LabelToPathPolicy() pulumi.MapOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.MapOutput { return v.LabelToPathPolicy }).(pulumi.MapOutput)
}

// A read-only timestamp representing the last time the configuration was updated.
func (o BackendConfigEstOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The namespace of the target resource.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o BackendConfigEstOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigEst) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

type BackendConfigEstArrayOutput struct{ *pulumi.OutputState }

func (BackendConfigEstArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigEst)(nil)).Elem()
}

func (o BackendConfigEstArrayOutput) ToBackendConfigEstArrayOutput() BackendConfigEstArrayOutput {
	return o
}

func (o BackendConfigEstArrayOutput) ToBackendConfigEstArrayOutputWithContext(ctx context.Context) BackendConfigEstArrayOutput {
	return o
}

func (o BackendConfigEstArrayOutput) Index(i pulumi.IntInput) BackendConfigEstOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendConfigEst {
		return vs[0].([]*BackendConfigEst)[vs[1].(int)]
	}).(BackendConfigEstOutput)
}

type BackendConfigEstMapOutput struct{ *pulumi.OutputState }

func (BackendConfigEstMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigEst)(nil)).Elem()
}

func (o BackendConfigEstMapOutput) ToBackendConfigEstMapOutput() BackendConfigEstMapOutput {
	return o
}

func (o BackendConfigEstMapOutput) ToBackendConfigEstMapOutputWithContext(ctx context.Context) BackendConfigEstMapOutput {
	return o
}

func (o BackendConfigEstMapOutput) MapIndex(k pulumi.StringInput) BackendConfigEstOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendConfigEst {
		return vs[0].(map[string]*BackendConfigEst)[vs[1].(string)]
	}).(BackendConfigEstOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigEstInput)(nil)).Elem(), &BackendConfigEst{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigEstArrayInput)(nil)).Elem(), BackendConfigEstArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigEstMapInput)(nil)).Elem(), BackendConfigEstMap{})
	pulumi.RegisterOutputType(BackendConfigEstOutput{})
	pulumi.RegisterOutputType(BackendConfigEstArrayOutput{})
	pulumi.RegisterOutputType(BackendConfigEstMapOutput{})
}
