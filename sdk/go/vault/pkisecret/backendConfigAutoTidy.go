// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows setting the Auto Tidy configuration on a PKI Secret Backend
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault"
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/pkisecret"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pki, err := vault.NewMount(ctx, "pki", &vault.MountArgs{
//				Path:                   pulumi.String("pki"),
//				Type:                   pulumi.String("pki"),
//				DefaultLeaseTtlSeconds: pulumi.Int(3600),
//				MaxLeaseTtlSeconds:     pulumi.Int(86400),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pkisecret.NewBackendConfigAutoTidy(ctx, "test", &pkisecret.BackendConfigAutoTidyArgs{
//				Backend:          pki.Path,
//				Enabled:          pulumi.Bool(true),
//				TidyCertStore:    pulumi.Bool(true),
//				IntervalDuration: pulumi.String("1h"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type BackendConfigAutoTidy struct {
	pulumi.CustomResourceState

	// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
	AcmeAccountSafetyBuffer pulumi.StringOutput `pulumi:"acmeAccountSafetyBuffer"`
	// The path to the PKI secret backend to
	// read the configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Specifies whether automatic tidy is enabled or not.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Interval at which to run an auto-tidy operation. This is the time
	// between tidy invocations (after one finishes to the start of the next).
	IntervalDuration pulumi.StringOutput `pulumi:"intervalDuration"`
	// The amount of extra time that must have passed beyond issuer's
	// expiration before it is removed from the backend storage.
	IssuerSafetyBuffer pulumi.StringOutput `pulumi:"issuerSafetyBuffer"`
	// This configures whether stored certificate are
	// counted upon initialization of the backend, and whether during normal operation, a running count
	// of certificates stored is maintained.
	MaintainStoredCertificateCounts pulumi.BoolPtrOutput `pulumi:"maintainStoredCertificateCounts"`
	// The maximum amount of time auto-tidy will be delayed
	// after startup.
	MaxStartupBackoffDuration pulumi.StringOutput `pulumi:"maxStartupBackoffDuration"`
	// The minimum amount of time auto-tidy will be delayed
	// after startup.
	MinStartupBackoffDuration pulumi.StringOutput `pulumi:"minStartupBackoffDuration"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The amount of time to wait between processing certificates.
	PauseDuration pulumi.StringOutput `pulumi:"pauseDuration"`
	// This configures whether the stored
	// certificate count is published to the metrics consumer.
	PublishStoredCertificateCountMetrics pulumi.BoolPtrOutput `pulumi:"publishStoredCertificateCountMetrics"`
	// The amount of time that must pass from the
	// cross-cluster revocation request being initiated to when it will be slated for removal.
	RevocationQueueSafetyBuffer pulumi.StringOutput `pulumi:"revocationQueueSafetyBuffer"`
	// The amount of extra time that must have passed beyond certificate
	// expiration before it is removed from the backend storage and/or revocation list.
	SafetyBuffer pulumi.StringOutput `pulumi:"safetyBuffer"`
	// Set to true to enable tidying ACME accounts, orders and authorizations.
	TidyAcme pulumi.BoolPtrOutput `pulumi:"tidyAcme"`
	// Set to true to enable tidying up certificate metadata.
	TidyCertMetadata pulumi.BoolPtrOutput `pulumi:"tidyCertMetadata"`
	// Set to true to enable tidying up the certificate store
	TidyCertStore pulumi.BoolPtrOutput `pulumi:"tidyCertStore"`
	// Set to true to enable tidying up the CMPv2 nonce store.
	TidyCmpv2NonceStore pulumi.BoolPtrOutput `pulumi:"tidyCmpv2NonceStore"`
	// Set to true to enable tidying up the cross-cluster
	// revoked certificate store.
	TidyCrossClusterRevokedCerts pulumi.BoolPtrOutput `pulumi:"tidyCrossClusterRevokedCerts"`
	// Set to true to automatically remove expired issuers past the
	// `issuerSafetyBuffer`. No keys will be removed as part of this operation.
	TidyExpiredIssuers pulumi.BoolPtrOutput `pulumi:"tidyExpiredIssuers"`
	// Set to true to move the legacy `caBundle` from
	// `/config/ca_bundle` to `/config/ca_bundle.bak`.
	TidyMoveLegacyCaBundle pulumi.BoolPtrOutput `pulumi:"tidyMoveLegacyCaBundle"`
	// Set to true to remove stale revocation queue entries that
	// haven't been confirmed by any active cluster.
	TidyRevocationQueue pulumi.BoolPtrOutput `pulumi:"tidyRevocationQueue"`
	// Set to true to validate issuer associations
	// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
	TidyRevokedCertIssuerAssociations pulumi.BoolPtrOutput `pulumi:"tidyRevokedCertIssuerAssociations"`
	// Set to true to remove all invalid and expired certificates from
	// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
	// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
	// the CRL, and the CRL will be rotated.
	TidyRevokedCerts pulumi.BoolPtrOutput `pulumi:"tidyRevokedCerts"`
}

// NewBackendConfigAutoTidy registers a new resource with the given unique name, arguments, and options.
func NewBackendConfigAutoTidy(ctx *pulumi.Context,
	name string, args *BackendConfigAutoTidyArgs, opts ...pulumi.ResourceOption) (*BackendConfigAutoTidy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendConfigAutoTidy
	err := ctx.RegisterResource("vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendConfigAutoTidy gets an existing BackendConfigAutoTidy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendConfigAutoTidy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendConfigAutoTidyState, opts ...pulumi.ResourceOption) (*BackendConfigAutoTidy, error) {
	var resource BackendConfigAutoTidy
	err := ctx.ReadResource("vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendConfigAutoTidy resources.
type backendConfigAutoTidyState struct {
	// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
	AcmeAccountSafetyBuffer *string `pulumi:"acmeAccountSafetyBuffer"`
	// The path to the PKI secret backend to
	// read the configuration from, with no leading or trailing `/`s.
	Backend *string `pulumi:"backend"`
	// Specifies whether automatic tidy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Interval at which to run an auto-tidy operation. This is the time
	// between tidy invocations (after one finishes to the start of the next).
	IntervalDuration *string `pulumi:"intervalDuration"`
	// The amount of extra time that must have passed beyond issuer's
	// expiration before it is removed from the backend storage.
	IssuerSafetyBuffer *string `pulumi:"issuerSafetyBuffer"`
	// This configures whether stored certificate are
	// counted upon initialization of the backend, and whether during normal operation, a running count
	// of certificates stored is maintained.
	MaintainStoredCertificateCounts *bool `pulumi:"maintainStoredCertificateCounts"`
	// The maximum amount of time auto-tidy will be delayed
	// after startup.
	MaxStartupBackoffDuration *string `pulumi:"maxStartupBackoffDuration"`
	// The minimum amount of time auto-tidy will be delayed
	// after startup.
	MinStartupBackoffDuration *string `pulumi:"minStartupBackoffDuration"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The amount of time to wait between processing certificates.
	PauseDuration *string `pulumi:"pauseDuration"`
	// This configures whether the stored
	// certificate count is published to the metrics consumer.
	PublishStoredCertificateCountMetrics *bool `pulumi:"publishStoredCertificateCountMetrics"`
	// The amount of time that must pass from the
	// cross-cluster revocation request being initiated to when it will be slated for removal.
	RevocationQueueSafetyBuffer *string `pulumi:"revocationQueueSafetyBuffer"`
	// The amount of extra time that must have passed beyond certificate
	// expiration before it is removed from the backend storage and/or revocation list.
	SafetyBuffer *string `pulumi:"safetyBuffer"`
	// Set to true to enable tidying ACME accounts, orders and authorizations.
	TidyAcme *bool `pulumi:"tidyAcme"`
	// Set to true to enable tidying up certificate metadata.
	TidyCertMetadata *bool `pulumi:"tidyCertMetadata"`
	// Set to true to enable tidying up the certificate store
	TidyCertStore *bool `pulumi:"tidyCertStore"`
	// Set to true to enable tidying up the CMPv2 nonce store.
	TidyCmpv2NonceStore *bool `pulumi:"tidyCmpv2NonceStore"`
	// Set to true to enable tidying up the cross-cluster
	// revoked certificate store.
	TidyCrossClusterRevokedCerts *bool `pulumi:"tidyCrossClusterRevokedCerts"`
	// Set to true to automatically remove expired issuers past the
	// `issuerSafetyBuffer`. No keys will be removed as part of this operation.
	TidyExpiredIssuers *bool `pulumi:"tidyExpiredIssuers"`
	// Set to true to move the legacy `caBundle` from
	// `/config/ca_bundle` to `/config/ca_bundle.bak`.
	TidyMoveLegacyCaBundle *bool `pulumi:"tidyMoveLegacyCaBundle"`
	// Set to true to remove stale revocation queue entries that
	// haven't been confirmed by any active cluster.
	TidyRevocationQueue *bool `pulumi:"tidyRevocationQueue"`
	// Set to true to validate issuer associations
	// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
	TidyRevokedCertIssuerAssociations *bool `pulumi:"tidyRevokedCertIssuerAssociations"`
	// Set to true to remove all invalid and expired certificates from
	// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
	// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
	// the CRL, and the CRL will be rotated.
	TidyRevokedCerts *bool `pulumi:"tidyRevokedCerts"`
}

type BackendConfigAutoTidyState struct {
	// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
	AcmeAccountSafetyBuffer pulumi.StringPtrInput
	// The path to the PKI secret backend to
	// read the configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringPtrInput
	// Specifies whether automatic tidy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Interval at which to run an auto-tidy operation. This is the time
	// between tidy invocations (after one finishes to the start of the next).
	IntervalDuration pulumi.StringPtrInput
	// The amount of extra time that must have passed beyond issuer's
	// expiration before it is removed from the backend storage.
	IssuerSafetyBuffer pulumi.StringPtrInput
	// This configures whether stored certificate are
	// counted upon initialization of the backend, and whether during normal operation, a running count
	// of certificates stored is maintained.
	MaintainStoredCertificateCounts pulumi.BoolPtrInput
	// The maximum amount of time auto-tidy will be delayed
	// after startup.
	MaxStartupBackoffDuration pulumi.StringPtrInput
	// The minimum amount of time auto-tidy will be delayed
	// after startup.
	MinStartupBackoffDuration pulumi.StringPtrInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The amount of time to wait between processing certificates.
	PauseDuration pulumi.StringPtrInput
	// This configures whether the stored
	// certificate count is published to the metrics consumer.
	PublishStoredCertificateCountMetrics pulumi.BoolPtrInput
	// The amount of time that must pass from the
	// cross-cluster revocation request being initiated to when it will be slated for removal.
	RevocationQueueSafetyBuffer pulumi.StringPtrInput
	// The amount of extra time that must have passed beyond certificate
	// expiration before it is removed from the backend storage and/or revocation list.
	SafetyBuffer pulumi.StringPtrInput
	// Set to true to enable tidying ACME accounts, orders and authorizations.
	TidyAcme pulumi.BoolPtrInput
	// Set to true to enable tidying up certificate metadata.
	TidyCertMetadata pulumi.BoolPtrInput
	// Set to true to enable tidying up the certificate store
	TidyCertStore pulumi.BoolPtrInput
	// Set to true to enable tidying up the CMPv2 nonce store.
	TidyCmpv2NonceStore pulumi.BoolPtrInput
	// Set to true to enable tidying up the cross-cluster
	// revoked certificate store.
	TidyCrossClusterRevokedCerts pulumi.BoolPtrInput
	// Set to true to automatically remove expired issuers past the
	// `issuerSafetyBuffer`. No keys will be removed as part of this operation.
	TidyExpiredIssuers pulumi.BoolPtrInput
	// Set to true to move the legacy `caBundle` from
	// `/config/ca_bundle` to `/config/ca_bundle.bak`.
	TidyMoveLegacyCaBundle pulumi.BoolPtrInput
	// Set to true to remove stale revocation queue entries that
	// haven't been confirmed by any active cluster.
	TidyRevocationQueue pulumi.BoolPtrInput
	// Set to true to validate issuer associations
	// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
	TidyRevokedCertIssuerAssociations pulumi.BoolPtrInput
	// Set to true to remove all invalid and expired certificates from
	// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
	// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
	// the CRL, and the CRL will be rotated.
	TidyRevokedCerts pulumi.BoolPtrInput
}

func (BackendConfigAutoTidyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigAutoTidyState)(nil)).Elem()
}

type backendConfigAutoTidyArgs struct {
	// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
	AcmeAccountSafetyBuffer *string `pulumi:"acmeAccountSafetyBuffer"`
	// The path to the PKI secret backend to
	// read the configuration from, with no leading or trailing `/`s.
	Backend string `pulumi:"backend"`
	// Specifies whether automatic tidy is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// Interval at which to run an auto-tidy operation. This is the time
	// between tidy invocations (after one finishes to the start of the next).
	IntervalDuration *string `pulumi:"intervalDuration"`
	// The amount of extra time that must have passed beyond issuer's
	// expiration before it is removed from the backend storage.
	IssuerSafetyBuffer *string `pulumi:"issuerSafetyBuffer"`
	// This configures whether stored certificate are
	// counted upon initialization of the backend, and whether during normal operation, a running count
	// of certificates stored is maintained.
	MaintainStoredCertificateCounts *bool `pulumi:"maintainStoredCertificateCounts"`
	// The maximum amount of time auto-tidy will be delayed
	// after startup.
	MaxStartupBackoffDuration *string `pulumi:"maxStartupBackoffDuration"`
	// The minimum amount of time auto-tidy will be delayed
	// after startup.
	MinStartupBackoffDuration *string `pulumi:"minStartupBackoffDuration"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The amount of time to wait between processing certificates.
	PauseDuration *string `pulumi:"pauseDuration"`
	// This configures whether the stored
	// certificate count is published to the metrics consumer.
	PublishStoredCertificateCountMetrics *bool `pulumi:"publishStoredCertificateCountMetrics"`
	// The amount of time that must pass from the
	// cross-cluster revocation request being initiated to when it will be slated for removal.
	RevocationQueueSafetyBuffer *string `pulumi:"revocationQueueSafetyBuffer"`
	// The amount of extra time that must have passed beyond certificate
	// expiration before it is removed from the backend storage and/or revocation list.
	SafetyBuffer *string `pulumi:"safetyBuffer"`
	// Set to true to enable tidying ACME accounts, orders and authorizations.
	TidyAcme *bool `pulumi:"tidyAcme"`
	// Set to true to enable tidying up certificate metadata.
	TidyCertMetadata *bool `pulumi:"tidyCertMetadata"`
	// Set to true to enable tidying up the certificate store
	TidyCertStore *bool `pulumi:"tidyCertStore"`
	// Set to true to enable tidying up the CMPv2 nonce store.
	TidyCmpv2NonceStore *bool `pulumi:"tidyCmpv2NonceStore"`
	// Set to true to enable tidying up the cross-cluster
	// revoked certificate store.
	TidyCrossClusterRevokedCerts *bool `pulumi:"tidyCrossClusterRevokedCerts"`
	// Set to true to automatically remove expired issuers past the
	// `issuerSafetyBuffer`. No keys will be removed as part of this operation.
	TidyExpiredIssuers *bool `pulumi:"tidyExpiredIssuers"`
	// Set to true to move the legacy `caBundle` from
	// `/config/ca_bundle` to `/config/ca_bundle.bak`.
	TidyMoveLegacyCaBundle *bool `pulumi:"tidyMoveLegacyCaBundle"`
	// Set to true to remove stale revocation queue entries that
	// haven't been confirmed by any active cluster.
	TidyRevocationQueue *bool `pulumi:"tidyRevocationQueue"`
	// Set to true to validate issuer associations
	// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
	TidyRevokedCertIssuerAssociations *bool `pulumi:"tidyRevokedCertIssuerAssociations"`
	// Set to true to remove all invalid and expired certificates from
	// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
	// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
	// the CRL, and the CRL will be rotated.
	TidyRevokedCerts *bool `pulumi:"tidyRevokedCerts"`
}

// The set of arguments for constructing a BackendConfigAutoTidy resource.
type BackendConfigAutoTidyArgs struct {
	// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
	AcmeAccountSafetyBuffer pulumi.StringPtrInput
	// The path to the PKI secret backend to
	// read the configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringInput
	// Specifies whether automatic tidy is enabled or not.
	Enabled pulumi.BoolInput
	// Interval at which to run an auto-tidy operation. This is the time
	// between tidy invocations (after one finishes to the start of the next).
	IntervalDuration pulumi.StringPtrInput
	// The amount of extra time that must have passed beyond issuer's
	// expiration before it is removed from the backend storage.
	IssuerSafetyBuffer pulumi.StringPtrInput
	// This configures whether stored certificate are
	// counted upon initialization of the backend, and whether during normal operation, a running count
	// of certificates stored is maintained.
	MaintainStoredCertificateCounts pulumi.BoolPtrInput
	// The maximum amount of time auto-tidy will be delayed
	// after startup.
	MaxStartupBackoffDuration pulumi.StringPtrInput
	// The minimum amount of time auto-tidy will be delayed
	// after startup.
	MinStartupBackoffDuration pulumi.StringPtrInput
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The amount of time to wait between processing certificates.
	PauseDuration pulumi.StringPtrInput
	// This configures whether the stored
	// certificate count is published to the metrics consumer.
	PublishStoredCertificateCountMetrics pulumi.BoolPtrInput
	// The amount of time that must pass from the
	// cross-cluster revocation request being initiated to when it will be slated for removal.
	RevocationQueueSafetyBuffer pulumi.StringPtrInput
	// The amount of extra time that must have passed beyond certificate
	// expiration before it is removed from the backend storage and/or revocation list.
	SafetyBuffer pulumi.StringPtrInput
	// Set to true to enable tidying ACME accounts, orders and authorizations.
	TidyAcme pulumi.BoolPtrInput
	// Set to true to enable tidying up certificate metadata.
	TidyCertMetadata pulumi.BoolPtrInput
	// Set to true to enable tidying up the certificate store
	TidyCertStore pulumi.BoolPtrInput
	// Set to true to enable tidying up the CMPv2 nonce store.
	TidyCmpv2NonceStore pulumi.BoolPtrInput
	// Set to true to enable tidying up the cross-cluster
	// revoked certificate store.
	TidyCrossClusterRevokedCerts pulumi.BoolPtrInput
	// Set to true to automatically remove expired issuers past the
	// `issuerSafetyBuffer`. No keys will be removed as part of this operation.
	TidyExpiredIssuers pulumi.BoolPtrInput
	// Set to true to move the legacy `caBundle` from
	// `/config/ca_bundle` to `/config/ca_bundle.bak`.
	TidyMoveLegacyCaBundle pulumi.BoolPtrInput
	// Set to true to remove stale revocation queue entries that
	// haven't been confirmed by any active cluster.
	TidyRevocationQueue pulumi.BoolPtrInput
	// Set to true to validate issuer associations
	// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
	TidyRevokedCertIssuerAssociations pulumi.BoolPtrInput
	// Set to true to remove all invalid and expired certificates from
	// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
	// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
	// the CRL, and the CRL will be rotated.
	TidyRevokedCerts pulumi.BoolPtrInput
}

func (BackendConfigAutoTidyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendConfigAutoTidyArgs)(nil)).Elem()
}

type BackendConfigAutoTidyInput interface {
	pulumi.Input

	ToBackendConfigAutoTidyOutput() BackendConfigAutoTidyOutput
	ToBackendConfigAutoTidyOutputWithContext(ctx context.Context) BackendConfigAutoTidyOutput
}

func (*BackendConfigAutoTidy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigAutoTidy)(nil)).Elem()
}

func (i *BackendConfigAutoTidy) ToBackendConfigAutoTidyOutput() BackendConfigAutoTidyOutput {
	return i.ToBackendConfigAutoTidyOutputWithContext(context.Background())
}

func (i *BackendConfigAutoTidy) ToBackendConfigAutoTidyOutputWithContext(ctx context.Context) BackendConfigAutoTidyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigAutoTidyOutput)
}

// BackendConfigAutoTidyArrayInput is an input type that accepts BackendConfigAutoTidyArray and BackendConfigAutoTidyArrayOutput values.
// You can construct a concrete instance of `BackendConfigAutoTidyArrayInput` via:
//
//	BackendConfigAutoTidyArray{ BackendConfigAutoTidyArgs{...} }
type BackendConfigAutoTidyArrayInput interface {
	pulumi.Input

	ToBackendConfigAutoTidyArrayOutput() BackendConfigAutoTidyArrayOutput
	ToBackendConfigAutoTidyArrayOutputWithContext(context.Context) BackendConfigAutoTidyArrayOutput
}

type BackendConfigAutoTidyArray []BackendConfigAutoTidyInput

func (BackendConfigAutoTidyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigAutoTidy)(nil)).Elem()
}

func (i BackendConfigAutoTidyArray) ToBackendConfigAutoTidyArrayOutput() BackendConfigAutoTidyArrayOutput {
	return i.ToBackendConfigAutoTidyArrayOutputWithContext(context.Background())
}

func (i BackendConfigAutoTidyArray) ToBackendConfigAutoTidyArrayOutputWithContext(ctx context.Context) BackendConfigAutoTidyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigAutoTidyArrayOutput)
}

// BackendConfigAutoTidyMapInput is an input type that accepts BackendConfigAutoTidyMap and BackendConfigAutoTidyMapOutput values.
// You can construct a concrete instance of `BackendConfigAutoTidyMapInput` via:
//
//	BackendConfigAutoTidyMap{ "key": BackendConfigAutoTidyArgs{...} }
type BackendConfigAutoTidyMapInput interface {
	pulumi.Input

	ToBackendConfigAutoTidyMapOutput() BackendConfigAutoTidyMapOutput
	ToBackendConfigAutoTidyMapOutputWithContext(context.Context) BackendConfigAutoTidyMapOutput
}

type BackendConfigAutoTidyMap map[string]BackendConfigAutoTidyInput

func (BackendConfigAutoTidyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigAutoTidy)(nil)).Elem()
}

func (i BackendConfigAutoTidyMap) ToBackendConfigAutoTidyMapOutput() BackendConfigAutoTidyMapOutput {
	return i.ToBackendConfigAutoTidyMapOutputWithContext(context.Background())
}

func (i BackendConfigAutoTidyMap) ToBackendConfigAutoTidyMapOutputWithContext(ctx context.Context) BackendConfigAutoTidyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendConfigAutoTidyMapOutput)
}

type BackendConfigAutoTidyOutput struct{ *pulumi.OutputState }

func (BackendConfigAutoTidyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendConfigAutoTidy)(nil)).Elem()
}

func (o BackendConfigAutoTidyOutput) ToBackendConfigAutoTidyOutput() BackendConfigAutoTidyOutput {
	return o
}

func (o BackendConfigAutoTidyOutput) ToBackendConfigAutoTidyOutputWithContext(ctx context.Context) BackendConfigAutoTidyOutput {
	return o
}

// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
func (o BackendConfigAutoTidyOutput) AcmeAccountSafetyBuffer() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.AcmeAccountSafetyBuffer }).(pulumi.StringOutput)
}

// The path to the PKI secret backend to
// read the configuration from, with no leading or trailing `/`s.
func (o BackendConfigAutoTidyOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Specifies whether automatic tidy is enabled or not.
func (o BackendConfigAutoTidyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Interval at which to run an auto-tidy operation. This is the time
// between tidy invocations (after one finishes to the start of the next).
func (o BackendConfigAutoTidyOutput) IntervalDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.IntervalDuration }).(pulumi.StringOutput)
}

// The amount of extra time that must have passed beyond issuer's
// expiration before it is removed from the backend storage.
func (o BackendConfigAutoTidyOutput) IssuerSafetyBuffer() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.IssuerSafetyBuffer }).(pulumi.StringOutput)
}

// This configures whether stored certificate are
// counted upon initialization of the backend, and whether during normal operation, a running count
// of certificates stored is maintained.
func (o BackendConfigAutoTidyOutput) MaintainStoredCertificateCounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.MaintainStoredCertificateCounts }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time auto-tidy will be delayed
// after startup.
func (o BackendConfigAutoTidyOutput) MaxStartupBackoffDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.MaxStartupBackoffDuration }).(pulumi.StringOutput)
}

// The minimum amount of time auto-tidy will be delayed
// after startup.
func (o BackendConfigAutoTidyOutput) MinStartupBackoffDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.MinStartupBackoffDuration }).(pulumi.StringOutput)
}

// The namespace of the target resource.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o BackendConfigAutoTidyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The amount of time to wait between processing certificates.
func (o BackendConfigAutoTidyOutput) PauseDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.PauseDuration }).(pulumi.StringOutput)
}

// This configures whether the stored
// certificate count is published to the metrics consumer.
func (o BackendConfigAutoTidyOutput) PublishStoredCertificateCountMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.PublishStoredCertificateCountMetrics }).(pulumi.BoolPtrOutput)
}

// The amount of time that must pass from the
// cross-cluster revocation request being initiated to when it will be slated for removal.
func (o BackendConfigAutoTidyOutput) RevocationQueueSafetyBuffer() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.RevocationQueueSafetyBuffer }).(pulumi.StringOutput)
}

// The amount of extra time that must have passed beyond certificate
// expiration before it is removed from the backend storage and/or revocation list.
func (o BackendConfigAutoTidyOutput) SafetyBuffer() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.StringOutput { return v.SafetyBuffer }).(pulumi.StringOutput)
}

// Set to true to enable tidying ACME accounts, orders and authorizations.
func (o BackendConfigAutoTidyOutput) TidyAcme() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyAcme }).(pulumi.BoolPtrOutput)
}

// Set to true to enable tidying up certificate metadata.
func (o BackendConfigAutoTidyOutput) TidyCertMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyCertMetadata }).(pulumi.BoolPtrOutput)
}

// Set to true to enable tidying up the certificate store
func (o BackendConfigAutoTidyOutput) TidyCertStore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyCertStore }).(pulumi.BoolPtrOutput)
}

// Set to true to enable tidying up the CMPv2 nonce store.
func (o BackendConfigAutoTidyOutput) TidyCmpv2NonceStore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyCmpv2NonceStore }).(pulumi.BoolPtrOutput)
}

// Set to true to enable tidying up the cross-cluster
// revoked certificate store.
func (o BackendConfigAutoTidyOutput) TidyCrossClusterRevokedCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyCrossClusterRevokedCerts }).(pulumi.BoolPtrOutput)
}

// Set to true to automatically remove expired issuers past the
// `issuerSafetyBuffer`. No keys will be removed as part of this operation.
func (o BackendConfigAutoTidyOutput) TidyExpiredIssuers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyExpiredIssuers }).(pulumi.BoolPtrOutput)
}

// Set to true to move the legacy `caBundle` from
// `/config/ca_bundle` to `/config/ca_bundle.bak`.
func (o BackendConfigAutoTidyOutput) TidyMoveLegacyCaBundle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyMoveLegacyCaBundle }).(pulumi.BoolPtrOutput)
}

// Set to true to remove stale revocation queue entries that
// haven't been confirmed by any active cluster.
func (o BackendConfigAutoTidyOutput) TidyRevocationQueue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyRevocationQueue }).(pulumi.BoolPtrOutput)
}

// Set to true to validate issuer associations
// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
func (o BackendConfigAutoTidyOutput) TidyRevokedCertIssuerAssociations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyRevokedCertIssuerAssociations }).(pulumi.BoolPtrOutput)
}

// Set to true to remove all invalid and expired certificates from
// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
// the CRL, and the CRL will be rotated.
func (o BackendConfigAutoTidyOutput) TidyRevokedCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendConfigAutoTidy) pulumi.BoolPtrOutput { return v.TidyRevokedCerts }).(pulumi.BoolPtrOutput)
}

type BackendConfigAutoTidyArrayOutput struct{ *pulumi.OutputState }

func (BackendConfigAutoTidyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendConfigAutoTidy)(nil)).Elem()
}

func (o BackendConfigAutoTidyArrayOutput) ToBackendConfigAutoTidyArrayOutput() BackendConfigAutoTidyArrayOutput {
	return o
}

func (o BackendConfigAutoTidyArrayOutput) ToBackendConfigAutoTidyArrayOutputWithContext(ctx context.Context) BackendConfigAutoTidyArrayOutput {
	return o
}

func (o BackendConfigAutoTidyArrayOutput) Index(i pulumi.IntInput) BackendConfigAutoTidyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendConfigAutoTidy {
		return vs[0].([]*BackendConfigAutoTidy)[vs[1].(int)]
	}).(BackendConfigAutoTidyOutput)
}

type BackendConfigAutoTidyMapOutput struct{ *pulumi.OutputState }

func (BackendConfigAutoTidyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendConfigAutoTidy)(nil)).Elem()
}

func (o BackendConfigAutoTidyMapOutput) ToBackendConfigAutoTidyMapOutput() BackendConfigAutoTidyMapOutput {
	return o
}

func (o BackendConfigAutoTidyMapOutput) ToBackendConfigAutoTidyMapOutputWithContext(ctx context.Context) BackendConfigAutoTidyMapOutput {
	return o
}

func (o BackendConfigAutoTidyMapOutput) MapIndex(k pulumi.StringInput) BackendConfigAutoTidyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendConfigAutoTidy {
		return vs[0].(map[string]*BackendConfigAutoTidy)[vs[1].(string)]
	}).(BackendConfigAutoTidyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigAutoTidyInput)(nil)).Elem(), &BackendConfigAutoTidy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigAutoTidyArrayInput)(nil)).Elem(), BackendConfigAutoTidyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendConfigAutoTidyMapInput)(nil)).Elem(), BackendConfigAutoTidyMap{})
	pulumi.RegisterOutputType(BackendConfigAutoTidyOutput{})
	pulumi.RegisterOutputType(BackendConfigAutoTidyArrayOutput{})
	pulumi.RegisterOutputType(BackendConfigAutoTidyMapOutput{})
}
