// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a key on a PKI Secret Backend for Vault.
//
// ## Import
//
// PKI secret backend key can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import vault:pkiSecret/secretBackendKey:SecretBackendKey key pki/key/bf9b0d48-d0dd-652c-30be-77d04fc7e94d
// ```
type SecretBackendKey struct {
	pulumi.CustomResourceState

	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Specifies the number of bits to use for the generated keys.
	// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
	// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
	// 384, or 521; ignored with `key_type=ed25519`.
	KeyBits pulumi.IntOutput `pulumi:"keyBits"`
	// ID of the generated key.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// When a new key is created with this request, optionally specifies the name for this.
	// The global ref `default` may not be used as a name.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// The managed key's UUID.
	ManagedKeyId pulumi.StringPtrOutput `pulumi:"managedKeyId"`
	// The managed key's configured name.
	ManagedKeyName pulumi.StringPtrOutput `pulumi:"managedKeyName"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSecretBackendKey registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendKey(ctx *pulumi.Context,
	name string, args *SecretBackendKeyArgs, opts ...pulumi.ResourceOption) (*SecretBackendKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backend == nil {
		return nil, errors.New("invalid value for required argument 'Backend'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretBackendKey
	err := ctx.RegisterResource("vault:pkiSecret/secretBackendKey:SecretBackendKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackendKey gets an existing SecretBackendKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendKeyState, opts ...pulumi.ResourceOption) (*SecretBackendKey, error) {
	var resource SecretBackendKey
	err := ctx.ReadResource("vault:pkiSecret/secretBackendKey:SecretBackendKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackendKey resources.
type secretBackendKeyState struct {
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend *string `pulumi:"backend"`
	// Specifies the number of bits to use for the generated keys.
	// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
	// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
	// 384, or 521; ignored with `key_type=ed25519`.
	KeyBits *int `pulumi:"keyBits"`
	// ID of the generated key.
	KeyId *string `pulumi:"keyId"`
	// When a new key is created with this request, optionally specifies the name for this.
	// The global ref `default` may not be used as a name.
	KeyName *string `pulumi:"keyName"`
	// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
	KeyType *string `pulumi:"keyType"`
	// The managed key's UUID.
	ManagedKeyId *string `pulumi:"managedKeyId"`
	// The managed key's configured name.
	ManagedKeyName *string `pulumi:"managedKeyName"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
	Type *string `pulumi:"type"`
}

type SecretBackendKeyState struct {
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend pulumi.StringPtrInput
	// Specifies the number of bits to use for the generated keys.
	// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
	// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
	// 384, or 521; ignored with `key_type=ed25519`.
	KeyBits pulumi.IntPtrInput
	// ID of the generated key.
	KeyId pulumi.StringPtrInput
	// When a new key is created with this request, optionally specifies the name for this.
	// The global ref `default` may not be used as a name.
	KeyName pulumi.StringPtrInput
	// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
	KeyType pulumi.StringPtrInput
	// The managed key's UUID.
	ManagedKeyId pulumi.StringPtrInput
	// The managed key's configured name.
	ManagedKeyName pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
	Type pulumi.StringPtrInput
}

func (SecretBackendKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendKeyState)(nil)).Elem()
}

type secretBackendKeyArgs struct {
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend string `pulumi:"backend"`
	// Specifies the number of bits to use for the generated keys.
	// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
	// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
	// 384, or 521; ignored with `key_type=ed25519`.
	KeyBits *int `pulumi:"keyBits"`
	// When a new key is created with this request, optionally specifies the name for this.
	// The global ref `default` may not be used as a name.
	KeyName *string `pulumi:"keyName"`
	// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
	KeyType *string `pulumi:"keyType"`
	// The managed key's UUID.
	ManagedKeyId *string `pulumi:"managedKeyId"`
	// The managed key's configured name.
	ManagedKeyName *string `pulumi:"managedKeyName"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SecretBackendKey resource.
type SecretBackendKeyArgs struct {
	// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
	Backend pulumi.StringInput
	// Specifies the number of bits to use for the generated keys.
	// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
	// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
	// 384, or 521; ignored with `key_type=ed25519`.
	KeyBits pulumi.IntPtrInput
	// When a new key is created with this request, optionally specifies the name for this.
	// The global ref `default` may not be used as a name.
	KeyName pulumi.StringPtrInput
	// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
	KeyType pulumi.StringPtrInput
	// The managed key's UUID.
	ManagedKeyId pulumi.StringPtrInput
	// The managed key's configured name.
	ManagedKeyName pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
	Type pulumi.StringInput
}

func (SecretBackendKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendKeyArgs)(nil)).Elem()
}

type SecretBackendKeyInput interface {
	pulumi.Input

	ToSecretBackendKeyOutput() SecretBackendKeyOutput
	ToSecretBackendKeyOutputWithContext(ctx context.Context) SecretBackendKeyOutput
}

func (*SecretBackendKey) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendKey)(nil)).Elem()
}

func (i *SecretBackendKey) ToSecretBackendKeyOutput() SecretBackendKeyOutput {
	return i.ToSecretBackendKeyOutputWithContext(context.Background())
}

func (i *SecretBackendKey) ToSecretBackendKeyOutputWithContext(ctx context.Context) SecretBackendKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendKeyOutput)
}

// SecretBackendKeyArrayInput is an input type that accepts SecretBackendKeyArray and SecretBackendKeyArrayOutput values.
// You can construct a concrete instance of `SecretBackendKeyArrayInput` via:
//
//	SecretBackendKeyArray{ SecretBackendKeyArgs{...} }
type SecretBackendKeyArrayInput interface {
	pulumi.Input

	ToSecretBackendKeyArrayOutput() SecretBackendKeyArrayOutput
	ToSecretBackendKeyArrayOutputWithContext(context.Context) SecretBackendKeyArrayOutput
}

type SecretBackendKeyArray []SecretBackendKeyInput

func (SecretBackendKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackendKey)(nil)).Elem()
}

func (i SecretBackendKeyArray) ToSecretBackendKeyArrayOutput() SecretBackendKeyArrayOutput {
	return i.ToSecretBackendKeyArrayOutputWithContext(context.Background())
}

func (i SecretBackendKeyArray) ToSecretBackendKeyArrayOutputWithContext(ctx context.Context) SecretBackendKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendKeyArrayOutput)
}

// SecretBackendKeyMapInput is an input type that accepts SecretBackendKeyMap and SecretBackendKeyMapOutput values.
// You can construct a concrete instance of `SecretBackendKeyMapInput` via:
//
//	SecretBackendKeyMap{ "key": SecretBackendKeyArgs{...} }
type SecretBackendKeyMapInput interface {
	pulumi.Input

	ToSecretBackendKeyMapOutput() SecretBackendKeyMapOutput
	ToSecretBackendKeyMapOutputWithContext(context.Context) SecretBackendKeyMapOutput
}

type SecretBackendKeyMap map[string]SecretBackendKeyInput

func (SecretBackendKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackendKey)(nil)).Elem()
}

func (i SecretBackendKeyMap) ToSecretBackendKeyMapOutput() SecretBackendKeyMapOutput {
	return i.ToSecretBackendKeyMapOutputWithContext(context.Background())
}

func (i SecretBackendKeyMap) ToSecretBackendKeyMapOutputWithContext(ctx context.Context) SecretBackendKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendKeyMapOutput)
}

type SecretBackendKeyOutput struct{ *pulumi.OutputState }

func (SecretBackendKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendKey)(nil)).Elem()
}

func (o SecretBackendKeyOutput) ToSecretBackendKeyOutput() SecretBackendKeyOutput {
	return o
}

func (o SecretBackendKeyOutput) ToSecretBackendKeyOutputWithContext(ctx context.Context) SecretBackendKeyOutput {
	return o
}

// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
func (o SecretBackendKeyOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringOutput { return v.Backend }).(pulumi.StringOutput)
}

// Specifies the number of bits to use for the generated keys.
// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
// 384, or 521; ignored with `key_type=ed25519`.
func (o SecretBackendKeyOutput) KeyBits() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.IntOutput { return v.KeyBits }).(pulumi.IntOutput)
}

// ID of the generated key.
func (o SecretBackendKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// When a new key is created with this request, optionally specifies the name for this.
// The global ref `default` may not be used as a name.
func (o SecretBackendKeyOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringPtrOutput { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
func (o SecretBackendKeyOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// The managed key's UUID.
func (o SecretBackendKeyOutput) ManagedKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringPtrOutput { return v.ManagedKeyId }).(pulumi.StringPtrOutput)
}

// The managed key's configured name.
func (o SecretBackendKeyOutput) ManagedKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringPtrOutput { return v.ManagedKeyName }).(pulumi.StringPtrOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
// *Available only for Vault Enterprise*.
func (o SecretBackendKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
func (o SecretBackendKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackendKey) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SecretBackendKeyArrayOutput struct{ *pulumi.OutputState }

func (SecretBackendKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackendKey)(nil)).Elem()
}

func (o SecretBackendKeyArrayOutput) ToSecretBackendKeyArrayOutput() SecretBackendKeyArrayOutput {
	return o
}

func (o SecretBackendKeyArrayOutput) ToSecretBackendKeyArrayOutputWithContext(ctx context.Context) SecretBackendKeyArrayOutput {
	return o
}

func (o SecretBackendKeyArrayOutput) Index(i pulumi.IntInput) SecretBackendKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretBackendKey {
		return vs[0].([]*SecretBackendKey)[vs[1].(int)]
	}).(SecretBackendKeyOutput)
}

type SecretBackendKeyMapOutput struct{ *pulumi.OutputState }

func (SecretBackendKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackendKey)(nil)).Elem()
}

func (o SecretBackendKeyMapOutput) ToSecretBackendKeyMapOutput() SecretBackendKeyMapOutput {
	return o
}

func (o SecretBackendKeyMapOutput) ToSecretBackendKeyMapOutputWithContext(ctx context.Context) SecretBackendKeyMapOutput {
	return o
}

func (o SecretBackendKeyMapOutput) MapIndex(k pulumi.StringInput) SecretBackendKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretBackendKey {
		return vs[0].(map[string]*SecretBackendKey)[vs[1].(string)]
	}).(SecretBackendKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendKeyInput)(nil)).Elem(), &SecretBackendKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendKeyArrayInput)(nil)).Elem(), SecretBackendKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendKeyMapInput)(nil)).Elem(), SecretBackendKeyMap{})
	pulumi.RegisterOutputType(SecretBackendKeyOutput{})
	pulumi.RegisterOutputType(SecretBackendKeyArrayOutput{})
	pulumi.RegisterOutputType(SecretBackendKeyMapOutput{})
}
