// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault"
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/pkisecret"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pki, err := vault.NewMount(ctx, "pki", &vault.MountArgs{
//				Path:        pulumi.String("pki"),
//				Type:        pulumi.String("pki"),
//				Description: pulumi.String("PKI secret engine mount"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = pkisecret.NewSecretBackendRootCert(ctx, "root", &pkisecret.SecretBackendRootCertArgs{
//				Backend:    pki.Path,
//				Type:       pulumi.String("internal"),
//				CommonName: pulumi.String("example"),
//				Ttl:        pulumi.String("86400"),
//				IssuerName: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			testSecretBackendRole, err := pkisecret.NewSecretBackendRole(ctx, "test", &pkisecret.SecretBackendRoleArgs{
//				Backend: pulumi.Any(testVaultPkiSecretBackendRootCert.Backend),
//				Name:    pulumi.String("test"),
//				AllowedDomains: pulumi.StringArray{
//					pulumi.String("test.my.domain"),
//				},
//				AllowSubdomains: pulumi.Bool(true),
//				MaxTtl:          pulumi.String("3600"),
//				KeyUsages: pulumi.StringArray{
//					pulumi.String("DigitalSignature"),
//					pulumi.String("KeyAgreement"),
//					pulumi.String("KeyEncipherment"),
//				},
//				NoStoreMetadata: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			testSecretBackendCert, err := pkisecret.NewSecretBackendCert(ctx, "test", &pkisecret.SecretBackendCertArgs{
//				Backend:             testSecretBackendRole.Backend,
//				Name:                testSecretBackendRole.Name,
//				CommonName:          pulumi.String("cert.test.my.domain"),
//				Ttl:                 pulumi.String("720h"),
//				MinSecondsRemaining: pulumi.Int(60),
//				CertMetadata:        pulumi.String("dGVzdCBtZXRhZGF0YQ=="),
//			})
//			if err != nil {
//				return err
//			}
//			_ = testSecretBackendCert.SerialNumber.ApplyT(func(serialNumber string) (pkisecret.GetBackendCertMetadataResult, error) {
//				return pkisecret.GetBackendCertMetadataResult(interface{}(pkisecret.GetBackendCertMetadataOutput(ctx, pkisecret.GetBackendCertMetadataOutputArgs{
//					Path:   test_root.Path,
//					Serial: serialNumber,
//				}, nil))), nil
//			}).(pkisecret.GetBackendCertMetadataResultOutput)
//			return nil
//		})
//	}
//
// ```
func GetBackendCertMetadata(ctx *pulumi.Context, args *GetBackendCertMetadataArgs, opts ...pulumi.InvokeOption) (*GetBackendCertMetadataResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBackendCertMetadataResult
	err := ctx.Invoke("vault:pkiSecret/getBackendCertMetadata:getBackendCertMetadata", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackendCertMetadata.
type GetBackendCertMetadataArgs struct {
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The path to the PKI secret backend to
	// read the cert metadata from, with no leading or trailing `/`s.
	Path string `pulumi:"path"`
	// Specifies the serial of the certificate whose metadata to read.
	Serial string `pulumi:"serial"`
}

// A collection of values returned by getBackendCertMetadata.
type GetBackendCertMetadataResult struct {
	// The metadata associated with the certificate
	CertMetadata string `pulumi:"certMetadata"`
	// The expiration date of the certificate in unix epoch format
	Expiration string `pulumi:"expiration"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the issuer.
	IssuerId  string  `pulumi:"issuerId"`
	Namespace *string `pulumi:"namespace"`
	Path      string  `pulumi:"path"`
	// The role used to create the certificate
	Role   string `pulumi:"role"`
	Serial string `pulumi:"serial"`
	// The serial number
	SerialNumber string `pulumi:"serialNumber"`
}

func GetBackendCertMetadataOutput(ctx *pulumi.Context, args GetBackendCertMetadataOutputArgs, opts ...pulumi.InvokeOption) GetBackendCertMetadataResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetBackendCertMetadataResultOutput, error) {
			args := v.(GetBackendCertMetadataArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vault:pkiSecret/getBackendCertMetadata:getBackendCertMetadata", args, GetBackendCertMetadataResultOutput{}, options).(GetBackendCertMetadataResultOutput), nil
		}).(GetBackendCertMetadataResultOutput)
}

// A collection of arguments for invoking getBackendCertMetadata.
type GetBackendCertMetadataOutputArgs struct {
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The path to the PKI secret backend to
	// read the cert metadata from, with no leading or trailing `/`s.
	Path pulumi.StringInput `pulumi:"path"`
	// Specifies the serial of the certificate whose metadata to read.
	Serial pulumi.StringInput `pulumi:"serial"`
}

func (GetBackendCertMetadataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendCertMetadataArgs)(nil)).Elem()
}

// A collection of values returned by getBackendCertMetadata.
type GetBackendCertMetadataResultOutput struct{ *pulumi.OutputState }

func (GetBackendCertMetadataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendCertMetadataResult)(nil)).Elem()
}

func (o GetBackendCertMetadataResultOutput) ToGetBackendCertMetadataResultOutput() GetBackendCertMetadataResultOutput {
	return o
}

func (o GetBackendCertMetadataResultOutput) ToGetBackendCertMetadataResultOutputWithContext(ctx context.Context) GetBackendCertMetadataResultOutput {
	return o
}

// The metadata associated with the certificate
func (o GetBackendCertMetadataResultOutput) CertMetadata() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.CertMetadata }).(pulumi.StringOutput)
}

// The expiration date of the certificate in unix epoch format
func (o GetBackendCertMetadataResultOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.Expiration }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBackendCertMetadataResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the issuer.
func (o GetBackendCertMetadataResultOutput) IssuerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.IssuerId }).(pulumi.StringOutput)
}

func (o GetBackendCertMetadataResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetBackendCertMetadataResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.Path }).(pulumi.StringOutput)
}

// The role used to create the certificate
func (o GetBackendCertMetadataResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.Role }).(pulumi.StringOutput)
}

func (o GetBackendCertMetadataResultOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.Serial }).(pulumi.StringOutput)
}

// The serial number
func (o GetBackendCertMetadataResultOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendCertMetadataResult) string { return v.SerialNumber }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBackendCertMetadataResultOutput{})
}
