// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkisecret

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault"
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/pkisecret"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pki, err := vault.NewMount(ctx, "pki", &vault.MountArgs{
//				Path:        pulumi.String("pki"),
//				Type:        pulumi.String("pki"),
//				Description: pulumi.String("PKI secret engine mount"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = pkisecret.GetBackendConfigScepOutput(ctx, pkisecret.GetBackendConfigScepOutputArgs{
//				Backend: pki.Path,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupBackendConfigScep(ctx *pulumi.Context, args *LookupBackendConfigScepArgs, opts ...pulumi.InvokeOption) (*LookupBackendConfigScepResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBackendConfigScepResult
	err := ctx.Invoke("vault:pkiSecret/getBackendConfigScep:getBackendConfigScep", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackendConfigScep.
type LookupBackendConfigScepArgs struct {
	// The path to the PKI secret backend to
	// read the SCEP configuration from, with no leading or trailing `/`s.
	Backend string `pulumi:"backend"`
	// The level of logging verbosity, affects only SCEP logs on this mount.
	LogLevel *string `pulumi:"logLevel"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
}

// A collection of values returned by getBackendConfigScep.
type LookupBackendConfigScepResult struct {
	// List of allowed digest algorithms for SCEP requests.
	AllowedDigestAlgorithms []string `pulumi:"allowedDigestAlgorithms"`
	// List of allowed encryption algorithms for SCEP requests.
	AllowedEncryptionAlgorithms []string `pulumi:"allowedEncryptionAlgorithms"`
	// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
	Authenticators []GetBackendConfigScepAuthenticator `pulumi:"authenticators"`
	Backend        string                              `pulumi:"backend"`
	// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
	DefaultPathPolicy string `pulumi:"defaultPathPolicy"`
	// Specifies whether SCEP is enabled.
	Enabled bool `pulumi:"enabled"`
	// Lists the 3rd party validation of SCEP requests (see below for nested schema).
	ExternalValidations []GetBackendConfigScepExternalValidation `pulumi:"externalValidations"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A read-only timestamp representing the last time the configuration was updated.
	LastUpdated string `pulumi:"lastUpdated"`
	// The level of logging verbosity, affects only SCEP logs on this mount.
	LogLevel  *string `pulumi:"logLevel"`
	Namespace *string `pulumi:"namespace"`
	// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
	RestrictCaChainToIssuer bool `pulumi:"restrictCaChainToIssuer"`
}

func LookupBackendConfigScepOutput(ctx *pulumi.Context, args LookupBackendConfigScepOutputArgs, opts ...pulumi.InvokeOption) LookupBackendConfigScepResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBackendConfigScepResultOutput, error) {
			args := v.(LookupBackendConfigScepArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vault:pkiSecret/getBackendConfigScep:getBackendConfigScep", args, LookupBackendConfigScepResultOutput{}, options).(LookupBackendConfigScepResultOutput), nil
		}).(LookupBackendConfigScepResultOutput)
}

// A collection of arguments for invoking getBackendConfigScep.
type LookupBackendConfigScepOutputArgs struct {
	// The path to the PKI secret backend to
	// read the SCEP configuration from, with no leading or trailing `/`s.
	Backend pulumi.StringInput `pulumi:"backend"`
	// The level of logging verbosity, affects only SCEP logs on this mount.
	LogLevel pulumi.StringPtrInput `pulumi:"logLevel"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (LookupBackendConfigScepOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackendConfigScepArgs)(nil)).Elem()
}

// A collection of values returned by getBackendConfigScep.
type LookupBackendConfigScepResultOutput struct{ *pulumi.OutputState }

func (LookupBackendConfigScepResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackendConfigScepResult)(nil)).Elem()
}

func (o LookupBackendConfigScepResultOutput) ToLookupBackendConfigScepResultOutput() LookupBackendConfigScepResultOutput {
	return o
}

func (o LookupBackendConfigScepResultOutput) ToLookupBackendConfigScepResultOutputWithContext(ctx context.Context) LookupBackendConfigScepResultOutput {
	return o
}

// List of allowed digest algorithms for SCEP requests.
func (o LookupBackendConfigScepResultOutput) AllowedDigestAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) []string { return v.AllowedDigestAlgorithms }).(pulumi.StringArrayOutput)
}

// List of allowed encryption algorithms for SCEP requests.
func (o LookupBackendConfigScepResultOutput) AllowedEncryptionAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) []string { return v.AllowedEncryptionAlgorithms }).(pulumi.StringArrayOutput)
}

// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
func (o LookupBackendConfigScepResultOutput) Authenticators() GetBackendConfigScepAuthenticatorArrayOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) []GetBackendConfigScepAuthenticator { return v.Authenticators }).(GetBackendConfigScepAuthenticatorArrayOutput)
}

func (o LookupBackendConfigScepResultOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) string { return v.Backend }).(pulumi.StringOutput)
}

// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
func (o LookupBackendConfigScepResultOutput) DefaultPathPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) string { return v.DefaultPathPolicy }).(pulumi.StringOutput)
}

// Specifies whether SCEP is enabled.
func (o LookupBackendConfigScepResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Lists the 3rd party validation of SCEP requests (see below for nested schema).
func (o LookupBackendConfigScepResultOutput) ExternalValidations() GetBackendConfigScepExternalValidationArrayOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) []GetBackendConfigScepExternalValidation {
		return v.ExternalValidations
	}).(GetBackendConfigScepExternalValidationArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBackendConfigScepResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) string { return v.Id }).(pulumi.StringOutput)
}

// A read-only timestamp representing the last time the configuration was updated.
func (o LookupBackendConfigScepResultOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) string { return v.LastUpdated }).(pulumi.StringOutput)
}

// The level of logging verbosity, affects only SCEP logs on this mount.
func (o LookupBackendConfigScepResultOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

func (o LookupBackendConfigScepResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
func (o LookupBackendConfigScepResultOutput) RestrictCaChainToIssuer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendConfigScepResult) bool { return v.RestrictCaChainToIssuer }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBackendConfigScepResultOutput{})
}
