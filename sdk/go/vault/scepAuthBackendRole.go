// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			scep, err := vault.NewAuthBackend(ctx, "scep", &vault.AuthBackendArgs{
//				Path: pulumi.String("scep"),
//				Type: pulumi.String("scep"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vault.NewScepAuthBackendRole(ctx, "scep", &vault.ScepAuthBackendRoleArgs{
//				Backend:     scep.Path,
//				Name:        pulumi.String("scep_challenge"),
//				AuthType:    pulumi.String("static-challenge"),
//				Challenge:   pulumi.String("well known secret"),
//				TokenType:   pulumi.String("batch"),
//				TokenTtl:    pulumi.Int(300),
//				TokenMaxTtl: pulumi.Int(600),
//				TokenPolicies: pulumi.StringArray{
//					pulumi.String("scep-clients"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ScepAuthBackendRole struct {
	pulumi.CustomResourceState

	// The authentication type to use. This can be either "static-challenge" or "intune".
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Path to the mounted SCEP auth backend.
	Backend pulumi.StringPtrOutput `pulumi:"backend"`
	// The static challenge to use if authType is "static-challenge", not used for other auth types.
	Challenge   pulumi.StringPtrOutput `pulumi:"challenge"`
	DisplayName pulumi.StringOutput    `pulumi:"displayName"`
	// Name of the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayOutput `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrOutput `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrOutput `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrOutput `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrOutput `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrOutput `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayOutput `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrOutput `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrOutput `pulumi:"tokenType"`
}

// NewScepAuthBackendRole registers a new resource with the given unique name, arguments, and options.
func NewScepAuthBackendRole(ctx *pulumi.Context,
	name string, args *ScepAuthBackendRoleArgs, opts ...pulumi.ResourceOption) (*ScepAuthBackendRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScepAuthBackendRole
	err := ctx.RegisterResource("vault:index/scepAuthBackendRole:ScepAuthBackendRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScepAuthBackendRole gets an existing ScepAuthBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScepAuthBackendRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScepAuthBackendRoleState, opts ...pulumi.ResourceOption) (*ScepAuthBackendRole, error) {
	var resource ScepAuthBackendRole
	err := ctx.ReadResource("vault:index/scepAuthBackendRole:ScepAuthBackendRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScepAuthBackendRole resources.
type scepAuthBackendRoleState struct {
	// The authentication type to use. This can be either "static-challenge" or "intune".
	AuthType *string `pulumi:"authType"`
	// Path to the mounted SCEP auth backend.
	Backend *string `pulumi:"backend"`
	// The static challenge to use if authType is "static-challenge", not used for other auth types.
	Challenge   *string `pulumi:"challenge"`
	DisplayName *string `pulumi:"displayName"`
	// Name of the role.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType *string `pulumi:"tokenType"`
}

type ScepAuthBackendRoleState struct {
	// The authentication type to use. This can be either "static-challenge" or "intune".
	AuthType pulumi.StringPtrInput
	// Path to the mounted SCEP auth backend.
	Backend pulumi.StringPtrInput
	// The static challenge to use if authType is "static-challenge", not used for other auth types.
	Challenge   pulumi.StringPtrInput
	DisplayName pulumi.StringPtrInput
	// Name of the role.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrInput
}

func (ScepAuthBackendRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scepAuthBackendRoleState)(nil)).Elem()
}

type scepAuthBackendRoleArgs struct {
	// The authentication type to use. This can be either "static-challenge" or "intune".
	AuthType string `pulumi:"authType"`
	// Path to the mounted SCEP auth backend.
	Backend *string `pulumi:"backend"`
	// The static challenge to use if authType is "static-challenge", not used for other auth types.
	Challenge   *string `pulumi:"challenge"`
	DisplayName *string `pulumi:"displayName"`
	// Name of the role.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType *string `pulumi:"tokenType"`
}

// The set of arguments for constructing a ScepAuthBackendRole resource.
type ScepAuthBackendRoleArgs struct {
	// The authentication type to use. This can be either "static-challenge" or "intune".
	AuthType pulumi.StringInput
	// Path to the mounted SCEP auth backend.
	Backend pulumi.StringPtrInput
	// The static challenge to use if authType is "static-challenge", not used for other auth types.
	Challenge   pulumi.StringPtrInput
	DisplayName pulumi.StringPtrInput
	// Name of the role.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrInput
}

func (ScepAuthBackendRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scepAuthBackendRoleArgs)(nil)).Elem()
}

type ScepAuthBackendRoleInput interface {
	pulumi.Input

	ToScepAuthBackendRoleOutput() ScepAuthBackendRoleOutput
	ToScepAuthBackendRoleOutputWithContext(ctx context.Context) ScepAuthBackendRoleOutput
}

func (*ScepAuthBackendRole) ElementType() reflect.Type {
	return reflect.TypeOf((**ScepAuthBackendRole)(nil)).Elem()
}

func (i *ScepAuthBackendRole) ToScepAuthBackendRoleOutput() ScepAuthBackendRoleOutput {
	return i.ToScepAuthBackendRoleOutputWithContext(context.Background())
}

func (i *ScepAuthBackendRole) ToScepAuthBackendRoleOutputWithContext(ctx context.Context) ScepAuthBackendRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScepAuthBackendRoleOutput)
}

// ScepAuthBackendRoleArrayInput is an input type that accepts ScepAuthBackendRoleArray and ScepAuthBackendRoleArrayOutput values.
// You can construct a concrete instance of `ScepAuthBackendRoleArrayInput` via:
//
//	ScepAuthBackendRoleArray{ ScepAuthBackendRoleArgs{...} }
type ScepAuthBackendRoleArrayInput interface {
	pulumi.Input

	ToScepAuthBackendRoleArrayOutput() ScepAuthBackendRoleArrayOutput
	ToScepAuthBackendRoleArrayOutputWithContext(context.Context) ScepAuthBackendRoleArrayOutput
}

type ScepAuthBackendRoleArray []ScepAuthBackendRoleInput

func (ScepAuthBackendRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScepAuthBackendRole)(nil)).Elem()
}

func (i ScepAuthBackendRoleArray) ToScepAuthBackendRoleArrayOutput() ScepAuthBackendRoleArrayOutput {
	return i.ToScepAuthBackendRoleArrayOutputWithContext(context.Background())
}

func (i ScepAuthBackendRoleArray) ToScepAuthBackendRoleArrayOutputWithContext(ctx context.Context) ScepAuthBackendRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScepAuthBackendRoleArrayOutput)
}

// ScepAuthBackendRoleMapInput is an input type that accepts ScepAuthBackendRoleMap and ScepAuthBackendRoleMapOutput values.
// You can construct a concrete instance of `ScepAuthBackendRoleMapInput` via:
//
//	ScepAuthBackendRoleMap{ "key": ScepAuthBackendRoleArgs{...} }
type ScepAuthBackendRoleMapInput interface {
	pulumi.Input

	ToScepAuthBackendRoleMapOutput() ScepAuthBackendRoleMapOutput
	ToScepAuthBackendRoleMapOutputWithContext(context.Context) ScepAuthBackendRoleMapOutput
}

type ScepAuthBackendRoleMap map[string]ScepAuthBackendRoleInput

func (ScepAuthBackendRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScepAuthBackendRole)(nil)).Elem()
}

func (i ScepAuthBackendRoleMap) ToScepAuthBackendRoleMapOutput() ScepAuthBackendRoleMapOutput {
	return i.ToScepAuthBackendRoleMapOutputWithContext(context.Background())
}

func (i ScepAuthBackendRoleMap) ToScepAuthBackendRoleMapOutputWithContext(ctx context.Context) ScepAuthBackendRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScepAuthBackendRoleMapOutput)
}

type ScepAuthBackendRoleOutput struct{ *pulumi.OutputState }

func (ScepAuthBackendRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScepAuthBackendRole)(nil)).Elem()
}

func (o ScepAuthBackendRoleOutput) ToScepAuthBackendRoleOutput() ScepAuthBackendRoleOutput {
	return o
}

func (o ScepAuthBackendRoleOutput) ToScepAuthBackendRoleOutputWithContext(ctx context.Context) ScepAuthBackendRoleOutput {
	return o
}

// The authentication type to use. This can be either "static-challenge" or "intune".
func (o ScepAuthBackendRoleOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Path to the mounted SCEP auth backend.
func (o ScepAuthBackendRoleOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringPtrOutput { return v.Backend }).(pulumi.StringPtrOutput)
}

// The static challenge to use if authType is "static-challenge", not used for other auth types.
func (o ScepAuthBackendRoleOutput) Challenge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringPtrOutput { return v.Challenge }).(pulumi.StringPtrOutput)
}

func (o ScepAuthBackendRoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Name of the role.
func (o ScepAuthBackendRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o ScepAuthBackendRoleOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the blocks of IP addresses which are allowed to use the generated token
func (o ScepAuthBackendRoleOutput) TokenBoundCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringArrayOutput { return v.TokenBoundCidrs }).(pulumi.StringArrayOutput)
}

// Generated Token's Explicit Maximum TTL in seconds
func (o ScepAuthBackendRoleOutput) TokenExplicitMaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.IntPtrOutput { return v.TokenExplicitMaxTtl }).(pulumi.IntPtrOutput)
}

// The maximum lifetime of the generated token
func (o ScepAuthBackendRoleOutput) TokenMaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.IntPtrOutput { return v.TokenMaxTtl }).(pulumi.IntPtrOutput)
}

// If true, the 'default' policy will not automatically be added to generated tokens
func (o ScepAuthBackendRoleOutput) TokenNoDefaultPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.BoolPtrOutput { return v.TokenNoDefaultPolicy }).(pulumi.BoolPtrOutput)
}

// The maximum number of times a token may be used, a value of zero means unlimited
func (o ScepAuthBackendRoleOutput) TokenNumUses() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.IntPtrOutput { return v.TokenNumUses }).(pulumi.IntPtrOutput)
}

// Generated Token's Period
func (o ScepAuthBackendRoleOutput) TokenPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.IntPtrOutput { return v.TokenPeriod }).(pulumi.IntPtrOutput)
}

// Generated Token's Policies
func (o ScepAuthBackendRoleOutput) TokenPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringArrayOutput { return v.TokenPolicies }).(pulumi.StringArrayOutput)
}

// The initial ttl of the token to generate in seconds
func (o ScepAuthBackendRoleOutput) TokenTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.IntPtrOutput { return v.TokenTtl }).(pulumi.IntPtrOutput)
}

// The type of token to generate, service or batch
func (o ScepAuthBackendRoleOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepAuthBackendRole) pulumi.StringPtrOutput { return v.TokenType }).(pulumi.StringPtrOutput)
}

type ScepAuthBackendRoleArrayOutput struct{ *pulumi.OutputState }

func (ScepAuthBackendRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScepAuthBackendRole)(nil)).Elem()
}

func (o ScepAuthBackendRoleArrayOutput) ToScepAuthBackendRoleArrayOutput() ScepAuthBackendRoleArrayOutput {
	return o
}

func (o ScepAuthBackendRoleArrayOutput) ToScepAuthBackendRoleArrayOutputWithContext(ctx context.Context) ScepAuthBackendRoleArrayOutput {
	return o
}

func (o ScepAuthBackendRoleArrayOutput) Index(i pulumi.IntInput) ScepAuthBackendRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScepAuthBackendRole {
		return vs[0].([]*ScepAuthBackendRole)[vs[1].(int)]
	}).(ScepAuthBackendRoleOutput)
}

type ScepAuthBackendRoleMapOutput struct{ *pulumi.OutputState }

func (ScepAuthBackendRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScepAuthBackendRole)(nil)).Elem()
}

func (o ScepAuthBackendRoleMapOutput) ToScepAuthBackendRoleMapOutput() ScepAuthBackendRoleMapOutput {
	return o
}

func (o ScepAuthBackendRoleMapOutput) ToScepAuthBackendRoleMapOutputWithContext(ctx context.Context) ScepAuthBackendRoleMapOutput {
	return o
}

func (o ScepAuthBackendRoleMapOutput) MapIndex(k pulumi.StringInput) ScepAuthBackendRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScepAuthBackendRole {
		return vs[0].(map[string]*ScepAuthBackendRole)[vs[1].(string)]
	}).(ScepAuthBackendRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScepAuthBackendRoleInput)(nil)).Elem(), &ScepAuthBackendRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScepAuthBackendRoleArrayInput)(nil)).Elem(), ScepAuthBackendRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScepAuthBackendRoleMapInput)(nil)).Elem(), ScepAuthBackendRoleMap{})
	pulumi.RegisterOutputType(ScepAuthBackendRoleOutput{})
	pulumi.RegisterOutputType(ScepAuthBackendRoleArrayOutput{})
	pulumi.RegisterOutputType(ScepAuthBackendRoleMapOutput{})
}
