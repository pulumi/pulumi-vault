// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a user in an
// [Okta auth backend within Vault](https://www.vaultproject.io/docs/auth/okta.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/okta"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := okta.NewAuthBackend(ctx, "example", &okta.AuthBackendArgs{
//				Path:         pulumi.String("user_okta"),
//				Organization: pulumi.String("dummy"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = okta.NewAuthBackendUser(ctx, "foo", &okta.AuthBackendUserArgs{
//				Path:     example.Path,
//				Username: pulumi.String("foo"),
//				Groups: pulumi.StringArray{
//					pulumi.String("one"),
//					pulumi.String("two"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Okta authentication backend users can be imported using its `path/user` ID format, e.g.
//
// ```sh
//
//	$ pulumi import vault:okta/authBackendUser:AuthBackendUser example okta/foo
//
// ```
type AuthBackendUser struct {
	pulumi.CustomResourceState

	// List of Okta groups to associate with this user
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The path where the Okta auth backend is mounted
	Path pulumi.StringOutput `pulumi:"path"`
	// List of Vault policies to associate with this user
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	// Name of the user within Okta
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewAuthBackendUser registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendUser(ctx *pulumi.Context,
	name string, args *AuthBackendUserArgs, opts ...pulumi.ResourceOption) (*AuthBackendUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthBackendUser
	err := ctx.RegisterResource("vault:okta/authBackendUser:AuthBackendUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackendUser gets an existing AuthBackendUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendUserState, opts ...pulumi.ResourceOption) (*AuthBackendUser, error) {
	var resource AuthBackendUser
	err := ctx.ReadResource("vault:okta/authBackendUser:AuthBackendUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackendUser resources.
type authBackendUserState struct {
	// List of Okta groups to associate with this user
	Groups []string `pulumi:"groups"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The path where the Okta auth backend is mounted
	Path *string `pulumi:"path"`
	// List of Vault policies to associate with this user
	Policies []string `pulumi:"policies"`
	// Name of the user within Okta
	Username *string `pulumi:"username"`
}

type AuthBackendUserState struct {
	// List of Okta groups to associate with this user
	Groups pulumi.StringArrayInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The path where the Okta auth backend is mounted
	Path pulumi.StringPtrInput
	// List of Vault policies to associate with this user
	Policies pulumi.StringArrayInput
	// Name of the user within Okta
	Username pulumi.StringPtrInput
}

func (AuthBackendUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendUserState)(nil)).Elem()
}

type authBackendUserArgs struct {
	// List of Okta groups to associate with this user
	Groups []string `pulumi:"groups"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The path where the Okta auth backend is mounted
	Path string `pulumi:"path"`
	// List of Vault policies to associate with this user
	Policies []string `pulumi:"policies"`
	// Name of the user within Okta
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a AuthBackendUser resource.
type AuthBackendUserArgs struct {
	// List of Okta groups to associate with this user
	Groups pulumi.StringArrayInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The path where the Okta auth backend is mounted
	Path pulumi.StringInput
	// List of Vault policies to associate with this user
	Policies pulumi.StringArrayInput
	// Name of the user within Okta
	Username pulumi.StringInput
}

func (AuthBackendUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendUserArgs)(nil)).Elem()
}

type AuthBackendUserInput interface {
	pulumi.Input

	ToAuthBackendUserOutput() AuthBackendUserOutput
	ToAuthBackendUserOutputWithContext(ctx context.Context) AuthBackendUserOutput
}

func (*AuthBackendUser) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendUser)(nil)).Elem()
}

func (i *AuthBackendUser) ToAuthBackendUserOutput() AuthBackendUserOutput {
	return i.ToAuthBackendUserOutputWithContext(context.Background())
}

func (i *AuthBackendUser) ToAuthBackendUserOutputWithContext(ctx context.Context) AuthBackendUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendUserOutput)
}

// AuthBackendUserArrayInput is an input type that accepts AuthBackendUserArray and AuthBackendUserArrayOutput values.
// You can construct a concrete instance of `AuthBackendUserArrayInput` via:
//
//	AuthBackendUserArray{ AuthBackendUserArgs{...} }
type AuthBackendUserArrayInput interface {
	pulumi.Input

	ToAuthBackendUserArrayOutput() AuthBackendUserArrayOutput
	ToAuthBackendUserArrayOutputWithContext(context.Context) AuthBackendUserArrayOutput
}

type AuthBackendUserArray []AuthBackendUserInput

func (AuthBackendUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackendUser)(nil)).Elem()
}

func (i AuthBackendUserArray) ToAuthBackendUserArrayOutput() AuthBackendUserArrayOutput {
	return i.ToAuthBackendUserArrayOutputWithContext(context.Background())
}

func (i AuthBackendUserArray) ToAuthBackendUserArrayOutputWithContext(ctx context.Context) AuthBackendUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendUserArrayOutput)
}

// AuthBackendUserMapInput is an input type that accepts AuthBackendUserMap and AuthBackendUserMapOutput values.
// You can construct a concrete instance of `AuthBackendUserMapInput` via:
//
//	AuthBackendUserMap{ "key": AuthBackendUserArgs{...} }
type AuthBackendUserMapInput interface {
	pulumi.Input

	ToAuthBackendUserMapOutput() AuthBackendUserMapOutput
	ToAuthBackendUserMapOutputWithContext(context.Context) AuthBackendUserMapOutput
}

type AuthBackendUserMap map[string]AuthBackendUserInput

func (AuthBackendUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackendUser)(nil)).Elem()
}

func (i AuthBackendUserMap) ToAuthBackendUserMapOutput() AuthBackendUserMapOutput {
	return i.ToAuthBackendUserMapOutputWithContext(context.Background())
}

func (i AuthBackendUserMap) ToAuthBackendUserMapOutputWithContext(ctx context.Context) AuthBackendUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendUserMapOutput)
}

type AuthBackendUserOutput struct{ *pulumi.OutputState }

func (AuthBackendUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendUser)(nil)).Elem()
}

func (o AuthBackendUserOutput) ToAuthBackendUserOutput() AuthBackendUserOutput {
	return o
}

func (o AuthBackendUserOutput) ToAuthBackendUserOutputWithContext(ctx context.Context) AuthBackendUserOutput {
	return o
}

// List of Okta groups to associate with this user
func (o AuthBackendUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendUser) pulumi.StringArrayOutput { return v.Groups }).(pulumi.StringArrayOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
// *Available only for Vault Enterprise*.
func (o AuthBackendUserOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendUser) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The path where the Okta auth backend is mounted
func (o AuthBackendUserOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendUser) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// List of Vault policies to associate with this user
func (o AuthBackendUserOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendUser) pulumi.StringArrayOutput { return v.Policies }).(pulumi.StringArrayOutput)
}

// Name of the user within Okta
func (o AuthBackendUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type AuthBackendUserArrayOutput struct{ *pulumi.OutputState }

func (AuthBackendUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackendUser)(nil)).Elem()
}

func (o AuthBackendUserArrayOutput) ToAuthBackendUserArrayOutput() AuthBackendUserArrayOutput {
	return o
}

func (o AuthBackendUserArrayOutput) ToAuthBackendUserArrayOutputWithContext(ctx context.Context) AuthBackendUserArrayOutput {
	return o
}

func (o AuthBackendUserArrayOutput) Index(i pulumi.IntInput) AuthBackendUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthBackendUser {
		return vs[0].([]*AuthBackendUser)[vs[1].(int)]
	}).(AuthBackendUserOutput)
}

type AuthBackendUserMapOutput struct{ *pulumi.OutputState }

func (AuthBackendUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackendUser)(nil)).Elem()
}

func (o AuthBackendUserMapOutput) ToAuthBackendUserMapOutput() AuthBackendUserMapOutput {
	return o
}

func (o AuthBackendUserMapOutput) ToAuthBackendUserMapOutputWithContext(ctx context.Context) AuthBackendUserMapOutput {
	return o
}

func (o AuthBackendUserMapOutput) MapIndex(k pulumi.StringInput) AuthBackendUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthBackendUser {
		return vs[0].(map[string]*AuthBackendUser)[vs[1].(string)]
	}).(AuthBackendUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendUserInput)(nil)).Elem(), &AuthBackendUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendUserArrayInput)(nil)).Elem(), AuthBackendUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendUserMapInput)(nil)).Elem(), AuthBackendUserMap{})
	pulumi.RegisterOutputType(AuthBackendUserOutput{})
	pulumi.RegisterOutputType(AuthBackendUserArrayOutput{})
	pulumi.RegisterOutputType(AuthBackendUserMapOutput{})
}
