// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package approle

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Reads the Role ID of an AppRole from a Vault server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/appRole"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			role, err := appRole.GetAuthBackendRoleId(ctx, &approle.GetAuthBackendRoleIdArgs{
//				Backend:  pulumi.StringRef("my-approle-backend"),
//				RoleName: "my-role",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("role-id", role.RoleId)
//			return nil
//		})
//	}
//
// ```
func GetAuthBackendRoleId(ctx *pulumi.Context, args *GetAuthBackendRoleIdArgs, opts ...pulumi.InvokeOption) (*GetAuthBackendRoleIdResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAuthBackendRoleIdResult
	err := ctx.Invoke("vault:appRole/getAuthBackendRoleId:getAuthBackendRoleId", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthBackendRoleId.
type GetAuthBackendRoleIdArgs struct {
	// The unique name for the AppRole backend the role to
	// retrieve a RoleID for resides in. Defaults to "approle".
	Backend *string `pulumi:"backend"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured namespace.
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The name of the role to retrieve the Role ID for.
	RoleName string `pulumi:"roleName"`
}

// A collection of values returned by getAuthBackendRoleId.
type GetAuthBackendRoleIdResult struct {
	Backend *string `pulumi:"backend"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	Namespace *string `pulumi:"namespace"`
	// The RoleID of the role.
	RoleId   string `pulumi:"roleId"`
	RoleName string `pulumi:"roleName"`
}

func GetAuthBackendRoleIdOutput(ctx *pulumi.Context, args GetAuthBackendRoleIdOutputArgs, opts ...pulumi.InvokeOption) GetAuthBackendRoleIdResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAuthBackendRoleIdResult, error) {
			args := v.(GetAuthBackendRoleIdArgs)
			r, err := GetAuthBackendRoleId(ctx, &args, opts...)
			var s GetAuthBackendRoleIdResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAuthBackendRoleIdResultOutput)
}

// A collection of arguments for invoking getAuthBackendRoleId.
type GetAuthBackendRoleIdOutputArgs struct {
	// The unique name for the AppRole backend the role to
	// retrieve a RoleID for resides in. Defaults to "approle".
	Backend pulumi.StringPtrInput `pulumi:"backend"`
	// The namespace of the target resource.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured namespace.
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The name of the role to retrieve the Role ID for.
	RoleName pulumi.StringInput `pulumi:"roleName"`
}

func (GetAuthBackendRoleIdOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthBackendRoleIdArgs)(nil)).Elem()
}

// A collection of values returned by getAuthBackendRoleId.
type GetAuthBackendRoleIdResultOutput struct{ *pulumi.OutputState }

func (GetAuthBackendRoleIdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthBackendRoleIdResult)(nil)).Elem()
}

func (o GetAuthBackendRoleIdResultOutput) ToGetAuthBackendRoleIdResultOutput() GetAuthBackendRoleIdResultOutput {
	return o
}

func (o GetAuthBackendRoleIdResultOutput) ToGetAuthBackendRoleIdResultOutputWithContext(ctx context.Context) GetAuthBackendRoleIdResultOutput {
	return o
}

func (o GetAuthBackendRoleIdResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetAuthBackendRoleIdResult] {
	return pulumix.Output[GetAuthBackendRoleIdResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAuthBackendRoleIdResultOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuthBackendRoleIdResult) *string { return v.Backend }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAuthBackendRoleIdResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthBackendRoleIdResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAuthBackendRoleIdResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuthBackendRoleIdResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The RoleID of the role.
func (o GetAuthBackendRoleIdResultOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthBackendRoleIdResult) string { return v.RoleId }).(pulumi.StringOutput)
}

func (o GetAuthBackendRoleIdResultOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthBackendRoleIdResult) string { return v.RoleName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAuthBackendRoleIdResultOutput{})
}
