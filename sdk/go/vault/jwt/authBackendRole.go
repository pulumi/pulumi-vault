// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jwt

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an JWT/OIDC auth backend role in a Vault server. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/jwt.html) for more
// information.
//
// ## Example Usage
//
// Role for JWT backend:
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/jwt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			jwt, err := jwt.NewAuthBackend(ctx, "jwt", &jwt.AuthBackendArgs{
//				Path: pulumi.String("jwt"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = jwt.NewAuthBackendRole(ctx, "example", &jwt.AuthBackendRoleArgs{
//				Backend:  jwt.Path,
//				RoleName: pulumi.String("test-role"),
//				TokenPolicies: pulumi.StringArray{
//					pulumi.String("default"),
//					pulumi.String("dev"),
//					pulumi.String("prod"),
//				},
//				BoundAudiences: pulumi.StringArray{
//					pulumi.String("https://myco.test"),
//				},
//				BoundClaims: pulumi.Map{
//					"color": pulumi.Any("red,green,blue"),
//				},
//				UserClaim: pulumi.String("https://vault/user"),
//				RoleType:  pulumi.String("jwt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// Role for OIDC backend:
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/jwt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			oidc, err := jwt.NewAuthBackend(ctx, "oidc", &jwt.AuthBackendArgs{
//				Path:        pulumi.String("oidc"),
//				DefaultRole: pulumi.String("test-role"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = jwt.NewAuthBackendRole(ctx, "example", &jwt.AuthBackendRoleArgs{
//				Backend:  oidc.Path,
//				RoleName: pulumi.String("test-role"),
//				TokenPolicies: pulumi.StringArray{
//					pulumi.String("default"),
//					pulumi.String("dev"),
//					pulumi.String("prod"),
//				},
//				UserClaim: pulumi.String("https://vault/user"),
//				RoleType:  pulumi.String("oidc"),
//				AllowedRedirectUris: pulumi.StringArray{
//					pulumi.String("http://localhost:8200/ui/vault/auth/oidc/oidc/callback"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// JWT authentication backend roles can be imported using the `path`, e.g.
//
// ```sh
// $ pulumi import vault:jwt/authBackendRole:AuthBackendRole example auth/jwt/role/test-role
// ```
type AuthBackendRole struct {
	pulumi.CustomResourceState

	// The list of allowed values for redirectUri during OIDC logins.
	// Required for OIDC roles
	AllowedRedirectUris pulumi.StringArrayOutput `pulumi:"allowedRedirectUris"`
	// The unique name of the auth backend to configure.
	// Defaults to `jwt`.
	Backend pulumi.StringPtrOutput `pulumi:"backend"`
	// (For "jwt" roles, at least one of `boundAudiences`, `boundSubject`, `boundClaims`
	// or `tokenBoundCidrs` is required. Optional for "oidc" roles.) List of `aud` claims to match against.
	// Any match is sufficient.
	BoundAudiences pulumi.StringArrayOutput `pulumi:"boundAudiences"`
	// If set, a map of claims to values to match against.
	// A claim's value must be a string, which may contain one value or multiple
	// comma-separated values, e.g. `"red"` or `"red,green,blue"`.
	BoundClaims pulumi.MapOutput `pulumi:"boundClaims"`
	// How to interpret values in the claims/values
	// map (`boundClaims`): can be either `string` (exact match) or `glob` (wildcard
	// match). Requires Vault 1.4.0 or above.
	BoundClaimsType pulumi.StringOutput `pulumi:"boundClaimsType"`
	// If set, requires that the `sub` claim matches
	// this value.
	BoundSubject pulumi.StringPtrOutput `pulumi:"boundSubject"`
	// If set, a map of claims (keys) to be copied
	// to specified metadata fields (values).
	ClaimMappings pulumi.MapOutput `pulumi:"claimMappings"`
	// The amount of leeway to add to all claims to account for clock skew, in
	// seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ClockSkewLeeway pulumi.IntPtrOutput `pulumi:"clockSkewLeeway"`
	// Disable bound claim value parsing. Useful when values contain commas.
	DisableBoundClaimsParsing pulumi.BoolPtrOutput `pulumi:"disableBoundClaimsParsing"`
	// The amount of leeway to add to expiration (`exp`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ExpirationLeeway pulumi.IntPtrOutput `pulumi:"expirationLeeway"`
	// The claim to use to uniquely identify
	// the set of groups to which the user belongs; this will be used as the names
	// for the Identity group aliases created due to a successful login. The claim
	// value must be a list of strings.
	GroupsClaim pulumi.StringPtrOutput `pulumi:"groupsClaim"`
	// Specifies the allowable elapsed time in seconds since the last time
	// the user was actively authenticated with the OIDC provider.
	MaxAge pulumi.IntPtrOutput `pulumi:"maxAge"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The amount of leeway to add to not before (`nbf`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	NotBeforeLeeway pulumi.IntPtrOutput `pulumi:"notBeforeLeeway"`
	// If set, a list of OIDC scopes to be used with an OIDC role.
	// The standard scope "openid" is automatically included and need not be specified.
	OidcScopes pulumi.StringArrayOutput `pulumi:"oidcScopes"`
	// The name of the role.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Type of role, either "oidc" (default) or "jwt".
	RoleType pulumi.StringOutput `pulumi:"roleType"`
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs pulumi.StringArrayOutput `pulumi:"tokenBoundCidrs"`
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl pulumi.IntPtrOutput `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl pulumi.IntPtrOutput `pulumi:"tokenMaxTtl"`
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy pulumi.BoolPtrOutput `pulumi:"tokenNoDefaultPolicy"`
	// The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	TokenNumUses pulumi.IntPtrOutput `pulumi:"tokenNumUses"`
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod pulumi.IntPtrOutput `pulumi:"tokenPeriod"`
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies pulumi.StringArrayOutput `pulumi:"tokenPolicies"`
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl pulumi.IntPtrOutput `pulumi:"tokenTtl"`
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType pulumi.StringPtrOutput `pulumi:"tokenType"`
	// The claim to use to uniquely identify
	// the user; this will be used as the name for the Identity entity alias created
	// due to a successful login.
	UserClaim pulumi.StringOutput `pulumi:"userClaim"`
	// Specifies if the `userClaim` value uses
	// [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
	// syntax for referencing claims. By default, the `userClaim` value will not use JSON pointer.
	// Requires Vault 1.11+.
	UserClaimJsonPointer pulumi.BoolPtrOutput `pulumi:"userClaimJsonPointer"`
	// Log received OIDC tokens and claims when debug-level
	// logging is active. Not recommended in production since sensitive information may be present
	// in OIDC responses.
	VerboseOidcLogging pulumi.BoolPtrOutput `pulumi:"verboseOidcLogging"`
}

// NewAuthBackendRole registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendRole(ctx *pulumi.Context,
	name string, args *AuthBackendRoleArgs, opts ...pulumi.ResourceOption) (*AuthBackendRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	if args.UserClaim == nil {
		return nil, errors.New("invalid value for required argument 'UserClaim'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthBackendRole
	err := ctx.RegisterResource("vault:jwt/authBackendRole:AuthBackendRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackendRole gets an existing AuthBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendRoleState, opts ...pulumi.ResourceOption) (*AuthBackendRole, error) {
	var resource AuthBackendRole
	err := ctx.ReadResource("vault:jwt/authBackendRole:AuthBackendRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackendRole resources.
type authBackendRoleState struct {
	// The list of allowed values for redirectUri during OIDC logins.
	// Required for OIDC roles
	AllowedRedirectUris []string `pulumi:"allowedRedirectUris"`
	// The unique name of the auth backend to configure.
	// Defaults to `jwt`.
	Backend *string `pulumi:"backend"`
	// (For "jwt" roles, at least one of `boundAudiences`, `boundSubject`, `boundClaims`
	// or `tokenBoundCidrs` is required. Optional for "oidc" roles.) List of `aud` claims to match against.
	// Any match is sufficient.
	BoundAudiences []string `pulumi:"boundAudiences"`
	// If set, a map of claims to values to match against.
	// A claim's value must be a string, which may contain one value or multiple
	// comma-separated values, e.g. `"red"` or `"red,green,blue"`.
	BoundClaims map[string]interface{} `pulumi:"boundClaims"`
	// How to interpret values in the claims/values
	// map (`boundClaims`): can be either `string` (exact match) or `glob` (wildcard
	// match). Requires Vault 1.4.0 or above.
	BoundClaimsType *string `pulumi:"boundClaimsType"`
	// If set, requires that the `sub` claim matches
	// this value.
	BoundSubject *string `pulumi:"boundSubject"`
	// If set, a map of claims (keys) to be copied
	// to specified metadata fields (values).
	ClaimMappings map[string]interface{} `pulumi:"claimMappings"`
	// The amount of leeway to add to all claims to account for clock skew, in
	// seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ClockSkewLeeway *int `pulumi:"clockSkewLeeway"`
	// Disable bound claim value parsing. Useful when values contain commas.
	DisableBoundClaimsParsing *bool `pulumi:"disableBoundClaimsParsing"`
	// The amount of leeway to add to expiration (`exp`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ExpirationLeeway *int `pulumi:"expirationLeeway"`
	// The claim to use to uniquely identify
	// the set of groups to which the user belongs; this will be used as the names
	// for the Identity group aliases created due to a successful login. The claim
	// value must be a list of strings.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// Specifies the allowable elapsed time in seconds since the last time
	// the user was actively authenticated with the OIDC provider.
	MaxAge *int `pulumi:"maxAge"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The amount of leeway to add to not before (`nbf`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	NotBeforeLeeway *int `pulumi:"notBeforeLeeway"`
	// If set, a list of OIDC scopes to be used with an OIDC role.
	// The standard scope "openid" is automatically included and need not be specified.
	OidcScopes []string `pulumi:"oidcScopes"`
	// The name of the role.
	RoleName *string `pulumi:"roleName"`
	// Type of role, either "oidc" (default) or "jwt".
	RoleType *string `pulumi:"roleType"`
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType *string `pulumi:"tokenType"`
	// The claim to use to uniquely identify
	// the user; this will be used as the name for the Identity entity alias created
	// due to a successful login.
	UserClaim *string `pulumi:"userClaim"`
	// Specifies if the `userClaim` value uses
	// [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
	// syntax for referencing claims. By default, the `userClaim` value will not use JSON pointer.
	// Requires Vault 1.11+.
	UserClaimJsonPointer *bool `pulumi:"userClaimJsonPointer"`
	// Log received OIDC tokens and claims when debug-level
	// logging is active. Not recommended in production since sensitive information may be present
	// in OIDC responses.
	VerboseOidcLogging *bool `pulumi:"verboseOidcLogging"`
}

type AuthBackendRoleState struct {
	// The list of allowed values for redirectUri during OIDC logins.
	// Required for OIDC roles
	AllowedRedirectUris pulumi.StringArrayInput
	// The unique name of the auth backend to configure.
	// Defaults to `jwt`.
	Backend pulumi.StringPtrInput
	// (For "jwt" roles, at least one of `boundAudiences`, `boundSubject`, `boundClaims`
	// or `tokenBoundCidrs` is required. Optional for "oidc" roles.) List of `aud` claims to match against.
	// Any match is sufficient.
	BoundAudiences pulumi.StringArrayInput
	// If set, a map of claims to values to match against.
	// A claim's value must be a string, which may contain one value or multiple
	// comma-separated values, e.g. `"red"` or `"red,green,blue"`.
	BoundClaims pulumi.MapInput
	// How to interpret values in the claims/values
	// map (`boundClaims`): can be either `string` (exact match) or `glob` (wildcard
	// match). Requires Vault 1.4.0 or above.
	BoundClaimsType pulumi.StringPtrInput
	// If set, requires that the `sub` claim matches
	// this value.
	BoundSubject pulumi.StringPtrInput
	// If set, a map of claims (keys) to be copied
	// to specified metadata fields (values).
	ClaimMappings pulumi.MapInput
	// The amount of leeway to add to all claims to account for clock skew, in
	// seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ClockSkewLeeway pulumi.IntPtrInput
	// Disable bound claim value parsing. Useful when values contain commas.
	DisableBoundClaimsParsing pulumi.BoolPtrInput
	// The amount of leeway to add to expiration (`exp`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ExpirationLeeway pulumi.IntPtrInput
	// The claim to use to uniquely identify
	// the set of groups to which the user belongs; this will be used as the names
	// for the Identity group aliases created due to a successful login. The claim
	// value must be a list of strings.
	GroupsClaim pulumi.StringPtrInput
	// Specifies the allowable elapsed time in seconds since the last time
	// the user was actively authenticated with the OIDC provider.
	MaxAge pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The amount of leeway to add to not before (`nbf`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	NotBeforeLeeway pulumi.IntPtrInput
	// If set, a list of OIDC scopes to be used with an OIDC role.
	// The standard scope "openid" is automatically included and need not be specified.
	OidcScopes pulumi.StringArrayInput
	// The name of the role.
	RoleName pulumi.StringPtrInput
	// Type of role, either "oidc" (default) or "jwt".
	RoleType pulumi.StringPtrInput
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs pulumi.StringArrayInput
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl pulumi.IntPtrInput
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	TokenNumUses pulumi.IntPtrInput
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod pulumi.IntPtrInput
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies pulumi.StringArrayInput
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl pulumi.IntPtrInput
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType pulumi.StringPtrInput
	// The claim to use to uniquely identify
	// the user; this will be used as the name for the Identity entity alias created
	// due to a successful login.
	UserClaim pulumi.StringPtrInput
	// Specifies if the `userClaim` value uses
	// [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
	// syntax for referencing claims. By default, the `userClaim` value will not use JSON pointer.
	// Requires Vault 1.11+.
	UserClaimJsonPointer pulumi.BoolPtrInput
	// Log received OIDC tokens and claims when debug-level
	// logging is active. Not recommended in production since sensitive information may be present
	// in OIDC responses.
	VerboseOidcLogging pulumi.BoolPtrInput
}

func (AuthBackendRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendRoleState)(nil)).Elem()
}

type authBackendRoleArgs struct {
	// The list of allowed values for redirectUri during OIDC logins.
	// Required for OIDC roles
	AllowedRedirectUris []string `pulumi:"allowedRedirectUris"`
	// The unique name of the auth backend to configure.
	// Defaults to `jwt`.
	Backend *string `pulumi:"backend"`
	// (For "jwt" roles, at least one of `boundAudiences`, `boundSubject`, `boundClaims`
	// or `tokenBoundCidrs` is required. Optional for "oidc" roles.) List of `aud` claims to match against.
	// Any match is sufficient.
	BoundAudiences []string `pulumi:"boundAudiences"`
	// If set, a map of claims to values to match against.
	// A claim's value must be a string, which may contain one value or multiple
	// comma-separated values, e.g. `"red"` or `"red,green,blue"`.
	BoundClaims map[string]interface{} `pulumi:"boundClaims"`
	// How to interpret values in the claims/values
	// map (`boundClaims`): can be either `string` (exact match) or `glob` (wildcard
	// match). Requires Vault 1.4.0 or above.
	BoundClaimsType *string `pulumi:"boundClaimsType"`
	// If set, requires that the `sub` claim matches
	// this value.
	BoundSubject *string `pulumi:"boundSubject"`
	// If set, a map of claims (keys) to be copied
	// to specified metadata fields (values).
	ClaimMappings map[string]interface{} `pulumi:"claimMappings"`
	// The amount of leeway to add to all claims to account for clock skew, in
	// seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ClockSkewLeeway *int `pulumi:"clockSkewLeeway"`
	// Disable bound claim value parsing. Useful when values contain commas.
	DisableBoundClaimsParsing *bool `pulumi:"disableBoundClaimsParsing"`
	// The amount of leeway to add to expiration (`exp`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ExpirationLeeway *int `pulumi:"expirationLeeway"`
	// The claim to use to uniquely identify
	// the set of groups to which the user belongs; this will be used as the names
	// for the Identity group aliases created due to a successful login. The claim
	// value must be a list of strings.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// Specifies the allowable elapsed time in seconds since the last time
	// the user was actively authenticated with the OIDC provider.
	MaxAge *int `pulumi:"maxAge"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The amount of leeway to add to not before (`nbf`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	NotBeforeLeeway *int `pulumi:"notBeforeLeeway"`
	// If set, a list of OIDC scopes to be used with an OIDC role.
	// The standard scope "openid" is automatically included and need not be specified.
	OidcScopes []string `pulumi:"oidcScopes"`
	// The name of the role.
	RoleName string `pulumi:"roleName"`
	// Type of role, either "oidc" (default) or "jwt".
	RoleType *string `pulumi:"roleType"`
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType *string `pulumi:"tokenType"`
	// The claim to use to uniquely identify
	// the user; this will be used as the name for the Identity entity alias created
	// due to a successful login.
	UserClaim string `pulumi:"userClaim"`
	// Specifies if the `userClaim` value uses
	// [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
	// syntax for referencing claims. By default, the `userClaim` value will not use JSON pointer.
	// Requires Vault 1.11+.
	UserClaimJsonPointer *bool `pulumi:"userClaimJsonPointer"`
	// Log received OIDC tokens and claims when debug-level
	// logging is active. Not recommended in production since sensitive information may be present
	// in OIDC responses.
	VerboseOidcLogging *bool `pulumi:"verboseOidcLogging"`
}

// The set of arguments for constructing a AuthBackendRole resource.
type AuthBackendRoleArgs struct {
	// The list of allowed values for redirectUri during OIDC logins.
	// Required for OIDC roles
	AllowedRedirectUris pulumi.StringArrayInput
	// The unique name of the auth backend to configure.
	// Defaults to `jwt`.
	Backend pulumi.StringPtrInput
	// (For "jwt" roles, at least one of `boundAudiences`, `boundSubject`, `boundClaims`
	// or `tokenBoundCidrs` is required. Optional for "oidc" roles.) List of `aud` claims to match against.
	// Any match is sufficient.
	BoundAudiences pulumi.StringArrayInput
	// If set, a map of claims to values to match against.
	// A claim's value must be a string, which may contain one value or multiple
	// comma-separated values, e.g. `"red"` or `"red,green,blue"`.
	BoundClaims pulumi.MapInput
	// How to interpret values in the claims/values
	// map (`boundClaims`): can be either `string` (exact match) or `glob` (wildcard
	// match). Requires Vault 1.4.0 or above.
	BoundClaimsType pulumi.StringPtrInput
	// If set, requires that the `sub` claim matches
	// this value.
	BoundSubject pulumi.StringPtrInput
	// If set, a map of claims (keys) to be copied
	// to specified metadata fields (values).
	ClaimMappings pulumi.MapInput
	// The amount of leeway to add to all claims to account for clock skew, in
	// seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ClockSkewLeeway pulumi.IntPtrInput
	// Disable bound claim value parsing. Useful when values contain commas.
	DisableBoundClaimsParsing pulumi.BoolPtrInput
	// The amount of leeway to add to expiration (`exp`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	ExpirationLeeway pulumi.IntPtrInput
	// The claim to use to uniquely identify
	// the set of groups to which the user belongs; this will be used as the names
	// for the Identity group aliases created due to a successful login. The claim
	// value must be a list of strings.
	GroupsClaim pulumi.StringPtrInput
	// Specifies the allowable elapsed time in seconds since the last time
	// the user was actively authenticated with the OIDC provider.
	MaxAge pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The amount of leeway to add to not before (`nbf`) claims to account for
	// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
	// Only applicable with "jwt" roles.
	NotBeforeLeeway pulumi.IntPtrInput
	// If set, a list of OIDC scopes to be used with an OIDC role.
	// The standard scope "openid" is automatically included and need not be specified.
	OidcScopes pulumi.StringArrayInput
	// The name of the role.
	RoleName pulumi.StringInput
	// Type of role, either "oidc" (default) or "jwt".
	RoleType pulumi.StringPtrInput
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs pulumi.StringArrayInput
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl pulumi.IntPtrInput
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	TokenNumUses pulumi.IntPtrInput
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod pulumi.IntPtrInput
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies pulumi.StringArrayInput
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl pulumi.IntPtrInput
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType pulumi.StringPtrInput
	// The claim to use to uniquely identify
	// the user; this will be used as the name for the Identity entity alias created
	// due to a successful login.
	UserClaim pulumi.StringInput
	// Specifies if the `userClaim` value uses
	// [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
	// syntax for referencing claims. By default, the `userClaim` value will not use JSON pointer.
	// Requires Vault 1.11+.
	UserClaimJsonPointer pulumi.BoolPtrInput
	// Log received OIDC tokens and claims when debug-level
	// logging is active. Not recommended in production since sensitive information may be present
	// in OIDC responses.
	VerboseOidcLogging pulumi.BoolPtrInput
}

func (AuthBackendRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendRoleArgs)(nil)).Elem()
}

type AuthBackendRoleInput interface {
	pulumi.Input

	ToAuthBackendRoleOutput() AuthBackendRoleOutput
	ToAuthBackendRoleOutputWithContext(ctx context.Context) AuthBackendRoleOutput
}

func (*AuthBackendRole) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendRole)(nil)).Elem()
}

func (i *AuthBackendRole) ToAuthBackendRoleOutput() AuthBackendRoleOutput {
	return i.ToAuthBackendRoleOutputWithContext(context.Background())
}

func (i *AuthBackendRole) ToAuthBackendRoleOutputWithContext(ctx context.Context) AuthBackendRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendRoleOutput)
}

// AuthBackendRoleArrayInput is an input type that accepts AuthBackendRoleArray and AuthBackendRoleArrayOutput values.
// You can construct a concrete instance of `AuthBackendRoleArrayInput` via:
//
//	AuthBackendRoleArray{ AuthBackendRoleArgs{...} }
type AuthBackendRoleArrayInput interface {
	pulumi.Input

	ToAuthBackendRoleArrayOutput() AuthBackendRoleArrayOutput
	ToAuthBackendRoleArrayOutputWithContext(context.Context) AuthBackendRoleArrayOutput
}

type AuthBackendRoleArray []AuthBackendRoleInput

func (AuthBackendRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackendRole)(nil)).Elem()
}

func (i AuthBackendRoleArray) ToAuthBackendRoleArrayOutput() AuthBackendRoleArrayOutput {
	return i.ToAuthBackendRoleArrayOutputWithContext(context.Background())
}

func (i AuthBackendRoleArray) ToAuthBackendRoleArrayOutputWithContext(ctx context.Context) AuthBackendRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendRoleArrayOutput)
}

// AuthBackendRoleMapInput is an input type that accepts AuthBackendRoleMap and AuthBackendRoleMapOutput values.
// You can construct a concrete instance of `AuthBackendRoleMapInput` via:
//
//	AuthBackendRoleMap{ "key": AuthBackendRoleArgs{...} }
type AuthBackendRoleMapInput interface {
	pulumi.Input

	ToAuthBackendRoleMapOutput() AuthBackendRoleMapOutput
	ToAuthBackendRoleMapOutputWithContext(context.Context) AuthBackendRoleMapOutput
}

type AuthBackendRoleMap map[string]AuthBackendRoleInput

func (AuthBackendRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackendRole)(nil)).Elem()
}

func (i AuthBackendRoleMap) ToAuthBackendRoleMapOutput() AuthBackendRoleMapOutput {
	return i.ToAuthBackendRoleMapOutputWithContext(context.Background())
}

func (i AuthBackendRoleMap) ToAuthBackendRoleMapOutputWithContext(ctx context.Context) AuthBackendRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendRoleMapOutput)
}

type AuthBackendRoleOutput struct{ *pulumi.OutputState }

func (AuthBackendRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendRole)(nil)).Elem()
}

func (o AuthBackendRoleOutput) ToAuthBackendRoleOutput() AuthBackendRoleOutput {
	return o
}

func (o AuthBackendRoleOutput) ToAuthBackendRoleOutputWithContext(ctx context.Context) AuthBackendRoleOutput {
	return o
}

// The list of allowed values for redirectUri during OIDC logins.
// Required for OIDC roles
func (o AuthBackendRoleOutput) AllowedRedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringArrayOutput { return v.AllowedRedirectUris }).(pulumi.StringArrayOutput)
}

// The unique name of the auth backend to configure.
// Defaults to `jwt`.
func (o AuthBackendRoleOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringPtrOutput { return v.Backend }).(pulumi.StringPtrOutput)
}

// (For "jwt" roles, at least one of `boundAudiences`, `boundSubject`, `boundClaims`
// or `tokenBoundCidrs` is required. Optional for "oidc" roles.) List of `aud` claims to match against.
// Any match is sufficient.
func (o AuthBackendRoleOutput) BoundAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringArrayOutput { return v.BoundAudiences }).(pulumi.StringArrayOutput)
}

// If set, a map of claims to values to match against.
// A claim's value must be a string, which may contain one value or multiple
// comma-separated values, e.g. `"red"` or `"red,green,blue"`.
func (o AuthBackendRoleOutput) BoundClaims() pulumi.MapOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.MapOutput { return v.BoundClaims }).(pulumi.MapOutput)
}

// How to interpret values in the claims/values
// map (`boundClaims`): can be either `string` (exact match) or `glob` (wildcard
// match). Requires Vault 1.4.0 or above.
func (o AuthBackendRoleOutput) BoundClaimsType() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringOutput { return v.BoundClaimsType }).(pulumi.StringOutput)
}

// If set, requires that the `sub` claim matches
// this value.
func (o AuthBackendRoleOutput) BoundSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringPtrOutput { return v.BoundSubject }).(pulumi.StringPtrOutput)
}

// If set, a map of claims (keys) to be copied
// to specified metadata fields (values).
func (o AuthBackendRoleOutput) ClaimMappings() pulumi.MapOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.MapOutput { return v.ClaimMappings }).(pulumi.MapOutput)
}

// The amount of leeway to add to all claims to account for clock skew, in
// seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
// Only applicable with "jwt" roles.
func (o AuthBackendRoleOutput) ClockSkewLeeway() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.ClockSkewLeeway }).(pulumi.IntPtrOutput)
}

// Disable bound claim value parsing. Useful when values contain commas.
func (o AuthBackendRoleOutput) DisableBoundClaimsParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.BoolPtrOutput { return v.DisableBoundClaimsParsing }).(pulumi.BoolPtrOutput)
}

// The amount of leeway to add to expiration (`exp`) claims to account for
// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
// Only applicable with "jwt" roles.
func (o AuthBackendRoleOutput) ExpirationLeeway() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.ExpirationLeeway }).(pulumi.IntPtrOutput)
}

// The claim to use to uniquely identify
// the set of groups to which the user belongs; this will be used as the names
// for the Identity group aliases created due to a successful login. The claim
// value must be a list of strings.
func (o AuthBackendRoleOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringPtrOutput { return v.GroupsClaim }).(pulumi.StringPtrOutput)
}

// Specifies the allowable elapsed time in seconds since the last time
// the user was actively authenticated with the OIDC provider.
func (o AuthBackendRoleOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.MaxAge }).(pulumi.IntPtrOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
// *Available only for Vault Enterprise*.
func (o AuthBackendRoleOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The amount of leeway to add to not before (`nbf`) claims to account for
// clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
// Only applicable with "jwt" roles.
func (o AuthBackendRoleOutput) NotBeforeLeeway() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.NotBeforeLeeway }).(pulumi.IntPtrOutput)
}

// If set, a list of OIDC scopes to be used with an OIDC role.
// The standard scope "openid" is automatically included and need not be specified.
func (o AuthBackendRoleOutput) OidcScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringArrayOutput { return v.OidcScopes }).(pulumi.StringArrayOutput)
}

// The name of the role.
func (o AuthBackendRoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// Type of role, either "oidc" (default) or "jwt".
func (o AuthBackendRoleOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringOutput { return v.RoleType }).(pulumi.StringOutput)
}

// List of CIDR blocks; if set, specifies blocks of IP
// addresses which can authenticate successfully, and ties the resulting token to these blocks
// as well.
func (o AuthBackendRoleOutput) TokenBoundCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringArrayOutput { return v.TokenBoundCidrs }).(pulumi.StringArrayOutput)
}

// If set, will encode an
// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
// `tokenMaxTtl` would otherwise allow a renewal.
func (o AuthBackendRoleOutput) TokenExplicitMaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.TokenExplicitMaxTtl }).(pulumi.IntPtrOutput)
}

// The maximum lifetime for generated tokens in number of seconds.
// Its current value will be referenced at renewal time.
func (o AuthBackendRoleOutput) TokenMaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.TokenMaxTtl }).(pulumi.IntPtrOutput)
}

// If set, the default policy will not be set on
// generated tokens; otherwise it will be added to the policies set in token_policies.
func (o AuthBackendRoleOutput) TokenNoDefaultPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.BoolPtrOutput { return v.TokenNoDefaultPolicy }).(pulumi.BoolPtrOutput)
}

// The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
// of times a generated token may be used (within its lifetime); 0 means unlimited.
func (o AuthBackendRoleOutput) TokenNumUses() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.TokenNumUses }).(pulumi.IntPtrOutput)
}

// If set, indicates that the
// token generated using this role should never expire. The token should be renewed within the
// duration specified by this value. At each renewal, the token's TTL will be set to the
// value of this field. Specified in seconds.
func (o AuthBackendRoleOutput) TokenPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.TokenPeriod }).(pulumi.IntPtrOutput)
}

// List of policies to encode onto generated tokens. Depending
// on the auth method, this list may be supplemented by user/group/other values.
func (o AuthBackendRoleOutput) TokenPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringArrayOutput { return v.TokenPolicies }).(pulumi.StringArrayOutput)
}

// The incremental lifetime for generated tokens in number of seconds.
// Its current value will be referenced at renewal time.
func (o AuthBackendRoleOutput) TokenTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.IntPtrOutput { return v.TokenTtl }).(pulumi.IntPtrOutput)
}

// The type of token that should be generated. Can be `service`,
// `batch`, or `default` to use the mount's tuned default (which unless changed will be
// `service` tokens). For token store roles, there are two additional possibilities:
// `default-service` and `default-batch` which specify the type to return unless the client
// requests a different type at generation time.
func (o AuthBackendRoleOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringPtrOutput { return v.TokenType }).(pulumi.StringPtrOutput)
}

// The claim to use to uniquely identify
// the user; this will be used as the name for the Identity entity alias created
// due to a successful login.
func (o AuthBackendRoleOutput) UserClaim() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.StringOutput { return v.UserClaim }).(pulumi.StringOutput)
}

// Specifies if the `userClaim` value uses
// [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
// syntax for referencing claims. By default, the `userClaim` value will not use JSON pointer.
// Requires Vault 1.11+.
func (o AuthBackendRoleOutput) UserClaimJsonPointer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.BoolPtrOutput { return v.UserClaimJsonPointer }).(pulumi.BoolPtrOutput)
}

// Log received OIDC tokens and claims when debug-level
// logging is active. Not recommended in production since sensitive information may be present
// in OIDC responses.
func (o AuthBackendRoleOutput) VerboseOidcLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackendRole) pulumi.BoolPtrOutput { return v.VerboseOidcLogging }).(pulumi.BoolPtrOutput)
}

type AuthBackendRoleArrayOutput struct{ *pulumi.OutputState }

func (AuthBackendRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackendRole)(nil)).Elem()
}

func (o AuthBackendRoleArrayOutput) ToAuthBackendRoleArrayOutput() AuthBackendRoleArrayOutput {
	return o
}

func (o AuthBackendRoleArrayOutput) ToAuthBackendRoleArrayOutputWithContext(ctx context.Context) AuthBackendRoleArrayOutput {
	return o
}

func (o AuthBackendRoleArrayOutput) Index(i pulumi.IntInput) AuthBackendRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthBackendRole {
		return vs[0].([]*AuthBackendRole)[vs[1].(int)]
	}).(AuthBackendRoleOutput)
}

type AuthBackendRoleMapOutput struct{ *pulumi.OutputState }

func (AuthBackendRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackendRole)(nil)).Elem()
}

func (o AuthBackendRoleMapOutput) ToAuthBackendRoleMapOutput() AuthBackendRoleMapOutput {
	return o
}

func (o AuthBackendRoleMapOutput) ToAuthBackendRoleMapOutputWithContext(ctx context.Context) AuthBackendRoleMapOutput {
	return o
}

func (o AuthBackendRoleMapOutput) MapIndex(k pulumi.StringInput) AuthBackendRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthBackendRole {
		return vs[0].(map[string]*AuthBackendRole)[vs[1].(string)]
	}).(AuthBackendRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendRoleInput)(nil)).Elem(), &AuthBackendRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendRoleArrayInput)(nil)).Elem(), AuthBackendRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendRoleMapInput)(nil)).Elem(), AuthBackendRoleMap{})
	pulumi.RegisterOutputType(AuthBackendRoleOutput{})
	pulumi.RegisterOutputType(AuthBackendRoleArrayOutput{})
	pulumi.RegisterOutputType(AuthBackendRoleMapOutput{})
}
