// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			db, err := database.NewSecretsMount(ctx, "db", &database.SecretsMountArgs{
//				Path: pulumi.String("db"),
//				Mssqls: database.SecretsMountMssqlArray{
//					&database.SecretsMountMssqlArgs{
//						Name:          pulumi.String("db1"),
//						Username:      pulumi.String("sa"),
//						Password:      pulumi.String("super_secret_1"),
//						ConnectionUrl: pulumi.String("sqlserver://{{username}}:{{password}}@127.0.0.1:1433"),
//						AllowedRoles: pulumi.StringArray{
//							pulumi.String("dev1"),
//						},
//					},
//				},
//				Postgresqls: database.SecretsMountPostgresqlArray{
//					&database.SecretsMountPostgresqlArgs{
//						Name:             pulumi.String("db2"),
//						Username:         pulumi.String("postgres"),
//						Password:         pulumi.String("super_secret_2"),
//						ConnectionUrl:    pulumi.String("postgresql://{{username}}:{{password}}@127.0.0.1:5432/postgres"),
//						VerifyConnection: pulumi.Bool(true),
//						AllowedRoles: pulumi.StringArray{
//							pulumi.String("dev2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = database.NewSecretBackendRole(ctx, "dev1", &database.SecretBackendRoleArgs{
//				Backend: db.Path,
//				DbName: db.Mssqls.ApplyT(func(mssqls []database.SecretsMountMssql) (*string, error) {
//					return &mssqls[0].Name, nil
//				}).(pulumi.StringPtrOutput),
//				CreationStatements: pulumi.StringArray{
//					pulumi.String("CREATE LOGIN [{{name}}] WITH PASSWORD = '{{password}}';"),
//					pulumi.String("CREATE USER [{{name}}] FOR LOGIN [{{name}}];"),
//					pulumi.String("GRANT SELECT ON SCHEMA::dbo TO [{{name}}];"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = database.NewSecretBackendRole(ctx, "dev2", &database.SecretBackendRoleArgs{
//				Backend: db.Path,
//				DbName: db.Postgresqls.ApplyT(func(postgresqls []database.SecretsMountPostgresql) (*string, error) {
//					return &postgresqls[0].Name, nil
//				}).(pulumi.StringPtrOutput),
//				CreationStatements: pulumi.StringArray{
//					pulumi.String("CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';"),
//					pulumi.String("GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"{{name}}\";"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Database secret backend connections can be imported using the `path` e.g.
//
// ```sh
// $ pulumi import vault:database/secretsMount:SecretsMount db db
// ```
type SecretsMount struct {
	pulumi.CustomResourceState

	// Accessor of the mount
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// Set of managed key registry entry names that the mount in question is allowed to access
	//
	// The following arguments are common to all database engines:
	AllowedManagedKeys pulumi.StringArrayOutput `pulumi:"allowedManagedKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacResponseKeys"`
	// A nested block containing configuration options for Cassandra connections.\
	// *See Configuration Options for more info*
	Cassandras SecretsMountCassandraArrayOutput `pulumi:"cassandras"`
	// A nested block containing configuration options for Couchbase connections.\
	// *See Configuration Options for more info*
	Couchbases SecretsMountCouchbaseArrayOutput `pulumi:"couchbases"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntOutput `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A nested block containing configuration options for Elasticsearch connections.\
	// *See Configuration Options for more info*
	Elasticsearches SecretsMountElasticsearchArrayOutput `pulumi:"elasticsearches"`
	// The total number of database secrets engines configured.
	EngineCount pulumi.IntOutput `pulumi:"engineCount"`
	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrOutput `pulumi:"externalEntropyAccess"`
	// A nested block containing configuration options for SAP HanaDB connections.\
	// *See Configuration Options for more info*
	Hanas SecretsMountHanaArrayOutput `pulumi:"hanas"`
	// A nested block containing configuration options for InfluxDB connections.\
	// *See Configuration Options for more info*
	Influxdbs SecretsMountInfluxdbArrayOutput `pulumi:"influxdbs"`
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntOutput `pulumi:"maxLeaseTtlSeconds"`
	// A nested block containing configuration options for MongoDB Atlas connections.\
	// *See Configuration Options for more info*
	Mongodbatlas SecretsMountMongodbatlaArrayOutput `pulumi:"mongodbatlas"`
	// A nested block containing configuration options for MongoDB connections.\
	// *See Configuration Options for more info*
	Mongodbs SecretsMountMongodbArrayOutput `pulumi:"mongodbs"`
	// A nested block containing configuration options for MSSQL connections.\
	// *See Configuration Options for more info*
	Mssqls SecretsMountMssqlArrayOutput `pulumi:"mssqls"`
	// A nested block containing configuration options for Aurora MySQL connections.\
	// *See Configuration Options for more info*
	MysqlAuroras SecretsMountMysqlAuroraArrayOutput `pulumi:"mysqlAuroras"`
	// A nested block containing configuration options for legacy MySQL connections.\
	// *See Configuration Options for more info*
	MysqlLegacies SecretsMountMysqlLegacyArrayOutput `pulumi:"mysqlLegacies"`
	// A nested block containing configuration options for RDS MySQL connections.\
	// *See Configuration Options for more info*
	MysqlRds SecretsMountMysqlRdArrayOutput `pulumi:"mysqlRds"`
	// A nested block containing configuration options for MySQL connections.\
	// *See Configuration Options for more info*
	Mysqls SecretsMountMysqlArrayOutput `pulumi:"mysqls"`
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.MapOutput `pulumi:"options"`
	// A nested block containing configuration options for Oracle connections.\
	// *See Configuration Options for more info*
	Oracles SecretsMountOracleArrayOutput `pulumi:"oracles"`
	// Where the secret backend will be mounted
	Path pulumi.StringOutput `pulumi:"path"`
	// A nested block containing configuration options for PostgreSQL connections.\
	// *See Configuration Options for more info*
	Postgresqls SecretsMountPostgresqlArrayOutput `pulumi:"postgresqls"`
	// A nested block containing configuration options for Redis connections.\
	// *See Configuration Options for more info*
	Redis SecretsMountRediArrayOutput `pulumi:"redis"`
	// A nested block containing configuration options for Redis ElastiCache connections.\
	// *See Configuration Options for more info*
	RedisElasticaches SecretsMountRedisElasticachArrayOutput `pulumi:"redisElasticaches"`
	// A nested block containing configuration options for AWS Redshift connections.\
	// *See Configuration Options for more info*
	Redshifts SecretsMountRedshiftArrayOutput `pulumi:"redshifts"`
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolOutput `pulumi:"sealWrap"`
	// A nested block containing configuration options for Snowflake connections.\
	// *See Configuration Options for more info*
	Snowflakes SecretsMountSnowflakeArrayOutput `pulumi:"snowflakes"`
}

// NewSecretsMount registers a new resource with the given unique name, arguments, and options.
func NewSecretsMount(ctx *pulumi.Context,
	name string, args *SecretsMountArgs, opts ...pulumi.ResourceOption) (*SecretsMount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretsMount
	err := ctx.RegisterResource("vault:database/secretsMount:SecretsMount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretsMount gets an existing SecretsMount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretsMount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretsMountState, opts ...pulumi.ResourceOption) (*SecretsMount, error) {
	var resource SecretsMount
	err := ctx.ReadResource("vault:database/secretsMount:SecretsMount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretsMount resources.
type secretsMountState struct {
	// Accessor of the mount
	Accessor *string `pulumi:"accessor"`
	// Set of managed key registry entry names that the mount in question is allowed to access
	//
	// The following arguments are common to all database engines:
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// A nested block containing configuration options for Cassandra connections.\
	// *See Configuration Options for more info*
	Cassandras []SecretsMountCassandra `pulumi:"cassandras"`
	// A nested block containing configuration options for Couchbase connections.\
	// *See Configuration Options for more info*
	Couchbases []SecretsMountCouchbase `pulumi:"couchbases"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount
	Description *string `pulumi:"description"`
	// A nested block containing configuration options for Elasticsearch connections.\
	// *See Configuration Options for more info*
	Elasticsearches []SecretsMountElasticsearch `pulumi:"elasticsearches"`
	// The total number of database secrets engines configured.
	EngineCount *int `pulumi:"engineCount"`
	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// A nested block containing configuration options for SAP HanaDB connections.\
	// *See Configuration Options for more info*
	Hanas []SecretsMountHana `pulumi:"hanas"`
	// A nested block containing configuration options for InfluxDB connections.\
	// *See Configuration Options for more info*
	Influxdbs []SecretsMountInfluxdb `pulumi:"influxdbs"`
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// A nested block containing configuration options for MongoDB Atlas connections.\
	// *See Configuration Options for more info*
	Mongodbatlas []SecretsMountMongodbatla `pulumi:"mongodbatlas"`
	// A nested block containing configuration options for MongoDB connections.\
	// *See Configuration Options for more info*
	Mongodbs []SecretsMountMongodb `pulumi:"mongodbs"`
	// A nested block containing configuration options for MSSQL connections.\
	// *See Configuration Options for more info*
	Mssqls []SecretsMountMssql `pulumi:"mssqls"`
	// A nested block containing configuration options for Aurora MySQL connections.\
	// *See Configuration Options for more info*
	MysqlAuroras []SecretsMountMysqlAurora `pulumi:"mysqlAuroras"`
	// A nested block containing configuration options for legacy MySQL connections.\
	// *See Configuration Options for more info*
	MysqlLegacies []SecretsMountMysqlLegacy `pulumi:"mysqlLegacies"`
	// A nested block containing configuration options for RDS MySQL connections.\
	// *See Configuration Options for more info*
	MysqlRds []SecretsMountMysqlRd `pulumi:"mysqlRds"`
	// A nested block containing configuration options for MySQL connections.\
	// *See Configuration Options for more info*
	Mysqls []SecretsMountMysql `pulumi:"mysqls"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]interface{} `pulumi:"options"`
	// A nested block containing configuration options for Oracle connections.\
	// *See Configuration Options for more info*
	Oracles []SecretsMountOracle `pulumi:"oracles"`
	// Where the secret backend will be mounted
	Path *string `pulumi:"path"`
	// A nested block containing configuration options for PostgreSQL connections.\
	// *See Configuration Options for more info*
	Postgresqls []SecretsMountPostgresql `pulumi:"postgresqls"`
	// A nested block containing configuration options for Redis connections.\
	// *See Configuration Options for more info*
	Redis []SecretsMountRedi `pulumi:"redis"`
	// A nested block containing configuration options for Redis ElastiCache connections.\
	// *See Configuration Options for more info*
	RedisElasticaches []SecretsMountRedisElasticach `pulumi:"redisElasticaches"`
	// A nested block containing configuration options for AWS Redshift connections.\
	// *See Configuration Options for more info*
	Redshifts []SecretsMountRedshift `pulumi:"redshifts"`
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// A nested block containing configuration options for Snowflake connections.\
	// *See Configuration Options for more info*
	Snowflakes []SecretsMountSnowflake `pulumi:"snowflakes"`
}

type SecretsMountState struct {
	// Accessor of the mount
	Accessor pulumi.StringPtrInput
	// Set of managed key registry entry names that the mount in question is allowed to access
	//
	// The following arguments are common to all database engines:
	AllowedManagedKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// A nested block containing configuration options for Cassandra connections.\
	// *See Configuration Options for more info*
	Cassandras SecretsMountCassandraArrayInput
	// A nested block containing configuration options for Couchbase connections.\
	// *See Configuration Options for more info*
	Couchbases SecretsMountCouchbaseArrayInput
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Human-friendly description of the mount
	Description pulumi.StringPtrInput
	// A nested block containing configuration options for Elasticsearch connections.\
	// *See Configuration Options for more info*
	Elasticsearches SecretsMountElasticsearchArrayInput
	// The total number of database secrets engines configured.
	EngineCount pulumi.IntPtrInput
	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// A nested block containing configuration options for SAP HanaDB connections.\
	// *See Configuration Options for more info*
	Hanas SecretsMountHanaArrayInput
	// A nested block containing configuration options for InfluxDB connections.\
	// *See Configuration Options for more info*
	Influxdbs SecretsMountInfluxdbArrayInput
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// A nested block containing configuration options for MongoDB Atlas connections.\
	// *See Configuration Options for more info*
	Mongodbatlas SecretsMountMongodbatlaArrayInput
	// A nested block containing configuration options for MongoDB connections.\
	// *See Configuration Options for more info*
	Mongodbs SecretsMountMongodbArrayInput
	// A nested block containing configuration options for MSSQL connections.\
	// *See Configuration Options for more info*
	Mssqls SecretsMountMssqlArrayInput
	// A nested block containing configuration options for Aurora MySQL connections.\
	// *See Configuration Options for more info*
	MysqlAuroras SecretsMountMysqlAuroraArrayInput
	// A nested block containing configuration options for legacy MySQL connections.\
	// *See Configuration Options for more info*
	MysqlLegacies SecretsMountMysqlLegacyArrayInput
	// A nested block containing configuration options for RDS MySQL connections.\
	// *See Configuration Options for more info*
	MysqlRds SecretsMountMysqlRdArrayInput
	// A nested block containing configuration options for MySQL connections.\
	// *See Configuration Options for more info*
	Mysqls SecretsMountMysqlArrayInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.MapInput
	// A nested block containing configuration options for Oracle connections.\
	// *See Configuration Options for more info*
	Oracles SecretsMountOracleArrayInput
	// Where the secret backend will be mounted
	Path pulumi.StringPtrInput
	// A nested block containing configuration options for PostgreSQL connections.\
	// *See Configuration Options for more info*
	Postgresqls SecretsMountPostgresqlArrayInput
	// A nested block containing configuration options for Redis connections.\
	// *See Configuration Options for more info*
	Redis SecretsMountRediArrayInput
	// A nested block containing configuration options for Redis ElastiCache connections.\
	// *See Configuration Options for more info*
	RedisElasticaches SecretsMountRedisElasticachArrayInput
	// A nested block containing configuration options for AWS Redshift connections.\
	// *See Configuration Options for more info*
	Redshifts SecretsMountRedshiftArrayInput
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// A nested block containing configuration options for Snowflake connections.\
	// *See Configuration Options for more info*
	Snowflakes SecretsMountSnowflakeArrayInput
}

func (SecretsMountState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsMountState)(nil)).Elem()
}

type secretsMountArgs struct {
	// Set of managed key registry entry names that the mount in question is allowed to access
	//
	// The following arguments are common to all database engines:
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// A nested block containing configuration options for Cassandra connections.\
	// *See Configuration Options for more info*
	Cassandras []SecretsMountCassandra `pulumi:"cassandras"`
	// A nested block containing configuration options for Couchbase connections.\
	// *See Configuration Options for more info*
	Couchbases []SecretsMountCouchbase `pulumi:"couchbases"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount
	Description *string `pulumi:"description"`
	// A nested block containing configuration options for Elasticsearch connections.\
	// *See Configuration Options for more info*
	Elasticsearches []SecretsMountElasticsearch `pulumi:"elasticsearches"`
	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// A nested block containing configuration options for SAP HanaDB connections.\
	// *See Configuration Options for more info*
	Hanas []SecretsMountHana `pulumi:"hanas"`
	// A nested block containing configuration options for InfluxDB connections.\
	// *See Configuration Options for more info*
	Influxdbs []SecretsMountInfluxdb `pulumi:"influxdbs"`
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// A nested block containing configuration options for MongoDB Atlas connections.\
	// *See Configuration Options for more info*
	Mongodbatlas []SecretsMountMongodbatla `pulumi:"mongodbatlas"`
	// A nested block containing configuration options for MongoDB connections.\
	// *See Configuration Options for more info*
	Mongodbs []SecretsMountMongodb `pulumi:"mongodbs"`
	// A nested block containing configuration options for MSSQL connections.\
	// *See Configuration Options for more info*
	Mssqls []SecretsMountMssql `pulumi:"mssqls"`
	// A nested block containing configuration options for Aurora MySQL connections.\
	// *See Configuration Options for more info*
	MysqlAuroras []SecretsMountMysqlAurora `pulumi:"mysqlAuroras"`
	// A nested block containing configuration options for legacy MySQL connections.\
	// *See Configuration Options for more info*
	MysqlLegacies []SecretsMountMysqlLegacy `pulumi:"mysqlLegacies"`
	// A nested block containing configuration options for RDS MySQL connections.\
	// *See Configuration Options for more info*
	MysqlRds []SecretsMountMysqlRd `pulumi:"mysqlRds"`
	// A nested block containing configuration options for MySQL connections.\
	// *See Configuration Options for more info*
	Mysqls []SecretsMountMysql `pulumi:"mysqls"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]interface{} `pulumi:"options"`
	// A nested block containing configuration options for Oracle connections.\
	// *See Configuration Options for more info*
	Oracles []SecretsMountOracle `pulumi:"oracles"`
	// Where the secret backend will be mounted
	Path string `pulumi:"path"`
	// A nested block containing configuration options for PostgreSQL connections.\
	// *See Configuration Options for more info*
	Postgresqls []SecretsMountPostgresql `pulumi:"postgresqls"`
	// A nested block containing configuration options for Redis connections.\
	// *See Configuration Options for more info*
	Redis []SecretsMountRedi `pulumi:"redis"`
	// A nested block containing configuration options for Redis ElastiCache connections.\
	// *See Configuration Options for more info*
	RedisElasticaches []SecretsMountRedisElasticach `pulumi:"redisElasticaches"`
	// A nested block containing configuration options for AWS Redshift connections.\
	// *See Configuration Options for more info*
	Redshifts []SecretsMountRedshift `pulumi:"redshifts"`
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// A nested block containing configuration options for Snowflake connections.\
	// *See Configuration Options for more info*
	Snowflakes []SecretsMountSnowflake `pulumi:"snowflakes"`
}

// The set of arguments for constructing a SecretsMount resource.
type SecretsMountArgs struct {
	// Set of managed key registry entry names that the mount in question is allowed to access
	//
	// The following arguments are common to all database engines:
	AllowedManagedKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// A nested block containing configuration options for Cassandra connections.\
	// *See Configuration Options for more info*
	Cassandras SecretsMountCassandraArrayInput
	// A nested block containing configuration options for Couchbase connections.\
	// *See Configuration Options for more info*
	Couchbases SecretsMountCouchbaseArrayInput
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Human-friendly description of the mount
	Description pulumi.StringPtrInput
	// A nested block containing configuration options for Elasticsearch connections.\
	// *See Configuration Options for more info*
	Elasticsearches SecretsMountElasticsearchArrayInput
	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// A nested block containing configuration options for SAP HanaDB connections.\
	// *See Configuration Options for more info*
	Hanas SecretsMountHanaArrayInput
	// A nested block containing configuration options for InfluxDB connections.\
	// *See Configuration Options for more info*
	Influxdbs SecretsMountInfluxdbArrayInput
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// A nested block containing configuration options for MongoDB Atlas connections.\
	// *See Configuration Options for more info*
	Mongodbatlas SecretsMountMongodbatlaArrayInput
	// A nested block containing configuration options for MongoDB connections.\
	// *See Configuration Options for more info*
	Mongodbs SecretsMountMongodbArrayInput
	// A nested block containing configuration options for MSSQL connections.\
	// *See Configuration Options for more info*
	Mssqls SecretsMountMssqlArrayInput
	// A nested block containing configuration options for Aurora MySQL connections.\
	// *See Configuration Options for more info*
	MysqlAuroras SecretsMountMysqlAuroraArrayInput
	// A nested block containing configuration options for legacy MySQL connections.\
	// *See Configuration Options for more info*
	MysqlLegacies SecretsMountMysqlLegacyArrayInput
	// A nested block containing configuration options for RDS MySQL connections.\
	// *See Configuration Options for more info*
	MysqlRds SecretsMountMysqlRdArrayInput
	// A nested block containing configuration options for MySQL connections.\
	// *See Configuration Options for more info*
	Mysqls SecretsMountMysqlArrayInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.MapInput
	// A nested block containing configuration options for Oracle connections.\
	// *See Configuration Options for more info*
	Oracles SecretsMountOracleArrayInput
	// Where the secret backend will be mounted
	Path pulumi.StringInput
	// A nested block containing configuration options for PostgreSQL connections.\
	// *See Configuration Options for more info*
	Postgresqls SecretsMountPostgresqlArrayInput
	// A nested block containing configuration options for Redis connections.\
	// *See Configuration Options for more info*
	Redis SecretsMountRediArrayInput
	// A nested block containing configuration options for Redis ElastiCache connections.\
	// *See Configuration Options for more info*
	RedisElasticaches SecretsMountRedisElasticachArrayInput
	// A nested block containing configuration options for AWS Redshift connections.\
	// *See Configuration Options for more info*
	Redshifts SecretsMountRedshiftArrayInput
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// A nested block containing configuration options for Snowflake connections.\
	// *See Configuration Options for more info*
	Snowflakes SecretsMountSnowflakeArrayInput
}

func (SecretsMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsMountArgs)(nil)).Elem()
}

type SecretsMountInput interface {
	pulumi.Input

	ToSecretsMountOutput() SecretsMountOutput
	ToSecretsMountOutputWithContext(ctx context.Context) SecretsMountOutput
}

func (*SecretsMount) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsMount)(nil)).Elem()
}

func (i *SecretsMount) ToSecretsMountOutput() SecretsMountOutput {
	return i.ToSecretsMountOutputWithContext(context.Background())
}

func (i *SecretsMount) ToSecretsMountOutputWithContext(ctx context.Context) SecretsMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountOutput)
}

// SecretsMountArrayInput is an input type that accepts SecretsMountArray and SecretsMountArrayOutput values.
// You can construct a concrete instance of `SecretsMountArrayInput` via:
//
//	SecretsMountArray{ SecretsMountArgs{...} }
type SecretsMountArrayInput interface {
	pulumi.Input

	ToSecretsMountArrayOutput() SecretsMountArrayOutput
	ToSecretsMountArrayOutputWithContext(context.Context) SecretsMountArrayOutput
}

type SecretsMountArray []SecretsMountInput

func (SecretsMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretsMount)(nil)).Elem()
}

func (i SecretsMountArray) ToSecretsMountArrayOutput() SecretsMountArrayOutput {
	return i.ToSecretsMountArrayOutputWithContext(context.Background())
}

func (i SecretsMountArray) ToSecretsMountArrayOutputWithContext(ctx context.Context) SecretsMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountArrayOutput)
}

// SecretsMountMapInput is an input type that accepts SecretsMountMap and SecretsMountMapOutput values.
// You can construct a concrete instance of `SecretsMountMapInput` via:
//
//	SecretsMountMap{ "key": SecretsMountArgs{...} }
type SecretsMountMapInput interface {
	pulumi.Input

	ToSecretsMountMapOutput() SecretsMountMapOutput
	ToSecretsMountMapOutputWithContext(context.Context) SecretsMountMapOutput
}

type SecretsMountMap map[string]SecretsMountInput

func (SecretsMountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretsMount)(nil)).Elem()
}

func (i SecretsMountMap) ToSecretsMountMapOutput() SecretsMountMapOutput {
	return i.ToSecretsMountMapOutputWithContext(context.Background())
}

func (i SecretsMountMap) ToSecretsMountMapOutputWithContext(ctx context.Context) SecretsMountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMapOutput)
}

type SecretsMountOutput struct{ *pulumi.OutputState }

func (SecretsMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsMount)(nil)).Elem()
}

func (o SecretsMountOutput) ToSecretsMountOutput() SecretsMountOutput {
	return o
}

func (o SecretsMountOutput) ToSecretsMountOutputWithContext(ctx context.Context) SecretsMountOutput {
	return o
}

// Accessor of the mount
func (o SecretsMountOutput) Accessor() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.StringOutput { return v.Accessor }).(pulumi.StringOutput)
}

// Set of managed key registry entry names that the mount in question is allowed to access
//
// The following arguments are common to all database engines:
func (o SecretsMountOutput) AllowedManagedKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.StringArrayOutput { return v.AllowedManagedKeys }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
func (o SecretsMountOutput) AuditNonHmacRequestKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.StringArrayOutput { return v.AuditNonHmacRequestKeys }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
func (o SecretsMountOutput) AuditNonHmacResponseKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.StringArrayOutput { return v.AuditNonHmacResponseKeys }).(pulumi.StringArrayOutput)
}

// A nested block containing configuration options for Cassandra connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Cassandras() SecretsMountCassandraArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountCassandraArrayOutput { return v.Cassandras }).(SecretsMountCassandraArrayOutput)
}

// A nested block containing configuration options for Couchbase connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Couchbases() SecretsMountCouchbaseArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountCouchbaseArrayOutput { return v.Couchbases }).(SecretsMountCouchbaseArrayOutput)
}

// Default lease duration for tokens and secrets in seconds
func (o SecretsMountOutput) DefaultLeaseTtlSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.IntOutput { return v.DefaultLeaseTtlSeconds }).(pulumi.IntOutput)
}

// Human-friendly description of the mount
func (o SecretsMountOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A nested block containing configuration options for Elasticsearch connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Elasticsearches() SecretsMountElasticsearchArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountElasticsearchArrayOutput { return v.Elasticsearches }).(SecretsMountElasticsearchArrayOutput)
}

// The total number of database secrets engines configured.
func (o SecretsMountOutput) EngineCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.IntOutput { return v.EngineCount }).(pulumi.IntOutput)
}

// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
func (o SecretsMountOutput) ExternalEntropyAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.BoolPtrOutput { return v.ExternalEntropyAccess }).(pulumi.BoolPtrOutput)
}

// A nested block containing configuration options for SAP HanaDB connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Hanas() SecretsMountHanaArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountHanaArrayOutput { return v.Hanas }).(SecretsMountHanaArrayOutput)
}

// A nested block containing configuration options for InfluxDB connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Influxdbs() SecretsMountInfluxdbArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountInfluxdbArrayOutput { return v.Influxdbs }).(SecretsMountInfluxdbArrayOutput)
}

// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
func (o SecretsMountOutput) Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.BoolPtrOutput { return v.Local }).(pulumi.BoolPtrOutput)
}

// Maximum possible lease duration for tokens and secrets in seconds
func (o SecretsMountOutput) MaxLeaseTtlSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.IntOutput { return v.MaxLeaseTtlSeconds }).(pulumi.IntOutput)
}

// A nested block containing configuration options for MongoDB Atlas connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Mongodbatlas() SecretsMountMongodbatlaArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountMongodbatlaArrayOutput { return v.Mongodbatlas }).(SecretsMountMongodbatlaArrayOutput)
}

// A nested block containing configuration options for MongoDB connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Mongodbs() SecretsMountMongodbArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountMongodbArrayOutput { return v.Mongodbs }).(SecretsMountMongodbArrayOutput)
}

// A nested block containing configuration options for MSSQL connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Mssqls() SecretsMountMssqlArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountMssqlArrayOutput { return v.Mssqls }).(SecretsMountMssqlArrayOutput)
}

// A nested block containing configuration options for Aurora MySQL connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) MysqlAuroras() SecretsMountMysqlAuroraArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountMysqlAuroraArrayOutput { return v.MysqlAuroras }).(SecretsMountMysqlAuroraArrayOutput)
}

// A nested block containing configuration options for legacy MySQL connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) MysqlLegacies() SecretsMountMysqlLegacyArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountMysqlLegacyArrayOutput { return v.MysqlLegacies }).(SecretsMountMysqlLegacyArrayOutput)
}

// A nested block containing configuration options for RDS MySQL connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) MysqlRds() SecretsMountMysqlRdArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountMysqlRdArrayOutput { return v.MysqlRds }).(SecretsMountMysqlRdArrayOutput)
}

// A nested block containing configuration options for MySQL connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Mysqls() SecretsMountMysqlArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountMysqlArrayOutput { return v.Mysqls }).(SecretsMountMysqlArrayOutput)
}

// Target namespace. (requires Enterprise)
func (o SecretsMountOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies mount type specific options that are passed to the backend
func (o SecretsMountOutput) Options() pulumi.MapOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.MapOutput { return v.Options }).(pulumi.MapOutput)
}

// A nested block containing configuration options for Oracle connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Oracles() SecretsMountOracleArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountOracleArrayOutput { return v.Oracles }).(SecretsMountOracleArrayOutput)
}

// Where the secret backend will be mounted
func (o SecretsMountOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// A nested block containing configuration options for PostgreSQL connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Postgresqls() SecretsMountPostgresqlArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountPostgresqlArrayOutput { return v.Postgresqls }).(SecretsMountPostgresqlArrayOutput)
}

// A nested block containing configuration options for Redis connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Redis() SecretsMountRediArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountRediArrayOutput { return v.Redis }).(SecretsMountRediArrayOutput)
}

// A nested block containing configuration options for Redis ElastiCache connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) RedisElasticaches() SecretsMountRedisElasticachArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountRedisElasticachArrayOutput { return v.RedisElasticaches }).(SecretsMountRedisElasticachArrayOutput)
}

// A nested block containing configuration options for AWS Redshift connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Redshifts() SecretsMountRedshiftArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountRedshiftArrayOutput { return v.Redshifts }).(SecretsMountRedshiftArrayOutput)
}

// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
func (o SecretsMountOutput) SealWrap() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretsMount) pulumi.BoolOutput { return v.SealWrap }).(pulumi.BoolOutput)
}

// A nested block containing configuration options for Snowflake connections.\
// *See Configuration Options for more info*
func (o SecretsMountOutput) Snowflakes() SecretsMountSnowflakeArrayOutput {
	return o.ApplyT(func(v *SecretsMount) SecretsMountSnowflakeArrayOutput { return v.Snowflakes }).(SecretsMountSnowflakeArrayOutput)
}

type SecretsMountArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretsMount)(nil)).Elem()
}

func (o SecretsMountArrayOutput) ToSecretsMountArrayOutput() SecretsMountArrayOutput {
	return o
}

func (o SecretsMountArrayOutput) ToSecretsMountArrayOutputWithContext(ctx context.Context) SecretsMountArrayOutput {
	return o
}

func (o SecretsMountArrayOutput) Index(i pulumi.IntInput) SecretsMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretsMount {
		return vs[0].([]*SecretsMount)[vs[1].(int)]
	}).(SecretsMountOutput)
}

type SecretsMountMapOutput struct{ *pulumi.OutputState }

func (SecretsMountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretsMount)(nil)).Elem()
}

func (o SecretsMountMapOutput) ToSecretsMountMapOutput() SecretsMountMapOutput {
	return o
}

func (o SecretsMountMapOutput) ToSecretsMountMapOutputWithContext(ctx context.Context) SecretsMountMapOutput {
	return o
}

func (o SecretsMountMapOutput) MapIndex(k pulumi.StringInput) SecretsMountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretsMount {
		return vs[0].(map[string]*SecretsMount)[vs[1].(string)]
	}).(SecretsMountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountInput)(nil)).Elem(), &SecretsMount{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountArrayInput)(nil)).Elem(), SecretsMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMapInput)(nil)).Elem(), SecretsMountMap{})
	pulumi.RegisterOutputType(SecretsMountOutput{})
	pulumi.RegisterOutputType(SecretsMountArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMapOutput{})
}
