// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Database secret backend roles can be imported using the `backend`, `/roles/`, and the `name` e.g.
//
// ```sh
//  $ pulumi import vault:database/secretBackendRole:SecretBackendRole example postgres/roles/my-role
// ```
type SecretBackendRole struct {
	pulumi.CustomResourceState

	// The unique name of the Vault mount to configure.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// The database statements to execute when
	// creating a user.
	CreationStatements pulumi.StringArrayOutput `pulumi:"creationStatements"`
	// The unique name of the database connection to use for
	// the role.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// The default number of seconds for leases for this
	// role.
	DefaultTtl pulumi.IntPtrOutput `pulumi:"defaultTtl"`
	// The maximum number of seconds for leases for this
	// role.
	MaxTtl pulumi.IntPtrOutput `pulumi:"maxTtl"`
	// A unique name to give the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The database statements to execute when
	// renewing a user.
	RenewStatements pulumi.StringArrayOutput `pulumi:"renewStatements"`
	// The database statements to execute when
	// revoking a user.
	RevocationStatements pulumi.StringArrayOutput `pulumi:"revocationStatements"`
	// The database statements to execute when
	// rolling back creation due to an error.
	RollbackStatements pulumi.StringArrayOutput `pulumi:"rollbackStatements"`
}

// NewSecretBackendRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendRole(ctx *pulumi.Context,
	name string, args *SecretBackendRoleArgs, opts ...pulumi.ResourceOption) (*SecretBackendRole, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.CreationStatements == nil {
		return nil, errors.New("missing required argument 'CreationStatements'")
	}
	if args == nil || args.DbName == nil {
		return nil, errors.New("missing required argument 'DbName'")
	}
	if args == nil {
		args = &SecretBackendRoleArgs{}
	}
	var resource SecretBackendRole
	err := ctx.RegisterResource("vault:database/secretBackendRole:SecretBackendRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackendRole gets an existing SecretBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendRoleState, opts ...pulumi.ResourceOption) (*SecretBackendRole, error) {
	var resource SecretBackendRole
	err := ctx.ReadResource("vault:database/secretBackendRole:SecretBackendRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackendRole resources.
type secretBackendRoleState struct {
	// The unique name of the Vault mount to configure.
	Backend *string `pulumi:"backend"`
	// The database statements to execute when
	// creating a user.
	CreationStatements []string `pulumi:"creationStatements"`
	// The unique name of the database connection to use for
	// the role.
	DbName *string `pulumi:"dbName"`
	// The default number of seconds for leases for this
	// role.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// The maximum number of seconds for leases for this
	// role.
	MaxTtl *int `pulumi:"maxTtl"`
	// A unique name to give the role.
	Name *string `pulumi:"name"`
	// The database statements to execute when
	// renewing a user.
	RenewStatements []string `pulumi:"renewStatements"`
	// The database statements to execute when
	// revoking a user.
	RevocationStatements []string `pulumi:"revocationStatements"`
	// The database statements to execute when
	// rolling back creation due to an error.
	RollbackStatements []string `pulumi:"rollbackStatements"`
}

type SecretBackendRoleState struct {
	// The unique name of the Vault mount to configure.
	Backend pulumi.StringPtrInput
	// The database statements to execute when
	// creating a user.
	CreationStatements pulumi.StringArrayInput
	// The unique name of the database connection to use for
	// the role.
	DbName pulumi.StringPtrInput
	// The default number of seconds for leases for this
	// role.
	DefaultTtl pulumi.IntPtrInput
	// The maximum number of seconds for leases for this
	// role.
	MaxTtl pulumi.IntPtrInput
	// A unique name to give the role.
	Name pulumi.StringPtrInput
	// The database statements to execute when
	// renewing a user.
	RenewStatements pulumi.StringArrayInput
	// The database statements to execute when
	// revoking a user.
	RevocationStatements pulumi.StringArrayInput
	// The database statements to execute when
	// rolling back creation due to an error.
	RollbackStatements pulumi.StringArrayInput
}

func (SecretBackendRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendRoleState)(nil)).Elem()
}

type secretBackendRoleArgs struct {
	// The unique name of the Vault mount to configure.
	Backend string `pulumi:"backend"`
	// The database statements to execute when
	// creating a user.
	CreationStatements []string `pulumi:"creationStatements"`
	// The unique name of the database connection to use for
	// the role.
	DbName string `pulumi:"dbName"`
	// The default number of seconds for leases for this
	// role.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// The maximum number of seconds for leases for this
	// role.
	MaxTtl *int `pulumi:"maxTtl"`
	// A unique name to give the role.
	Name *string `pulumi:"name"`
	// The database statements to execute when
	// renewing a user.
	RenewStatements []string `pulumi:"renewStatements"`
	// The database statements to execute when
	// revoking a user.
	RevocationStatements []string `pulumi:"revocationStatements"`
	// The database statements to execute when
	// rolling back creation due to an error.
	RollbackStatements []string `pulumi:"rollbackStatements"`
}

// The set of arguments for constructing a SecretBackendRole resource.
type SecretBackendRoleArgs struct {
	// The unique name of the Vault mount to configure.
	Backend pulumi.StringInput
	// The database statements to execute when
	// creating a user.
	CreationStatements pulumi.StringArrayInput
	// The unique name of the database connection to use for
	// the role.
	DbName pulumi.StringInput
	// The default number of seconds for leases for this
	// role.
	DefaultTtl pulumi.IntPtrInput
	// The maximum number of seconds for leases for this
	// role.
	MaxTtl pulumi.IntPtrInput
	// A unique name to give the role.
	Name pulumi.StringPtrInput
	// The database statements to execute when
	// renewing a user.
	RenewStatements pulumi.StringArrayInput
	// The database statements to execute when
	// revoking a user.
	RevocationStatements pulumi.StringArrayInput
	// The database statements to execute when
	// rolling back creation due to an error.
	RollbackStatements pulumi.StringArrayInput
}

func (SecretBackendRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendRoleArgs)(nil)).Elem()
}

type SecretBackendRoleInput interface {
	pulumi.Input

	ToSecretBackendRoleOutput() SecretBackendRoleOutput
	ToSecretBackendRoleOutputWithContext(ctx context.Context) SecretBackendRoleOutput
}

func (SecretBackendRole) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendRole)(nil)).Elem()
}

func (i SecretBackendRole) ToSecretBackendRoleOutput() SecretBackendRoleOutput {
	return i.ToSecretBackendRoleOutputWithContext(context.Background())
}

func (i SecretBackendRole) ToSecretBackendRoleOutputWithContext(ctx context.Context) SecretBackendRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendRoleOutput)
}

type SecretBackendRoleOutput struct {
	*pulumi.OutputState
}

func (SecretBackendRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendRoleOutput)(nil)).Elem()
}

func (o SecretBackendRoleOutput) ToSecretBackendRoleOutput() SecretBackendRoleOutput {
	return o
}

func (o SecretBackendRoleOutput) ToSecretBackendRoleOutputWithContext(ctx context.Context) SecretBackendRoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecretBackendRoleOutput{})
}
