// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a Database Secret Backend static role in Vault. Database secret backend
// static roles can be used to manage 1-to-1 mapping of a Vault Role to a user in a
// database for the database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault"
// 	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault/database"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		db, err := vault.NewMount(ctx, "db", &vault.MountArgs{
// 			Path: pulumi.String("postgres"),
// 			Type: pulumi.String("database"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		postgres, err := database.NewSecretBackendConnection(ctx, "postgres", &database.SecretBackendConnectionArgs{
// 			AllowedRoles: pulumi.StringArray{
// 				pulumi.String("*"),
// 			},
// 			Backend: db.Path,
// 			Postgresql: &database.SecretBackendConnectionPostgresqlArgs{
// 				ConnectionUrl: pulumi.String("postgres://username:password@host:port/database"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = database.NewSecretBackendStaticRole(ctx, "staticRole", &database.SecretBackendStaticRoleArgs{
// 			Backend:        db.Path,
// 			DbName:         postgres.Name,
// 			RotationPeriod: pulumi.Int(3600),
// 			RotationStatements: pulumi.StringArray{
// 				pulumi.String("ALTER USER \"{{name}}\" WITH PASSWORD '{{password}}';"),
// 			},
// 			Username: pulumi.String("example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Database secret backend static roles can be imported using the `backend`, `/static-roles/`, and the `name` e.g.
//
// ```sh
//  $ pulumi import vault:database/secretBackendStaticRole:SecretBackendStaticRole example postgres/static-roles/my-role
// ```
type SecretBackendStaticRole struct {
	pulumi.CustomResourceState

	// The unique name of the Vault mount to configure.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// The unique name of the database connection to use for the static role.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// A unique name to give the static role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod pulumi.IntOutput `pulumi:"rotationPeriod"`
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements pulumi.StringArrayOutput `pulumi:"rotationStatements"`
	// The database username that this static role corresponds to.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewSecretBackendStaticRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendStaticRole(ctx *pulumi.Context,
	name string, args *SecretBackendStaticRoleArgs, opts ...pulumi.ResourceOption) (*SecretBackendStaticRole, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.DbName == nil {
		return nil, errors.New("missing required argument 'DbName'")
	}
	if args == nil || args.RotationPeriod == nil {
		return nil, errors.New("missing required argument 'RotationPeriod'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &SecretBackendStaticRoleArgs{}
	}
	var resource SecretBackendStaticRole
	err := ctx.RegisterResource("vault:database/secretBackendStaticRole:SecretBackendStaticRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackendStaticRole gets an existing SecretBackendStaticRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendStaticRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendStaticRoleState, opts ...pulumi.ResourceOption) (*SecretBackendStaticRole, error) {
	var resource SecretBackendStaticRole
	err := ctx.ReadResource("vault:database/secretBackendStaticRole:SecretBackendStaticRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackendStaticRole resources.
type secretBackendStaticRoleState struct {
	// The unique name of the Vault mount to configure.
	Backend *string `pulumi:"backend"`
	// The unique name of the database connection to use for the static role.
	DbName *string `pulumi:"dbName"`
	// A unique name to give the static role.
	Name *string `pulumi:"name"`
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements []string `pulumi:"rotationStatements"`
	// The database username that this static role corresponds to.
	Username *string `pulumi:"username"`
}

type SecretBackendStaticRoleState struct {
	// The unique name of the Vault mount to configure.
	Backend pulumi.StringPtrInput
	// The unique name of the database connection to use for the static role.
	DbName pulumi.StringPtrInput
	// A unique name to give the static role.
	Name pulumi.StringPtrInput
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod pulumi.IntPtrInput
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements pulumi.StringArrayInput
	// The database username that this static role corresponds to.
	Username pulumi.StringPtrInput
}

func (SecretBackendStaticRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendStaticRoleState)(nil)).Elem()
}

type secretBackendStaticRoleArgs struct {
	// The unique name of the Vault mount to configure.
	Backend string `pulumi:"backend"`
	// The unique name of the database connection to use for the static role.
	DbName string `pulumi:"dbName"`
	// A unique name to give the static role.
	Name *string `pulumi:"name"`
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod int `pulumi:"rotationPeriod"`
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements []string `pulumi:"rotationStatements"`
	// The database username that this static role corresponds to.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a SecretBackendStaticRole resource.
type SecretBackendStaticRoleArgs struct {
	// The unique name of the Vault mount to configure.
	Backend pulumi.StringInput
	// The unique name of the database connection to use for the static role.
	DbName pulumi.StringInput
	// A unique name to give the static role.
	Name pulumi.StringPtrInput
	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod pulumi.IntInput
	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements pulumi.StringArrayInput
	// The database username that this static role corresponds to.
	Username pulumi.StringInput
}

func (SecretBackendStaticRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendStaticRoleArgs)(nil)).Elem()
}

type SecretBackendStaticRoleInput interface {
	pulumi.Input

	ToSecretBackendStaticRoleOutput() SecretBackendStaticRoleOutput
	ToSecretBackendStaticRoleOutputWithContext(ctx context.Context) SecretBackendStaticRoleOutput
}

func (SecretBackendStaticRole) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendStaticRole)(nil)).Elem()
}

func (i SecretBackendStaticRole) ToSecretBackendStaticRoleOutput() SecretBackendStaticRoleOutput {
	return i.ToSecretBackendStaticRoleOutputWithContext(context.Background())
}

func (i SecretBackendStaticRole) ToSecretBackendStaticRoleOutputWithContext(ctx context.Context) SecretBackendStaticRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendStaticRoleOutput)
}

type SecretBackendStaticRoleOutput struct {
	*pulumi.OutputState
}

func (SecretBackendStaticRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendStaticRoleOutput)(nil)).Elem()
}

func (o SecretBackendStaticRoleOutput) ToSecretBackendStaticRoleOutput() SecretBackendStaticRoleOutput {
	return o
}

func (o SecretBackendStaticRoleOutput) ToSecretBackendStaticRoleOutputWithContext(ctx context.Context) SecretBackendStaticRoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecretBackendStaticRoleOutput{})
}
