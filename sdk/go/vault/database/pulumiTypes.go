// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SecretBackendConnectionCassandra struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// SecretBackendConnectionCassandraInput is an input type that accepts SecretBackendConnectionCassandraArgs and SecretBackendConnectionCassandraOutput values.
// You can construct a concrete instance of `SecretBackendConnectionCassandraInput` via:
//
//	SecretBackendConnectionCassandraArgs{...}
type SecretBackendConnectionCassandraInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput
	ToSecretBackendConnectionCassandraOutputWithContext(context.Context) SecretBackendConnectionCassandraOutput
}

type SecretBackendConnectionCassandraArgs struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion pulumi.IntPtrInput `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecretBackendConnectionCassandraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandra)(nil)).Elem()
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput {
	return i.ToSecretBackendConnectionCassandraOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraOutput)
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return i.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraOutput).ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx)
}

// SecretBackendConnectionCassandraPtrInput is an input type that accepts SecretBackendConnectionCassandraArgs, SecretBackendConnectionCassandraPtr and SecretBackendConnectionCassandraPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionCassandraPtrInput` via:
//
//	        SecretBackendConnectionCassandraArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionCassandraPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput
	ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Context) SecretBackendConnectionCassandraPtrOutput
}

type secretBackendConnectionCassandraPtrType SecretBackendConnectionCassandraArgs

func SecretBackendConnectionCassandraPtr(v *SecretBackendConnectionCassandraArgs) SecretBackendConnectionCassandraPtrInput {
	return (*secretBackendConnectionCassandraPtrType)(v)
}

func (*secretBackendConnectionCassandraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandra)(nil)).Elem()
}

func (i *secretBackendConnectionCassandraPtrType) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return i.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionCassandraPtrType) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraPtrOutput)
}

type SecretBackendConnectionCassandraOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandra)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput {
	return o
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraOutput {
	return o
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return o.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionCassandra) *SecretBackendConnectionCassandra {
		return &v
	}).(SecretBackendConnectionCassandraPtrOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionCassandraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionCassandraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCassandraPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandra)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraPtrOutput) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraPtrOutput) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraPtrOutput) Elem() SecretBackendConnectionCassandraOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) SecretBackendConnectionCassandra {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionCassandra
		return ret
	}).(SecretBackendConnectionCassandraOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraPtrOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureTls
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionCassandraPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraPtrOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.PemBundle
	}).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraPtrOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.PemJson
	}).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraPtrOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *int {
		if v == nil {
			return nil
		}
		return v.ProtocolVersion
	}).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionCassandraPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCouchbase struct {
	// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	Base64Pem *string `pulumi:"base64Pem"`
	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	BucketName *string `pulumi:"bucketName"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password string `pulumi:"password"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to authenticate with.
	Username string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionCouchbaseInput is an input type that accepts SecretBackendConnectionCouchbaseArgs and SecretBackendConnectionCouchbaseOutput values.
// You can construct a concrete instance of `SecretBackendConnectionCouchbaseInput` via:
//
//	SecretBackendConnectionCouchbaseArgs{...}
type SecretBackendConnectionCouchbaseInput interface {
	pulumi.Input

	ToSecretBackendConnectionCouchbaseOutput() SecretBackendConnectionCouchbaseOutput
	ToSecretBackendConnectionCouchbaseOutputWithContext(context.Context) SecretBackendConnectionCouchbaseOutput
}

type SecretBackendConnectionCouchbaseArgs struct {
	// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	Base64Pem pulumi.StringPtrInput `pulumi:"base64Pem"`
	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password pulumi.StringInput `pulumi:"password"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to authenticate with.
	Username pulumi.StringInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionCouchbaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCouchbase)(nil)).Elem()
}

func (i SecretBackendConnectionCouchbaseArgs) ToSecretBackendConnectionCouchbaseOutput() SecretBackendConnectionCouchbaseOutput {
	return i.ToSecretBackendConnectionCouchbaseOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCouchbaseArgs) ToSecretBackendConnectionCouchbaseOutputWithContext(ctx context.Context) SecretBackendConnectionCouchbaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCouchbaseOutput)
}

func (i SecretBackendConnectionCouchbaseArgs) ToSecretBackendConnectionCouchbasePtrOutput() SecretBackendConnectionCouchbasePtrOutput {
	return i.ToSecretBackendConnectionCouchbasePtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCouchbaseArgs) ToSecretBackendConnectionCouchbasePtrOutputWithContext(ctx context.Context) SecretBackendConnectionCouchbasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCouchbaseOutput).ToSecretBackendConnectionCouchbasePtrOutputWithContext(ctx)
}

// SecretBackendConnectionCouchbasePtrInput is an input type that accepts SecretBackendConnectionCouchbaseArgs, SecretBackendConnectionCouchbasePtr and SecretBackendConnectionCouchbasePtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionCouchbasePtrInput` via:
//
//	        SecretBackendConnectionCouchbaseArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionCouchbasePtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionCouchbasePtrOutput() SecretBackendConnectionCouchbasePtrOutput
	ToSecretBackendConnectionCouchbasePtrOutputWithContext(context.Context) SecretBackendConnectionCouchbasePtrOutput
}

type secretBackendConnectionCouchbasePtrType SecretBackendConnectionCouchbaseArgs

func SecretBackendConnectionCouchbasePtr(v *SecretBackendConnectionCouchbaseArgs) SecretBackendConnectionCouchbasePtrInput {
	return (*secretBackendConnectionCouchbasePtrType)(v)
}

func (*secretBackendConnectionCouchbasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCouchbase)(nil)).Elem()
}

func (i *secretBackendConnectionCouchbasePtrType) ToSecretBackendConnectionCouchbasePtrOutput() SecretBackendConnectionCouchbasePtrOutput {
	return i.ToSecretBackendConnectionCouchbasePtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionCouchbasePtrType) ToSecretBackendConnectionCouchbasePtrOutputWithContext(ctx context.Context) SecretBackendConnectionCouchbasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCouchbasePtrOutput)
}

type SecretBackendConnectionCouchbaseOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCouchbaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCouchbase)(nil)).Elem()
}

func (o SecretBackendConnectionCouchbaseOutput) ToSecretBackendConnectionCouchbaseOutput() SecretBackendConnectionCouchbaseOutput {
	return o
}

func (o SecretBackendConnectionCouchbaseOutput) ToSecretBackendConnectionCouchbaseOutputWithContext(ctx context.Context) SecretBackendConnectionCouchbaseOutput {
	return o
}

func (o SecretBackendConnectionCouchbaseOutput) ToSecretBackendConnectionCouchbasePtrOutput() SecretBackendConnectionCouchbasePtrOutput {
	return o.ToSecretBackendConnectionCouchbasePtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionCouchbaseOutput) ToSecretBackendConnectionCouchbasePtrOutputWithContext(ctx context.Context) SecretBackendConnectionCouchbasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionCouchbase) *SecretBackendConnectionCouchbase {
		return &v
	}).(SecretBackendConnectionCouchbasePtrOutput)
}

// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
func (o SecretBackendConnectionCouchbaseOutput) Base64Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) *string { return v.Base64Pem }).(pulumi.StringPtrOutput)
}

// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
func (o SecretBackendConnectionCouchbaseOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCouchbaseOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCouchbaseOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionCouchbaseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) string { return v.Password }).(pulumi.StringOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCouchbaseOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionCouchbaseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) string { return v.Username }).(pulumi.StringOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionCouchbaseOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCouchbase) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCouchbasePtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCouchbasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCouchbase)(nil)).Elem()
}

func (o SecretBackendConnectionCouchbasePtrOutput) ToSecretBackendConnectionCouchbasePtrOutput() SecretBackendConnectionCouchbasePtrOutput {
	return o
}

func (o SecretBackendConnectionCouchbasePtrOutput) ToSecretBackendConnectionCouchbasePtrOutputWithContext(ctx context.Context) SecretBackendConnectionCouchbasePtrOutput {
	return o
}

func (o SecretBackendConnectionCouchbasePtrOutput) Elem() SecretBackendConnectionCouchbaseOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) SecretBackendConnectionCouchbase {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionCouchbase
		return ret
	}).(SecretBackendConnectionCouchbaseOutput)
}

// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
func (o SecretBackendConnectionCouchbasePtrOutput) Base64Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) *string {
		if v == nil {
			return nil
		}
		return v.Base64Pem
	}).(pulumi.StringPtrOutput)
}

// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
func (o SecretBackendConnectionCouchbasePtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCouchbasePtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCouchbasePtrOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureTls
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionCouchbasePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCouchbasePtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionCouchbasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionCouchbasePtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCouchbase) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionElasticsearch struct {
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert *string `pulumi:"caCert"`
	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
	CaPath *string `pulumi:"caPath"`
	// The path to the certificate for the Elasticsearch client to present for communication.
	ClientCert *string `pulumi:"clientCert"`
	// The path to the key for the Elasticsearch client to use for communication.
	ClientKey *string `pulumi:"clientKey"`
	// Whether to disable certificate verification.
	Insecure *bool `pulumi:"insecure"`
	// The password to authenticate with.
	Password string `pulumi:"password"`
	// This, if set, is used to set the SNI host when connecting via TLS.
	TlsServerName *string `pulumi:"tlsServerName"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The username to authenticate with.
	Username string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionElasticsearchInput is an input type that accepts SecretBackendConnectionElasticsearchArgs and SecretBackendConnectionElasticsearchOutput values.
// You can construct a concrete instance of `SecretBackendConnectionElasticsearchInput` via:
//
//	SecretBackendConnectionElasticsearchArgs{...}
type SecretBackendConnectionElasticsearchInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput
	ToSecretBackendConnectionElasticsearchOutputWithContext(context.Context) SecretBackendConnectionElasticsearchOutput
}

type SecretBackendConnectionElasticsearchArgs struct {
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
	CaPath pulumi.StringPtrInput `pulumi:"caPath"`
	// The path to the certificate for the Elasticsearch client to present for communication.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// The path to the key for the Elasticsearch client to use for communication.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Whether to disable certificate verification.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// The password to authenticate with.
	Password pulumi.StringInput `pulumi:"password"`
	// This, if set, is used to set the SNI host when connecting via TLS.
	TlsServerName pulumi.StringPtrInput `pulumi:"tlsServerName"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput {
	return i.ToSecretBackendConnectionElasticsearchOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchOutput)
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchOutput).ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx)
}

// SecretBackendConnectionElasticsearchPtrInput is an input type that accepts SecretBackendConnectionElasticsearchArgs, SecretBackendConnectionElasticsearchPtr and SecretBackendConnectionElasticsearchPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionElasticsearchPtrInput` via:
//
//	        SecretBackendConnectionElasticsearchArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionElasticsearchPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput
	ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Context) SecretBackendConnectionElasticsearchPtrOutput
}

type secretBackendConnectionElasticsearchPtrType SecretBackendConnectionElasticsearchArgs

func SecretBackendConnectionElasticsearchPtr(v *SecretBackendConnectionElasticsearchArgs) SecretBackendConnectionElasticsearchPtrInput {
	return (*secretBackendConnectionElasticsearchPtrType)(v)
}

func (*secretBackendConnectionElasticsearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (i *secretBackendConnectionElasticsearchPtrType) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionElasticsearchPtrType) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchPtrOutput)
}

type SecretBackendConnectionElasticsearchOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return o.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionElasticsearch) *SecretBackendConnectionElasticsearch {
		return &v
	}).(SecretBackendConnectionElasticsearchPtrOutput)
}

// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
func (o SecretBackendConnectionElasticsearchOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
func (o SecretBackendConnectionElasticsearchOutput) CaPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *string { return v.CaPath }).(pulumi.StringPtrOutput)
}

// The path to the certificate for the Elasticsearch client to present for communication.
func (o SecretBackendConnectionElasticsearchOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// The path to the key for the Elasticsearch client to use for communication.
func (o SecretBackendConnectionElasticsearchOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Whether to disable certificate verification.
func (o SecretBackendConnectionElasticsearchOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionElasticsearchOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Password }).(pulumi.StringOutput)
}

// This, if set, is used to set the SNI host when connecting via TLS.
func (o SecretBackendConnectionElasticsearchOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *string { return v.TlsServerName }).(pulumi.StringPtrOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionElasticsearchOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Username }).(pulumi.StringOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionElasticsearchOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionElasticsearchPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchPtrOutput) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchPtrOutput) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchPtrOutput) Elem() SecretBackendConnectionElasticsearchOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) SecretBackendConnectionElasticsearch {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionElasticsearch
		return ret
	}).(SecretBackendConnectionElasticsearchOutput)
}

// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
func (o SecretBackendConnectionElasticsearchPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
func (o SecretBackendConnectionElasticsearchPtrOutput) CaPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return v.CaPath
	}).(pulumi.StringPtrOutput)
}

// The path to the certificate for the Elasticsearch client to present for communication.
func (o SecretBackendConnectionElasticsearchPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

// The path to the key for the Elasticsearch client to use for communication.
func (o SecretBackendConnectionElasticsearchPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Whether to disable certificate verification.
func (o SecretBackendConnectionElasticsearchPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionElasticsearchPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// This, if set, is used to set the SNI host when connecting via TLS.
func (o SecretBackendConnectionElasticsearchPtrOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return v.TlsServerName
	}).(pulumi.StringPtrOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionElasticsearchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionElasticsearchPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionHana struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// SecretBackendConnectionHanaInput is an input type that accepts SecretBackendConnectionHanaArgs and SecretBackendConnectionHanaOutput values.
// You can construct a concrete instance of `SecretBackendConnectionHanaInput` via:
//
//	SecretBackendConnectionHanaArgs{...}
type SecretBackendConnectionHanaInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput
	ToSecretBackendConnectionHanaOutputWithContext(context.Context) SecretBackendConnectionHanaOutput
}

type SecretBackendConnectionHanaArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecretBackendConnectionHanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHana)(nil)).Elem()
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput {
	return i.ToSecretBackendConnectionHanaOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaOutputWithContext(ctx context.Context) SecretBackendConnectionHanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaOutput)
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return i.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaOutput).ToSecretBackendConnectionHanaPtrOutputWithContext(ctx)
}

// SecretBackendConnectionHanaPtrInput is an input type that accepts SecretBackendConnectionHanaArgs, SecretBackendConnectionHanaPtr and SecretBackendConnectionHanaPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionHanaPtrInput` via:
//
//	        SecretBackendConnectionHanaArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionHanaPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput
	ToSecretBackendConnectionHanaPtrOutputWithContext(context.Context) SecretBackendConnectionHanaPtrOutput
}

type secretBackendConnectionHanaPtrType SecretBackendConnectionHanaArgs

func SecretBackendConnectionHanaPtr(v *SecretBackendConnectionHanaArgs) SecretBackendConnectionHanaPtrInput {
	return (*secretBackendConnectionHanaPtrType)(v)
}

func (*secretBackendConnectionHanaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHana)(nil)).Elem()
}

func (i *secretBackendConnectionHanaPtrType) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return i.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionHanaPtrType) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaPtrOutput)
}

type SecretBackendConnectionHanaOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHana)(nil)).Elem()
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput {
	return o
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaOutputWithContext(ctx context.Context) SecretBackendConnectionHanaOutput {
	return o
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return o.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionHana) *SecretBackendConnectionHana {
		return &v
	}).(SecretBackendConnectionHanaPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionHanaOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionHanaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionHanaOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionHanaPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHana)(nil)).Elem()
}

func (o SecretBackendConnectionHanaPtrOutput) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaPtrOutput) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaPtrOutput) Elem() SecretBackendConnectionHanaOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) SecretBackendConnectionHana {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionHana
		return ret
	}).(SecretBackendConnectionHanaOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionHanaPtrOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *bool {
		if v == nil {
			return nil
		}
		return v.DisableEscaping
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionHanaPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionHanaPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionInfluxdb struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The host to connect to.
	Host string `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to authenticate with.
	Username string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionInfluxdbInput is an input type that accepts SecretBackendConnectionInfluxdbArgs and SecretBackendConnectionInfluxdbOutput values.
// You can construct a concrete instance of `SecretBackendConnectionInfluxdbInput` via:
//
//	SecretBackendConnectionInfluxdbArgs{...}
type SecretBackendConnectionInfluxdbInput interface {
	pulumi.Input

	ToSecretBackendConnectionInfluxdbOutput() SecretBackendConnectionInfluxdbOutput
	ToSecretBackendConnectionInfluxdbOutputWithContext(context.Context) SecretBackendConnectionInfluxdbOutput
}

type SecretBackendConnectionInfluxdbArgs struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// The host to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password pulumi.StringInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to authenticate with.
	Username pulumi.StringInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionInfluxdbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionInfluxdb)(nil)).Elem()
}

func (i SecretBackendConnectionInfluxdbArgs) ToSecretBackendConnectionInfluxdbOutput() SecretBackendConnectionInfluxdbOutput {
	return i.ToSecretBackendConnectionInfluxdbOutputWithContext(context.Background())
}

func (i SecretBackendConnectionInfluxdbArgs) ToSecretBackendConnectionInfluxdbOutputWithContext(ctx context.Context) SecretBackendConnectionInfluxdbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionInfluxdbOutput)
}

func (i SecretBackendConnectionInfluxdbArgs) ToSecretBackendConnectionInfluxdbPtrOutput() SecretBackendConnectionInfluxdbPtrOutput {
	return i.ToSecretBackendConnectionInfluxdbPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionInfluxdbArgs) ToSecretBackendConnectionInfluxdbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionInfluxdbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionInfluxdbOutput).ToSecretBackendConnectionInfluxdbPtrOutputWithContext(ctx)
}

// SecretBackendConnectionInfluxdbPtrInput is an input type that accepts SecretBackendConnectionInfluxdbArgs, SecretBackendConnectionInfluxdbPtr and SecretBackendConnectionInfluxdbPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionInfluxdbPtrInput` via:
//
//	        SecretBackendConnectionInfluxdbArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionInfluxdbPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionInfluxdbPtrOutput() SecretBackendConnectionInfluxdbPtrOutput
	ToSecretBackendConnectionInfluxdbPtrOutputWithContext(context.Context) SecretBackendConnectionInfluxdbPtrOutput
}

type secretBackendConnectionInfluxdbPtrType SecretBackendConnectionInfluxdbArgs

func SecretBackendConnectionInfluxdbPtr(v *SecretBackendConnectionInfluxdbArgs) SecretBackendConnectionInfluxdbPtrInput {
	return (*secretBackendConnectionInfluxdbPtrType)(v)
}

func (*secretBackendConnectionInfluxdbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionInfluxdb)(nil)).Elem()
}

func (i *secretBackendConnectionInfluxdbPtrType) ToSecretBackendConnectionInfluxdbPtrOutput() SecretBackendConnectionInfluxdbPtrOutput {
	return i.ToSecretBackendConnectionInfluxdbPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionInfluxdbPtrType) ToSecretBackendConnectionInfluxdbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionInfluxdbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionInfluxdbPtrOutput)
}

type SecretBackendConnectionInfluxdbOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionInfluxdbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionInfluxdb)(nil)).Elem()
}

func (o SecretBackendConnectionInfluxdbOutput) ToSecretBackendConnectionInfluxdbOutput() SecretBackendConnectionInfluxdbOutput {
	return o
}

func (o SecretBackendConnectionInfluxdbOutput) ToSecretBackendConnectionInfluxdbOutputWithContext(ctx context.Context) SecretBackendConnectionInfluxdbOutput {
	return o
}

func (o SecretBackendConnectionInfluxdbOutput) ToSecretBackendConnectionInfluxdbPtrOutput() SecretBackendConnectionInfluxdbPtrOutput {
	return o.ToSecretBackendConnectionInfluxdbPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionInfluxdbOutput) ToSecretBackendConnectionInfluxdbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionInfluxdbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionInfluxdb) *SecretBackendConnectionInfluxdb {
		return &v
	}).(SecretBackendConnectionInfluxdbPtrOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionInfluxdbOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The host to connect to.
func (o SecretBackendConnectionInfluxdbOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionInfluxdbOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionInfluxdbOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) string { return v.Password }).(pulumi.StringOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionInfluxdbOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionInfluxdbOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionInfluxdbOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionInfluxdbOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionInfluxdbOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) string { return v.Username }).(pulumi.StringOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionInfluxdbOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionInfluxdb) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionInfluxdbPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionInfluxdbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionInfluxdb)(nil)).Elem()
}

func (o SecretBackendConnectionInfluxdbPtrOutput) ToSecretBackendConnectionInfluxdbPtrOutput() SecretBackendConnectionInfluxdbPtrOutput {
	return o
}

func (o SecretBackendConnectionInfluxdbPtrOutput) ToSecretBackendConnectionInfluxdbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionInfluxdbPtrOutput {
	return o
}

func (o SecretBackendConnectionInfluxdbPtrOutput) Elem() SecretBackendConnectionInfluxdbOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) SecretBackendConnectionInfluxdb {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionInfluxdb
		return ret
	}).(SecretBackendConnectionInfluxdbOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionInfluxdbPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// The host to connect to.
func (o SecretBackendConnectionInfluxdbPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionInfluxdbPtrOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureTls
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionInfluxdbPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionInfluxdbPtrOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *string {
		if v == nil {
			return nil
		}
		return v.PemBundle
	}).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionInfluxdbPtrOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *string {
		if v == nil {
			return nil
		}
		return v.PemJson
	}).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionInfluxdbPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionInfluxdbPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionInfluxdbPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionInfluxdbPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionInfluxdb) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMongodb struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionMongodbInput is an input type that accepts SecretBackendConnectionMongodbArgs and SecretBackendConnectionMongodbOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMongodbInput` via:
//
//	SecretBackendConnectionMongodbArgs{...}
type SecretBackendConnectionMongodbInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput
	ToSecretBackendConnectionMongodbOutputWithContext(context.Context) SecretBackendConnectionMongodbOutput
}

type SecretBackendConnectionMongodbArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionMongodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodb)(nil)).Elem()
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput {
	return i.ToSecretBackendConnectionMongodbOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbOutput)
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return i.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbOutput).ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMongodbPtrInput is an input type that accepts SecretBackendConnectionMongodbArgs, SecretBackendConnectionMongodbPtr and SecretBackendConnectionMongodbPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMongodbPtrInput` via:
//
//	        SecretBackendConnectionMongodbArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionMongodbPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput
	ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Context) SecretBackendConnectionMongodbPtrOutput
}

type secretBackendConnectionMongodbPtrType SecretBackendConnectionMongodbArgs

func SecretBackendConnectionMongodbPtr(v *SecretBackendConnectionMongodbArgs) SecretBackendConnectionMongodbPtrInput {
	return (*secretBackendConnectionMongodbPtrType)(v)
}

func (*secretBackendConnectionMongodbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodb)(nil)).Elem()
}

func (i *secretBackendConnectionMongodbPtrType) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return i.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMongodbPtrType) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbPtrOutput)
}

type SecretBackendConnectionMongodbOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodb)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput {
	return o
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbOutput {
	return o
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return o.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionMongodb) *SecretBackendConnectionMongodb {
		return &v
	}).(SecretBackendConnectionMongodbPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMongodbOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMongodbOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMongodbOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMongodbPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodb)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbPtrOutput) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbPtrOutput) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbPtrOutput) Elem() SecretBackendConnectionMongodbOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) SecretBackendConnectionMongodb {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionMongodb
		return ret
	}).(SecretBackendConnectionMongodbOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMongodbPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMongodbPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMongodbPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMongodbatlas struct {
	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	PrivateKey string `pulumi:"privateKey"`
	// The Project ID the Database User should be created within.
	ProjectId string `pulumi:"projectId"`
	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	PublicKey string `pulumi:"publicKey"`
}

// SecretBackendConnectionMongodbatlasInput is an input type that accepts SecretBackendConnectionMongodbatlasArgs and SecretBackendConnectionMongodbatlasOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMongodbatlasInput` via:
//
//	SecretBackendConnectionMongodbatlasArgs{...}
type SecretBackendConnectionMongodbatlasInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbatlasOutput() SecretBackendConnectionMongodbatlasOutput
	ToSecretBackendConnectionMongodbatlasOutputWithContext(context.Context) SecretBackendConnectionMongodbatlasOutput
}

type SecretBackendConnectionMongodbatlasArgs struct {
	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// The Project ID the Database User should be created within.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (SecretBackendConnectionMongodbatlasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodbatlas)(nil)).Elem()
}

func (i SecretBackendConnectionMongodbatlasArgs) ToSecretBackendConnectionMongodbatlasOutput() SecretBackendConnectionMongodbatlasOutput {
	return i.ToSecretBackendConnectionMongodbatlasOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbatlasArgs) ToSecretBackendConnectionMongodbatlasOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbatlasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbatlasOutput)
}

func (i SecretBackendConnectionMongodbatlasArgs) ToSecretBackendConnectionMongodbatlasPtrOutput() SecretBackendConnectionMongodbatlasPtrOutput {
	return i.ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbatlasArgs) ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbatlasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbatlasOutput).ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMongodbatlasPtrInput is an input type that accepts SecretBackendConnectionMongodbatlasArgs, SecretBackendConnectionMongodbatlasPtr and SecretBackendConnectionMongodbatlasPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMongodbatlasPtrInput` via:
//
//	        SecretBackendConnectionMongodbatlasArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionMongodbatlasPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbatlasPtrOutput() SecretBackendConnectionMongodbatlasPtrOutput
	ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(context.Context) SecretBackendConnectionMongodbatlasPtrOutput
}

type secretBackendConnectionMongodbatlasPtrType SecretBackendConnectionMongodbatlasArgs

func SecretBackendConnectionMongodbatlasPtr(v *SecretBackendConnectionMongodbatlasArgs) SecretBackendConnectionMongodbatlasPtrInput {
	return (*secretBackendConnectionMongodbatlasPtrType)(v)
}

func (*secretBackendConnectionMongodbatlasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodbatlas)(nil)).Elem()
}

func (i *secretBackendConnectionMongodbatlasPtrType) ToSecretBackendConnectionMongodbatlasPtrOutput() SecretBackendConnectionMongodbatlasPtrOutput {
	return i.ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMongodbatlasPtrType) ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbatlasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbatlasPtrOutput)
}

type SecretBackendConnectionMongodbatlasOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbatlasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodbatlas)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbatlasOutput) ToSecretBackendConnectionMongodbatlasOutput() SecretBackendConnectionMongodbatlasOutput {
	return o
}

func (o SecretBackendConnectionMongodbatlasOutput) ToSecretBackendConnectionMongodbatlasOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbatlasOutput {
	return o
}

func (o SecretBackendConnectionMongodbatlasOutput) ToSecretBackendConnectionMongodbatlasPtrOutput() SecretBackendConnectionMongodbatlasPtrOutput {
	return o.ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMongodbatlasOutput) ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbatlasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionMongodbatlas) *SecretBackendConnectionMongodbatlas {
		return &v
	}).(SecretBackendConnectionMongodbatlasPtrOutput)
}

// The Private Programmatic API Key used to connect with MongoDB Atlas API.
func (o SecretBackendConnectionMongodbatlasOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbatlas) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// The Project ID the Database User should be created within.
func (o SecretBackendConnectionMongodbatlasOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbatlas) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
func (o SecretBackendConnectionMongodbatlasOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbatlas) string { return v.PublicKey }).(pulumi.StringOutput)
}

type SecretBackendConnectionMongodbatlasPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbatlasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodbatlas)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbatlasPtrOutput) ToSecretBackendConnectionMongodbatlasPtrOutput() SecretBackendConnectionMongodbatlasPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbatlasPtrOutput) ToSecretBackendConnectionMongodbatlasPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbatlasPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbatlasPtrOutput) Elem() SecretBackendConnectionMongodbatlasOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodbatlas) SecretBackendConnectionMongodbatlas {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionMongodbatlas
		return ret
	}).(SecretBackendConnectionMongodbatlasOutput)
}

// The Private Programmatic API Key used to connect with MongoDB Atlas API.
func (o SecretBackendConnectionMongodbatlasPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodbatlas) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// The Project ID the Database User should be created within.
func (o SecretBackendConnectionMongodbatlasPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodbatlas) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
func (o SecretBackendConnectionMongodbatlasPtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodbatlas) *string {
		if v == nil {
			return nil
		}
		return &v.PublicKey
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMssql struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// For Vault v1.9+. Set to true when the target is a
	// Contained Database, e.g. AzureSQL.
	// See the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
	ContainedDb *bool `pulumi:"containedDb"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionMssqlInput is an input type that accepts SecretBackendConnectionMssqlArgs and SecretBackendConnectionMssqlOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMssqlInput` via:
//
//	SecretBackendConnectionMssqlArgs{...}
type SecretBackendConnectionMssqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput
	ToSecretBackendConnectionMssqlOutputWithContext(context.Context) SecretBackendConnectionMssqlOutput
}

type SecretBackendConnectionMssqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// For Vault v1.9+. Set to true when the target is a
	// Contained Database, e.g. AzureSQL.
	// See the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
	ContainedDb pulumi.BoolPtrInput `pulumi:"containedDb"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionMssqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssql)(nil)).Elem()
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput {
	return i.ToSecretBackendConnectionMssqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlOutput)
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return i.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlOutput).ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMssqlPtrInput is an input type that accepts SecretBackendConnectionMssqlArgs, SecretBackendConnectionMssqlPtr and SecretBackendConnectionMssqlPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMssqlPtrInput` via:
//
//	        SecretBackendConnectionMssqlArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionMssqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput
	ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Context) SecretBackendConnectionMssqlPtrOutput
}

type secretBackendConnectionMssqlPtrType SecretBackendConnectionMssqlArgs

func SecretBackendConnectionMssqlPtr(v *SecretBackendConnectionMssqlArgs) SecretBackendConnectionMssqlPtrInput {
	return (*secretBackendConnectionMssqlPtrType)(v)
}

func (*secretBackendConnectionMssqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssql)(nil)).Elem()
}

func (i *secretBackendConnectionMssqlPtrType) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return i.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMssqlPtrType) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlPtrOutput)
}

type SecretBackendConnectionMssqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssql)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput {
	return o
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlOutput {
	return o
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return o.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionMssql) *SecretBackendConnectionMssql {
		return &v
	}).(SecretBackendConnectionMssqlPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// For Vault v1.9+. Set to true when the target is a
// Contained Database, e.g. AzureSQL.
// See the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
func (o SecretBackendConnectionMssqlOutput) ContainedDb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *bool { return v.ContainedDb }).(pulumi.BoolPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionMssqlOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMssqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMssqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMssqlOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMssqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssql)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlPtrOutput) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlPtrOutput) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlPtrOutput) Elem() SecretBackendConnectionMssqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) SecretBackendConnectionMssql {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionMssql
		return ret
	}).(SecretBackendConnectionMssqlOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// For Vault v1.9+. Set to true when the target is a
// Contained Database, e.g. AzureSQL.
// See the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
func (o SecretBackendConnectionMssqlPtrOutput) ContainedDb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *bool {
		if v == nil {
			return nil
		}
		return v.ContainedDb
	}).(pulumi.BoolPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionMssqlPtrOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *bool {
		if v == nil {
			return nil
		}
		return v.DisableEscaping
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMssqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMssqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMssqlPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysql struct {
	// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
	AuthType *string `pulumi:"authType"`
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
	ServiceAccountJson *string `pulumi:"serviceAccountJson"`
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TlsCa *string `pulumi:"tlsCa"`
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TlsCertificateKey *string `pulumi:"tlsCertificateKey"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionMysqlInput is an input type that accepts SecretBackendConnectionMysqlArgs and SecretBackendConnectionMysqlOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlInput` via:
//
//	SecretBackendConnectionMysqlArgs{...}
type SecretBackendConnectionMysqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput
	ToSecretBackendConnectionMysqlOutputWithContext(context.Context) SecretBackendConnectionMysqlOutput
}

type SecretBackendConnectionMysqlArgs struct {
	// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
	ServiceAccountJson pulumi.StringPtrInput `pulumi:"serviceAccountJson"`
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TlsCa pulumi.StringPtrInput `pulumi:"tlsCa"`
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TlsCertificateKey pulumi.StringPtrInput `pulumi:"tlsCertificateKey"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysql)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput {
	return i.ToSecretBackendConnectionMysqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlOutput)
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return i.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlOutput).ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlPtrInput is an input type that accepts SecretBackendConnectionMysqlArgs, SecretBackendConnectionMysqlPtr and SecretBackendConnectionMysqlPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlPtrInput` via:
//
//	        SecretBackendConnectionMysqlArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionMysqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput
	ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlPtrOutput
}

type secretBackendConnectionMysqlPtrType SecretBackendConnectionMysqlArgs

func SecretBackendConnectionMysqlPtr(v *SecretBackendConnectionMysqlArgs) SecretBackendConnectionMysqlPtrInput {
	return (*secretBackendConnectionMysqlPtrType)(v)
}

func (*secretBackendConnectionMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysql)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlPtrType) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return i.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlPtrType) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlPtrOutput)
}

type SecretBackendConnectionMysqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysql)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput {
	return o
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlOutput {
	return o
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return o.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionMysql) *SecretBackendConnectionMysql {
		return &v
	}).(SecretBackendConnectionMysqlPtrOutput)
}

// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
func (o SecretBackendConnectionMysqlOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
func (o SecretBackendConnectionMysqlOutput) ServiceAccountJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.ServiceAccountJson }).(pulumi.StringPtrOutput)
}

// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
func (o SecretBackendConnectionMysqlOutput) TlsCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.TlsCa }).(pulumi.StringPtrOutput)
}

// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
func (o SecretBackendConnectionMysqlOutput) TlsCertificateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.TlsCertificateKey }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysql)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlPtrOutput) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlPtrOutput) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlPtrOutput) Elem() SecretBackendConnectionMysqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) SecretBackendConnectionMysql {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionMysql
		return ret
	}).(SecretBackendConnectionMysqlOutput)
}

// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
func (o SecretBackendConnectionMysqlPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
func (o SecretBackendConnectionMysqlPtrOutput) ServiceAccountJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountJson
	}).(pulumi.StringPtrOutput)
}

// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
func (o SecretBackendConnectionMysqlPtrOutput) TlsCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.TlsCa
	}).(pulumi.StringPtrOutput)
}

// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
func (o SecretBackendConnectionMysqlPtrOutput) TlsCertificateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertificateKey
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysqlAurora struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionMysqlAuroraInput is an input type that accepts SecretBackendConnectionMysqlAuroraArgs and SecretBackendConnectionMysqlAuroraOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlAuroraInput` via:
//
//	SecretBackendConnectionMysqlAuroraArgs{...}
type SecretBackendConnectionMysqlAuroraInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput
	ToSecretBackendConnectionMysqlAuroraOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraOutput
}

type SecretBackendConnectionMysqlAuroraArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionMysqlAuroraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput {
	return i.ToSecretBackendConnectionMysqlAuroraOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraOutput)
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraOutput).ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlAuroraPtrInput is an input type that accepts SecretBackendConnectionMysqlAuroraArgs, SecretBackendConnectionMysqlAuroraPtr and SecretBackendConnectionMysqlAuroraPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlAuroraPtrInput` via:
//
//	        SecretBackendConnectionMysqlAuroraArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionMysqlAuroraPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput
	ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraPtrOutput
}

type secretBackendConnectionMysqlAuroraPtrType SecretBackendConnectionMysqlAuroraArgs

func SecretBackendConnectionMysqlAuroraPtr(v *SecretBackendConnectionMysqlAuroraArgs) SecretBackendConnectionMysqlAuroraPtrInput {
	return (*secretBackendConnectionMysqlAuroraPtrType)(v)
}

func (*secretBackendConnectionMysqlAuroraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlAuroraPtrType) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlAuroraPtrType) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraPtrOutput)
}

type SecretBackendConnectionMysqlAuroraOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return o.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionMysqlAurora) *SecretBackendConnectionMysqlAurora {
		return &v
	}).(SecretBackendConnectionMysqlAuroraPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlAuroraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlAuroraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlAuroraOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysqlAuroraPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) Elem() SecretBackendConnectionMysqlAuroraOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) SecretBackendConnectionMysqlAurora {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionMysqlAurora
		return ret
	}).(SecretBackendConnectionMysqlAuroraOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysqlLegacy struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionMysqlLegacyInput is an input type that accepts SecretBackendConnectionMysqlLegacyArgs and SecretBackendConnectionMysqlLegacyOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlLegacyInput` via:
//
//	SecretBackendConnectionMysqlLegacyArgs{...}
type SecretBackendConnectionMysqlLegacyInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput
	ToSecretBackendConnectionMysqlLegacyOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyOutput
}

type SecretBackendConnectionMysqlLegacyArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionMysqlLegacyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput {
	return i.ToSecretBackendConnectionMysqlLegacyOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyOutput)
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyOutput).ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlLegacyPtrInput is an input type that accepts SecretBackendConnectionMysqlLegacyArgs, SecretBackendConnectionMysqlLegacyPtr and SecretBackendConnectionMysqlLegacyPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlLegacyPtrInput` via:
//
//	        SecretBackendConnectionMysqlLegacyArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionMysqlLegacyPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput
	ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyPtrOutput
}

type secretBackendConnectionMysqlLegacyPtrType SecretBackendConnectionMysqlLegacyArgs

func SecretBackendConnectionMysqlLegacyPtr(v *SecretBackendConnectionMysqlLegacyArgs) SecretBackendConnectionMysqlLegacyPtrInput {
	return (*secretBackendConnectionMysqlLegacyPtrType)(v)
}

func (*secretBackendConnectionMysqlLegacyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlLegacyPtrType) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlLegacyPtrType) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyPtrOutput)
}

type SecretBackendConnectionMysqlLegacyOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return o.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionMysqlLegacy) *SecretBackendConnectionMysqlLegacy {
		return &v
	}).(SecretBackendConnectionMysqlLegacyPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlLegacyOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlLegacyOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlLegacyOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysqlLegacyPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) Elem() SecretBackendConnectionMysqlLegacyOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) SecretBackendConnectionMysqlLegacy {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionMysqlLegacy
		return ret
	}).(SecretBackendConnectionMysqlLegacyOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysqlRds struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionMysqlRdsInput is an input type that accepts SecretBackendConnectionMysqlRdsArgs and SecretBackendConnectionMysqlRdsOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlRdsInput` via:
//
//	SecretBackendConnectionMysqlRdsArgs{...}
type SecretBackendConnectionMysqlRdsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput
	ToSecretBackendConnectionMysqlRdsOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsOutput
}

type SecretBackendConnectionMysqlRdsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionMysqlRdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput {
	return i.ToSecretBackendConnectionMysqlRdsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsOutput)
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsOutput).ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlRdsPtrInput is an input type that accepts SecretBackendConnectionMysqlRdsArgs, SecretBackendConnectionMysqlRdsPtr and SecretBackendConnectionMysqlRdsPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlRdsPtrInput` via:
//
//	        SecretBackendConnectionMysqlRdsArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionMysqlRdsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput
	ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsPtrOutput
}

type secretBackendConnectionMysqlRdsPtrType SecretBackendConnectionMysqlRdsArgs

func SecretBackendConnectionMysqlRdsPtr(v *SecretBackendConnectionMysqlRdsArgs) SecretBackendConnectionMysqlRdsPtrInput {
	return (*secretBackendConnectionMysqlRdsPtrType)(v)
}

func (*secretBackendConnectionMysqlRdsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlRdsPtrType) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlRdsPtrType) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsPtrOutput)
}

type SecretBackendConnectionMysqlRdsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return o.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionMysqlRds) *SecretBackendConnectionMysqlRds {
		return &v
	}).(SecretBackendConnectionMysqlRdsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlRdsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlRdsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlRdsOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionMysqlRdsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) Elem() SecretBackendConnectionMysqlRdsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) SecretBackendConnectionMysqlRds {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionMysqlRds
		return ret
	}).(SecretBackendConnectionMysqlRdsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionMysqlRdsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionMysqlRdsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionMysqlRdsPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionOracle struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionOracleInput is an input type that accepts SecretBackendConnectionOracleArgs and SecretBackendConnectionOracleOutput values.
// You can construct a concrete instance of `SecretBackendConnectionOracleInput` via:
//
//	SecretBackendConnectionOracleArgs{...}
type SecretBackendConnectionOracleInput interface {
	pulumi.Input

	ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput
	ToSecretBackendConnectionOracleOutputWithContext(context.Context) SecretBackendConnectionOracleOutput
}

type SecretBackendConnectionOracleArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracle)(nil)).Elem()
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput {
	return i.ToSecretBackendConnectionOracleOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOracleOutputWithContext(ctx context.Context) SecretBackendConnectionOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleOutput)
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return i.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleOutput).ToSecretBackendConnectionOraclePtrOutputWithContext(ctx)
}

// SecretBackendConnectionOraclePtrInput is an input type that accepts SecretBackendConnectionOracleArgs, SecretBackendConnectionOraclePtr and SecretBackendConnectionOraclePtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionOraclePtrInput` via:
//
//	        SecretBackendConnectionOracleArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionOraclePtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput
	ToSecretBackendConnectionOraclePtrOutputWithContext(context.Context) SecretBackendConnectionOraclePtrOutput
}

type secretBackendConnectionOraclePtrType SecretBackendConnectionOracleArgs

func SecretBackendConnectionOraclePtr(v *SecretBackendConnectionOracleArgs) SecretBackendConnectionOraclePtrInput {
	return (*secretBackendConnectionOraclePtrType)(v)
}

func (*secretBackendConnectionOraclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracle)(nil)).Elem()
}

func (i *secretBackendConnectionOraclePtrType) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return i.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionOraclePtrType) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOraclePtrOutput)
}

type SecretBackendConnectionOracleOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracle)(nil)).Elem()
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput {
	return o
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOracleOutputWithContext(ctx context.Context) SecretBackendConnectionOracleOutput {
	return o
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return o.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionOracle) *SecretBackendConnectionOracle {
		return &v
	}).(SecretBackendConnectionOraclePtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOracleOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOracleOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOracleOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOracleOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionOracleOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionOracleOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionOracleOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionOraclePtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOraclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracle)(nil)).Elem()
}

func (o SecretBackendConnectionOraclePtrOutput) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return o
}

func (o SecretBackendConnectionOraclePtrOutput) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return o
}

func (o SecretBackendConnectionOraclePtrOutput) Elem() SecretBackendConnectionOracleOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) SecretBackendConnectionOracle {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionOracle
		return ret
	}).(SecretBackendConnectionOracleOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOraclePtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOraclePtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOraclePtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOraclePtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionOraclePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionOraclePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionOraclePtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionPostgresql struct {
	// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
	AuthType *string `pulumi:"authType"`
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
	ServiceAccountJson *string `pulumi:"serviceAccountJson"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionPostgresqlInput is an input type that accepts SecretBackendConnectionPostgresqlArgs and SecretBackendConnectionPostgresqlOutput values.
// You can construct a concrete instance of `SecretBackendConnectionPostgresqlInput` via:
//
//	SecretBackendConnectionPostgresqlArgs{...}
type SecretBackendConnectionPostgresqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput
	ToSecretBackendConnectionPostgresqlOutputWithContext(context.Context) SecretBackendConnectionPostgresqlOutput
}

type SecretBackendConnectionPostgresqlArgs struct {
	// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
	ServiceAccountJson pulumi.StringPtrInput `pulumi:"serviceAccountJson"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput {
	return i.ToSecretBackendConnectionPostgresqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlOutput)
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlOutput).ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx)
}

// SecretBackendConnectionPostgresqlPtrInput is an input type that accepts SecretBackendConnectionPostgresqlArgs, SecretBackendConnectionPostgresqlPtr and SecretBackendConnectionPostgresqlPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionPostgresqlPtrInput` via:
//
//	        SecretBackendConnectionPostgresqlArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionPostgresqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput
	ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Context) SecretBackendConnectionPostgresqlPtrOutput
}

type secretBackendConnectionPostgresqlPtrType SecretBackendConnectionPostgresqlArgs

func SecretBackendConnectionPostgresqlPtr(v *SecretBackendConnectionPostgresqlArgs) SecretBackendConnectionPostgresqlPtrInput {
	return (*secretBackendConnectionPostgresqlPtrType)(v)
}

func (*secretBackendConnectionPostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (i *secretBackendConnectionPostgresqlPtrType) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionPostgresqlPtrType) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlPtrOutput)
}

type SecretBackendConnectionPostgresqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return o.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionPostgresql) *SecretBackendConnectionPostgresql {
		return &v
	}).(SecretBackendConnectionPostgresqlPtrOutput)
}

// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
func (o SecretBackendConnectionPostgresqlOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionPostgresqlOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionPostgresqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
func (o SecretBackendConnectionPostgresqlOutput) ServiceAccountJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.ServiceAccountJson }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionPostgresqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionPostgresqlOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionPostgresqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlPtrOutput) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlPtrOutput) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlPtrOutput) Elem() SecretBackendConnectionPostgresqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) SecretBackendConnectionPostgresql {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionPostgresql
		return ret
	}).(SecretBackendConnectionPostgresqlOutput)
}

// Enable IAM authentication to a Google Cloud instance when set to `gcpIam`
func (o SecretBackendConnectionPostgresqlPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionPostgresqlPtrOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *bool {
		if v == nil {
			return nil
		}
		return v.DisableEscaping
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionPostgresqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// JSON encoding of an IAM access key. Requires `authType` to be `gcpIam`.
func (o SecretBackendConnectionPostgresqlPtrOutput) ServiceAccountJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountJson
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionPostgresqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionPostgresqlPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionRedis struct {
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert *string `pulumi:"caCert"`
	// The host to connect to.
	Host string `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password string `pulumi:"password"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to authenticate with.
	Username string `pulumi:"username"`
}

// SecretBackendConnectionRedisInput is an input type that accepts SecretBackendConnectionRedisArgs and SecretBackendConnectionRedisOutput values.
// You can construct a concrete instance of `SecretBackendConnectionRedisInput` via:
//
//	SecretBackendConnectionRedisArgs{...}
type SecretBackendConnectionRedisInput interface {
	pulumi.Input

	ToSecretBackendConnectionRedisOutput() SecretBackendConnectionRedisOutput
	ToSecretBackendConnectionRedisOutputWithContext(context.Context) SecretBackendConnectionRedisOutput
}

type SecretBackendConnectionRedisArgs struct {
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// The host to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to authenticate with.
	Password pulumi.StringInput `pulumi:"password"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to authenticate with.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SecretBackendConnectionRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionRedis)(nil)).Elem()
}

func (i SecretBackendConnectionRedisArgs) ToSecretBackendConnectionRedisOutput() SecretBackendConnectionRedisOutput {
	return i.ToSecretBackendConnectionRedisOutputWithContext(context.Background())
}

func (i SecretBackendConnectionRedisArgs) ToSecretBackendConnectionRedisOutputWithContext(ctx context.Context) SecretBackendConnectionRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedisOutput)
}

func (i SecretBackendConnectionRedisArgs) ToSecretBackendConnectionRedisPtrOutput() SecretBackendConnectionRedisPtrOutput {
	return i.ToSecretBackendConnectionRedisPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionRedisArgs) ToSecretBackendConnectionRedisPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedisOutput).ToSecretBackendConnectionRedisPtrOutputWithContext(ctx)
}

// SecretBackendConnectionRedisPtrInput is an input type that accepts SecretBackendConnectionRedisArgs, SecretBackendConnectionRedisPtr and SecretBackendConnectionRedisPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionRedisPtrInput` via:
//
//	        SecretBackendConnectionRedisArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionRedisPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionRedisPtrOutput() SecretBackendConnectionRedisPtrOutput
	ToSecretBackendConnectionRedisPtrOutputWithContext(context.Context) SecretBackendConnectionRedisPtrOutput
}

type secretBackendConnectionRedisPtrType SecretBackendConnectionRedisArgs

func SecretBackendConnectionRedisPtr(v *SecretBackendConnectionRedisArgs) SecretBackendConnectionRedisPtrInput {
	return (*secretBackendConnectionRedisPtrType)(v)
}

func (*secretBackendConnectionRedisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionRedis)(nil)).Elem()
}

func (i *secretBackendConnectionRedisPtrType) ToSecretBackendConnectionRedisPtrOutput() SecretBackendConnectionRedisPtrOutput {
	return i.ToSecretBackendConnectionRedisPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionRedisPtrType) ToSecretBackendConnectionRedisPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedisPtrOutput)
}

type SecretBackendConnectionRedisOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionRedis)(nil)).Elem()
}

func (o SecretBackendConnectionRedisOutput) ToSecretBackendConnectionRedisOutput() SecretBackendConnectionRedisOutput {
	return o
}

func (o SecretBackendConnectionRedisOutput) ToSecretBackendConnectionRedisOutputWithContext(ctx context.Context) SecretBackendConnectionRedisOutput {
	return o
}

func (o SecretBackendConnectionRedisOutput) ToSecretBackendConnectionRedisPtrOutput() SecretBackendConnectionRedisPtrOutput {
	return o.ToSecretBackendConnectionRedisPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionRedisOutput) ToSecretBackendConnectionRedisPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionRedis) *SecretBackendConnectionRedis {
		return &v
	}).(SecretBackendConnectionRedisPtrOutput)
}

// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
func (o SecretBackendConnectionRedisOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedis) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// The host to connect to.
func (o SecretBackendConnectionRedisOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedis) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionRedisOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedis) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionRedisOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedis) string { return v.Password }).(pulumi.StringOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionRedisOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedis) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionRedisOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedis) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionRedisOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedis) string { return v.Username }).(pulumi.StringOutput)
}

type SecretBackendConnectionRedisPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionRedis)(nil)).Elem()
}

func (o SecretBackendConnectionRedisPtrOutput) ToSecretBackendConnectionRedisPtrOutput() SecretBackendConnectionRedisPtrOutput {
	return o
}

func (o SecretBackendConnectionRedisPtrOutput) ToSecretBackendConnectionRedisPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisPtrOutput {
	return o
}

func (o SecretBackendConnectionRedisPtrOutput) Elem() SecretBackendConnectionRedisOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) SecretBackendConnectionRedis {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionRedis
		return ret
	}).(SecretBackendConnectionRedisOutput)
}

// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
func (o SecretBackendConnectionRedisPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// The host to connect to.
func (o SecretBackendConnectionRedisPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionRedisPtrOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureTls
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionRedisPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionRedisPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionRedisPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionRedisPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedis) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionRedisElasticache struct {
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
	Region *string `pulumi:"region"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// SecretBackendConnectionRedisElasticacheInput is an input type that accepts SecretBackendConnectionRedisElasticacheArgs and SecretBackendConnectionRedisElasticacheOutput values.
// You can construct a concrete instance of `SecretBackendConnectionRedisElasticacheInput` via:
//
//	SecretBackendConnectionRedisElasticacheArgs{...}
type SecretBackendConnectionRedisElasticacheInput interface {
	pulumi.Input

	ToSecretBackendConnectionRedisElasticacheOutput() SecretBackendConnectionRedisElasticacheOutput
	ToSecretBackendConnectionRedisElasticacheOutputWithContext(context.Context) SecretBackendConnectionRedisElasticacheOutput
}

type SecretBackendConnectionRedisElasticacheArgs struct {
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecretBackendConnectionRedisElasticacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionRedisElasticache)(nil)).Elem()
}

func (i SecretBackendConnectionRedisElasticacheArgs) ToSecretBackendConnectionRedisElasticacheOutput() SecretBackendConnectionRedisElasticacheOutput {
	return i.ToSecretBackendConnectionRedisElasticacheOutputWithContext(context.Background())
}

func (i SecretBackendConnectionRedisElasticacheArgs) ToSecretBackendConnectionRedisElasticacheOutputWithContext(ctx context.Context) SecretBackendConnectionRedisElasticacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedisElasticacheOutput)
}

func (i SecretBackendConnectionRedisElasticacheArgs) ToSecretBackendConnectionRedisElasticachePtrOutput() SecretBackendConnectionRedisElasticachePtrOutput {
	return i.ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionRedisElasticacheArgs) ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisElasticachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedisElasticacheOutput).ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(ctx)
}

// SecretBackendConnectionRedisElasticachePtrInput is an input type that accepts SecretBackendConnectionRedisElasticacheArgs, SecretBackendConnectionRedisElasticachePtr and SecretBackendConnectionRedisElasticachePtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionRedisElasticachePtrInput` via:
//
//	        SecretBackendConnectionRedisElasticacheArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionRedisElasticachePtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionRedisElasticachePtrOutput() SecretBackendConnectionRedisElasticachePtrOutput
	ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(context.Context) SecretBackendConnectionRedisElasticachePtrOutput
}

type secretBackendConnectionRedisElasticachePtrType SecretBackendConnectionRedisElasticacheArgs

func SecretBackendConnectionRedisElasticachePtr(v *SecretBackendConnectionRedisElasticacheArgs) SecretBackendConnectionRedisElasticachePtrInput {
	return (*secretBackendConnectionRedisElasticachePtrType)(v)
}

func (*secretBackendConnectionRedisElasticachePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionRedisElasticache)(nil)).Elem()
}

func (i *secretBackendConnectionRedisElasticachePtrType) ToSecretBackendConnectionRedisElasticachePtrOutput() SecretBackendConnectionRedisElasticachePtrOutput {
	return i.ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionRedisElasticachePtrType) ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisElasticachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedisElasticachePtrOutput)
}

type SecretBackendConnectionRedisElasticacheOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionRedisElasticacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionRedisElasticache)(nil)).Elem()
}

func (o SecretBackendConnectionRedisElasticacheOutput) ToSecretBackendConnectionRedisElasticacheOutput() SecretBackendConnectionRedisElasticacheOutput {
	return o
}

func (o SecretBackendConnectionRedisElasticacheOutput) ToSecretBackendConnectionRedisElasticacheOutputWithContext(ctx context.Context) SecretBackendConnectionRedisElasticacheOutput {
	return o
}

func (o SecretBackendConnectionRedisElasticacheOutput) ToSecretBackendConnectionRedisElasticachePtrOutput() SecretBackendConnectionRedisElasticachePtrOutput {
	return o.ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionRedisElasticacheOutput) ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisElasticachePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionRedisElasticache) *SecretBackendConnectionRedisElasticache {
		return &v
	}).(SecretBackendConnectionRedisElasticachePtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionRedisElasticacheOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedisElasticache) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
func (o SecretBackendConnectionRedisElasticacheOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedisElasticache) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionRedisElasticacheOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedisElasticache) string { return v.Url }).(pulumi.StringOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionRedisElasticacheOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedisElasticache) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionRedisElasticachePtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionRedisElasticachePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionRedisElasticache)(nil)).Elem()
}

func (o SecretBackendConnectionRedisElasticachePtrOutput) ToSecretBackendConnectionRedisElasticachePtrOutput() SecretBackendConnectionRedisElasticachePtrOutput {
	return o
}

func (o SecretBackendConnectionRedisElasticachePtrOutput) ToSecretBackendConnectionRedisElasticachePtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedisElasticachePtrOutput {
	return o
}

func (o SecretBackendConnectionRedisElasticachePtrOutput) Elem() SecretBackendConnectionRedisElasticacheOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedisElasticache) SecretBackendConnectionRedisElasticache {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionRedisElasticache
		return ret
	}).(SecretBackendConnectionRedisElasticacheOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionRedisElasticachePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedisElasticache) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
func (o SecretBackendConnectionRedisElasticachePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedisElasticache) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionRedisElasticachePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedisElasticache) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionRedisElasticachePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedisElasticache) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionRedshift struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionRedshiftInput is an input type that accepts SecretBackendConnectionRedshiftArgs and SecretBackendConnectionRedshiftOutput values.
// You can construct a concrete instance of `SecretBackendConnectionRedshiftInput` via:
//
//	SecretBackendConnectionRedshiftArgs{...}
type SecretBackendConnectionRedshiftInput interface {
	pulumi.Input

	ToSecretBackendConnectionRedshiftOutput() SecretBackendConnectionRedshiftOutput
	ToSecretBackendConnectionRedshiftOutputWithContext(context.Context) SecretBackendConnectionRedshiftOutput
}

type SecretBackendConnectionRedshiftArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionRedshift)(nil)).Elem()
}

func (i SecretBackendConnectionRedshiftArgs) ToSecretBackendConnectionRedshiftOutput() SecretBackendConnectionRedshiftOutput {
	return i.ToSecretBackendConnectionRedshiftOutputWithContext(context.Background())
}

func (i SecretBackendConnectionRedshiftArgs) ToSecretBackendConnectionRedshiftOutputWithContext(ctx context.Context) SecretBackendConnectionRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedshiftOutput)
}

func (i SecretBackendConnectionRedshiftArgs) ToSecretBackendConnectionRedshiftPtrOutput() SecretBackendConnectionRedshiftPtrOutput {
	return i.ToSecretBackendConnectionRedshiftPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionRedshiftArgs) ToSecretBackendConnectionRedshiftPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedshiftOutput).ToSecretBackendConnectionRedshiftPtrOutputWithContext(ctx)
}

// SecretBackendConnectionRedshiftPtrInput is an input type that accepts SecretBackendConnectionRedshiftArgs, SecretBackendConnectionRedshiftPtr and SecretBackendConnectionRedshiftPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionRedshiftPtrInput` via:
//
//	        SecretBackendConnectionRedshiftArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionRedshiftPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionRedshiftPtrOutput() SecretBackendConnectionRedshiftPtrOutput
	ToSecretBackendConnectionRedshiftPtrOutputWithContext(context.Context) SecretBackendConnectionRedshiftPtrOutput
}

type secretBackendConnectionRedshiftPtrType SecretBackendConnectionRedshiftArgs

func SecretBackendConnectionRedshiftPtr(v *SecretBackendConnectionRedshiftArgs) SecretBackendConnectionRedshiftPtrInput {
	return (*secretBackendConnectionRedshiftPtrType)(v)
}

func (*secretBackendConnectionRedshiftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionRedshift)(nil)).Elem()
}

func (i *secretBackendConnectionRedshiftPtrType) ToSecretBackendConnectionRedshiftPtrOutput() SecretBackendConnectionRedshiftPtrOutput {
	return i.ToSecretBackendConnectionRedshiftPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionRedshiftPtrType) ToSecretBackendConnectionRedshiftPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionRedshiftPtrOutput)
}

type SecretBackendConnectionRedshiftOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionRedshift)(nil)).Elem()
}

func (o SecretBackendConnectionRedshiftOutput) ToSecretBackendConnectionRedshiftOutput() SecretBackendConnectionRedshiftOutput {
	return o
}

func (o SecretBackendConnectionRedshiftOutput) ToSecretBackendConnectionRedshiftOutputWithContext(ctx context.Context) SecretBackendConnectionRedshiftOutput {
	return o
}

func (o SecretBackendConnectionRedshiftOutput) ToSecretBackendConnectionRedshiftPtrOutput() SecretBackendConnectionRedshiftPtrOutput {
	return o.ToSecretBackendConnectionRedshiftPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionRedshiftOutput) ToSecretBackendConnectionRedshiftPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedshiftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionRedshift) *SecretBackendConnectionRedshift {
		return &v
	}).(SecretBackendConnectionRedshiftPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionRedshiftOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionRedshiftOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionRedshiftOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionRedshiftOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionRedshiftOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionRedshiftOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionRedshiftOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionRedshiftOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionRedshift) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionRedshiftPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionRedshiftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionRedshift)(nil)).Elem()
}

func (o SecretBackendConnectionRedshiftPtrOutput) ToSecretBackendConnectionRedshiftPtrOutput() SecretBackendConnectionRedshiftPtrOutput {
	return o
}

func (o SecretBackendConnectionRedshiftPtrOutput) ToSecretBackendConnectionRedshiftPtrOutputWithContext(ctx context.Context) SecretBackendConnectionRedshiftPtrOutput {
	return o
}

func (o SecretBackendConnectionRedshiftPtrOutput) Elem() SecretBackendConnectionRedshiftOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) SecretBackendConnectionRedshift {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionRedshift
		return ret
	}).(SecretBackendConnectionRedshiftOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionRedshiftPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// Disable special character escaping in username and password.
func (o SecretBackendConnectionRedshiftPtrOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *bool {
		if v == nil {
			return nil
		}
		return v.DisableEscaping
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionRedshiftPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionRedshiftPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionRedshiftPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionRedshiftPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionRedshiftPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionRedshiftPtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionRedshift) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionSnowflake struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// SecretBackendConnectionSnowflakeInput is an input type that accepts SecretBackendConnectionSnowflakeArgs and SecretBackendConnectionSnowflakeOutput values.
// You can construct a concrete instance of `SecretBackendConnectionSnowflakeInput` via:
//
//	SecretBackendConnectionSnowflakeArgs{...}
type SecretBackendConnectionSnowflakeInput interface {
	pulumi.Input

	ToSecretBackendConnectionSnowflakeOutput() SecretBackendConnectionSnowflakeOutput
	ToSecretBackendConnectionSnowflakeOutputWithContext(context.Context) SecretBackendConnectionSnowflakeOutput
}

type SecretBackendConnectionSnowflakeArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Template describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
}

func (SecretBackendConnectionSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionSnowflake)(nil)).Elem()
}

func (i SecretBackendConnectionSnowflakeArgs) ToSecretBackendConnectionSnowflakeOutput() SecretBackendConnectionSnowflakeOutput {
	return i.ToSecretBackendConnectionSnowflakeOutputWithContext(context.Background())
}

func (i SecretBackendConnectionSnowflakeArgs) ToSecretBackendConnectionSnowflakeOutputWithContext(ctx context.Context) SecretBackendConnectionSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionSnowflakeOutput)
}

func (i SecretBackendConnectionSnowflakeArgs) ToSecretBackendConnectionSnowflakePtrOutput() SecretBackendConnectionSnowflakePtrOutput {
	return i.ToSecretBackendConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionSnowflakeArgs) ToSecretBackendConnectionSnowflakePtrOutputWithContext(ctx context.Context) SecretBackendConnectionSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionSnowflakeOutput).ToSecretBackendConnectionSnowflakePtrOutputWithContext(ctx)
}

// SecretBackendConnectionSnowflakePtrInput is an input type that accepts SecretBackendConnectionSnowflakeArgs, SecretBackendConnectionSnowflakePtr and SecretBackendConnectionSnowflakePtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionSnowflakePtrInput` via:
//
//	        SecretBackendConnectionSnowflakeArgs{...}
//
//	or:
//
//	        nil
type SecretBackendConnectionSnowflakePtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionSnowflakePtrOutput() SecretBackendConnectionSnowflakePtrOutput
	ToSecretBackendConnectionSnowflakePtrOutputWithContext(context.Context) SecretBackendConnectionSnowflakePtrOutput
}

type secretBackendConnectionSnowflakePtrType SecretBackendConnectionSnowflakeArgs

func SecretBackendConnectionSnowflakePtr(v *SecretBackendConnectionSnowflakeArgs) SecretBackendConnectionSnowflakePtrInput {
	return (*secretBackendConnectionSnowflakePtrType)(v)
}

func (*secretBackendConnectionSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionSnowflake)(nil)).Elem()
}

func (i *secretBackendConnectionSnowflakePtrType) ToSecretBackendConnectionSnowflakePtrOutput() SecretBackendConnectionSnowflakePtrOutput {
	return i.ToSecretBackendConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionSnowflakePtrType) ToSecretBackendConnectionSnowflakePtrOutputWithContext(ctx context.Context) SecretBackendConnectionSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionSnowflakePtrOutput)
}

type SecretBackendConnectionSnowflakeOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionSnowflake)(nil)).Elem()
}

func (o SecretBackendConnectionSnowflakeOutput) ToSecretBackendConnectionSnowflakeOutput() SecretBackendConnectionSnowflakeOutput {
	return o
}

func (o SecretBackendConnectionSnowflakeOutput) ToSecretBackendConnectionSnowflakeOutputWithContext(ctx context.Context) SecretBackendConnectionSnowflakeOutput {
	return o
}

func (o SecretBackendConnectionSnowflakeOutput) ToSecretBackendConnectionSnowflakePtrOutput() SecretBackendConnectionSnowflakePtrOutput {
	return o.ToSecretBackendConnectionSnowflakePtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionSnowflakeOutput) ToSecretBackendConnectionSnowflakePtrOutputWithContext(ctx context.Context) SecretBackendConnectionSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretBackendConnectionSnowflake) *SecretBackendConnectionSnowflake {
		return &v
	}).(SecretBackendConnectionSnowflakePtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionSnowflakeOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionSnowflake) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionSnowflakeOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionSnowflake) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionSnowflakeOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionSnowflake) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionSnowflakeOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionSnowflake) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionSnowflakeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionSnowflake) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionSnowflakeOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionSnowflake) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionSnowflakeOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionSnowflake) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionSnowflakePtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionSnowflake)(nil)).Elem()
}

func (o SecretBackendConnectionSnowflakePtrOutput) ToSecretBackendConnectionSnowflakePtrOutput() SecretBackendConnectionSnowflakePtrOutput {
	return o
}

func (o SecretBackendConnectionSnowflakePtrOutput) ToSecretBackendConnectionSnowflakePtrOutputWithContext(ctx context.Context) SecretBackendConnectionSnowflakePtrOutput {
	return o
}

func (o SecretBackendConnectionSnowflakePtrOutput) Elem() SecretBackendConnectionSnowflakeOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) SecretBackendConnectionSnowflake {
		if v != nil {
			return *v
		}
		var ret SecretBackendConnectionSnowflake
		return ret
	}).(SecretBackendConnectionSnowflakeOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
// for an example.
func (o SecretBackendConnectionSnowflakePtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionSnowflakePtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionSnowflakePtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionSnowflakePtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

// The password to authenticate with.
func (o SecretBackendConnectionSnowflakePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o SecretBackendConnectionSnowflakePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated.
func (o SecretBackendConnectionSnowflakePtrOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.UsernameTemplate
	}).(pulumi.StringPtrOutput)
}

type SecretsMountCassandra struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool  `pulumi:"insecureTls"`
	Name        string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountCassandraInput is an input type that accepts SecretsMountCassandraArgs and SecretsMountCassandraOutput values.
// You can construct a concrete instance of `SecretsMountCassandraInput` via:
//
//	SecretsMountCassandraArgs{...}
type SecretsMountCassandraInput interface {
	pulumi.Input

	ToSecretsMountCassandraOutput() SecretsMountCassandraOutput
	ToSecretsMountCassandraOutputWithContext(context.Context) SecretsMountCassandraOutput
}

type SecretsMountCassandraArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	Name        pulumi.StringInput  `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion pulumi.IntPtrInput `pulumi:"protocolVersion"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountCassandraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountCassandra)(nil)).Elem()
}

func (i SecretsMountCassandraArgs) ToSecretsMountCassandraOutput() SecretsMountCassandraOutput {
	return i.ToSecretsMountCassandraOutputWithContext(context.Background())
}

func (i SecretsMountCassandraArgs) ToSecretsMountCassandraOutputWithContext(ctx context.Context) SecretsMountCassandraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountCassandraOutput)
}

// SecretsMountCassandraArrayInput is an input type that accepts SecretsMountCassandraArray and SecretsMountCassandraArrayOutput values.
// You can construct a concrete instance of `SecretsMountCassandraArrayInput` via:
//
//	SecretsMountCassandraArray{ SecretsMountCassandraArgs{...} }
type SecretsMountCassandraArrayInput interface {
	pulumi.Input

	ToSecretsMountCassandraArrayOutput() SecretsMountCassandraArrayOutput
	ToSecretsMountCassandraArrayOutputWithContext(context.Context) SecretsMountCassandraArrayOutput
}

type SecretsMountCassandraArray []SecretsMountCassandraInput

func (SecretsMountCassandraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountCassandra)(nil)).Elem()
}

func (i SecretsMountCassandraArray) ToSecretsMountCassandraArrayOutput() SecretsMountCassandraArrayOutput {
	return i.ToSecretsMountCassandraArrayOutputWithContext(context.Background())
}

func (i SecretsMountCassandraArray) ToSecretsMountCassandraArrayOutputWithContext(ctx context.Context) SecretsMountCassandraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountCassandraArrayOutput)
}

type SecretsMountCassandraOutput struct{ *pulumi.OutputState }

func (SecretsMountCassandraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountCassandra)(nil)).Elem()
}

func (o SecretsMountCassandraOutput) ToSecretsMountCassandraOutput() SecretsMountCassandraOutput {
	return o
}

func (o SecretsMountCassandraOutput) ToSecretsMountCassandraOutputWithContext(ctx context.Context) SecretsMountCassandraOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountCassandraOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountCassandra) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretsMountCassandraOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountCassandraOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountCassandra) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The hosts to connect to.
func (o SecretsMountCassandraOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountCassandra) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretsMountCassandraOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

func (o SecretsMountCassandraOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountCassandra) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountCassandraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretsMountCassandraOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretsMountCassandraOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountCassandraOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretsMountCassandraOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretsMountCassandraOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountCassandraOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountCassandra) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretsMountCassandraOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountCassandraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountCassandraOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountCassandra) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountCassandraArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountCassandraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountCassandra)(nil)).Elem()
}

func (o SecretsMountCassandraArrayOutput) ToSecretsMountCassandraArrayOutput() SecretsMountCassandraArrayOutput {
	return o
}

func (o SecretsMountCassandraArrayOutput) ToSecretsMountCassandraArrayOutputWithContext(ctx context.Context) SecretsMountCassandraArrayOutput {
	return o
}

func (o SecretsMountCassandraArrayOutput) Index(i pulumi.IntInput) SecretsMountCassandraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountCassandra {
		return vs[0].([]SecretsMountCassandra)[vs[1].(int)]
	}).(SecretsMountCassandraOutput)
}

type SecretsMountCouchbase struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	Base64Pem *string `pulumi:"base64Pem"`
	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	BucketName *string `pulumi:"bucketName"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool  `pulumi:"insecureTls"`
	Name        string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountCouchbaseInput is an input type that accepts SecretsMountCouchbaseArgs and SecretsMountCouchbaseOutput values.
// You can construct a concrete instance of `SecretsMountCouchbaseInput` via:
//
//	SecretsMountCouchbaseArgs{...}
type SecretsMountCouchbaseInput interface {
	pulumi.Input

	ToSecretsMountCouchbaseOutput() SecretsMountCouchbaseOutput
	ToSecretsMountCouchbaseOutputWithContext(context.Context) SecretsMountCouchbaseOutput
}

type SecretsMountCouchbaseArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
	Base64Pem pulumi.StringPtrInput `pulumi:"base64Pem"`
	// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	Name        pulumi.StringInput  `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username pulumi.StringInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountCouchbaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountCouchbase)(nil)).Elem()
}

func (i SecretsMountCouchbaseArgs) ToSecretsMountCouchbaseOutput() SecretsMountCouchbaseOutput {
	return i.ToSecretsMountCouchbaseOutputWithContext(context.Background())
}

func (i SecretsMountCouchbaseArgs) ToSecretsMountCouchbaseOutputWithContext(ctx context.Context) SecretsMountCouchbaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountCouchbaseOutput)
}

// SecretsMountCouchbaseArrayInput is an input type that accepts SecretsMountCouchbaseArray and SecretsMountCouchbaseArrayOutput values.
// You can construct a concrete instance of `SecretsMountCouchbaseArrayInput` via:
//
//	SecretsMountCouchbaseArray{ SecretsMountCouchbaseArgs{...} }
type SecretsMountCouchbaseArrayInput interface {
	pulumi.Input

	ToSecretsMountCouchbaseArrayOutput() SecretsMountCouchbaseArrayOutput
	ToSecretsMountCouchbaseArrayOutputWithContext(context.Context) SecretsMountCouchbaseArrayOutput
}

type SecretsMountCouchbaseArray []SecretsMountCouchbaseInput

func (SecretsMountCouchbaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountCouchbase)(nil)).Elem()
}

func (i SecretsMountCouchbaseArray) ToSecretsMountCouchbaseArrayOutput() SecretsMountCouchbaseArrayOutput {
	return i.ToSecretsMountCouchbaseArrayOutputWithContext(context.Background())
}

func (i SecretsMountCouchbaseArray) ToSecretsMountCouchbaseArrayOutputWithContext(ctx context.Context) SecretsMountCouchbaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountCouchbaseArrayOutput)
}

type SecretsMountCouchbaseOutput struct{ *pulumi.OutputState }

func (SecretsMountCouchbaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountCouchbase)(nil)).Elem()
}

func (o SecretsMountCouchbaseOutput) ToSecretsMountCouchbaseOutput() SecretsMountCouchbaseOutput {
	return o
}

func (o SecretsMountCouchbaseOutput) ToSecretsMountCouchbaseOutputWithContext(ctx context.Context) SecretsMountCouchbaseOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountCouchbaseOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
func (o SecretsMountCouchbaseOutput) Base64Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) *string { return v.Base64Pem }).(pulumi.StringPtrOutput)
}

// Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
func (o SecretsMountCouchbaseOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountCouchbaseOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The hosts to connect to.
func (o SecretsMountCouchbaseOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretsMountCouchbaseOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

func (o SecretsMountCouchbaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountCouchbaseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountCouchbaseOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountCouchbaseOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretsMountCouchbaseOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountCouchbaseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) string { return v.Username }).(pulumi.StringOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountCouchbaseOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountCouchbaseOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountCouchbase) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountCouchbaseArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountCouchbaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountCouchbase)(nil)).Elem()
}

func (o SecretsMountCouchbaseArrayOutput) ToSecretsMountCouchbaseArrayOutput() SecretsMountCouchbaseArrayOutput {
	return o
}

func (o SecretsMountCouchbaseArrayOutput) ToSecretsMountCouchbaseArrayOutputWithContext(ctx context.Context) SecretsMountCouchbaseArrayOutput {
	return o
}

func (o SecretsMountCouchbaseArrayOutput) Index(i pulumi.IntInput) SecretsMountCouchbaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountCouchbase {
		return vs[0].([]SecretsMountCouchbase)[vs[1].(int)]
	}).(SecretsMountCouchbaseOutput)
}

type SecretsMountElasticsearch struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert *string `pulumi:"caCert"`
	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
	CaPath *string `pulumi:"caPath"`
	// The path to the certificate for the Elasticsearch client to present for communication.
	ClientCert *string `pulumi:"clientCert"`
	// The path to the key for the Elasticsearch client to use for communication.
	ClientKey *string `pulumi:"clientKey"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// Whether to disable certificate verification.
	Insecure *bool  `pulumi:"insecure"`
	Name     string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// This, if set, is used to set the SNI host when connecting via TLS.
	TlsServerName *string `pulumi:"tlsServerName"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The root credential username used in the connection URL.
	Username string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountElasticsearchInput is an input type that accepts SecretsMountElasticsearchArgs and SecretsMountElasticsearchOutput values.
// You can construct a concrete instance of `SecretsMountElasticsearchInput` via:
//
//	SecretsMountElasticsearchArgs{...}
type SecretsMountElasticsearchInput interface {
	pulumi.Input

	ToSecretsMountElasticsearchOutput() SecretsMountElasticsearchOutput
	ToSecretsMountElasticsearchOutputWithContext(context.Context) SecretsMountElasticsearchOutput
}

type SecretsMountElasticsearchArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
	CaPath pulumi.StringPtrInput `pulumi:"caPath"`
	// The path to the certificate for the Elasticsearch client to present for communication.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// The path to the key for the Elasticsearch client to use for communication.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// Whether to disable certificate verification.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	Name     pulumi.StringInput  `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// This, if set, is used to set the SNI host when connecting via TLS.
	TlsServerName pulumi.StringPtrInput `pulumi:"tlsServerName"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The root credential username used in the connection URL.
	Username pulumi.StringInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountElasticsearch)(nil)).Elem()
}

func (i SecretsMountElasticsearchArgs) ToSecretsMountElasticsearchOutput() SecretsMountElasticsearchOutput {
	return i.ToSecretsMountElasticsearchOutputWithContext(context.Background())
}

func (i SecretsMountElasticsearchArgs) ToSecretsMountElasticsearchOutputWithContext(ctx context.Context) SecretsMountElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountElasticsearchOutput)
}

// SecretsMountElasticsearchArrayInput is an input type that accepts SecretsMountElasticsearchArray and SecretsMountElasticsearchArrayOutput values.
// You can construct a concrete instance of `SecretsMountElasticsearchArrayInput` via:
//
//	SecretsMountElasticsearchArray{ SecretsMountElasticsearchArgs{...} }
type SecretsMountElasticsearchArrayInput interface {
	pulumi.Input

	ToSecretsMountElasticsearchArrayOutput() SecretsMountElasticsearchArrayOutput
	ToSecretsMountElasticsearchArrayOutputWithContext(context.Context) SecretsMountElasticsearchArrayOutput
}

type SecretsMountElasticsearchArray []SecretsMountElasticsearchInput

func (SecretsMountElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountElasticsearch)(nil)).Elem()
}

func (i SecretsMountElasticsearchArray) ToSecretsMountElasticsearchArrayOutput() SecretsMountElasticsearchArrayOutput {
	return i.ToSecretsMountElasticsearchArrayOutputWithContext(context.Background())
}

func (i SecretsMountElasticsearchArray) ToSecretsMountElasticsearchArrayOutputWithContext(ctx context.Context) SecretsMountElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountElasticsearchArrayOutput)
}

type SecretsMountElasticsearchOutput struct{ *pulumi.OutputState }

func (SecretsMountElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountElasticsearch)(nil)).Elem()
}

func (o SecretsMountElasticsearchOutput) ToSecretsMountElasticsearchOutput() SecretsMountElasticsearchOutput {
	return o
}

func (o SecretsMountElasticsearchOutput) ToSecretsMountElasticsearchOutputWithContext(ctx context.Context) SecretsMountElasticsearchOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountElasticsearchOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
func (o SecretsMountElasticsearchOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
func (o SecretsMountElasticsearchOutput) CaPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *string { return v.CaPath }).(pulumi.StringPtrOutput)
}

// The path to the certificate for the Elasticsearch client to present for communication.
func (o SecretsMountElasticsearchOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// The path to the key for the Elasticsearch client to use for communication.
func (o SecretsMountElasticsearchOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountElasticsearchOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// Whether to disable certificate verification.
func (o SecretsMountElasticsearchOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

func (o SecretsMountElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountElasticsearchOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountElasticsearchOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountElasticsearchOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// This, if set, is used to set the SNI host when connecting via TLS.
func (o SecretsMountElasticsearchOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *string { return v.TlsServerName }).(pulumi.StringPtrOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretsMountElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountElasticsearchOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) string { return v.Username }).(pulumi.StringOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountElasticsearchOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountElasticsearchOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountElasticsearch) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountElasticsearch)(nil)).Elem()
}

func (o SecretsMountElasticsearchArrayOutput) ToSecretsMountElasticsearchArrayOutput() SecretsMountElasticsearchArrayOutput {
	return o
}

func (o SecretsMountElasticsearchArrayOutput) ToSecretsMountElasticsearchArrayOutputWithContext(ctx context.Context) SecretsMountElasticsearchArrayOutput {
	return o
}

func (o SecretsMountElasticsearchArrayOutput) Index(i pulumi.IntInput) SecretsMountElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountElasticsearch {
		return vs[0].([]SecretsMountElasticsearch)[vs[1].(int)]
	}).(SecretsMountElasticsearchOutput)
}

type SecretsMountHana struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountHanaInput is an input type that accepts SecretsMountHanaArgs and SecretsMountHanaOutput values.
// You can construct a concrete instance of `SecretsMountHanaInput` via:
//
//	SecretsMountHanaArgs{...}
type SecretsMountHanaInput interface {
	pulumi.Input

	ToSecretsMountHanaOutput() SecretsMountHanaOutput
	ToSecretsMountHanaOutputWithContext(context.Context) SecretsMountHanaOutput
}

type SecretsMountHanaArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountHanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountHana)(nil)).Elem()
}

func (i SecretsMountHanaArgs) ToSecretsMountHanaOutput() SecretsMountHanaOutput {
	return i.ToSecretsMountHanaOutputWithContext(context.Background())
}

func (i SecretsMountHanaArgs) ToSecretsMountHanaOutputWithContext(ctx context.Context) SecretsMountHanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountHanaOutput)
}

// SecretsMountHanaArrayInput is an input type that accepts SecretsMountHanaArray and SecretsMountHanaArrayOutput values.
// You can construct a concrete instance of `SecretsMountHanaArrayInput` via:
//
//	SecretsMountHanaArray{ SecretsMountHanaArgs{...} }
type SecretsMountHanaArrayInput interface {
	pulumi.Input

	ToSecretsMountHanaArrayOutput() SecretsMountHanaArrayOutput
	ToSecretsMountHanaArrayOutputWithContext(context.Context) SecretsMountHanaArrayOutput
}

type SecretsMountHanaArray []SecretsMountHanaInput

func (SecretsMountHanaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountHana)(nil)).Elem()
}

func (i SecretsMountHanaArray) ToSecretsMountHanaArrayOutput() SecretsMountHanaArrayOutput {
	return i.ToSecretsMountHanaArrayOutputWithContext(context.Background())
}

func (i SecretsMountHanaArray) ToSecretsMountHanaArrayOutputWithContext(ctx context.Context) SecretsMountHanaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountHanaArrayOutput)
}

type SecretsMountHanaOutput struct{ *pulumi.OutputState }

func (SecretsMountHanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountHana)(nil)).Elem()
}

func (o SecretsMountHanaOutput) ToSecretsMountHanaOutput() SecretsMountHanaOutput {
	return o
}

func (o SecretsMountHanaOutput) ToSecretsMountHanaOutputWithContext(ctx context.Context) SecretsMountHanaOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountHanaOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountHana) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountHanaOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountHanaOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountHana) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// Disable special character escaping in username and password.
func (o SecretsMountHanaOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountHanaOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountHanaOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountHanaOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountHanaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountHana) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountHanaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountHanaOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountHanaOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountHana) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountHanaOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountHanaOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountHana) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountHanaArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountHanaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountHana)(nil)).Elem()
}

func (o SecretsMountHanaArrayOutput) ToSecretsMountHanaArrayOutput() SecretsMountHanaArrayOutput {
	return o
}

func (o SecretsMountHanaArrayOutput) ToSecretsMountHanaArrayOutputWithContext(ctx context.Context) SecretsMountHanaArrayOutput {
	return o
}

func (o SecretsMountHanaArrayOutput) Index(i pulumi.IntInput) SecretsMountHanaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountHana {
		return vs[0].([]SecretsMountHana)[vs[1].(int)]
	}).(SecretsMountHanaOutput)
}

type SecretsMountInfluxdb struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The host to connect to.
	Host string `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool  `pulumi:"insecureTls"`
	Name        string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountInfluxdbInput is an input type that accepts SecretsMountInfluxdbArgs and SecretsMountInfluxdbOutput values.
// You can construct a concrete instance of `SecretsMountInfluxdbInput` via:
//
//	SecretsMountInfluxdbArgs{...}
type SecretsMountInfluxdbInput interface {
	pulumi.Input

	ToSecretsMountInfluxdbOutput() SecretsMountInfluxdbOutput
	ToSecretsMountInfluxdbOutputWithContext(context.Context) SecretsMountInfluxdbOutput
}

type SecretsMountInfluxdbArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The host to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	Name        pulumi.StringInput  `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username pulumi.StringInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountInfluxdbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountInfluxdb)(nil)).Elem()
}

func (i SecretsMountInfluxdbArgs) ToSecretsMountInfluxdbOutput() SecretsMountInfluxdbOutput {
	return i.ToSecretsMountInfluxdbOutputWithContext(context.Background())
}

func (i SecretsMountInfluxdbArgs) ToSecretsMountInfluxdbOutputWithContext(ctx context.Context) SecretsMountInfluxdbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountInfluxdbOutput)
}

// SecretsMountInfluxdbArrayInput is an input type that accepts SecretsMountInfluxdbArray and SecretsMountInfluxdbArrayOutput values.
// You can construct a concrete instance of `SecretsMountInfluxdbArrayInput` via:
//
//	SecretsMountInfluxdbArray{ SecretsMountInfluxdbArgs{...} }
type SecretsMountInfluxdbArrayInput interface {
	pulumi.Input

	ToSecretsMountInfluxdbArrayOutput() SecretsMountInfluxdbArrayOutput
	ToSecretsMountInfluxdbArrayOutputWithContext(context.Context) SecretsMountInfluxdbArrayOutput
}

type SecretsMountInfluxdbArray []SecretsMountInfluxdbInput

func (SecretsMountInfluxdbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountInfluxdb)(nil)).Elem()
}

func (i SecretsMountInfluxdbArray) ToSecretsMountInfluxdbArrayOutput() SecretsMountInfluxdbArrayOutput {
	return i.ToSecretsMountInfluxdbArrayOutputWithContext(context.Background())
}

func (i SecretsMountInfluxdbArray) ToSecretsMountInfluxdbArrayOutputWithContext(ctx context.Context) SecretsMountInfluxdbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountInfluxdbArrayOutput)
}

type SecretsMountInfluxdbOutput struct{ *pulumi.OutputState }

func (SecretsMountInfluxdbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountInfluxdb)(nil)).Elem()
}

func (o SecretsMountInfluxdbOutput) ToSecretsMountInfluxdbOutput() SecretsMountInfluxdbOutput {
	return o
}

func (o SecretsMountInfluxdbOutput) ToSecretsMountInfluxdbOutputWithContext(ctx context.Context) SecretsMountInfluxdbOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountInfluxdbOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretsMountInfluxdbOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountInfluxdbOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The host to connect to.
func (o SecretsMountInfluxdbOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretsMountInfluxdbOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

func (o SecretsMountInfluxdbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountInfluxdbOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) string { return v.Password }).(pulumi.StringOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretsMountInfluxdbOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretsMountInfluxdbOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountInfluxdbOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretsMountInfluxdbOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountInfluxdbOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretsMountInfluxdbOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountInfluxdbOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) string { return v.Username }).(pulumi.StringOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountInfluxdbOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountInfluxdbOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountInfluxdb) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountInfluxdbArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountInfluxdbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountInfluxdb)(nil)).Elem()
}

func (o SecretsMountInfluxdbArrayOutput) ToSecretsMountInfluxdbArrayOutput() SecretsMountInfluxdbArrayOutput {
	return o
}

func (o SecretsMountInfluxdbArrayOutput) ToSecretsMountInfluxdbArrayOutputWithContext(ctx context.Context) SecretsMountInfluxdbArrayOutput {
	return o
}

func (o SecretsMountInfluxdbArrayOutput) Index(i pulumi.IntInput) SecretsMountInfluxdbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountInfluxdb {
		return vs[0].([]SecretsMountInfluxdb)[vs[1].(int)]
	}).(SecretsMountInfluxdbOutput)
}

type SecretsMountMongodb struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountMongodbInput is an input type that accepts SecretsMountMongodbArgs and SecretsMountMongodbOutput values.
// You can construct a concrete instance of `SecretsMountMongodbInput` via:
//
//	SecretsMountMongodbArgs{...}
type SecretsMountMongodbInput interface {
	pulumi.Input

	ToSecretsMountMongodbOutput() SecretsMountMongodbOutput
	ToSecretsMountMongodbOutputWithContext(context.Context) SecretsMountMongodbOutput
}

type SecretsMountMongodbArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountMongodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMongodb)(nil)).Elem()
}

func (i SecretsMountMongodbArgs) ToSecretsMountMongodbOutput() SecretsMountMongodbOutput {
	return i.ToSecretsMountMongodbOutputWithContext(context.Background())
}

func (i SecretsMountMongodbArgs) ToSecretsMountMongodbOutputWithContext(ctx context.Context) SecretsMountMongodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMongodbOutput)
}

// SecretsMountMongodbArrayInput is an input type that accepts SecretsMountMongodbArray and SecretsMountMongodbArrayOutput values.
// You can construct a concrete instance of `SecretsMountMongodbArrayInput` via:
//
//	SecretsMountMongodbArray{ SecretsMountMongodbArgs{...} }
type SecretsMountMongodbArrayInput interface {
	pulumi.Input

	ToSecretsMountMongodbArrayOutput() SecretsMountMongodbArrayOutput
	ToSecretsMountMongodbArrayOutputWithContext(context.Context) SecretsMountMongodbArrayOutput
}

type SecretsMountMongodbArray []SecretsMountMongodbInput

func (SecretsMountMongodbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMongodb)(nil)).Elem()
}

func (i SecretsMountMongodbArray) ToSecretsMountMongodbArrayOutput() SecretsMountMongodbArrayOutput {
	return i.ToSecretsMountMongodbArrayOutputWithContext(context.Background())
}

func (i SecretsMountMongodbArray) ToSecretsMountMongodbArrayOutputWithContext(ctx context.Context) SecretsMountMongodbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMongodbArrayOutput)
}

type SecretsMountMongodbOutput struct{ *pulumi.OutputState }

func (SecretsMountMongodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMongodb)(nil)).Elem()
}

func (o SecretsMountMongodbOutput) ToSecretsMountMongodbOutput() SecretsMountMongodbOutput {
	return o
}

func (o SecretsMountMongodbOutput) ToSecretsMountMongodbOutputWithContext(ctx context.Context) SecretsMountMongodbOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountMongodbOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMongodb) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountMongodbOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountMongodbOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountMongodb) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountMongodbOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountMongodbOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountMongodbOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountMongodbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMongodb) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountMongodbOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountMongodbOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountMongodbOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMongodb) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountMongodbOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountMongodbOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountMongodbOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodb) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountMongodbArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountMongodbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMongodb)(nil)).Elem()
}

func (o SecretsMountMongodbArrayOutput) ToSecretsMountMongodbArrayOutput() SecretsMountMongodbArrayOutput {
	return o
}

func (o SecretsMountMongodbArrayOutput) ToSecretsMountMongodbArrayOutputWithContext(ctx context.Context) SecretsMountMongodbArrayOutput {
	return o
}

func (o SecretsMountMongodbArrayOutput) Index(i pulumi.IntInput) SecretsMountMongodbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountMongodb {
		return vs[0].([]SecretsMountMongodb)[vs[1].(int)]
	}).(SecretsMountMongodbOutput)
}

type SecretsMountMongodbatla struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	Name string                 `pulumi:"name"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	PrivateKey string `pulumi:"privateKey"`
	// The Project ID the Database User should be created within.
	ProjectId string `pulumi:"projectId"`
	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	PublicKey string `pulumi:"publicKey"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountMongodbatlaInput is an input type that accepts SecretsMountMongodbatlaArgs and SecretsMountMongodbatlaOutput values.
// You can construct a concrete instance of `SecretsMountMongodbatlaInput` via:
//
//	SecretsMountMongodbatlaArgs{...}
type SecretsMountMongodbatlaInput interface {
	pulumi.Input

	ToSecretsMountMongodbatlaOutput() SecretsMountMongodbatlaOutput
	ToSecretsMountMongodbatlaOutputWithContext(context.Context) SecretsMountMongodbatlaOutput
}

type SecretsMountMongodbatlaArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput    `pulumi:"data"`
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// The Private Programmatic API Key used to connect with MongoDB Atlas API.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// The Project ID the Database User should be created within.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountMongodbatlaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMongodbatla)(nil)).Elem()
}

func (i SecretsMountMongodbatlaArgs) ToSecretsMountMongodbatlaOutput() SecretsMountMongodbatlaOutput {
	return i.ToSecretsMountMongodbatlaOutputWithContext(context.Background())
}

func (i SecretsMountMongodbatlaArgs) ToSecretsMountMongodbatlaOutputWithContext(ctx context.Context) SecretsMountMongodbatlaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMongodbatlaOutput)
}

// SecretsMountMongodbatlaArrayInput is an input type that accepts SecretsMountMongodbatlaArray and SecretsMountMongodbatlaArrayOutput values.
// You can construct a concrete instance of `SecretsMountMongodbatlaArrayInput` via:
//
//	SecretsMountMongodbatlaArray{ SecretsMountMongodbatlaArgs{...} }
type SecretsMountMongodbatlaArrayInput interface {
	pulumi.Input

	ToSecretsMountMongodbatlaArrayOutput() SecretsMountMongodbatlaArrayOutput
	ToSecretsMountMongodbatlaArrayOutputWithContext(context.Context) SecretsMountMongodbatlaArrayOutput
}

type SecretsMountMongodbatlaArray []SecretsMountMongodbatlaInput

func (SecretsMountMongodbatlaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMongodbatla)(nil)).Elem()
}

func (i SecretsMountMongodbatlaArray) ToSecretsMountMongodbatlaArrayOutput() SecretsMountMongodbatlaArrayOutput {
	return i.ToSecretsMountMongodbatlaArrayOutputWithContext(context.Background())
}

func (i SecretsMountMongodbatlaArray) ToSecretsMountMongodbatlaArrayOutputWithContext(ctx context.Context) SecretsMountMongodbatlaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMongodbatlaArrayOutput)
}

type SecretsMountMongodbatlaOutput struct{ *pulumi.OutputState }

func (SecretsMountMongodbatlaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMongodbatla)(nil)).Elem()
}

func (o SecretsMountMongodbatlaOutput) ToSecretsMountMongodbatlaOutput() SecretsMountMongodbatlaOutput {
	return o
}

func (o SecretsMountMongodbatlaOutput) ToSecretsMountMongodbatlaOutputWithContext(ctx context.Context) SecretsMountMongodbatlaOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountMongodbatlaOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountMongodbatlaOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

func (o SecretsMountMongodbatlaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountMongodbatlaOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// The Private Programmatic API Key used to connect with MongoDB Atlas API.
func (o SecretsMountMongodbatlaOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// The Project ID the Database User should be created within.
func (o SecretsMountMongodbatlaOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
func (o SecretsMountMongodbatlaOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) string { return v.PublicKey }).(pulumi.StringOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountMongodbatlaOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountMongodbatlaOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMongodbatla) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountMongodbatlaArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountMongodbatlaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMongodbatla)(nil)).Elem()
}

func (o SecretsMountMongodbatlaArrayOutput) ToSecretsMountMongodbatlaArrayOutput() SecretsMountMongodbatlaArrayOutput {
	return o
}

func (o SecretsMountMongodbatlaArrayOutput) ToSecretsMountMongodbatlaArrayOutputWithContext(ctx context.Context) SecretsMountMongodbatlaArrayOutput {
	return o
}

func (o SecretsMountMongodbatlaArrayOutput) Index(i pulumi.IntInput) SecretsMountMongodbatlaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountMongodbatla {
		return vs[0].([]SecretsMountMongodbatla)[vs[1].(int)]
	}).(SecretsMountMongodbatlaOutput)
}

type SecretsMountMssql struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// For Vault v1.9+. Set to true when the target is a
	// Contained Database, e.g. AzureSQL.
	// See [Vault docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
	ContainedDb *bool `pulumi:"containedDb"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountMssqlInput is an input type that accepts SecretsMountMssqlArgs and SecretsMountMssqlOutput values.
// You can construct a concrete instance of `SecretsMountMssqlInput` via:
//
//	SecretsMountMssqlArgs{...}
type SecretsMountMssqlInput interface {
	pulumi.Input

	ToSecretsMountMssqlOutput() SecretsMountMssqlOutput
	ToSecretsMountMssqlOutputWithContext(context.Context) SecretsMountMssqlOutput
}

type SecretsMountMssqlArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// For Vault v1.9+. Set to true when the target is a
	// Contained Database, e.g. AzureSQL.
	// See [Vault docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
	ContainedDb pulumi.BoolPtrInput `pulumi:"containedDb"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountMssqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMssql)(nil)).Elem()
}

func (i SecretsMountMssqlArgs) ToSecretsMountMssqlOutput() SecretsMountMssqlOutput {
	return i.ToSecretsMountMssqlOutputWithContext(context.Background())
}

func (i SecretsMountMssqlArgs) ToSecretsMountMssqlOutputWithContext(ctx context.Context) SecretsMountMssqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMssqlOutput)
}

// SecretsMountMssqlArrayInput is an input type that accepts SecretsMountMssqlArray and SecretsMountMssqlArrayOutput values.
// You can construct a concrete instance of `SecretsMountMssqlArrayInput` via:
//
//	SecretsMountMssqlArray{ SecretsMountMssqlArgs{...} }
type SecretsMountMssqlArrayInput interface {
	pulumi.Input

	ToSecretsMountMssqlArrayOutput() SecretsMountMssqlArrayOutput
	ToSecretsMountMssqlArrayOutputWithContext(context.Context) SecretsMountMssqlArrayOutput
}

type SecretsMountMssqlArray []SecretsMountMssqlInput

func (SecretsMountMssqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMssql)(nil)).Elem()
}

func (i SecretsMountMssqlArray) ToSecretsMountMssqlArrayOutput() SecretsMountMssqlArrayOutput {
	return i.ToSecretsMountMssqlArrayOutputWithContext(context.Background())
}

func (i SecretsMountMssqlArray) ToSecretsMountMssqlArrayOutputWithContext(ctx context.Context) SecretsMountMssqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMssqlArrayOutput)
}

type SecretsMountMssqlOutput struct{ *pulumi.OutputState }

func (SecretsMountMssqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMssql)(nil)).Elem()
}

func (o SecretsMountMssqlOutput) ToSecretsMountMssqlOutput() SecretsMountMssqlOutput {
	return o
}

func (o SecretsMountMssqlOutput) ToSecretsMountMssqlOutputWithContext(ctx context.Context) SecretsMountMssqlOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountMssqlOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMssql) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountMssqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// For Vault v1.9+. Set to true when the target is a
// Contained Database, e.g. AzureSQL.
// See [Vault docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
func (o SecretsMountMssqlOutput) ContainedDb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *bool { return v.ContainedDb }).(pulumi.BoolPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountMssqlOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountMssql) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// Disable special character escaping in username and password.
func (o SecretsMountMssqlOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountMssqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountMssqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountMssqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountMssqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMssql) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountMssqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountMssqlOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountMssqlOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMssql) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountMssqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountMssqlOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountMssqlOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMssql) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountMssqlArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountMssqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMssql)(nil)).Elem()
}

func (o SecretsMountMssqlArrayOutput) ToSecretsMountMssqlArrayOutput() SecretsMountMssqlArrayOutput {
	return o
}

func (o SecretsMountMssqlArrayOutput) ToSecretsMountMssqlArrayOutputWithContext(ctx context.Context) SecretsMountMssqlArrayOutput {
	return o
}

func (o SecretsMountMssqlArrayOutput) Index(i pulumi.IntInput) SecretsMountMssqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountMssql {
		return vs[0].([]SecretsMountMssql)[vs[1].(int)]
	}).(SecretsMountMssqlOutput)
}

type SecretsMountMysql struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	AuthType     *string  `pulumi:"authType"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	ServiceAccountJson     *string  `pulumi:"serviceAccountJson"`
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TlsCa *string `pulumi:"tlsCa"`
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TlsCertificateKey *string `pulumi:"tlsCertificateKey"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountMysqlInput is an input type that accepts SecretsMountMysqlArgs and SecretsMountMysqlOutput values.
// You can construct a concrete instance of `SecretsMountMysqlInput` via:
//
//	SecretsMountMysqlArgs{...}
type SecretsMountMysqlInput interface {
	pulumi.Input

	ToSecretsMountMysqlOutput() SecretsMountMysqlOutput
	ToSecretsMountMysqlOutputWithContext(context.Context) SecretsMountMysqlOutput
}

type SecretsMountMysqlArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	AuthType     pulumi.StringPtrInput   `pulumi:"authType"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	ServiceAccountJson     pulumi.StringPtrInput   `pulumi:"serviceAccountJson"`
	// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
	TlsCa pulumi.StringPtrInput `pulumi:"tlsCa"`
	// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
	TlsCertificateKey pulumi.StringPtrInput `pulumi:"tlsCertificateKey"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysql)(nil)).Elem()
}

func (i SecretsMountMysqlArgs) ToSecretsMountMysqlOutput() SecretsMountMysqlOutput {
	return i.ToSecretsMountMysqlOutputWithContext(context.Background())
}

func (i SecretsMountMysqlArgs) ToSecretsMountMysqlOutputWithContext(ctx context.Context) SecretsMountMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlOutput)
}

// SecretsMountMysqlArrayInput is an input type that accepts SecretsMountMysqlArray and SecretsMountMysqlArrayOutput values.
// You can construct a concrete instance of `SecretsMountMysqlArrayInput` via:
//
//	SecretsMountMysqlArray{ SecretsMountMysqlArgs{...} }
type SecretsMountMysqlArrayInput interface {
	pulumi.Input

	ToSecretsMountMysqlArrayOutput() SecretsMountMysqlArrayOutput
	ToSecretsMountMysqlArrayOutputWithContext(context.Context) SecretsMountMysqlArrayOutput
}

type SecretsMountMysqlArray []SecretsMountMysqlInput

func (SecretsMountMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysql)(nil)).Elem()
}

func (i SecretsMountMysqlArray) ToSecretsMountMysqlArrayOutput() SecretsMountMysqlArrayOutput {
	return i.ToSecretsMountMysqlArrayOutputWithContext(context.Background())
}

func (i SecretsMountMysqlArray) ToSecretsMountMysqlArrayOutputWithContext(ctx context.Context) SecretsMountMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlArrayOutput)
}

type SecretsMountMysqlOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysql)(nil)).Elem()
}

func (o SecretsMountMysqlOutput) ToSecretsMountMysqlOutput() SecretsMountMysqlOutput {
	return o
}

func (o SecretsMountMysqlOutput) ToSecretsMountMysqlOutputWithContext(ctx context.Context) SecretsMountMysqlOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountMysqlOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysql) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

func (o SecretsMountMysqlOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountMysqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountMysqlOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountMysql) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountMysqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountMysqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountMysqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMysql) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountMysqlOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountMysqlOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysql) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

func (o SecretsMountMysqlOutput) ServiceAccountJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.ServiceAccountJson }).(pulumi.StringPtrOutput)
}

// x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
func (o SecretsMountMysqlOutput) TlsCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.TlsCa }).(pulumi.StringPtrOutput)
}

// x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
func (o SecretsMountMysqlOutput) TlsCertificateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.TlsCertificateKey }).(pulumi.StringPtrOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountMysqlOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountMysqlOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMysql) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountMysqlArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysql)(nil)).Elem()
}

func (o SecretsMountMysqlArrayOutput) ToSecretsMountMysqlArrayOutput() SecretsMountMysqlArrayOutput {
	return o
}

func (o SecretsMountMysqlArrayOutput) ToSecretsMountMysqlArrayOutputWithContext(ctx context.Context) SecretsMountMysqlArrayOutput {
	return o
}

func (o SecretsMountMysqlArrayOutput) Index(i pulumi.IntInput) SecretsMountMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountMysql {
		return vs[0].([]SecretsMountMysql)[vs[1].(int)]
	}).(SecretsMountMysqlOutput)
}

type SecretsMountMysqlAurora struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountMysqlAuroraInput is an input type that accepts SecretsMountMysqlAuroraArgs and SecretsMountMysqlAuroraOutput values.
// You can construct a concrete instance of `SecretsMountMysqlAuroraInput` via:
//
//	SecretsMountMysqlAuroraArgs{...}
type SecretsMountMysqlAuroraInput interface {
	pulumi.Input

	ToSecretsMountMysqlAuroraOutput() SecretsMountMysqlAuroraOutput
	ToSecretsMountMysqlAuroraOutputWithContext(context.Context) SecretsMountMysqlAuroraOutput
}

type SecretsMountMysqlAuroraArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountMysqlAuroraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysqlAurora)(nil)).Elem()
}

func (i SecretsMountMysqlAuroraArgs) ToSecretsMountMysqlAuroraOutput() SecretsMountMysqlAuroraOutput {
	return i.ToSecretsMountMysqlAuroraOutputWithContext(context.Background())
}

func (i SecretsMountMysqlAuroraArgs) ToSecretsMountMysqlAuroraOutputWithContext(ctx context.Context) SecretsMountMysqlAuroraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlAuroraOutput)
}

// SecretsMountMysqlAuroraArrayInput is an input type that accepts SecretsMountMysqlAuroraArray and SecretsMountMysqlAuroraArrayOutput values.
// You can construct a concrete instance of `SecretsMountMysqlAuroraArrayInput` via:
//
//	SecretsMountMysqlAuroraArray{ SecretsMountMysqlAuroraArgs{...} }
type SecretsMountMysqlAuroraArrayInput interface {
	pulumi.Input

	ToSecretsMountMysqlAuroraArrayOutput() SecretsMountMysqlAuroraArrayOutput
	ToSecretsMountMysqlAuroraArrayOutputWithContext(context.Context) SecretsMountMysqlAuroraArrayOutput
}

type SecretsMountMysqlAuroraArray []SecretsMountMysqlAuroraInput

func (SecretsMountMysqlAuroraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysqlAurora)(nil)).Elem()
}

func (i SecretsMountMysqlAuroraArray) ToSecretsMountMysqlAuroraArrayOutput() SecretsMountMysqlAuroraArrayOutput {
	return i.ToSecretsMountMysqlAuroraArrayOutputWithContext(context.Background())
}

func (i SecretsMountMysqlAuroraArray) ToSecretsMountMysqlAuroraArrayOutputWithContext(ctx context.Context) SecretsMountMysqlAuroraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlAuroraArrayOutput)
}

type SecretsMountMysqlAuroraOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlAuroraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysqlAurora)(nil)).Elem()
}

func (o SecretsMountMysqlAuroraOutput) ToSecretsMountMysqlAuroraOutput() SecretsMountMysqlAuroraOutput {
	return o
}

func (o SecretsMountMysqlAuroraOutput) ToSecretsMountMysqlAuroraOutputWithContext(ctx context.Context) SecretsMountMysqlAuroraOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountMysqlAuroraOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountMysqlAuroraOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountMysqlAuroraOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountMysqlAuroraOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountMysqlAuroraOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountMysqlAuroraOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountMysqlAuroraOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountMysqlAuroraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountMysqlAuroraOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountMysqlAuroraOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountMysqlAuroraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountMysqlAuroraOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountMysqlAuroraOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlAurora) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountMysqlAuroraArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlAuroraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysqlAurora)(nil)).Elem()
}

func (o SecretsMountMysqlAuroraArrayOutput) ToSecretsMountMysqlAuroraArrayOutput() SecretsMountMysqlAuroraArrayOutput {
	return o
}

func (o SecretsMountMysqlAuroraArrayOutput) ToSecretsMountMysqlAuroraArrayOutputWithContext(ctx context.Context) SecretsMountMysqlAuroraArrayOutput {
	return o
}

func (o SecretsMountMysqlAuroraArrayOutput) Index(i pulumi.IntInput) SecretsMountMysqlAuroraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountMysqlAurora {
		return vs[0].([]SecretsMountMysqlAurora)[vs[1].(int)]
	}).(SecretsMountMysqlAuroraOutput)
}

type SecretsMountMysqlLegacy struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountMysqlLegacyInput is an input type that accepts SecretsMountMysqlLegacyArgs and SecretsMountMysqlLegacyOutput values.
// You can construct a concrete instance of `SecretsMountMysqlLegacyInput` via:
//
//	SecretsMountMysqlLegacyArgs{...}
type SecretsMountMysqlLegacyInput interface {
	pulumi.Input

	ToSecretsMountMysqlLegacyOutput() SecretsMountMysqlLegacyOutput
	ToSecretsMountMysqlLegacyOutputWithContext(context.Context) SecretsMountMysqlLegacyOutput
}

type SecretsMountMysqlLegacyArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountMysqlLegacyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysqlLegacy)(nil)).Elem()
}

func (i SecretsMountMysqlLegacyArgs) ToSecretsMountMysqlLegacyOutput() SecretsMountMysqlLegacyOutput {
	return i.ToSecretsMountMysqlLegacyOutputWithContext(context.Background())
}

func (i SecretsMountMysqlLegacyArgs) ToSecretsMountMysqlLegacyOutputWithContext(ctx context.Context) SecretsMountMysqlLegacyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlLegacyOutput)
}

// SecretsMountMysqlLegacyArrayInput is an input type that accepts SecretsMountMysqlLegacyArray and SecretsMountMysqlLegacyArrayOutput values.
// You can construct a concrete instance of `SecretsMountMysqlLegacyArrayInput` via:
//
//	SecretsMountMysqlLegacyArray{ SecretsMountMysqlLegacyArgs{...} }
type SecretsMountMysqlLegacyArrayInput interface {
	pulumi.Input

	ToSecretsMountMysqlLegacyArrayOutput() SecretsMountMysqlLegacyArrayOutput
	ToSecretsMountMysqlLegacyArrayOutputWithContext(context.Context) SecretsMountMysqlLegacyArrayOutput
}

type SecretsMountMysqlLegacyArray []SecretsMountMysqlLegacyInput

func (SecretsMountMysqlLegacyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysqlLegacy)(nil)).Elem()
}

func (i SecretsMountMysqlLegacyArray) ToSecretsMountMysqlLegacyArrayOutput() SecretsMountMysqlLegacyArrayOutput {
	return i.ToSecretsMountMysqlLegacyArrayOutputWithContext(context.Background())
}

func (i SecretsMountMysqlLegacyArray) ToSecretsMountMysqlLegacyArrayOutputWithContext(ctx context.Context) SecretsMountMysqlLegacyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlLegacyArrayOutput)
}

type SecretsMountMysqlLegacyOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlLegacyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysqlLegacy)(nil)).Elem()
}

func (o SecretsMountMysqlLegacyOutput) ToSecretsMountMysqlLegacyOutput() SecretsMountMysqlLegacyOutput {
	return o
}

func (o SecretsMountMysqlLegacyOutput) ToSecretsMountMysqlLegacyOutputWithContext(ctx context.Context) SecretsMountMysqlLegacyOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountMysqlLegacyOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountMysqlLegacyOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountMysqlLegacyOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountMysqlLegacyOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountMysqlLegacyOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountMysqlLegacyOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountMysqlLegacyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountMysqlLegacyOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountMysqlLegacyOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountMysqlLegacyOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountMysqlLegacyOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountMysqlLegacyOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountMysqlLegacyOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlLegacy) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountMysqlLegacyArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlLegacyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysqlLegacy)(nil)).Elem()
}

func (o SecretsMountMysqlLegacyArrayOutput) ToSecretsMountMysqlLegacyArrayOutput() SecretsMountMysqlLegacyArrayOutput {
	return o
}

func (o SecretsMountMysqlLegacyArrayOutput) ToSecretsMountMysqlLegacyArrayOutputWithContext(ctx context.Context) SecretsMountMysqlLegacyArrayOutput {
	return o
}

func (o SecretsMountMysqlLegacyArrayOutput) Index(i pulumi.IntInput) SecretsMountMysqlLegacyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountMysqlLegacy {
		return vs[0].([]SecretsMountMysqlLegacy)[vs[1].(int)]
	}).(SecretsMountMysqlLegacyOutput)
}

type SecretsMountMysqlRd struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountMysqlRdInput is an input type that accepts SecretsMountMysqlRdArgs and SecretsMountMysqlRdOutput values.
// You can construct a concrete instance of `SecretsMountMysqlRdInput` via:
//
//	SecretsMountMysqlRdArgs{...}
type SecretsMountMysqlRdInput interface {
	pulumi.Input

	ToSecretsMountMysqlRdOutput() SecretsMountMysqlRdOutput
	ToSecretsMountMysqlRdOutputWithContext(context.Context) SecretsMountMysqlRdOutput
}

type SecretsMountMysqlRdArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountMysqlRdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysqlRd)(nil)).Elem()
}

func (i SecretsMountMysqlRdArgs) ToSecretsMountMysqlRdOutput() SecretsMountMysqlRdOutput {
	return i.ToSecretsMountMysqlRdOutputWithContext(context.Background())
}

func (i SecretsMountMysqlRdArgs) ToSecretsMountMysqlRdOutputWithContext(ctx context.Context) SecretsMountMysqlRdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlRdOutput)
}

// SecretsMountMysqlRdArrayInput is an input type that accepts SecretsMountMysqlRdArray and SecretsMountMysqlRdArrayOutput values.
// You can construct a concrete instance of `SecretsMountMysqlRdArrayInput` via:
//
//	SecretsMountMysqlRdArray{ SecretsMountMysqlRdArgs{...} }
type SecretsMountMysqlRdArrayInput interface {
	pulumi.Input

	ToSecretsMountMysqlRdArrayOutput() SecretsMountMysqlRdArrayOutput
	ToSecretsMountMysqlRdArrayOutputWithContext(context.Context) SecretsMountMysqlRdArrayOutput
}

type SecretsMountMysqlRdArray []SecretsMountMysqlRdInput

func (SecretsMountMysqlRdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysqlRd)(nil)).Elem()
}

func (i SecretsMountMysqlRdArray) ToSecretsMountMysqlRdArrayOutput() SecretsMountMysqlRdArrayOutput {
	return i.ToSecretsMountMysqlRdArrayOutputWithContext(context.Background())
}

func (i SecretsMountMysqlRdArray) ToSecretsMountMysqlRdArrayOutputWithContext(ctx context.Context) SecretsMountMysqlRdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountMysqlRdArrayOutput)
}

type SecretsMountMysqlRdOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlRdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountMysqlRd)(nil)).Elem()
}

func (o SecretsMountMysqlRdOutput) ToSecretsMountMysqlRdOutput() SecretsMountMysqlRdOutput {
	return o
}

func (o SecretsMountMysqlRdOutput) ToSecretsMountMysqlRdOutputWithContext(ctx context.Context) SecretsMountMysqlRdOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountMysqlRdOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountMysqlRdOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountMysqlRdOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountMysqlRdOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountMysqlRdOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountMysqlRdOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountMysqlRdOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountMysqlRdOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountMysqlRdOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountMysqlRdOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountMysqlRdOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountMysqlRdOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountMysqlRdOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountMysqlRd) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountMysqlRdArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountMysqlRdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountMysqlRd)(nil)).Elem()
}

func (o SecretsMountMysqlRdArrayOutput) ToSecretsMountMysqlRdArrayOutput() SecretsMountMysqlRdArrayOutput {
	return o
}

func (o SecretsMountMysqlRdArrayOutput) ToSecretsMountMysqlRdArrayOutputWithContext(ctx context.Context) SecretsMountMysqlRdArrayOutput {
	return o
}

func (o SecretsMountMysqlRdArrayOutput) Index(i pulumi.IntInput) SecretsMountMysqlRdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountMysqlRd {
		return vs[0].([]SecretsMountMysqlRd)[vs[1].(int)]
	}).(SecretsMountMysqlRdOutput)
}

type SecretsMountOracle struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountOracleInput is an input type that accepts SecretsMountOracleArgs and SecretsMountOracleOutput values.
// You can construct a concrete instance of `SecretsMountOracleInput` via:
//
//	SecretsMountOracleArgs{...}
type SecretsMountOracleInput interface {
	pulumi.Input

	ToSecretsMountOracleOutput() SecretsMountOracleOutput
	ToSecretsMountOracleOutputWithContext(context.Context) SecretsMountOracleOutput
}

type SecretsMountOracleArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountOracle)(nil)).Elem()
}

func (i SecretsMountOracleArgs) ToSecretsMountOracleOutput() SecretsMountOracleOutput {
	return i.ToSecretsMountOracleOutputWithContext(context.Background())
}

func (i SecretsMountOracleArgs) ToSecretsMountOracleOutputWithContext(ctx context.Context) SecretsMountOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountOracleOutput)
}

// SecretsMountOracleArrayInput is an input type that accepts SecretsMountOracleArray and SecretsMountOracleArrayOutput values.
// You can construct a concrete instance of `SecretsMountOracleArrayInput` via:
//
//	SecretsMountOracleArray{ SecretsMountOracleArgs{...} }
type SecretsMountOracleArrayInput interface {
	pulumi.Input

	ToSecretsMountOracleArrayOutput() SecretsMountOracleArrayOutput
	ToSecretsMountOracleArrayOutputWithContext(context.Context) SecretsMountOracleArrayOutput
}

type SecretsMountOracleArray []SecretsMountOracleInput

func (SecretsMountOracleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountOracle)(nil)).Elem()
}

func (i SecretsMountOracleArray) ToSecretsMountOracleArrayOutput() SecretsMountOracleArrayOutput {
	return i.ToSecretsMountOracleArrayOutputWithContext(context.Background())
}

func (i SecretsMountOracleArray) ToSecretsMountOracleArrayOutputWithContext(ctx context.Context) SecretsMountOracleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountOracleArrayOutput)
}

type SecretsMountOracleOutput struct{ *pulumi.OutputState }

func (SecretsMountOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountOracle)(nil)).Elem()
}

func (o SecretsMountOracleOutput) ToSecretsMountOracleOutput() SecretsMountOracleOutput {
	return o
}

func (o SecretsMountOracleOutput) ToSecretsMountOracleOutputWithContext(ctx context.Context) SecretsMountOracleOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountOracleOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountOracle) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountOracleOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountOracleOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountOracle) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountOracleOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountOracleOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountOracleOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountOracleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountOracle) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountOracleOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountOracleOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountOracleOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountOracle) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountOracleOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountOracleOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountOracleOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountOracle) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountOracleArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountOracleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountOracle)(nil)).Elem()
}

func (o SecretsMountOracleArrayOutput) ToSecretsMountOracleArrayOutput() SecretsMountOracleArrayOutput {
	return o
}

func (o SecretsMountOracleArrayOutput) ToSecretsMountOracleArrayOutputWithContext(ctx context.Context) SecretsMountOracleArrayOutput {
	return o
}

func (o SecretsMountOracleArrayOutput) Index(i pulumi.IntInput) SecretsMountOracleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountOracle {
		return vs[0].([]SecretsMountOracle)[vs[1].(int)]
	}).(SecretsMountOracleOutput)
}

type SecretsMountPostgresql struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	AuthType     *string  `pulumi:"authType"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	ServiceAccountJson     *string  `pulumi:"serviceAccountJson"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountPostgresqlInput is an input type that accepts SecretsMountPostgresqlArgs and SecretsMountPostgresqlOutput values.
// You can construct a concrete instance of `SecretsMountPostgresqlInput` via:
//
//	SecretsMountPostgresqlArgs{...}
type SecretsMountPostgresqlInput interface {
	pulumi.Input

	ToSecretsMountPostgresqlOutput() SecretsMountPostgresqlOutput
	ToSecretsMountPostgresqlOutputWithContext(context.Context) SecretsMountPostgresqlOutput
}

type SecretsMountPostgresqlArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	AuthType     pulumi.StringPtrInput   `pulumi:"authType"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	ServiceAccountJson     pulumi.StringPtrInput   `pulumi:"serviceAccountJson"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountPostgresql)(nil)).Elem()
}

func (i SecretsMountPostgresqlArgs) ToSecretsMountPostgresqlOutput() SecretsMountPostgresqlOutput {
	return i.ToSecretsMountPostgresqlOutputWithContext(context.Background())
}

func (i SecretsMountPostgresqlArgs) ToSecretsMountPostgresqlOutputWithContext(ctx context.Context) SecretsMountPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountPostgresqlOutput)
}

// SecretsMountPostgresqlArrayInput is an input type that accepts SecretsMountPostgresqlArray and SecretsMountPostgresqlArrayOutput values.
// You can construct a concrete instance of `SecretsMountPostgresqlArrayInput` via:
//
//	SecretsMountPostgresqlArray{ SecretsMountPostgresqlArgs{...} }
type SecretsMountPostgresqlArrayInput interface {
	pulumi.Input

	ToSecretsMountPostgresqlArrayOutput() SecretsMountPostgresqlArrayOutput
	ToSecretsMountPostgresqlArrayOutputWithContext(context.Context) SecretsMountPostgresqlArrayOutput
}

type SecretsMountPostgresqlArray []SecretsMountPostgresqlInput

func (SecretsMountPostgresqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountPostgresql)(nil)).Elem()
}

func (i SecretsMountPostgresqlArray) ToSecretsMountPostgresqlArrayOutput() SecretsMountPostgresqlArrayOutput {
	return i.ToSecretsMountPostgresqlArrayOutputWithContext(context.Background())
}

func (i SecretsMountPostgresqlArray) ToSecretsMountPostgresqlArrayOutputWithContext(ctx context.Context) SecretsMountPostgresqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountPostgresqlArrayOutput)
}

type SecretsMountPostgresqlOutput struct{ *pulumi.OutputState }

func (SecretsMountPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountPostgresql)(nil)).Elem()
}

func (o SecretsMountPostgresqlOutput) ToSecretsMountPostgresqlOutput() SecretsMountPostgresqlOutput {
	return o
}

func (o SecretsMountPostgresqlOutput) ToSecretsMountPostgresqlOutputWithContext(ctx context.Context) SecretsMountPostgresqlOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountPostgresqlOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

func (o SecretsMountPostgresqlOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountPostgresqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountPostgresqlOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// Disable special character escaping in username and password.
func (o SecretsMountPostgresqlOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountPostgresqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountPostgresqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountPostgresqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountPostgresqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountPostgresqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountPostgresqlOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountPostgresqlOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

func (o SecretsMountPostgresqlOutput) ServiceAccountJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *string { return v.ServiceAccountJson }).(pulumi.StringPtrOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountPostgresqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountPostgresqlOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountPostgresqlOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountPostgresql) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountPostgresqlArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountPostgresqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountPostgresql)(nil)).Elem()
}

func (o SecretsMountPostgresqlArrayOutput) ToSecretsMountPostgresqlArrayOutput() SecretsMountPostgresqlArrayOutput {
	return o
}

func (o SecretsMountPostgresqlArrayOutput) ToSecretsMountPostgresqlArrayOutputWithContext(ctx context.Context) SecretsMountPostgresqlArrayOutput {
	return o
}

func (o SecretsMountPostgresqlArrayOutput) Index(i pulumi.IntInput) SecretsMountPostgresqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountPostgresql {
		return vs[0].([]SecretsMountPostgresql)[vs[1].(int)]
	}).(SecretsMountPostgresqlOutput)
}

type SecretsMountRedi struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert *string `pulumi:"caCert"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The host to connect to.
	Host string `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool  `pulumi:"insecureTls"`
	Name        string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username string `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountRediInput is an input type that accepts SecretsMountRediArgs and SecretsMountRediOutput values.
// You can construct a concrete instance of `SecretsMountRediInput` via:
//
//	SecretsMountRediArgs{...}
type SecretsMountRediInput interface {
	pulumi.Input

	ToSecretsMountRediOutput() SecretsMountRediOutput
	ToSecretsMountRediOutputWithContext(context.Context) SecretsMountRediOutput
}

type SecretsMountRediArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The host to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	Name        pulumi.StringInput  `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The root credential username used in the connection URL.
	Username pulumi.StringInput `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountRediArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountRedi)(nil)).Elem()
}

func (i SecretsMountRediArgs) ToSecretsMountRediOutput() SecretsMountRediOutput {
	return i.ToSecretsMountRediOutputWithContext(context.Background())
}

func (i SecretsMountRediArgs) ToSecretsMountRediOutputWithContext(ctx context.Context) SecretsMountRediOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountRediOutput)
}

// SecretsMountRediArrayInput is an input type that accepts SecretsMountRediArray and SecretsMountRediArrayOutput values.
// You can construct a concrete instance of `SecretsMountRediArrayInput` via:
//
//	SecretsMountRediArray{ SecretsMountRediArgs{...} }
type SecretsMountRediArrayInput interface {
	pulumi.Input

	ToSecretsMountRediArrayOutput() SecretsMountRediArrayOutput
	ToSecretsMountRediArrayOutputWithContext(context.Context) SecretsMountRediArrayOutput
}

type SecretsMountRediArray []SecretsMountRediInput

func (SecretsMountRediArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountRedi)(nil)).Elem()
}

func (i SecretsMountRediArray) ToSecretsMountRediArrayOutput() SecretsMountRediArrayOutput {
	return i.ToSecretsMountRediArrayOutputWithContext(context.Background())
}

func (i SecretsMountRediArray) ToSecretsMountRediArrayOutputWithContext(ctx context.Context) SecretsMountRediArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountRediArrayOutput)
}

type SecretsMountRediOutput struct{ *pulumi.OutputState }

func (SecretsMountRediOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountRedi)(nil)).Elem()
}

func (o SecretsMountRediOutput) ToSecretsMountRediOutput() SecretsMountRediOutput {
	return o
}

func (o SecretsMountRediOutput) ToSecretsMountRediOutputWithContext(ctx context.Context) SecretsMountRediOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountRediOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountRedi) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
func (o SecretsMountRediOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedi) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountRediOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountRedi) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The host to connect to.
func (o SecretsMountRediOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountRedi) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretsMountRediOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountRedi) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

func (o SecretsMountRediOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountRedi) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountRediOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountRedi) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountRediOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedi) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretsMountRediOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountRedi) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountRediOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountRedi) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretsMountRediOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountRedi) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountRediOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountRedi) string { return v.Username }).(pulumi.StringOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountRediOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountRedi) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountRediArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountRediArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountRedi)(nil)).Elem()
}

func (o SecretsMountRediArrayOutput) ToSecretsMountRediArrayOutput() SecretsMountRediArrayOutput {
	return o
}

func (o SecretsMountRediArrayOutput) ToSecretsMountRediArrayOutputWithContext(ctx context.Context) SecretsMountRediArrayOutput {
	return o
}

func (o SecretsMountRediArrayOutput) Index(i pulumi.IntInput) SecretsMountRediOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountRedi {
		return vs[0].([]SecretsMountRedi)[vs[1].(int)]
	}).(SecretsMountRediOutput)
}

type SecretsMountRedisElasticach struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	Name string                 `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// The AWS region where the ElastiCache cluster is hosted.
	// If omitted the plugin tries to infer the region from the environment.
	Region *string `pulumi:"region"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountRedisElasticachInput is an input type that accepts SecretsMountRedisElasticachArgs and SecretsMountRedisElasticachOutput values.
// You can construct a concrete instance of `SecretsMountRedisElasticachInput` via:
//
//	SecretsMountRedisElasticachArgs{...}
type SecretsMountRedisElasticachInput interface {
	pulumi.Input

	ToSecretsMountRedisElasticachOutput() SecretsMountRedisElasticachOutput
	ToSecretsMountRedisElasticachOutputWithContext(context.Context) SecretsMountRedisElasticachOutput
}

type SecretsMountRedisElasticachArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput    `pulumi:"data"`
	Name pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// The AWS region where the ElastiCache cluster is hosted.
	// If omitted the plugin tries to infer the region from the environment.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountRedisElasticachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountRedisElasticach)(nil)).Elem()
}

func (i SecretsMountRedisElasticachArgs) ToSecretsMountRedisElasticachOutput() SecretsMountRedisElasticachOutput {
	return i.ToSecretsMountRedisElasticachOutputWithContext(context.Background())
}

func (i SecretsMountRedisElasticachArgs) ToSecretsMountRedisElasticachOutputWithContext(ctx context.Context) SecretsMountRedisElasticachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountRedisElasticachOutput)
}

// SecretsMountRedisElasticachArrayInput is an input type that accepts SecretsMountRedisElasticachArray and SecretsMountRedisElasticachArrayOutput values.
// You can construct a concrete instance of `SecretsMountRedisElasticachArrayInput` via:
//
//	SecretsMountRedisElasticachArray{ SecretsMountRedisElasticachArgs{...} }
type SecretsMountRedisElasticachArrayInput interface {
	pulumi.Input

	ToSecretsMountRedisElasticachArrayOutput() SecretsMountRedisElasticachArrayOutput
	ToSecretsMountRedisElasticachArrayOutputWithContext(context.Context) SecretsMountRedisElasticachArrayOutput
}

type SecretsMountRedisElasticachArray []SecretsMountRedisElasticachInput

func (SecretsMountRedisElasticachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountRedisElasticach)(nil)).Elem()
}

func (i SecretsMountRedisElasticachArray) ToSecretsMountRedisElasticachArrayOutput() SecretsMountRedisElasticachArrayOutput {
	return i.ToSecretsMountRedisElasticachArrayOutputWithContext(context.Background())
}

func (i SecretsMountRedisElasticachArray) ToSecretsMountRedisElasticachArrayOutputWithContext(ctx context.Context) SecretsMountRedisElasticachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountRedisElasticachArrayOutput)
}

type SecretsMountRedisElasticachOutput struct{ *pulumi.OutputState }

func (SecretsMountRedisElasticachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountRedisElasticach)(nil)).Elem()
}

func (o SecretsMountRedisElasticachOutput) ToSecretsMountRedisElasticachOutput() SecretsMountRedisElasticachOutput {
	return o
}

func (o SecretsMountRedisElasticachOutput) ToSecretsMountRedisElasticachOutputWithContext(ctx context.Context) SecretsMountRedisElasticachOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountRedisElasticachOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountRedisElasticachOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

func (o SecretsMountRedisElasticachOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountRedisElasticachOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountRedisElasticachOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// The AWS region where the ElastiCache cluster is hosted.
// If omitted the plugin tries to infer the region from the environment.
func (o SecretsMountRedisElasticachOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountRedisElasticachOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretsMountRedisElasticachOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) string { return v.Url }).(pulumi.StringOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountRedisElasticachOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountRedisElasticachOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountRedisElasticach) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountRedisElasticachArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountRedisElasticachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountRedisElasticach)(nil)).Elem()
}

func (o SecretsMountRedisElasticachArrayOutput) ToSecretsMountRedisElasticachArrayOutput() SecretsMountRedisElasticachArrayOutput {
	return o
}

func (o SecretsMountRedisElasticachArrayOutput) ToSecretsMountRedisElasticachArrayOutputWithContext(ctx context.Context) SecretsMountRedisElasticachArrayOutput {
	return o
}

func (o SecretsMountRedisElasticachArrayOutput) Index(i pulumi.IntInput) SecretsMountRedisElasticachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountRedisElasticach {
		return vs[0].([]SecretsMountRedisElasticach)[vs[1].(int)]
	}).(SecretsMountRedisElasticachOutput)
}

type SecretsMountRedshift struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping *bool `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountRedshiftInput is an input type that accepts SecretsMountRedshiftArgs and SecretsMountRedshiftOutput values.
// You can construct a concrete instance of `SecretsMountRedshiftInput` via:
//
//	SecretsMountRedshiftArgs{...}
type SecretsMountRedshiftInput interface {
	pulumi.Input

	ToSecretsMountRedshiftOutput() SecretsMountRedshiftOutput
	ToSecretsMountRedshiftOutputWithContext(context.Context) SecretsMountRedshiftOutput
}

type SecretsMountRedshiftArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// Disable special character escaping in username and password.
	DisableEscaping pulumi.BoolPtrInput `pulumi:"disableEscaping"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountRedshift)(nil)).Elem()
}

func (i SecretsMountRedshiftArgs) ToSecretsMountRedshiftOutput() SecretsMountRedshiftOutput {
	return i.ToSecretsMountRedshiftOutputWithContext(context.Background())
}

func (i SecretsMountRedshiftArgs) ToSecretsMountRedshiftOutputWithContext(ctx context.Context) SecretsMountRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountRedshiftOutput)
}

// SecretsMountRedshiftArrayInput is an input type that accepts SecretsMountRedshiftArray and SecretsMountRedshiftArrayOutput values.
// You can construct a concrete instance of `SecretsMountRedshiftArrayInput` via:
//
//	SecretsMountRedshiftArray{ SecretsMountRedshiftArgs{...} }
type SecretsMountRedshiftArrayInput interface {
	pulumi.Input

	ToSecretsMountRedshiftArrayOutput() SecretsMountRedshiftArrayOutput
	ToSecretsMountRedshiftArrayOutputWithContext(context.Context) SecretsMountRedshiftArrayOutput
}

type SecretsMountRedshiftArray []SecretsMountRedshiftInput

func (SecretsMountRedshiftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountRedshift)(nil)).Elem()
}

func (i SecretsMountRedshiftArray) ToSecretsMountRedshiftArrayOutput() SecretsMountRedshiftArrayOutput {
	return i.ToSecretsMountRedshiftArrayOutputWithContext(context.Background())
}

func (i SecretsMountRedshiftArray) ToSecretsMountRedshiftArrayOutputWithContext(ctx context.Context) SecretsMountRedshiftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountRedshiftArrayOutput)
}

type SecretsMountRedshiftOutput struct{ *pulumi.OutputState }

func (SecretsMountRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountRedshift)(nil)).Elem()
}

func (o SecretsMountRedshiftOutput) ToSecretsMountRedshiftOutput() SecretsMountRedshiftOutput {
	return o
}

func (o SecretsMountRedshiftOutput) ToSecretsMountRedshiftOutputWithContext(ctx context.Context) SecretsMountRedshiftOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountRedshiftOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountRedshift) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountRedshiftOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountRedshiftOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountRedshift) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// Disable special character escaping in username and password.
func (o SecretsMountRedshiftOutput) DisableEscaping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *bool { return v.DisableEscaping }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountRedshiftOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountRedshiftOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountRedshiftOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountRedshiftOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountRedshift) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountRedshiftOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountRedshiftOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountRedshiftOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountRedshift) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountRedshiftOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountRedshiftOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountRedshiftOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountRedshift) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountRedshiftArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountRedshiftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountRedshift)(nil)).Elem()
}

func (o SecretsMountRedshiftArrayOutput) ToSecretsMountRedshiftArrayOutput() SecretsMountRedshiftArrayOutput {
	return o
}

func (o SecretsMountRedshiftArrayOutput) ToSecretsMountRedshiftArrayOutputWithContext(ctx context.Context) SecretsMountRedshiftArrayOutput {
	return o
}

func (o SecretsMountRedshiftArrayOutput) Index(i pulumi.IntInput) SecretsMountRedshiftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountRedshift {
		return vs[0].([]SecretsMountRedshift)[vs[1].(int)]
	}).(SecretsMountRedshiftOutput)
}

type SecretsMountSnowflake struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles []string `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data map[string]interface{} `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections *int   `pulumi:"maxOpenConnections"`
	Name               string `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password *string `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName *string `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements []string `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username *string `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate *string `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection *bool `pulumi:"verifyConnection"`
}

// SecretsMountSnowflakeInput is an input type that accepts SecretsMountSnowflakeArgs and SecretsMountSnowflakeOutput values.
// You can construct a concrete instance of `SecretsMountSnowflakeInput` via:
//
//	SecretsMountSnowflakeArgs{...}
type SecretsMountSnowflakeInput interface {
	pulumi.Input

	ToSecretsMountSnowflakeOutput() SecretsMountSnowflakeOutput
	ToSecretsMountSnowflakeOutputWithContext(context.Context) SecretsMountSnowflakeOutput
}

type SecretsMountSnowflakeArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles pulumi.StringArrayInput `pulumi:"allowedRoles"`
	// Specifies the Redshift DSN.
	// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	//
	// Supported list of database secrets engines that can be configured:
	Data pulumi.MapInput `pulumi:"data"`
	// The maximum amount of time a connection may be reused.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// the database.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// the database.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
	Name               pulumi.StringInput `pulumi:"name"`
	// The root credential password used in the connection URL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the name of the plugin to use.
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements pulumi.StringArrayInput `pulumi:"rootRotationStatements"`
	// The root credential username used in the connection URL.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
	UsernameTemplate pulumi.StringPtrInput `pulumi:"usernameTemplate"`
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection pulumi.BoolPtrInput `pulumi:"verifyConnection"`
}

func (SecretsMountSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountSnowflake)(nil)).Elem()
}

func (i SecretsMountSnowflakeArgs) ToSecretsMountSnowflakeOutput() SecretsMountSnowflakeOutput {
	return i.ToSecretsMountSnowflakeOutputWithContext(context.Background())
}

func (i SecretsMountSnowflakeArgs) ToSecretsMountSnowflakeOutputWithContext(ctx context.Context) SecretsMountSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountSnowflakeOutput)
}

// SecretsMountSnowflakeArrayInput is an input type that accepts SecretsMountSnowflakeArray and SecretsMountSnowflakeArrayOutput values.
// You can construct a concrete instance of `SecretsMountSnowflakeArrayInput` via:
//
//	SecretsMountSnowflakeArray{ SecretsMountSnowflakeArgs{...} }
type SecretsMountSnowflakeArrayInput interface {
	pulumi.Input

	ToSecretsMountSnowflakeArrayOutput() SecretsMountSnowflakeArrayOutput
	ToSecretsMountSnowflakeArrayOutputWithContext(context.Context) SecretsMountSnowflakeArrayOutput
}

type SecretsMountSnowflakeArray []SecretsMountSnowflakeInput

func (SecretsMountSnowflakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountSnowflake)(nil)).Elem()
}

func (i SecretsMountSnowflakeArray) ToSecretsMountSnowflakeArrayOutput() SecretsMountSnowflakeArrayOutput {
	return i.ToSecretsMountSnowflakeArrayOutputWithContext(context.Background())
}

func (i SecretsMountSnowflakeArray) ToSecretsMountSnowflakeArrayOutputWithContext(ctx context.Context) SecretsMountSnowflakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMountSnowflakeArrayOutput)
}

type SecretsMountSnowflakeOutput struct{ *pulumi.OutputState }

func (SecretsMountSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsMountSnowflake)(nil)).Elem()
}

func (o SecretsMountSnowflakeOutput) ToSecretsMountSnowflakeOutput() SecretsMountSnowflakeOutput {
	return o
}

func (o SecretsMountSnowflakeOutput) ToSecretsMountSnowflakeOutputWithContext(ctx context.Context) SecretsMountSnowflakeOutput {
	return o
}

// A list of roles that are allowed to use this
// connection.
func (o SecretsMountSnowflakeOutput) AllowedRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) []string { return v.AllowedRoles }).(pulumi.StringArrayOutput)
}

// Specifies the Redshift DSN.
// See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
func (o SecretsMountSnowflakeOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
//
// Supported list of database secrets engines that can be configured:
func (o SecretsMountSnowflakeOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

// The maximum amount of time a connection may be reused.
func (o SecretsMountSnowflakeOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// the database.
func (o SecretsMountSnowflakeOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// the database.
func (o SecretsMountSnowflakeOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func (o SecretsMountSnowflakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) string { return v.Name }).(pulumi.StringOutput)
}

// The root credential password used in the connection URL.
func (o SecretsMountSnowflakeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the name of the plugin to use.
func (o SecretsMountSnowflakeOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// A list of database statements to be executed to rotate the root user's credentials.
func (o SecretsMountSnowflakeOutput) RootRotationStatements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) []string { return v.RootRotationStatements }).(pulumi.StringArrayOutput)
}

// The root credential username used in the connection URL.
func (o SecretsMountSnowflakeOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
func (o SecretsMountSnowflakeOutput) UsernameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *string { return v.UsernameTemplate }).(pulumi.StringPtrOutput)
}

// Whether the connection should be verified on
// initial configuration or not.
func (o SecretsMountSnowflakeOutput) VerifyConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretsMountSnowflake) *bool { return v.VerifyConnection }).(pulumi.BoolPtrOutput)
}

type SecretsMountSnowflakeArrayOutput struct{ *pulumi.OutputState }

func (SecretsMountSnowflakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsMountSnowflake)(nil)).Elem()
}

func (o SecretsMountSnowflakeArrayOutput) ToSecretsMountSnowflakeArrayOutput() SecretsMountSnowflakeArrayOutput {
	return o
}

func (o SecretsMountSnowflakeArrayOutput) ToSecretsMountSnowflakeArrayOutputWithContext(ctx context.Context) SecretsMountSnowflakeArrayOutput {
	return o
}

func (o SecretsMountSnowflakeArrayOutput) Index(i pulumi.IntInput) SecretsMountSnowflakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsMountSnowflake {
		return vs[0].([]SecretsMountSnowflake)[vs[1].(int)]
	}).(SecretsMountSnowflakeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionCassandraInput)(nil)).Elem(), SecretBackendConnectionCassandraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionCassandraPtrInput)(nil)).Elem(), SecretBackendConnectionCassandraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionCouchbaseInput)(nil)).Elem(), SecretBackendConnectionCouchbaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionCouchbasePtrInput)(nil)).Elem(), SecretBackendConnectionCouchbaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionElasticsearchInput)(nil)).Elem(), SecretBackendConnectionElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionElasticsearchPtrInput)(nil)).Elem(), SecretBackendConnectionElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionHanaInput)(nil)).Elem(), SecretBackendConnectionHanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionHanaPtrInput)(nil)).Elem(), SecretBackendConnectionHanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionInfluxdbInput)(nil)).Elem(), SecretBackendConnectionInfluxdbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionInfluxdbPtrInput)(nil)).Elem(), SecretBackendConnectionInfluxdbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMongodbInput)(nil)).Elem(), SecretBackendConnectionMongodbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMongodbPtrInput)(nil)).Elem(), SecretBackendConnectionMongodbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMongodbatlasInput)(nil)).Elem(), SecretBackendConnectionMongodbatlasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMongodbatlasPtrInput)(nil)).Elem(), SecretBackendConnectionMongodbatlasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMssqlInput)(nil)).Elem(), SecretBackendConnectionMssqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMssqlPtrInput)(nil)).Elem(), SecretBackendConnectionMssqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlInput)(nil)).Elem(), SecretBackendConnectionMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlPtrInput)(nil)).Elem(), SecretBackendConnectionMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlAuroraInput)(nil)).Elem(), SecretBackendConnectionMysqlAuroraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlAuroraPtrInput)(nil)).Elem(), SecretBackendConnectionMysqlAuroraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlLegacyInput)(nil)).Elem(), SecretBackendConnectionMysqlLegacyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlLegacyPtrInput)(nil)).Elem(), SecretBackendConnectionMysqlLegacyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlRdsInput)(nil)).Elem(), SecretBackendConnectionMysqlRdsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionMysqlRdsPtrInput)(nil)).Elem(), SecretBackendConnectionMysqlRdsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionOracleInput)(nil)).Elem(), SecretBackendConnectionOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionOraclePtrInput)(nil)).Elem(), SecretBackendConnectionOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionPostgresqlInput)(nil)).Elem(), SecretBackendConnectionPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionPostgresqlPtrInput)(nil)).Elem(), SecretBackendConnectionPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionRedisInput)(nil)).Elem(), SecretBackendConnectionRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionRedisPtrInput)(nil)).Elem(), SecretBackendConnectionRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionRedisElasticacheInput)(nil)).Elem(), SecretBackendConnectionRedisElasticacheArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionRedisElasticachePtrInput)(nil)).Elem(), SecretBackendConnectionRedisElasticacheArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionRedshiftInput)(nil)).Elem(), SecretBackendConnectionRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionRedshiftPtrInput)(nil)).Elem(), SecretBackendConnectionRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionSnowflakeInput)(nil)).Elem(), SecretBackendConnectionSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendConnectionSnowflakePtrInput)(nil)).Elem(), SecretBackendConnectionSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountCassandraInput)(nil)).Elem(), SecretsMountCassandraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountCassandraArrayInput)(nil)).Elem(), SecretsMountCassandraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountCouchbaseInput)(nil)).Elem(), SecretsMountCouchbaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountCouchbaseArrayInput)(nil)).Elem(), SecretsMountCouchbaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountElasticsearchInput)(nil)).Elem(), SecretsMountElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountElasticsearchArrayInput)(nil)).Elem(), SecretsMountElasticsearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountHanaInput)(nil)).Elem(), SecretsMountHanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountHanaArrayInput)(nil)).Elem(), SecretsMountHanaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountInfluxdbInput)(nil)).Elem(), SecretsMountInfluxdbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountInfluxdbArrayInput)(nil)).Elem(), SecretsMountInfluxdbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMongodbInput)(nil)).Elem(), SecretsMountMongodbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMongodbArrayInput)(nil)).Elem(), SecretsMountMongodbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMongodbatlaInput)(nil)).Elem(), SecretsMountMongodbatlaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMongodbatlaArrayInput)(nil)).Elem(), SecretsMountMongodbatlaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMssqlInput)(nil)).Elem(), SecretsMountMssqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMssqlArrayInput)(nil)).Elem(), SecretsMountMssqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlInput)(nil)).Elem(), SecretsMountMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlArrayInput)(nil)).Elem(), SecretsMountMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlAuroraInput)(nil)).Elem(), SecretsMountMysqlAuroraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlAuroraArrayInput)(nil)).Elem(), SecretsMountMysqlAuroraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlLegacyInput)(nil)).Elem(), SecretsMountMysqlLegacyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlLegacyArrayInput)(nil)).Elem(), SecretsMountMysqlLegacyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlRdInput)(nil)).Elem(), SecretsMountMysqlRdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountMysqlRdArrayInput)(nil)).Elem(), SecretsMountMysqlRdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountOracleInput)(nil)).Elem(), SecretsMountOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountOracleArrayInput)(nil)).Elem(), SecretsMountOracleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountPostgresqlInput)(nil)).Elem(), SecretsMountPostgresqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountPostgresqlArrayInput)(nil)).Elem(), SecretsMountPostgresqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountRediInput)(nil)).Elem(), SecretsMountRediArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountRediArrayInput)(nil)).Elem(), SecretsMountRediArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountRedisElasticachInput)(nil)).Elem(), SecretsMountRedisElasticachArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountRedisElasticachArrayInput)(nil)).Elem(), SecretsMountRedisElasticachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountRedshiftInput)(nil)).Elem(), SecretsMountRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountRedshiftArrayInput)(nil)).Elem(), SecretsMountRedshiftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountSnowflakeInput)(nil)).Elem(), SecretsMountSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMountSnowflakeArrayInput)(nil)).Elem(), SecretsMountSnowflakeArray{})
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCouchbaseOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCouchbasePtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionInfluxdbOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionInfluxdbPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbatlasOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbatlasPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOracleOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOraclePtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionRedisOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionRedisPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionRedisElasticacheOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionRedisElasticachePtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionRedshiftOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionRedshiftPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionSnowflakeOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionSnowflakePtrOutput{})
	pulumi.RegisterOutputType(SecretsMountCassandraOutput{})
	pulumi.RegisterOutputType(SecretsMountCassandraArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountCouchbaseOutput{})
	pulumi.RegisterOutputType(SecretsMountCouchbaseArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountElasticsearchOutput{})
	pulumi.RegisterOutputType(SecretsMountElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountHanaOutput{})
	pulumi.RegisterOutputType(SecretsMountHanaArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountInfluxdbOutput{})
	pulumi.RegisterOutputType(SecretsMountInfluxdbArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMongodbOutput{})
	pulumi.RegisterOutputType(SecretsMountMongodbArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMongodbatlaOutput{})
	pulumi.RegisterOutputType(SecretsMountMongodbatlaArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMssqlOutput{})
	pulumi.RegisterOutputType(SecretsMountMssqlArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlAuroraOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlAuroraArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlLegacyOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlLegacyArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlRdOutput{})
	pulumi.RegisterOutputType(SecretsMountMysqlRdArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountOracleOutput{})
	pulumi.RegisterOutputType(SecretsMountOracleArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountPostgresqlOutput{})
	pulumi.RegisterOutputType(SecretsMountPostgresqlArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountRediOutput{})
	pulumi.RegisterOutputType(SecretsMountRediArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountRedisElasticachOutput{})
	pulumi.RegisterOutputType(SecretsMountRedisElasticachArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountRedshiftOutput{})
	pulumi.RegisterOutputType(SecretsMountRedshiftArrayOutput{})
	pulumi.RegisterOutputType(SecretsMountSnowflakeOutput{})
	pulumi.RegisterOutputType(SecretsMountSnowflakeArrayOutput{})
}
