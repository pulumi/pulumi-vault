// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SecretBackendConnectionCassandra struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password *string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to be used in the connection.
	Username *string `pulumi:"username"`
}

// SecretBackendConnectionCassandraInput is an input type that accepts SecretBackendConnectionCassandraArgs and SecretBackendConnectionCassandraOutput values.
// You can construct a concrete instance of `SecretBackendConnectionCassandraInput` via:
//
//          SecretBackendConnectionCassandraArgs{...}
type SecretBackendConnectionCassandraInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput
	ToSecretBackendConnectionCassandraOutputWithContext(context.Context) SecretBackendConnectionCassandraOutput
}

type SecretBackendConnectionCassandraArgs struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion pulumi.IntPtrInput `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to be used in the connection.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecretBackendConnectionCassandraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandra)(nil)).Elem()
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput {
	return i.ToSecretBackendConnectionCassandraOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraOutput)
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return i.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraOutput).ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx)
}

// SecretBackendConnectionCassandraPtrInput is an input type that accepts SecretBackendConnectionCassandraArgs, SecretBackendConnectionCassandraPtr and SecretBackendConnectionCassandraPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionCassandraPtrInput` via:
//
//          SecretBackendConnectionCassandraArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionCassandraPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput
	ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Context) SecretBackendConnectionCassandraPtrOutput
}

type secretBackendConnectionCassandraPtrType SecretBackendConnectionCassandraArgs

func SecretBackendConnectionCassandraPtr(v *SecretBackendConnectionCassandraArgs) SecretBackendConnectionCassandraPtrInput {
	return (*secretBackendConnectionCassandraPtrType)(v)
}

func (*secretBackendConnectionCassandraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandra)(nil)).Elem()
}

func (i *secretBackendConnectionCassandraPtrType) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return i.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionCassandraPtrType) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraPtrOutput)
}

type SecretBackendConnectionCassandraOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandra)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput {
	return o
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraOutput {
	return o
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return o.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *SecretBackendConnectionCassandra {
		return &v
	}).(SecretBackendConnectionCassandraPtrOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionCassandraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionCassandraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCassandraPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandra)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraPtrOutput) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraPtrOutput) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraPtrOutput) Elem() SecretBackendConnectionCassandraOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) SecretBackendConnectionCassandra { return *v }).(SecretBackendConnectionCassandraOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *int {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraPtrOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureTls
	}).(pulumi.BoolPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionCassandraPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraPtrOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.PemBundle
	}).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraPtrOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.PemJson
	}).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraPtrOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *int {
		if v == nil {
			return nil
		}
		return v.ProtocolVersion
	}).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionCassandraPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionElasticsearch struct {
	// The password to be used in the connection.
	Password string `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The username to be used in the connection.
	Username string `pulumi:"username"`
}

// SecretBackendConnectionElasticsearchInput is an input type that accepts SecretBackendConnectionElasticsearchArgs and SecretBackendConnectionElasticsearchOutput values.
// You can construct a concrete instance of `SecretBackendConnectionElasticsearchInput` via:
//
//          SecretBackendConnectionElasticsearchArgs{...}
type SecretBackendConnectionElasticsearchInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput
	ToSecretBackendConnectionElasticsearchOutputWithContext(context.Context) SecretBackendConnectionElasticsearchOutput
}

type SecretBackendConnectionElasticsearchArgs struct {
	// The password to be used in the connection.
	Password pulumi.StringInput `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The username to be used in the connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SecretBackendConnectionElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput {
	return i.ToSecretBackendConnectionElasticsearchOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchOutput)
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchOutput).ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx)
}

// SecretBackendConnectionElasticsearchPtrInput is an input type that accepts SecretBackendConnectionElasticsearchArgs, SecretBackendConnectionElasticsearchPtr and SecretBackendConnectionElasticsearchPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionElasticsearchPtrInput` via:
//
//          SecretBackendConnectionElasticsearchArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionElasticsearchPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput
	ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Context) SecretBackendConnectionElasticsearchPtrOutput
}

type secretBackendConnectionElasticsearchPtrType SecretBackendConnectionElasticsearchArgs

func SecretBackendConnectionElasticsearchPtr(v *SecretBackendConnectionElasticsearchArgs) SecretBackendConnectionElasticsearchPtrInput {
	return (*secretBackendConnectionElasticsearchPtrType)(v)
}

func (*secretBackendConnectionElasticsearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (i *secretBackendConnectionElasticsearchPtrType) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionElasticsearchPtrType) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchPtrOutput)
}

type SecretBackendConnectionElasticsearchOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return o.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *SecretBackendConnectionElasticsearch {
		return &v
	}).(SecretBackendConnectionElasticsearchPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionElasticsearchOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Password }).(pulumi.StringOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionElasticsearchOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Username }).(pulumi.StringOutput)
}

type SecretBackendConnectionElasticsearchPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchPtrOutput) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchPtrOutput) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchPtrOutput) Elem() SecretBackendConnectionElasticsearchOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) SecretBackendConnectionElasticsearch { return *v }).(SecretBackendConnectionElasticsearchOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionElasticsearchPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionElasticsearchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionHana struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionHanaInput is an input type that accepts SecretBackendConnectionHanaArgs and SecretBackendConnectionHanaOutput values.
// You can construct a concrete instance of `SecretBackendConnectionHanaInput` via:
//
//          SecretBackendConnectionHanaArgs{...}
type SecretBackendConnectionHanaInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput
	ToSecretBackendConnectionHanaOutputWithContext(context.Context) SecretBackendConnectionHanaOutput
}

type SecretBackendConnectionHanaArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionHanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHana)(nil)).Elem()
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput {
	return i.ToSecretBackendConnectionHanaOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaOutputWithContext(ctx context.Context) SecretBackendConnectionHanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaOutput)
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return i.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaOutput).ToSecretBackendConnectionHanaPtrOutputWithContext(ctx)
}

// SecretBackendConnectionHanaPtrInput is an input type that accepts SecretBackendConnectionHanaArgs, SecretBackendConnectionHanaPtr and SecretBackendConnectionHanaPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionHanaPtrInput` via:
//
//          SecretBackendConnectionHanaArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionHanaPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput
	ToSecretBackendConnectionHanaPtrOutputWithContext(context.Context) SecretBackendConnectionHanaPtrOutput
}

type secretBackendConnectionHanaPtrType SecretBackendConnectionHanaArgs

func SecretBackendConnectionHanaPtr(v *SecretBackendConnectionHanaArgs) SecretBackendConnectionHanaPtrInput {
	return (*secretBackendConnectionHanaPtrType)(v)
}

func (*secretBackendConnectionHanaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHana)(nil)).Elem()
}

func (i *secretBackendConnectionHanaPtrType) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return i.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionHanaPtrType) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaPtrOutput)
}

type SecretBackendConnectionHanaOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHana)(nil)).Elem()
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput {
	return o
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaOutputWithContext(ctx context.Context) SecretBackendConnectionHanaOutput {
	return o
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return o.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *SecretBackendConnectionHana {
		return &v
	}).(SecretBackendConnectionHanaPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionHanaPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHana)(nil)).Elem()
}

func (o SecretBackendConnectionHanaPtrOutput) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaPtrOutput) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaPtrOutput) Elem() SecretBackendConnectionHanaOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) SecretBackendConnectionHana { return *v }).(SecretBackendConnectionHanaOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMongodb struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionMongodbInput is an input type that accepts SecretBackendConnectionMongodbArgs and SecretBackendConnectionMongodbOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMongodbInput` via:
//
//          SecretBackendConnectionMongodbArgs{...}
type SecretBackendConnectionMongodbInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput
	ToSecretBackendConnectionMongodbOutputWithContext(context.Context) SecretBackendConnectionMongodbOutput
}

type SecretBackendConnectionMongodbArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMongodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodb)(nil)).Elem()
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput {
	return i.ToSecretBackendConnectionMongodbOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbOutput)
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return i.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbOutput).ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMongodbPtrInput is an input type that accepts SecretBackendConnectionMongodbArgs, SecretBackendConnectionMongodbPtr and SecretBackendConnectionMongodbPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMongodbPtrInput` via:
//
//          SecretBackendConnectionMongodbArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionMongodbPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput
	ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Context) SecretBackendConnectionMongodbPtrOutput
}

type secretBackendConnectionMongodbPtrType SecretBackendConnectionMongodbArgs

func SecretBackendConnectionMongodbPtr(v *SecretBackendConnectionMongodbArgs) SecretBackendConnectionMongodbPtrInput {
	return (*secretBackendConnectionMongodbPtrType)(v)
}

func (*secretBackendConnectionMongodbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodb)(nil)).Elem()
}

func (i *secretBackendConnectionMongodbPtrType) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return i.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMongodbPtrType) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbPtrOutput)
}

type SecretBackendConnectionMongodbOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodb)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput {
	return o
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbOutput {
	return o
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return o.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *SecretBackendConnectionMongodb {
		return &v
	}).(SecretBackendConnectionMongodbPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMongodbPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodb)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbPtrOutput) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbPtrOutput) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbPtrOutput) Elem() SecretBackendConnectionMongodbOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) SecretBackendConnectionMongodb { return *v }).(SecretBackendConnectionMongodbOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMssql struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionMssqlInput is an input type that accepts SecretBackendConnectionMssqlArgs and SecretBackendConnectionMssqlOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMssqlInput` via:
//
//          SecretBackendConnectionMssqlArgs{...}
type SecretBackendConnectionMssqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput
	ToSecretBackendConnectionMssqlOutputWithContext(context.Context) SecretBackendConnectionMssqlOutput
}

type SecretBackendConnectionMssqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMssqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssql)(nil)).Elem()
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput {
	return i.ToSecretBackendConnectionMssqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlOutput)
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return i.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlOutput).ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMssqlPtrInput is an input type that accepts SecretBackendConnectionMssqlArgs, SecretBackendConnectionMssqlPtr and SecretBackendConnectionMssqlPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMssqlPtrInput` via:
//
//          SecretBackendConnectionMssqlArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionMssqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput
	ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Context) SecretBackendConnectionMssqlPtrOutput
}

type secretBackendConnectionMssqlPtrType SecretBackendConnectionMssqlArgs

func SecretBackendConnectionMssqlPtr(v *SecretBackendConnectionMssqlArgs) SecretBackendConnectionMssqlPtrInput {
	return (*secretBackendConnectionMssqlPtrType)(v)
}

func (*secretBackendConnectionMssqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssql)(nil)).Elem()
}

func (i *secretBackendConnectionMssqlPtrType) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return i.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMssqlPtrType) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlPtrOutput)
}

type SecretBackendConnectionMssqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssql)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput {
	return o
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlOutput {
	return o
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return o.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *SecretBackendConnectionMssql {
		return &v
	}).(SecretBackendConnectionMssqlPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMssqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssql)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlPtrOutput) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlPtrOutput) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlPtrOutput) Elem() SecretBackendConnectionMssqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) SecretBackendConnectionMssql { return *v }).(SecretBackendConnectionMssqlOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysql struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionMysqlInput is an input type that accepts SecretBackendConnectionMysqlArgs and SecretBackendConnectionMysqlOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlInput` via:
//
//          SecretBackendConnectionMysqlArgs{...}
type SecretBackendConnectionMysqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput
	ToSecretBackendConnectionMysqlOutputWithContext(context.Context) SecretBackendConnectionMysqlOutput
}

type SecretBackendConnectionMysqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysql)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput {
	return i.ToSecretBackendConnectionMysqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlOutput)
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return i.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlOutput).ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlPtrInput is an input type that accepts SecretBackendConnectionMysqlArgs, SecretBackendConnectionMysqlPtr and SecretBackendConnectionMysqlPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlPtrInput` via:
//
//          SecretBackendConnectionMysqlArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionMysqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput
	ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlPtrOutput
}

type secretBackendConnectionMysqlPtrType SecretBackendConnectionMysqlArgs

func SecretBackendConnectionMysqlPtr(v *SecretBackendConnectionMysqlArgs) SecretBackendConnectionMysqlPtrInput {
	return (*secretBackendConnectionMysqlPtrType)(v)
}

func (*secretBackendConnectionMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysql)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlPtrType) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return i.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlPtrType) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlPtrOutput)
}

type SecretBackendConnectionMysqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysql)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput {
	return o
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlOutput {
	return o
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return o.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *SecretBackendConnectionMysql {
		return &v
	}).(SecretBackendConnectionMysqlPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysql)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlPtrOutput) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlPtrOutput) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlPtrOutput) Elem() SecretBackendConnectionMysqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) SecretBackendConnectionMysql { return *v }).(SecretBackendConnectionMysqlOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlAurora struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionMysqlAuroraInput is an input type that accepts SecretBackendConnectionMysqlAuroraArgs and SecretBackendConnectionMysqlAuroraOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlAuroraInput` via:
//
//          SecretBackendConnectionMysqlAuroraArgs{...}
type SecretBackendConnectionMysqlAuroraInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput
	ToSecretBackendConnectionMysqlAuroraOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraOutput
}

type SecretBackendConnectionMysqlAuroraArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlAuroraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput {
	return i.ToSecretBackendConnectionMysqlAuroraOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraOutput)
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraOutput).ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlAuroraPtrInput is an input type that accepts SecretBackendConnectionMysqlAuroraArgs, SecretBackendConnectionMysqlAuroraPtr and SecretBackendConnectionMysqlAuroraPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlAuroraPtrInput` via:
//
//          SecretBackendConnectionMysqlAuroraArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionMysqlAuroraPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput
	ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraPtrOutput
}

type secretBackendConnectionMysqlAuroraPtrType SecretBackendConnectionMysqlAuroraArgs

func SecretBackendConnectionMysqlAuroraPtr(v *SecretBackendConnectionMysqlAuroraArgs) SecretBackendConnectionMysqlAuroraPtrInput {
	return (*secretBackendConnectionMysqlAuroraPtrType)(v)
}

func (*secretBackendConnectionMysqlAuroraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlAuroraPtrType) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlAuroraPtrType) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraPtrOutput)
}

type SecretBackendConnectionMysqlAuroraOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return o.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *SecretBackendConnectionMysqlAurora {
		return &v
	}).(SecretBackendConnectionMysqlAuroraPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlAuroraPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) Elem() SecretBackendConnectionMysqlAuroraOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) SecretBackendConnectionMysqlAurora { return *v }).(SecretBackendConnectionMysqlAuroraOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlLegacy struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionMysqlLegacyInput is an input type that accepts SecretBackendConnectionMysqlLegacyArgs and SecretBackendConnectionMysqlLegacyOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlLegacyInput` via:
//
//          SecretBackendConnectionMysqlLegacyArgs{...}
type SecretBackendConnectionMysqlLegacyInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput
	ToSecretBackendConnectionMysqlLegacyOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyOutput
}

type SecretBackendConnectionMysqlLegacyArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlLegacyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput {
	return i.ToSecretBackendConnectionMysqlLegacyOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyOutput)
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyOutput).ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlLegacyPtrInput is an input type that accepts SecretBackendConnectionMysqlLegacyArgs, SecretBackendConnectionMysqlLegacyPtr and SecretBackendConnectionMysqlLegacyPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlLegacyPtrInput` via:
//
//          SecretBackendConnectionMysqlLegacyArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionMysqlLegacyPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput
	ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyPtrOutput
}

type secretBackendConnectionMysqlLegacyPtrType SecretBackendConnectionMysqlLegacyArgs

func SecretBackendConnectionMysqlLegacyPtr(v *SecretBackendConnectionMysqlLegacyArgs) SecretBackendConnectionMysqlLegacyPtrInput {
	return (*secretBackendConnectionMysqlLegacyPtrType)(v)
}

func (*secretBackendConnectionMysqlLegacyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlLegacyPtrType) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlLegacyPtrType) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyPtrOutput)
}

type SecretBackendConnectionMysqlLegacyOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return o.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *SecretBackendConnectionMysqlLegacy {
		return &v
	}).(SecretBackendConnectionMysqlLegacyPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlLegacyPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) Elem() SecretBackendConnectionMysqlLegacyOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) SecretBackendConnectionMysqlLegacy { return *v }).(SecretBackendConnectionMysqlLegacyOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlRds struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionMysqlRdsInput is an input type that accepts SecretBackendConnectionMysqlRdsArgs and SecretBackendConnectionMysqlRdsOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlRdsInput` via:
//
//          SecretBackendConnectionMysqlRdsArgs{...}
type SecretBackendConnectionMysqlRdsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput
	ToSecretBackendConnectionMysqlRdsOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsOutput
}

type SecretBackendConnectionMysqlRdsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlRdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput {
	return i.ToSecretBackendConnectionMysqlRdsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsOutput)
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsOutput).ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx)
}

// SecretBackendConnectionMysqlRdsPtrInput is an input type that accepts SecretBackendConnectionMysqlRdsArgs, SecretBackendConnectionMysqlRdsPtr and SecretBackendConnectionMysqlRdsPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionMysqlRdsPtrInput` via:
//
//          SecretBackendConnectionMysqlRdsArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionMysqlRdsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput
	ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsPtrOutput
}

type secretBackendConnectionMysqlRdsPtrType SecretBackendConnectionMysqlRdsArgs

func SecretBackendConnectionMysqlRdsPtr(v *SecretBackendConnectionMysqlRdsArgs) SecretBackendConnectionMysqlRdsPtrInput {
	return (*secretBackendConnectionMysqlRdsPtrType)(v)
}

func (*secretBackendConnectionMysqlRdsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlRdsPtrType) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlRdsPtrType) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsPtrOutput)
}

type SecretBackendConnectionMysqlRdsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return o.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *SecretBackendConnectionMysqlRds {
		return &v
	}).(SecretBackendConnectionMysqlRdsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlRdsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) Elem() SecretBackendConnectionMysqlRdsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) SecretBackendConnectionMysqlRds { return *v }).(SecretBackendConnectionMysqlRdsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionOracle struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionOracleInput is an input type that accepts SecretBackendConnectionOracleArgs and SecretBackendConnectionOracleOutput values.
// You can construct a concrete instance of `SecretBackendConnectionOracleInput` via:
//
//          SecretBackendConnectionOracleArgs{...}
type SecretBackendConnectionOracleInput interface {
	pulumi.Input

	ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput
	ToSecretBackendConnectionOracleOutputWithContext(context.Context) SecretBackendConnectionOracleOutput
}

type SecretBackendConnectionOracleArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracle)(nil)).Elem()
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput {
	return i.ToSecretBackendConnectionOracleOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOracleOutputWithContext(ctx context.Context) SecretBackendConnectionOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleOutput)
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return i.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleOutput).ToSecretBackendConnectionOraclePtrOutputWithContext(ctx)
}

// SecretBackendConnectionOraclePtrInput is an input type that accepts SecretBackendConnectionOracleArgs, SecretBackendConnectionOraclePtr and SecretBackendConnectionOraclePtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionOraclePtrInput` via:
//
//          SecretBackendConnectionOracleArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionOraclePtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput
	ToSecretBackendConnectionOraclePtrOutputWithContext(context.Context) SecretBackendConnectionOraclePtrOutput
}

type secretBackendConnectionOraclePtrType SecretBackendConnectionOracleArgs

func SecretBackendConnectionOraclePtr(v *SecretBackendConnectionOracleArgs) SecretBackendConnectionOraclePtrInput {
	return (*secretBackendConnectionOraclePtrType)(v)
}

func (*secretBackendConnectionOraclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracle)(nil)).Elem()
}

func (i *secretBackendConnectionOraclePtrType) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return i.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionOraclePtrType) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOraclePtrOutput)
}

type SecretBackendConnectionOracleOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracle)(nil)).Elem()
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput {
	return o
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOracleOutputWithContext(ctx context.Context) SecretBackendConnectionOracleOutput {
	return o
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return o.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *SecretBackendConnectionOracle {
		return &v
	}).(SecretBackendConnectionOraclePtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOracleOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOracleOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOracleOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOracleOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionOraclePtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOraclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracle)(nil)).Elem()
}

func (o SecretBackendConnectionOraclePtrOutput) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return o
}

func (o SecretBackendConnectionOraclePtrOutput) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return o
}

func (o SecretBackendConnectionOraclePtrOutput) Elem() SecretBackendConnectionOracleOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) SecretBackendConnectionOracle { return *v }).(SecretBackendConnectionOracleOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOraclePtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOraclePtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOraclePtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOraclePtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionPostgresql struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

// SecretBackendConnectionPostgresqlInput is an input type that accepts SecretBackendConnectionPostgresqlArgs and SecretBackendConnectionPostgresqlOutput values.
// You can construct a concrete instance of `SecretBackendConnectionPostgresqlInput` via:
//
//          SecretBackendConnectionPostgresqlArgs{...}
type SecretBackendConnectionPostgresqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput
	ToSecretBackendConnectionPostgresqlOutputWithContext(context.Context) SecretBackendConnectionPostgresqlOutput
}

type SecretBackendConnectionPostgresqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput {
	return i.ToSecretBackendConnectionPostgresqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlOutput)
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlOutput).ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx)
}

// SecretBackendConnectionPostgresqlPtrInput is an input type that accepts SecretBackendConnectionPostgresqlArgs, SecretBackendConnectionPostgresqlPtr and SecretBackendConnectionPostgresqlPtrOutput values.
// You can construct a concrete instance of `SecretBackendConnectionPostgresqlPtrInput` via:
//
//          SecretBackendConnectionPostgresqlArgs{...}
//
//  or:
//
//          nil
type SecretBackendConnectionPostgresqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput
	ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Context) SecretBackendConnectionPostgresqlPtrOutput
}

type secretBackendConnectionPostgresqlPtrType SecretBackendConnectionPostgresqlArgs

func SecretBackendConnectionPostgresqlPtr(v *SecretBackendConnectionPostgresqlArgs) SecretBackendConnectionPostgresqlPtrInput {
	return (*secretBackendConnectionPostgresqlPtrType)(v)
}

func (*secretBackendConnectionPostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (i *secretBackendConnectionPostgresqlPtrType) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionPostgresqlPtrType) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlPtrOutput)
}

type SecretBackendConnectionPostgresqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return o.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *SecretBackendConnectionPostgresql {
		return &v
	}).(SecretBackendConnectionPostgresqlPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionPostgresqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlPtrOutput) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlPtrOutput) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlPtrOutput) Elem() SecretBackendConnectionPostgresqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) SecretBackendConnectionPostgresql { return *v }).(SecretBackendConnectionPostgresqlOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnectionLifetime
	}).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *int {
		if v == nil {
			return nil
		}
		return v.MaxIdleConnections
	}).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) *int {
		if v == nil {
			return nil
		}
		return v.MaxOpenConnections
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOracleOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOraclePtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlPtrOutput{})
}
