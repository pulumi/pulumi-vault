// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			jwt, err := vault.NewPlugin(ctx, "jwt", &vault.PluginArgs{
//				Type:    pulumi.String("auth"),
//				Name:    pulumi.String("jwt"),
//				Command: pulumi.String("vault-plugin-auth-jwt"),
//				Version: pulumi.String("v0.17.0"),
//				Sha256:  pulumi.String("6bd0a803ed742aa3ce35e4fa23d2c8d550e6c1567bf63410cec489c28b68b0fc"),
//				Envs: pulumi.StringArray{
//					pulumi.String("HTTP_PROXY=http://proxy.example.com:8080"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			jwtPin, err := vault.NewPluginPinnedVersion(ctx, "jwt_pin", &vault.PluginPinnedVersionArgs{
//				Type:    jwt.Type,
//				Name:    jwt.Name,
//				Version: jwt.Version,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vault.NewAuthBackend(ctx, "jwt_auth", &vault.AuthBackendArgs{
//				Type: jwtPin.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pinned plugin versions can be imported using `type/name` as the ID, e.g.
//
// ```sh
// $ pulumi import vault:index/pluginPinnedVersion:PluginPinnedVersion jwt_pin auth/jwt
// ```
type PluginPinnedVersion struct {
	pulumi.CustomResourceState

	// Name of the plugin.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of plugin; one of "auth", "secret", or "database".
	Type pulumi.StringOutput `pulumi:"type"`
	// Semantic version of the plugin to pin.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewPluginPinnedVersion registers a new resource with the given unique name, arguments, and options.
func NewPluginPinnedVersion(ctx *pulumi.Context,
	name string, args *PluginPinnedVersionArgs, opts ...pulumi.ResourceOption) (*PluginPinnedVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PluginPinnedVersion
	err := ctx.RegisterResource("vault:index/pluginPinnedVersion:PluginPinnedVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPluginPinnedVersion gets an existing PluginPinnedVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPluginPinnedVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginPinnedVersionState, opts ...pulumi.ResourceOption) (*PluginPinnedVersion, error) {
	var resource PluginPinnedVersion
	err := ctx.ReadResource("vault:index/pluginPinnedVersion:PluginPinnedVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PluginPinnedVersion resources.
type pluginPinnedVersionState struct {
	// Name of the plugin.
	Name *string `pulumi:"name"`
	// Type of plugin; one of "auth", "secret", or "database".
	Type *string `pulumi:"type"`
	// Semantic version of the plugin to pin.
	Version *string `pulumi:"version"`
}

type PluginPinnedVersionState struct {
	// Name of the plugin.
	Name pulumi.StringPtrInput
	// Type of plugin; one of "auth", "secret", or "database".
	Type pulumi.StringPtrInput
	// Semantic version of the plugin to pin.
	Version pulumi.StringPtrInput
}

func (PluginPinnedVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginPinnedVersionState)(nil)).Elem()
}

type pluginPinnedVersionArgs struct {
	// Name of the plugin.
	Name *string `pulumi:"name"`
	// Type of plugin; one of "auth", "secret", or "database".
	Type string `pulumi:"type"`
	// Semantic version of the plugin to pin.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a PluginPinnedVersion resource.
type PluginPinnedVersionArgs struct {
	// Name of the plugin.
	Name pulumi.StringPtrInput
	// Type of plugin; one of "auth", "secret", or "database".
	Type pulumi.StringInput
	// Semantic version of the plugin to pin.
	Version pulumi.StringInput
}

func (PluginPinnedVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginPinnedVersionArgs)(nil)).Elem()
}

type PluginPinnedVersionInput interface {
	pulumi.Input

	ToPluginPinnedVersionOutput() PluginPinnedVersionOutput
	ToPluginPinnedVersionOutputWithContext(ctx context.Context) PluginPinnedVersionOutput
}

func (*PluginPinnedVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**PluginPinnedVersion)(nil)).Elem()
}

func (i *PluginPinnedVersion) ToPluginPinnedVersionOutput() PluginPinnedVersionOutput {
	return i.ToPluginPinnedVersionOutputWithContext(context.Background())
}

func (i *PluginPinnedVersion) ToPluginPinnedVersionOutputWithContext(ctx context.Context) PluginPinnedVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginPinnedVersionOutput)
}

// PluginPinnedVersionArrayInput is an input type that accepts PluginPinnedVersionArray and PluginPinnedVersionArrayOutput values.
// You can construct a concrete instance of `PluginPinnedVersionArrayInput` via:
//
//	PluginPinnedVersionArray{ PluginPinnedVersionArgs{...} }
type PluginPinnedVersionArrayInput interface {
	pulumi.Input

	ToPluginPinnedVersionArrayOutput() PluginPinnedVersionArrayOutput
	ToPluginPinnedVersionArrayOutputWithContext(context.Context) PluginPinnedVersionArrayOutput
}

type PluginPinnedVersionArray []PluginPinnedVersionInput

func (PluginPinnedVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluginPinnedVersion)(nil)).Elem()
}

func (i PluginPinnedVersionArray) ToPluginPinnedVersionArrayOutput() PluginPinnedVersionArrayOutput {
	return i.ToPluginPinnedVersionArrayOutputWithContext(context.Background())
}

func (i PluginPinnedVersionArray) ToPluginPinnedVersionArrayOutputWithContext(ctx context.Context) PluginPinnedVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginPinnedVersionArrayOutput)
}

// PluginPinnedVersionMapInput is an input type that accepts PluginPinnedVersionMap and PluginPinnedVersionMapOutput values.
// You can construct a concrete instance of `PluginPinnedVersionMapInput` via:
//
//	PluginPinnedVersionMap{ "key": PluginPinnedVersionArgs{...} }
type PluginPinnedVersionMapInput interface {
	pulumi.Input

	ToPluginPinnedVersionMapOutput() PluginPinnedVersionMapOutput
	ToPluginPinnedVersionMapOutputWithContext(context.Context) PluginPinnedVersionMapOutput
}

type PluginPinnedVersionMap map[string]PluginPinnedVersionInput

func (PluginPinnedVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluginPinnedVersion)(nil)).Elem()
}

func (i PluginPinnedVersionMap) ToPluginPinnedVersionMapOutput() PluginPinnedVersionMapOutput {
	return i.ToPluginPinnedVersionMapOutputWithContext(context.Background())
}

func (i PluginPinnedVersionMap) ToPluginPinnedVersionMapOutputWithContext(ctx context.Context) PluginPinnedVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginPinnedVersionMapOutput)
}

type PluginPinnedVersionOutput struct{ *pulumi.OutputState }

func (PluginPinnedVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PluginPinnedVersion)(nil)).Elem()
}

func (o PluginPinnedVersionOutput) ToPluginPinnedVersionOutput() PluginPinnedVersionOutput {
	return o
}

func (o PluginPinnedVersionOutput) ToPluginPinnedVersionOutputWithContext(ctx context.Context) PluginPinnedVersionOutput {
	return o
}

// Name of the plugin.
func (o PluginPinnedVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginPinnedVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of plugin; one of "auth", "secret", or "database".
func (o PluginPinnedVersionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginPinnedVersion) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Semantic version of the plugin to pin.
func (o PluginPinnedVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginPinnedVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type PluginPinnedVersionArrayOutput struct{ *pulumi.OutputState }

func (PluginPinnedVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluginPinnedVersion)(nil)).Elem()
}

func (o PluginPinnedVersionArrayOutput) ToPluginPinnedVersionArrayOutput() PluginPinnedVersionArrayOutput {
	return o
}

func (o PluginPinnedVersionArrayOutput) ToPluginPinnedVersionArrayOutputWithContext(ctx context.Context) PluginPinnedVersionArrayOutput {
	return o
}

func (o PluginPinnedVersionArrayOutput) Index(i pulumi.IntInput) PluginPinnedVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PluginPinnedVersion {
		return vs[0].([]*PluginPinnedVersion)[vs[1].(int)]
	}).(PluginPinnedVersionOutput)
}

type PluginPinnedVersionMapOutput struct{ *pulumi.OutputState }

func (PluginPinnedVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluginPinnedVersion)(nil)).Elem()
}

func (o PluginPinnedVersionMapOutput) ToPluginPinnedVersionMapOutput() PluginPinnedVersionMapOutput {
	return o
}

func (o PluginPinnedVersionMapOutput) ToPluginPinnedVersionMapOutputWithContext(ctx context.Context) PluginPinnedVersionMapOutput {
	return o
}

func (o PluginPinnedVersionMapOutput) MapIndex(k pulumi.StringInput) PluginPinnedVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PluginPinnedVersion {
		return vs[0].(map[string]*PluginPinnedVersion)[vs[1].(string)]
	}).(PluginPinnedVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginPinnedVersionInput)(nil)).Elem(), &PluginPinnedVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginPinnedVersionArrayInput)(nil)).Elem(), PluginPinnedVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginPinnedVersionMapInput)(nil)).Elem(), PluginPinnedVersionMap{})
	pulumi.RegisterOutputType(PluginPinnedVersionOutput{})
	pulumi.RegisterOutputType(PluginPinnedVersionArrayOutput{})
	pulumi.RegisterOutputType(PluginPinnedVersionMapOutput{})
}
