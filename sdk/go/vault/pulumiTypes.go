// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AuthBackendTune struct {
	// List of headers to whitelist and allowing
	// a plugin to include them in the response.
	AllowedResponseHeaders []string `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// Specifies the default time-to-live.
	// If set, this overrides the global default.
	// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
	DefaultLeaseTtl *string `pulumi:"defaultLeaseTtl"`
	// Specifies whether to show this mount in
	// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
	ListingVisibility *string `pulumi:"listingVisibility"`
	// Specifies the maximum time-to-live.
	// If set, this overrides the global default.
	// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
	MaxLeaseTtl *string `pulumi:"maxLeaseTtl"`
	// List of headers to whitelist and
	// pass from the request to the backend.
	PassthroughRequestHeaders []string `pulumi:"passthroughRequestHeaders"`
	// Specifies the type of tokens that should be returned by
	// the mount. Valid values are "default-service", "default-batch", "service", "batch".
	TokenType *string `pulumi:"tokenType"`
}

// AuthBackendTuneInput is an input type that accepts AuthBackendTuneArgs and AuthBackendTuneOutput values.
// You can construct a concrete instance of `AuthBackendTuneInput` via:
//
//	AuthBackendTuneArgs{...}
type AuthBackendTuneInput interface {
	pulumi.Input

	ToAuthBackendTuneOutput() AuthBackendTuneOutput
	ToAuthBackendTuneOutputWithContext(context.Context) AuthBackendTuneOutput
}

type AuthBackendTuneArgs struct {
	// List of headers to whitelist and allowing
	// a plugin to include them in the response.
	AllowedResponseHeaders pulumi.StringArrayInput `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput `pulumi:"auditNonHmacResponseKeys"`
	// Specifies the default time-to-live.
	// If set, this overrides the global default.
	// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
	DefaultLeaseTtl pulumi.StringPtrInput `pulumi:"defaultLeaseTtl"`
	// Specifies whether to show this mount in
	// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
	ListingVisibility pulumi.StringPtrInput `pulumi:"listingVisibility"`
	// Specifies the maximum time-to-live.
	// If set, this overrides the global default.
	// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
	MaxLeaseTtl pulumi.StringPtrInput `pulumi:"maxLeaseTtl"`
	// List of headers to whitelist and
	// pass from the request to the backend.
	PassthroughRequestHeaders pulumi.StringArrayInput `pulumi:"passthroughRequestHeaders"`
	// Specifies the type of tokens that should be returned by
	// the mount. Valid values are "default-service", "default-batch", "service", "batch".
	TokenType pulumi.StringPtrInput `pulumi:"tokenType"`
}

func (AuthBackendTuneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthBackendTune)(nil)).Elem()
}

func (i AuthBackendTuneArgs) ToAuthBackendTuneOutput() AuthBackendTuneOutput {
	return i.ToAuthBackendTuneOutputWithContext(context.Background())
}

func (i AuthBackendTuneArgs) ToAuthBackendTuneOutputWithContext(ctx context.Context) AuthBackendTuneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendTuneOutput)
}

func (i AuthBackendTuneArgs) ToAuthBackendTunePtrOutput() AuthBackendTunePtrOutput {
	return i.ToAuthBackendTunePtrOutputWithContext(context.Background())
}

func (i AuthBackendTuneArgs) ToAuthBackendTunePtrOutputWithContext(ctx context.Context) AuthBackendTunePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendTuneOutput).ToAuthBackendTunePtrOutputWithContext(ctx)
}

// AuthBackendTunePtrInput is an input type that accepts AuthBackendTuneArgs, AuthBackendTunePtr and AuthBackendTunePtrOutput values.
// You can construct a concrete instance of `AuthBackendTunePtrInput` via:
//
//	        AuthBackendTuneArgs{...}
//
//	or:
//
//	        nil
type AuthBackendTunePtrInput interface {
	pulumi.Input

	ToAuthBackendTunePtrOutput() AuthBackendTunePtrOutput
	ToAuthBackendTunePtrOutputWithContext(context.Context) AuthBackendTunePtrOutput
}

type authBackendTunePtrType AuthBackendTuneArgs

func AuthBackendTunePtr(v *AuthBackendTuneArgs) AuthBackendTunePtrInput {
	return (*authBackendTunePtrType)(v)
}

func (*authBackendTunePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendTune)(nil)).Elem()
}

func (i *authBackendTunePtrType) ToAuthBackendTunePtrOutput() AuthBackendTunePtrOutput {
	return i.ToAuthBackendTunePtrOutputWithContext(context.Background())
}

func (i *authBackendTunePtrType) ToAuthBackendTunePtrOutputWithContext(ctx context.Context) AuthBackendTunePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendTunePtrOutput)
}

type AuthBackendTuneOutput struct{ *pulumi.OutputState }

func (AuthBackendTuneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthBackendTune)(nil)).Elem()
}

func (o AuthBackendTuneOutput) ToAuthBackendTuneOutput() AuthBackendTuneOutput {
	return o
}

func (o AuthBackendTuneOutput) ToAuthBackendTuneOutputWithContext(ctx context.Context) AuthBackendTuneOutput {
	return o
}

func (o AuthBackendTuneOutput) ToAuthBackendTunePtrOutput() AuthBackendTunePtrOutput {
	return o.ToAuthBackendTunePtrOutputWithContext(context.Background())
}

func (o AuthBackendTuneOutput) ToAuthBackendTunePtrOutputWithContext(ctx context.Context) AuthBackendTunePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthBackendTune) *AuthBackendTune {
		return &v
	}).(AuthBackendTunePtrOutput)
}

// List of headers to whitelist and allowing
// a plugin to include them in the response.
func (o AuthBackendTuneOutput) AllowedResponseHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthBackendTune) []string { return v.AllowedResponseHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will
// not be HMAC'd by audit devices in the request data object.
func (o AuthBackendTuneOutput) AuditNonHmacRequestKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthBackendTune) []string { return v.AuditNonHmacRequestKeys }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will
// not be HMAC'd by audit devices in the response data object.
func (o AuthBackendTuneOutput) AuditNonHmacResponseKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthBackendTune) []string { return v.AuditNonHmacResponseKeys }).(pulumi.StringArrayOutput)
}

// Specifies the default time-to-live.
// If set, this overrides the global default.
// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
func (o AuthBackendTuneOutput) DefaultLeaseTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthBackendTune) *string { return v.DefaultLeaseTtl }).(pulumi.StringPtrOutput)
}

// Specifies whether to show this mount in
// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
func (o AuthBackendTuneOutput) ListingVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthBackendTune) *string { return v.ListingVisibility }).(pulumi.StringPtrOutput)
}

// Specifies the maximum time-to-live.
// If set, this overrides the global default.
// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
func (o AuthBackendTuneOutput) MaxLeaseTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthBackendTune) *string { return v.MaxLeaseTtl }).(pulumi.StringPtrOutput)
}

// List of headers to whitelist and
// pass from the request to the backend.
func (o AuthBackendTuneOutput) PassthroughRequestHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthBackendTune) []string { return v.PassthroughRequestHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the type of tokens that should be returned by
// the mount. Valid values are "default-service", "default-batch", "service", "batch".
func (o AuthBackendTuneOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthBackendTune) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type AuthBackendTunePtrOutput struct{ *pulumi.OutputState }

func (AuthBackendTunePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendTune)(nil)).Elem()
}

func (o AuthBackendTunePtrOutput) ToAuthBackendTunePtrOutput() AuthBackendTunePtrOutput {
	return o
}

func (o AuthBackendTunePtrOutput) ToAuthBackendTunePtrOutputWithContext(ctx context.Context) AuthBackendTunePtrOutput {
	return o
}

func (o AuthBackendTunePtrOutput) Elem() AuthBackendTuneOutput {
	return o.ApplyT(func(v *AuthBackendTune) AuthBackendTune {
		if v != nil {
			return *v
		}
		var ret AuthBackendTune
		return ret
	}).(AuthBackendTuneOutput)
}

// List of headers to whitelist and allowing
// a plugin to include them in the response.
func (o AuthBackendTunePtrOutput) AllowedResponseHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendTune) []string {
		if v == nil {
			return nil
		}
		return v.AllowedResponseHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will
// not be HMAC'd by audit devices in the request data object.
func (o AuthBackendTunePtrOutput) AuditNonHmacRequestKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendTune) []string {
		if v == nil {
			return nil
		}
		return v.AuditNonHmacRequestKeys
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will
// not be HMAC'd by audit devices in the response data object.
func (o AuthBackendTunePtrOutput) AuditNonHmacResponseKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendTune) []string {
		if v == nil {
			return nil
		}
		return v.AuditNonHmacResponseKeys
	}).(pulumi.StringArrayOutput)
}

// Specifies the default time-to-live.
// If set, this overrides the global default.
// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
func (o AuthBackendTunePtrOutput) DefaultLeaseTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendTune) *string {
		if v == nil {
			return nil
		}
		return v.DefaultLeaseTtl
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to show this mount in
// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
func (o AuthBackendTunePtrOutput) ListingVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendTune) *string {
		if v == nil {
			return nil
		}
		return v.ListingVisibility
	}).(pulumi.StringPtrOutput)
}

// Specifies the maximum time-to-live.
// If set, this overrides the global default.
// Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
func (o AuthBackendTunePtrOutput) MaxLeaseTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendTune) *string {
		if v == nil {
			return nil
		}
		return v.MaxLeaseTtl
	}).(pulumi.StringPtrOutput)
}

// List of headers to whitelist and
// pass from the request to the backend.
func (o AuthBackendTunePtrOutput) PassthroughRequestHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackendTune) []string {
		if v == nil {
			return nil
		}
		return v.PassthroughRequestHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the type of tokens that should be returned by
// the mount. Valid values are "default-service", "default-batch", "service", "batch".
func (o AuthBackendTunePtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendTune) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

type ProviderAuthLogin struct {
	Method *string `pulumi:"method"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace  *string           `pulumi:"namespace"`
	Parameters map[string]string `pulumi:"parameters"`
	Path       string            `pulumi:"path"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginInput is an input type that accepts ProviderAuthLoginArgs and ProviderAuthLoginOutput values.
// You can construct a concrete instance of `ProviderAuthLoginInput` via:
//
//	ProviderAuthLoginArgs{...}
type ProviderAuthLoginInput interface {
	pulumi.Input

	ToProviderAuthLoginOutput() ProviderAuthLoginOutput
	ToProviderAuthLoginOutputWithContext(context.Context) ProviderAuthLoginOutput
}

type ProviderAuthLoginArgs struct {
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace  pulumi.StringPtrInput `pulumi:"namespace"`
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	Path       pulumi.StringInput    `pulumi:"path"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLogin)(nil)).Elem()
}

func (i ProviderAuthLoginArgs) ToProviderAuthLoginOutput() ProviderAuthLoginOutput {
	return i.ToProviderAuthLoginOutputWithContext(context.Background())
}

func (i ProviderAuthLoginArgs) ToProviderAuthLoginOutputWithContext(ctx context.Context) ProviderAuthLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOutput)
}

func (i ProviderAuthLoginArgs) ToProviderAuthLoginPtrOutput() ProviderAuthLoginPtrOutput {
	return i.ToProviderAuthLoginPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginArgs) ToProviderAuthLoginPtrOutputWithContext(ctx context.Context) ProviderAuthLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOutput).ToProviderAuthLoginPtrOutputWithContext(ctx)
}

// ProviderAuthLoginPtrInput is an input type that accepts ProviderAuthLoginArgs, ProviderAuthLoginPtr and ProviderAuthLoginPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginPtrInput` via:
//
//	        ProviderAuthLoginArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginPtrOutput() ProviderAuthLoginPtrOutput
	ToProviderAuthLoginPtrOutputWithContext(context.Context) ProviderAuthLoginPtrOutput
}

type providerAuthLoginPtrType ProviderAuthLoginArgs

func ProviderAuthLoginPtr(v *ProviderAuthLoginArgs) ProviderAuthLoginPtrInput {
	return (*providerAuthLoginPtrType)(v)
}

func (*providerAuthLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLogin)(nil)).Elem()
}

func (i *providerAuthLoginPtrType) ToProviderAuthLoginPtrOutput() ProviderAuthLoginPtrOutput {
	return i.ToProviderAuthLoginPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginPtrType) ToProviderAuthLoginPtrOutputWithContext(ctx context.Context) ProviderAuthLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginPtrOutput)
}

type ProviderAuthLoginOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLogin)(nil)).Elem()
}

func (o ProviderAuthLoginOutput) ToProviderAuthLoginOutput() ProviderAuthLoginOutput {
	return o
}

func (o ProviderAuthLoginOutput) ToProviderAuthLoginOutputWithContext(ctx context.Context) ProviderAuthLoginOutput {
	return o
}

func (o ProviderAuthLoginOutput) ToProviderAuthLoginPtrOutput() ProviderAuthLoginPtrOutput {
	return o.ToProviderAuthLoginPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginOutput) ToProviderAuthLoginPtrOutputWithContext(ctx context.Context) ProviderAuthLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLogin) *ProviderAuthLogin {
		return &v
	}).(ProviderAuthLoginPtrOutput)
}

func (o ProviderAuthLoginOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLogin) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLogin) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o ProviderAuthLoginOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProviderAuthLogin) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o ProviderAuthLoginOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLogin) string { return v.Path }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLogin) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLogin)(nil)).Elem()
}

func (o ProviderAuthLoginPtrOutput) ToProviderAuthLoginPtrOutput() ProviderAuthLoginPtrOutput {
	return o
}

func (o ProviderAuthLoginPtrOutput) ToProviderAuthLoginPtrOutputWithContext(ctx context.Context) ProviderAuthLoginPtrOutput {
	return o
}

func (o ProviderAuthLoginPtrOutput) Elem() ProviderAuthLoginOutput {
	return o.ApplyT(func(v *ProviderAuthLogin) ProviderAuthLogin {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLogin
		return ret
	}).(ProviderAuthLoginOutput)
}

func (o ProviderAuthLoginPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLogin) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLogin) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o ProviderAuthLoginPtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProviderAuthLogin) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

func (o ProviderAuthLoginPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLogin) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLogin) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginAws struct {
	// The AWS access key ID.
	AwsAccessKeyId *string `pulumi:"awsAccessKeyId"`
	// The IAM endpoint URL.
	AwsIamEndpoint *string `pulumi:"awsIamEndpoint"`
	// The name of the AWS profile.
	AwsProfile *string `pulumi:"awsProfile"`
	// The AWS region.
	AwsRegion *string `pulumi:"awsRegion"`
	// The ARN of the AWS Role to assume.Used during STS AssumeRole
	AwsRoleArn *string `pulumi:"awsRoleArn"`
	// Specifies the name to attach to the AWS role session. Used during STS AssumeRole
	AwsRoleSessionName *string `pulumi:"awsRoleSessionName"`
	// The AWS secret access key.
	AwsSecretAccessKey *string `pulumi:"awsSecretAccessKey"`
	// The AWS session token.
	AwsSessionToken *string `pulumi:"awsSessionToken"`
	// Path to the AWS shared credentials file.
	AwsSharedCredentialsFile *string `pulumi:"awsSharedCredentialsFile"`
	// The STS endpoint URL.
	AwsStsEndpoint *string `pulumi:"awsStsEndpoint"`
	// Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token.
	AwsWebIdentityTokenFile *string `pulumi:"awsWebIdentityTokenFile"`
	// The Vault header value to include in the STS signing request.
	HeaderValue *string `pulumi:"headerValue"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The Vault role to use when logging into Vault.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginAwsInput is an input type that accepts ProviderAuthLoginAwsArgs and ProviderAuthLoginAwsOutput values.
// You can construct a concrete instance of `ProviderAuthLoginAwsInput` via:
//
//	ProviderAuthLoginAwsArgs{...}
type ProviderAuthLoginAwsInput interface {
	pulumi.Input

	ToProviderAuthLoginAwsOutput() ProviderAuthLoginAwsOutput
	ToProviderAuthLoginAwsOutputWithContext(context.Context) ProviderAuthLoginAwsOutput
}

type ProviderAuthLoginAwsArgs struct {
	// The AWS access key ID.
	AwsAccessKeyId pulumi.StringPtrInput `pulumi:"awsAccessKeyId"`
	// The IAM endpoint URL.
	AwsIamEndpoint pulumi.StringPtrInput `pulumi:"awsIamEndpoint"`
	// The name of the AWS profile.
	AwsProfile pulumi.StringPtrInput `pulumi:"awsProfile"`
	// The AWS region.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// The ARN of the AWS Role to assume.Used during STS AssumeRole
	AwsRoleArn pulumi.StringPtrInput `pulumi:"awsRoleArn"`
	// Specifies the name to attach to the AWS role session. Used during STS AssumeRole
	AwsRoleSessionName pulumi.StringPtrInput `pulumi:"awsRoleSessionName"`
	// The AWS secret access key.
	AwsSecretAccessKey pulumi.StringPtrInput `pulumi:"awsSecretAccessKey"`
	// The AWS session token.
	AwsSessionToken pulumi.StringPtrInput `pulumi:"awsSessionToken"`
	// Path to the AWS shared credentials file.
	AwsSharedCredentialsFile pulumi.StringPtrInput `pulumi:"awsSharedCredentialsFile"`
	// The STS endpoint URL.
	AwsStsEndpoint pulumi.StringPtrInput `pulumi:"awsStsEndpoint"`
	// Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token.
	AwsWebIdentityTokenFile pulumi.StringPtrInput `pulumi:"awsWebIdentityTokenFile"`
	// The Vault header value to include in the STS signing request.
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The Vault role to use when logging into Vault.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginAws)(nil)).Elem()
}

func (i ProviderAuthLoginAwsArgs) ToProviderAuthLoginAwsOutput() ProviderAuthLoginAwsOutput {
	return i.ToProviderAuthLoginAwsOutputWithContext(context.Background())
}

func (i ProviderAuthLoginAwsArgs) ToProviderAuthLoginAwsOutputWithContext(ctx context.Context) ProviderAuthLoginAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginAwsOutput)
}

func (i ProviderAuthLoginAwsArgs) ToProviderAuthLoginAwsPtrOutput() ProviderAuthLoginAwsPtrOutput {
	return i.ToProviderAuthLoginAwsPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginAwsArgs) ToProviderAuthLoginAwsPtrOutputWithContext(ctx context.Context) ProviderAuthLoginAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginAwsOutput).ToProviderAuthLoginAwsPtrOutputWithContext(ctx)
}

// ProviderAuthLoginAwsPtrInput is an input type that accepts ProviderAuthLoginAwsArgs, ProviderAuthLoginAwsPtr and ProviderAuthLoginAwsPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginAwsPtrInput` via:
//
//	        ProviderAuthLoginAwsArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginAwsPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginAwsPtrOutput() ProviderAuthLoginAwsPtrOutput
	ToProviderAuthLoginAwsPtrOutputWithContext(context.Context) ProviderAuthLoginAwsPtrOutput
}

type providerAuthLoginAwsPtrType ProviderAuthLoginAwsArgs

func ProviderAuthLoginAwsPtr(v *ProviderAuthLoginAwsArgs) ProviderAuthLoginAwsPtrInput {
	return (*providerAuthLoginAwsPtrType)(v)
}

func (*providerAuthLoginAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginAws)(nil)).Elem()
}

func (i *providerAuthLoginAwsPtrType) ToProviderAuthLoginAwsPtrOutput() ProviderAuthLoginAwsPtrOutput {
	return i.ToProviderAuthLoginAwsPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginAwsPtrType) ToProviderAuthLoginAwsPtrOutputWithContext(ctx context.Context) ProviderAuthLoginAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginAwsPtrOutput)
}

type ProviderAuthLoginAwsOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginAws)(nil)).Elem()
}

func (o ProviderAuthLoginAwsOutput) ToProviderAuthLoginAwsOutput() ProviderAuthLoginAwsOutput {
	return o
}

func (o ProviderAuthLoginAwsOutput) ToProviderAuthLoginAwsOutputWithContext(ctx context.Context) ProviderAuthLoginAwsOutput {
	return o
}

func (o ProviderAuthLoginAwsOutput) ToProviderAuthLoginAwsPtrOutput() ProviderAuthLoginAwsPtrOutput {
	return o.ToProviderAuthLoginAwsPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginAwsOutput) ToProviderAuthLoginAwsPtrOutputWithContext(ctx context.Context) ProviderAuthLoginAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginAws) *ProviderAuthLoginAws {
		return &v
	}).(ProviderAuthLoginAwsPtrOutput)
}

// The AWS access key ID.
func (o ProviderAuthLoginAwsOutput) AwsAccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsAccessKeyId }).(pulumi.StringPtrOutput)
}

// The IAM endpoint URL.
func (o ProviderAuthLoginAwsOutput) AwsIamEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsIamEndpoint }).(pulumi.StringPtrOutput)
}

// The name of the AWS profile.
func (o ProviderAuthLoginAwsOutput) AwsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsProfile }).(pulumi.StringPtrOutput)
}

// The AWS region.
func (o ProviderAuthLoginAwsOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// The ARN of the AWS Role to assume.Used during STS AssumeRole
func (o ProviderAuthLoginAwsOutput) AwsRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsRoleArn }).(pulumi.StringPtrOutput)
}

// Specifies the name to attach to the AWS role session. Used during STS AssumeRole
func (o ProviderAuthLoginAwsOutput) AwsRoleSessionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsRoleSessionName }).(pulumi.StringPtrOutput)
}

// The AWS secret access key.
func (o ProviderAuthLoginAwsOutput) AwsSecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsSecretAccessKey }).(pulumi.StringPtrOutput)
}

// The AWS session token.
func (o ProviderAuthLoginAwsOutput) AwsSessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsSessionToken }).(pulumi.StringPtrOutput)
}

// Path to the AWS shared credentials file.
func (o ProviderAuthLoginAwsOutput) AwsSharedCredentialsFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsSharedCredentialsFile }).(pulumi.StringPtrOutput)
}

// The STS endpoint URL.
func (o ProviderAuthLoginAwsOutput) AwsStsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsStsEndpoint }).(pulumi.StringPtrOutput)
}

// Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token.
func (o ProviderAuthLoginAwsOutput) AwsWebIdentityTokenFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.AwsWebIdentityTokenFile }).(pulumi.StringPtrOutput)
}

// The Vault header value to include in the STS signing request.
func (o ProviderAuthLoginAwsOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginAwsOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginAwsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The Vault role to use when logging into Vault.
func (o ProviderAuthLoginAwsOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginAwsOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAws) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginAwsPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginAws)(nil)).Elem()
}

func (o ProviderAuthLoginAwsPtrOutput) ToProviderAuthLoginAwsPtrOutput() ProviderAuthLoginAwsPtrOutput {
	return o
}

func (o ProviderAuthLoginAwsPtrOutput) ToProviderAuthLoginAwsPtrOutputWithContext(ctx context.Context) ProviderAuthLoginAwsPtrOutput {
	return o
}

func (o ProviderAuthLoginAwsPtrOutput) Elem() ProviderAuthLoginAwsOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) ProviderAuthLoginAws {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginAws
		return ret
	}).(ProviderAuthLoginAwsOutput)
}

// The AWS access key ID.
func (o ProviderAuthLoginAwsPtrOutput) AwsAccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsAccessKeyId
	}).(pulumi.StringPtrOutput)
}

// The IAM endpoint URL.
func (o ProviderAuthLoginAwsPtrOutput) AwsIamEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsIamEndpoint
	}).(pulumi.StringPtrOutput)
}

// The name of the AWS profile.
func (o ProviderAuthLoginAwsPtrOutput) AwsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsProfile
	}).(pulumi.StringPtrOutput)
}

// The AWS region.
func (o ProviderAuthLoginAwsPtrOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsRegion
	}).(pulumi.StringPtrOutput)
}

// The ARN of the AWS Role to assume.Used during STS AssumeRole
func (o ProviderAuthLoginAwsPtrOutput) AwsRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsRoleArn
	}).(pulumi.StringPtrOutput)
}

// Specifies the name to attach to the AWS role session. Used during STS AssumeRole
func (o ProviderAuthLoginAwsPtrOutput) AwsRoleSessionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsRoleSessionName
	}).(pulumi.StringPtrOutput)
}

// The AWS secret access key.
func (o ProviderAuthLoginAwsPtrOutput) AwsSecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsSecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// The AWS session token.
func (o ProviderAuthLoginAwsPtrOutput) AwsSessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsSessionToken
	}).(pulumi.StringPtrOutput)
}

// Path to the AWS shared credentials file.
func (o ProviderAuthLoginAwsPtrOutput) AwsSharedCredentialsFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsSharedCredentialsFile
	}).(pulumi.StringPtrOutput)
}

// The STS endpoint URL.
func (o ProviderAuthLoginAwsPtrOutput) AwsStsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsStsEndpoint
	}).(pulumi.StringPtrOutput)
}

// Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token.
func (o ProviderAuthLoginAwsPtrOutput) AwsWebIdentityTokenFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.AwsWebIdentityTokenFile
	}).(pulumi.StringPtrOutput)
}

// The Vault header value to include in the STS signing request.
func (o ProviderAuthLoginAwsPtrOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.HeaderValue
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginAwsPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginAwsPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The Vault role to use when logging into Vault.
func (o ProviderAuthLoginAwsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginAwsPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAws) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginAzure struct {
	// The identity's client ID.
	ClientId *string `pulumi:"clientId"`
	// A signed JSON Web Token. If not specified on will be created automatically
	Jwt *string `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// The scopes to include in the token request.
	Scope *string `pulumi:"scope"`
	// The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
	SubscriptionId string `pulumi:"subscriptionId"`
	// Provides the tenant ID to use in a multi-tenant authentication scenario.
	TenantId *string `pulumi:"tenantId"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmName *string `pulumi:"vmName"`
	// The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmssName *string `pulumi:"vmssName"`
}

// ProviderAuthLoginAzureInput is an input type that accepts ProviderAuthLoginAzureArgs and ProviderAuthLoginAzureOutput values.
// You can construct a concrete instance of `ProviderAuthLoginAzureInput` via:
//
//	ProviderAuthLoginAzureArgs{...}
type ProviderAuthLoginAzureInput interface {
	pulumi.Input

	ToProviderAuthLoginAzureOutput() ProviderAuthLoginAzureOutput
	ToProviderAuthLoginAzureOutputWithContext(context.Context) ProviderAuthLoginAzureOutput
}

type ProviderAuthLoginAzureArgs struct {
	// The identity's client ID.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// A signed JSON Web Token. If not specified on will be created automatically
	Jwt pulumi.StringPtrInput `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// The scopes to include in the token request.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// Provides the tenant ID to use in a multi-tenant authentication scenario.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmName pulumi.StringPtrInput `pulumi:"vmName"`
	// The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmssName pulumi.StringPtrInput `pulumi:"vmssName"`
}

func (ProviderAuthLoginAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginAzure)(nil)).Elem()
}

func (i ProviderAuthLoginAzureArgs) ToProviderAuthLoginAzureOutput() ProviderAuthLoginAzureOutput {
	return i.ToProviderAuthLoginAzureOutputWithContext(context.Background())
}

func (i ProviderAuthLoginAzureArgs) ToProviderAuthLoginAzureOutputWithContext(ctx context.Context) ProviderAuthLoginAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginAzureOutput)
}

func (i ProviderAuthLoginAzureArgs) ToProviderAuthLoginAzurePtrOutput() ProviderAuthLoginAzurePtrOutput {
	return i.ToProviderAuthLoginAzurePtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginAzureArgs) ToProviderAuthLoginAzurePtrOutputWithContext(ctx context.Context) ProviderAuthLoginAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginAzureOutput).ToProviderAuthLoginAzurePtrOutputWithContext(ctx)
}

// ProviderAuthLoginAzurePtrInput is an input type that accepts ProviderAuthLoginAzureArgs, ProviderAuthLoginAzurePtr and ProviderAuthLoginAzurePtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginAzurePtrInput` via:
//
//	        ProviderAuthLoginAzureArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginAzurePtrInput interface {
	pulumi.Input

	ToProviderAuthLoginAzurePtrOutput() ProviderAuthLoginAzurePtrOutput
	ToProviderAuthLoginAzurePtrOutputWithContext(context.Context) ProviderAuthLoginAzurePtrOutput
}

type providerAuthLoginAzurePtrType ProviderAuthLoginAzureArgs

func ProviderAuthLoginAzurePtr(v *ProviderAuthLoginAzureArgs) ProviderAuthLoginAzurePtrInput {
	return (*providerAuthLoginAzurePtrType)(v)
}

func (*providerAuthLoginAzurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginAzure)(nil)).Elem()
}

func (i *providerAuthLoginAzurePtrType) ToProviderAuthLoginAzurePtrOutput() ProviderAuthLoginAzurePtrOutput {
	return i.ToProviderAuthLoginAzurePtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginAzurePtrType) ToProviderAuthLoginAzurePtrOutputWithContext(ctx context.Context) ProviderAuthLoginAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginAzurePtrOutput)
}

type ProviderAuthLoginAzureOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginAzure)(nil)).Elem()
}

func (o ProviderAuthLoginAzureOutput) ToProviderAuthLoginAzureOutput() ProviderAuthLoginAzureOutput {
	return o
}

func (o ProviderAuthLoginAzureOutput) ToProviderAuthLoginAzureOutputWithContext(ctx context.Context) ProviderAuthLoginAzureOutput {
	return o
}

func (o ProviderAuthLoginAzureOutput) ToProviderAuthLoginAzurePtrOutput() ProviderAuthLoginAzurePtrOutput {
	return o.ToProviderAuthLoginAzurePtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginAzureOutput) ToProviderAuthLoginAzurePtrOutputWithContext(ctx context.Context) ProviderAuthLoginAzurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginAzure) *ProviderAuthLoginAzure {
		return &v
	}).(ProviderAuthLoginAzurePtrOutput)
}

// The identity's client ID.
func (o ProviderAuthLoginAzureOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// A signed JSON Web Token. If not specified on will be created automatically
func (o ProviderAuthLoginAzureOutput) Jwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.Jwt }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginAzureOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginAzureOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzureOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Name of the login role.
func (o ProviderAuthLoginAzureOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) string { return v.Role }).(pulumi.StringOutput)
}

// The scopes to include in the token request.
func (o ProviderAuthLoginAzureOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzureOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Provides the tenant ID to use in a multi-tenant authentication scenario.
func (o ProviderAuthLoginAzureOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginAzureOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzureOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.VmName }).(pulumi.StringPtrOutput)
}

// The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzureOutput) VmssName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginAzure) *string { return v.VmssName }).(pulumi.StringPtrOutput)
}

type ProviderAuthLoginAzurePtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginAzurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginAzure)(nil)).Elem()
}

func (o ProviderAuthLoginAzurePtrOutput) ToProviderAuthLoginAzurePtrOutput() ProviderAuthLoginAzurePtrOutput {
	return o
}

func (o ProviderAuthLoginAzurePtrOutput) ToProviderAuthLoginAzurePtrOutputWithContext(ctx context.Context) ProviderAuthLoginAzurePtrOutput {
	return o
}

func (o ProviderAuthLoginAzurePtrOutput) Elem() ProviderAuthLoginAzureOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) ProviderAuthLoginAzure {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginAzure
		return ret
	}).(ProviderAuthLoginAzureOutput)
}

// The identity's client ID.
func (o ProviderAuthLoginAzurePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// A signed JSON Web Token. If not specified on will be created automatically
func (o ProviderAuthLoginAzurePtrOutput) Jwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginAzurePtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginAzurePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzurePtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginAzurePtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// The scopes to include in the token request.
func (o ProviderAuthLoginAzurePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzurePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return &v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Provides the tenant ID to use in a multi-tenant authentication scenario.
func (o ProviderAuthLoginAzurePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginAzurePtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

// The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzurePtrOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.VmName
	}).(pulumi.StringPtrOutput)
}

// The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o ProviderAuthLoginAzurePtrOutput) VmssName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginAzure) *string {
		if v == nil {
			return nil
		}
		return v.VmssName
	}).(pulumi.StringPtrOutput)
}

type ProviderAuthLoginCert struct {
	// Path to a file containing the client certificate.
	CertFile string `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile string `pulumi:"keyFile"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// Name of the certificate's role
	Name *string `pulumi:"name"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginCertInput is an input type that accepts ProviderAuthLoginCertArgs and ProviderAuthLoginCertOutput values.
// You can construct a concrete instance of `ProviderAuthLoginCertInput` via:
//
//	ProviderAuthLoginCertArgs{...}
type ProviderAuthLoginCertInput interface {
	pulumi.Input

	ToProviderAuthLoginCertOutput() ProviderAuthLoginCertOutput
	ToProviderAuthLoginCertOutputWithContext(context.Context) ProviderAuthLoginCertOutput
}

type ProviderAuthLoginCertArgs struct {
	// Path to a file containing the client certificate.
	CertFile pulumi.StringInput `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile pulumi.StringInput `pulumi:"keyFile"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// Name of the certificate's role
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginCert)(nil)).Elem()
}

func (i ProviderAuthLoginCertArgs) ToProviderAuthLoginCertOutput() ProviderAuthLoginCertOutput {
	return i.ToProviderAuthLoginCertOutputWithContext(context.Background())
}

func (i ProviderAuthLoginCertArgs) ToProviderAuthLoginCertOutputWithContext(ctx context.Context) ProviderAuthLoginCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginCertOutput)
}

func (i ProviderAuthLoginCertArgs) ToProviderAuthLoginCertPtrOutput() ProviderAuthLoginCertPtrOutput {
	return i.ToProviderAuthLoginCertPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginCertArgs) ToProviderAuthLoginCertPtrOutputWithContext(ctx context.Context) ProviderAuthLoginCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginCertOutput).ToProviderAuthLoginCertPtrOutputWithContext(ctx)
}

// ProviderAuthLoginCertPtrInput is an input type that accepts ProviderAuthLoginCertArgs, ProviderAuthLoginCertPtr and ProviderAuthLoginCertPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginCertPtrInput` via:
//
//	        ProviderAuthLoginCertArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginCertPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginCertPtrOutput() ProviderAuthLoginCertPtrOutput
	ToProviderAuthLoginCertPtrOutputWithContext(context.Context) ProviderAuthLoginCertPtrOutput
}

type providerAuthLoginCertPtrType ProviderAuthLoginCertArgs

func ProviderAuthLoginCertPtr(v *ProviderAuthLoginCertArgs) ProviderAuthLoginCertPtrInput {
	return (*providerAuthLoginCertPtrType)(v)
}

func (*providerAuthLoginCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginCert)(nil)).Elem()
}

func (i *providerAuthLoginCertPtrType) ToProviderAuthLoginCertPtrOutput() ProviderAuthLoginCertPtrOutput {
	return i.ToProviderAuthLoginCertPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginCertPtrType) ToProviderAuthLoginCertPtrOutputWithContext(ctx context.Context) ProviderAuthLoginCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginCertPtrOutput)
}

type ProviderAuthLoginCertOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginCert)(nil)).Elem()
}

func (o ProviderAuthLoginCertOutput) ToProviderAuthLoginCertOutput() ProviderAuthLoginCertOutput {
	return o
}

func (o ProviderAuthLoginCertOutput) ToProviderAuthLoginCertOutputWithContext(ctx context.Context) ProviderAuthLoginCertOutput {
	return o
}

func (o ProviderAuthLoginCertOutput) ToProviderAuthLoginCertPtrOutput() ProviderAuthLoginCertPtrOutput {
	return o.ToProviderAuthLoginCertPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginCertOutput) ToProviderAuthLoginCertPtrOutputWithContext(ctx context.Context) ProviderAuthLoginCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginCert) *ProviderAuthLoginCert {
		return &v
	}).(ProviderAuthLoginCertPtrOutput)
}

// Path to a file containing the client certificate.
func (o ProviderAuthLoginCertOutput) CertFile() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginCert) string { return v.CertFile }).(pulumi.StringOutput)
}

// Path to a file containing the private key that the certificate was issued for.
func (o ProviderAuthLoginCertOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginCert) string { return v.KeyFile }).(pulumi.StringOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginCertOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginCert) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// Name of the certificate's role
func (o ProviderAuthLoginCertOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginCert) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginCertOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginCert) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginCertOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginCert) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginCertPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginCert)(nil)).Elem()
}

func (o ProviderAuthLoginCertPtrOutput) ToProviderAuthLoginCertPtrOutput() ProviderAuthLoginCertPtrOutput {
	return o
}

func (o ProviderAuthLoginCertPtrOutput) ToProviderAuthLoginCertPtrOutputWithContext(ctx context.Context) ProviderAuthLoginCertPtrOutput {
	return o
}

func (o ProviderAuthLoginCertPtrOutput) Elem() ProviderAuthLoginCertOutput {
	return o.ApplyT(func(v *ProviderAuthLoginCert) ProviderAuthLoginCert {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginCert
		return ret
	}).(ProviderAuthLoginCertOutput)
}

// Path to a file containing the client certificate.
func (o ProviderAuthLoginCertPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginCert) *string {
		if v == nil {
			return nil
		}
		return &v.CertFile
	}).(pulumi.StringPtrOutput)
}

// Path to a file containing the private key that the certificate was issued for.
func (o ProviderAuthLoginCertPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginCert) *string {
		if v == nil {
			return nil
		}
		return &v.KeyFile
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginCertPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginCert) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// Name of the certificate's role
func (o ProviderAuthLoginCertPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginCert) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginCertPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginCert) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginCertPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginCert) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginGcp struct {
	// Path to the Google Cloud credentials file.
	Credentials *string `pulumi:"credentials"`
	// A signed JSON Web Token.
	Jwt *string `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// IAM service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginGcpInput is an input type that accepts ProviderAuthLoginGcpArgs and ProviderAuthLoginGcpOutput values.
// You can construct a concrete instance of `ProviderAuthLoginGcpInput` via:
//
//	ProviderAuthLoginGcpArgs{...}
type ProviderAuthLoginGcpInput interface {
	pulumi.Input

	ToProviderAuthLoginGcpOutput() ProviderAuthLoginGcpOutput
	ToProviderAuthLoginGcpOutputWithContext(context.Context) ProviderAuthLoginGcpOutput
}

type ProviderAuthLoginGcpArgs struct {
	// Path to the Google Cloud credentials file.
	Credentials pulumi.StringPtrInput `pulumi:"credentials"`
	// A signed JSON Web Token.
	Jwt pulumi.StringPtrInput `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// IAM service account.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginGcp)(nil)).Elem()
}

func (i ProviderAuthLoginGcpArgs) ToProviderAuthLoginGcpOutput() ProviderAuthLoginGcpOutput {
	return i.ToProviderAuthLoginGcpOutputWithContext(context.Background())
}

func (i ProviderAuthLoginGcpArgs) ToProviderAuthLoginGcpOutputWithContext(ctx context.Context) ProviderAuthLoginGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginGcpOutput)
}

func (i ProviderAuthLoginGcpArgs) ToProviderAuthLoginGcpPtrOutput() ProviderAuthLoginGcpPtrOutput {
	return i.ToProviderAuthLoginGcpPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginGcpArgs) ToProviderAuthLoginGcpPtrOutputWithContext(ctx context.Context) ProviderAuthLoginGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginGcpOutput).ToProviderAuthLoginGcpPtrOutputWithContext(ctx)
}

// ProviderAuthLoginGcpPtrInput is an input type that accepts ProviderAuthLoginGcpArgs, ProviderAuthLoginGcpPtr and ProviderAuthLoginGcpPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginGcpPtrInput` via:
//
//	        ProviderAuthLoginGcpArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginGcpPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginGcpPtrOutput() ProviderAuthLoginGcpPtrOutput
	ToProviderAuthLoginGcpPtrOutputWithContext(context.Context) ProviderAuthLoginGcpPtrOutput
}

type providerAuthLoginGcpPtrType ProviderAuthLoginGcpArgs

func ProviderAuthLoginGcpPtr(v *ProviderAuthLoginGcpArgs) ProviderAuthLoginGcpPtrInput {
	return (*providerAuthLoginGcpPtrType)(v)
}

func (*providerAuthLoginGcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginGcp)(nil)).Elem()
}

func (i *providerAuthLoginGcpPtrType) ToProviderAuthLoginGcpPtrOutput() ProviderAuthLoginGcpPtrOutput {
	return i.ToProviderAuthLoginGcpPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginGcpPtrType) ToProviderAuthLoginGcpPtrOutputWithContext(ctx context.Context) ProviderAuthLoginGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginGcpPtrOutput)
}

type ProviderAuthLoginGcpOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginGcp)(nil)).Elem()
}

func (o ProviderAuthLoginGcpOutput) ToProviderAuthLoginGcpOutput() ProviderAuthLoginGcpOutput {
	return o
}

func (o ProviderAuthLoginGcpOutput) ToProviderAuthLoginGcpOutputWithContext(ctx context.Context) ProviderAuthLoginGcpOutput {
	return o
}

func (o ProviderAuthLoginGcpOutput) ToProviderAuthLoginGcpPtrOutput() ProviderAuthLoginGcpPtrOutput {
	return o.ToProviderAuthLoginGcpPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginGcpOutput) ToProviderAuthLoginGcpPtrOutputWithContext(ctx context.Context) ProviderAuthLoginGcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginGcp) *ProviderAuthLoginGcp {
		return &v
	}).(ProviderAuthLoginGcpPtrOutput)
}

// Path to the Google Cloud credentials file.
func (o ProviderAuthLoginGcpOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginGcp) *string { return v.Credentials }).(pulumi.StringPtrOutput)
}

// A signed JSON Web Token.
func (o ProviderAuthLoginGcpOutput) Jwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginGcp) *string { return v.Jwt }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginGcpOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginGcp) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginGcpOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginGcp) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginGcpOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginGcp) string { return v.Role }).(pulumi.StringOutput)
}

// IAM service account.
func (o ProviderAuthLoginGcpOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginGcp) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginGcpOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginGcp) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginGcpPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginGcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginGcp)(nil)).Elem()
}

func (o ProviderAuthLoginGcpPtrOutput) ToProviderAuthLoginGcpPtrOutput() ProviderAuthLoginGcpPtrOutput {
	return o
}

func (o ProviderAuthLoginGcpPtrOutput) ToProviderAuthLoginGcpPtrOutputWithContext(ctx context.Context) ProviderAuthLoginGcpPtrOutput {
	return o
}

func (o ProviderAuthLoginGcpPtrOutput) Elem() ProviderAuthLoginGcpOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) ProviderAuthLoginGcp {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginGcp
		return ret
	}).(ProviderAuthLoginGcpOutput)
}

// Path to the Google Cloud credentials file.
func (o ProviderAuthLoginGcpPtrOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) *string {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(pulumi.StringPtrOutput)
}

// A signed JSON Web Token.
func (o ProviderAuthLoginGcpPtrOutput) Jwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) *string {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginGcpPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginGcpPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginGcpPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// IAM service account.
func (o ProviderAuthLoginGcpPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginGcpPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginGcp) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginJwt struct {
	// A signed JSON Web Token.
	Jwt string `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginJwtInput is an input type that accepts ProviderAuthLoginJwtArgs and ProviderAuthLoginJwtOutput values.
// You can construct a concrete instance of `ProviderAuthLoginJwtInput` via:
//
//	ProviderAuthLoginJwtArgs{...}
type ProviderAuthLoginJwtInput interface {
	pulumi.Input

	ToProviderAuthLoginJwtOutput() ProviderAuthLoginJwtOutput
	ToProviderAuthLoginJwtOutputWithContext(context.Context) ProviderAuthLoginJwtOutput
}

type ProviderAuthLoginJwtArgs struct {
	// A signed JSON Web Token.
	Jwt pulumi.StringInput `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginJwt)(nil)).Elem()
}

func (i ProviderAuthLoginJwtArgs) ToProviderAuthLoginJwtOutput() ProviderAuthLoginJwtOutput {
	return i.ToProviderAuthLoginJwtOutputWithContext(context.Background())
}

func (i ProviderAuthLoginJwtArgs) ToProviderAuthLoginJwtOutputWithContext(ctx context.Context) ProviderAuthLoginJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginJwtOutput)
}

func (i ProviderAuthLoginJwtArgs) ToProviderAuthLoginJwtPtrOutput() ProviderAuthLoginJwtPtrOutput {
	return i.ToProviderAuthLoginJwtPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginJwtArgs) ToProviderAuthLoginJwtPtrOutputWithContext(ctx context.Context) ProviderAuthLoginJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginJwtOutput).ToProviderAuthLoginJwtPtrOutputWithContext(ctx)
}

// ProviderAuthLoginJwtPtrInput is an input type that accepts ProviderAuthLoginJwtArgs, ProviderAuthLoginJwtPtr and ProviderAuthLoginJwtPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginJwtPtrInput` via:
//
//	        ProviderAuthLoginJwtArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginJwtPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginJwtPtrOutput() ProviderAuthLoginJwtPtrOutput
	ToProviderAuthLoginJwtPtrOutputWithContext(context.Context) ProviderAuthLoginJwtPtrOutput
}

type providerAuthLoginJwtPtrType ProviderAuthLoginJwtArgs

func ProviderAuthLoginJwtPtr(v *ProviderAuthLoginJwtArgs) ProviderAuthLoginJwtPtrInput {
	return (*providerAuthLoginJwtPtrType)(v)
}

func (*providerAuthLoginJwtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginJwt)(nil)).Elem()
}

func (i *providerAuthLoginJwtPtrType) ToProviderAuthLoginJwtPtrOutput() ProviderAuthLoginJwtPtrOutput {
	return i.ToProviderAuthLoginJwtPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginJwtPtrType) ToProviderAuthLoginJwtPtrOutputWithContext(ctx context.Context) ProviderAuthLoginJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginJwtPtrOutput)
}

type ProviderAuthLoginJwtOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginJwt)(nil)).Elem()
}

func (o ProviderAuthLoginJwtOutput) ToProviderAuthLoginJwtOutput() ProviderAuthLoginJwtOutput {
	return o
}

func (o ProviderAuthLoginJwtOutput) ToProviderAuthLoginJwtOutputWithContext(ctx context.Context) ProviderAuthLoginJwtOutput {
	return o
}

func (o ProviderAuthLoginJwtOutput) ToProviderAuthLoginJwtPtrOutput() ProviderAuthLoginJwtPtrOutput {
	return o.ToProviderAuthLoginJwtPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginJwtOutput) ToProviderAuthLoginJwtPtrOutputWithContext(ctx context.Context) ProviderAuthLoginJwtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginJwt) *ProviderAuthLoginJwt {
		return &v
	}).(ProviderAuthLoginJwtPtrOutput)
}

// A signed JSON Web Token.
func (o ProviderAuthLoginJwtOutput) Jwt() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginJwt) string { return v.Jwt }).(pulumi.StringOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginJwtOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginJwt) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginJwtOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginJwt) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginJwtOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginJwt) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginJwtOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginJwt) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginJwtPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginJwtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginJwt)(nil)).Elem()
}

func (o ProviderAuthLoginJwtPtrOutput) ToProviderAuthLoginJwtPtrOutput() ProviderAuthLoginJwtPtrOutput {
	return o
}

func (o ProviderAuthLoginJwtPtrOutput) ToProviderAuthLoginJwtPtrOutputWithContext(ctx context.Context) ProviderAuthLoginJwtPtrOutput {
	return o
}

func (o ProviderAuthLoginJwtPtrOutput) Elem() ProviderAuthLoginJwtOutput {
	return o.ApplyT(func(v *ProviderAuthLoginJwt) ProviderAuthLoginJwt {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginJwt
		return ret
	}).(ProviderAuthLoginJwtOutput)
}

// A signed JSON Web Token.
func (o ProviderAuthLoginJwtPtrOutput) Jwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginJwt) *string {
		if v == nil {
			return nil
		}
		return &v.Jwt
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginJwtPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginJwt) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginJwtPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginJwt) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginJwtPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginJwt) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginJwtPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginJwt) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginKerberos struct {
	// Disable the Kerberos FAST negotiation.
	DisableFastNegotiation *bool `pulumi:"disableFastNegotiation"`
	// The Kerberos keytab file containing the entry of the login entity.
	KeytabPath *string `pulumi:"keytabPath"`
	// A valid Kerberos configuration file e.g. /etc/krb5.conf.
	Krb5confPath *string `pulumi:"krb5confPath"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The Kerberos server's authoritative authentication domain
	Realm *string `pulumi:"realm"`
	// Strip the host from the username found in the keytab.
	RemoveInstanceName *bool `pulumi:"removeInstanceName"`
	// The service principle name.
	Service *string `pulumi:"service"`
	// Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
	Token *string `pulumi:"token"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// The username to login into Kerberos with.
	Username *string `pulumi:"username"`
}

// ProviderAuthLoginKerberosInput is an input type that accepts ProviderAuthLoginKerberosArgs and ProviderAuthLoginKerberosOutput values.
// You can construct a concrete instance of `ProviderAuthLoginKerberosInput` via:
//
//	ProviderAuthLoginKerberosArgs{...}
type ProviderAuthLoginKerberosInput interface {
	pulumi.Input

	ToProviderAuthLoginKerberosOutput() ProviderAuthLoginKerberosOutput
	ToProviderAuthLoginKerberosOutputWithContext(context.Context) ProviderAuthLoginKerberosOutput
}

type ProviderAuthLoginKerberosArgs struct {
	// Disable the Kerberos FAST negotiation.
	DisableFastNegotiation pulumi.BoolPtrInput `pulumi:"disableFastNegotiation"`
	// The Kerberos keytab file containing the entry of the login entity.
	KeytabPath pulumi.StringPtrInput `pulumi:"keytabPath"`
	// A valid Kerberos configuration file e.g. /etc/krb5.conf.
	Krb5confPath pulumi.StringPtrInput `pulumi:"krb5confPath"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The Kerberos server's authoritative authentication domain
	Realm pulumi.StringPtrInput `pulumi:"realm"`
	// Strip the host from the username found in the keytab.
	RemoveInstanceName pulumi.BoolPtrInput `pulumi:"removeInstanceName"`
	// The service principle name.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// The username to login into Kerberos with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderAuthLoginKerberosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginKerberos)(nil)).Elem()
}

func (i ProviderAuthLoginKerberosArgs) ToProviderAuthLoginKerberosOutput() ProviderAuthLoginKerberosOutput {
	return i.ToProviderAuthLoginKerberosOutputWithContext(context.Background())
}

func (i ProviderAuthLoginKerberosArgs) ToProviderAuthLoginKerberosOutputWithContext(ctx context.Context) ProviderAuthLoginKerberosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginKerberosOutput)
}

func (i ProviderAuthLoginKerberosArgs) ToProviderAuthLoginKerberosPtrOutput() ProviderAuthLoginKerberosPtrOutput {
	return i.ToProviderAuthLoginKerberosPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginKerberosArgs) ToProviderAuthLoginKerberosPtrOutputWithContext(ctx context.Context) ProviderAuthLoginKerberosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginKerberosOutput).ToProviderAuthLoginKerberosPtrOutputWithContext(ctx)
}

// ProviderAuthLoginKerberosPtrInput is an input type that accepts ProviderAuthLoginKerberosArgs, ProviderAuthLoginKerberosPtr and ProviderAuthLoginKerberosPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginKerberosPtrInput` via:
//
//	        ProviderAuthLoginKerberosArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginKerberosPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginKerberosPtrOutput() ProviderAuthLoginKerberosPtrOutput
	ToProviderAuthLoginKerberosPtrOutputWithContext(context.Context) ProviderAuthLoginKerberosPtrOutput
}

type providerAuthLoginKerberosPtrType ProviderAuthLoginKerberosArgs

func ProviderAuthLoginKerberosPtr(v *ProviderAuthLoginKerberosArgs) ProviderAuthLoginKerberosPtrInput {
	return (*providerAuthLoginKerberosPtrType)(v)
}

func (*providerAuthLoginKerberosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginKerberos)(nil)).Elem()
}

func (i *providerAuthLoginKerberosPtrType) ToProviderAuthLoginKerberosPtrOutput() ProviderAuthLoginKerberosPtrOutput {
	return i.ToProviderAuthLoginKerberosPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginKerberosPtrType) ToProviderAuthLoginKerberosPtrOutputWithContext(ctx context.Context) ProviderAuthLoginKerberosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginKerberosPtrOutput)
}

type ProviderAuthLoginKerberosOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginKerberosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginKerberos)(nil)).Elem()
}

func (o ProviderAuthLoginKerberosOutput) ToProviderAuthLoginKerberosOutput() ProviderAuthLoginKerberosOutput {
	return o
}

func (o ProviderAuthLoginKerberosOutput) ToProviderAuthLoginKerberosOutputWithContext(ctx context.Context) ProviderAuthLoginKerberosOutput {
	return o
}

func (o ProviderAuthLoginKerberosOutput) ToProviderAuthLoginKerberosPtrOutput() ProviderAuthLoginKerberosPtrOutput {
	return o.ToProviderAuthLoginKerberosPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginKerberosOutput) ToProviderAuthLoginKerberosPtrOutputWithContext(ctx context.Context) ProviderAuthLoginKerberosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginKerberos) *ProviderAuthLoginKerberos {
		return &v
	}).(ProviderAuthLoginKerberosPtrOutput)
}

// Disable the Kerberos FAST negotiation.
func (o ProviderAuthLoginKerberosOutput) DisableFastNegotiation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *bool { return v.DisableFastNegotiation }).(pulumi.BoolPtrOutput)
}

// The Kerberos keytab file containing the entry of the login entity.
func (o ProviderAuthLoginKerberosOutput) KeytabPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.KeytabPath }).(pulumi.StringPtrOutput)
}

// A valid Kerberos configuration file e.g. /etc/krb5.conf.
func (o ProviderAuthLoginKerberosOutput) Krb5confPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.Krb5confPath }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginKerberosOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginKerberosOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The Kerberos server's authoritative authentication domain
func (o ProviderAuthLoginKerberosOutput) Realm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.Realm }).(pulumi.StringPtrOutput)
}

// Strip the host from the username found in the keytab.
func (o ProviderAuthLoginKerberosOutput) RemoveInstanceName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *bool { return v.RemoveInstanceName }).(pulumi.BoolPtrOutput)
}

// The service principle name.
func (o ProviderAuthLoginKerberosOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
func (o ProviderAuthLoginKerberosOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginKerberosOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// The username to login into Kerberos with.
func (o ProviderAuthLoginKerberosOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginKerberos) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderAuthLoginKerberosPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginKerberosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginKerberos)(nil)).Elem()
}

func (o ProviderAuthLoginKerberosPtrOutput) ToProviderAuthLoginKerberosPtrOutput() ProviderAuthLoginKerberosPtrOutput {
	return o
}

func (o ProviderAuthLoginKerberosPtrOutput) ToProviderAuthLoginKerberosPtrOutputWithContext(ctx context.Context) ProviderAuthLoginKerberosPtrOutput {
	return o
}

func (o ProviderAuthLoginKerberosPtrOutput) Elem() ProviderAuthLoginKerberosOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) ProviderAuthLoginKerberos {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginKerberos
		return ret
	}).(ProviderAuthLoginKerberosOutput)
}

// Disable the Kerberos FAST negotiation.
func (o ProviderAuthLoginKerberosPtrOutput) DisableFastNegotiation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *bool {
		if v == nil {
			return nil
		}
		return v.DisableFastNegotiation
	}).(pulumi.BoolPtrOutput)
}

// The Kerberos keytab file containing the entry of the login entity.
func (o ProviderAuthLoginKerberosPtrOutput) KeytabPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.KeytabPath
	}).(pulumi.StringPtrOutput)
}

// A valid Kerberos configuration file e.g. /etc/krb5.conf.
func (o ProviderAuthLoginKerberosPtrOutput) Krb5confPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.Krb5confPath
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginKerberosPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginKerberosPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The Kerberos server's authoritative authentication domain
func (o ProviderAuthLoginKerberosPtrOutput) Realm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.Realm
	}).(pulumi.StringPtrOutput)
}

// Strip the host from the username found in the keytab.
func (o ProviderAuthLoginKerberosPtrOutput) RemoveInstanceName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *bool {
		if v == nil {
			return nil
		}
		return v.RemoveInstanceName
	}).(pulumi.BoolPtrOutput)
}

// The service principle name.
func (o ProviderAuthLoginKerberosPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
func (o ProviderAuthLoginKerberosPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginKerberosPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

// The username to login into Kerberos with.
func (o ProviderAuthLoginKerberosPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginKerberos) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ProviderAuthLoginOci struct {
	// Authentication type to use when getting OCI credentials.
	AuthType string `pulumi:"authType"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginOciInput is an input type that accepts ProviderAuthLoginOciArgs and ProviderAuthLoginOciOutput values.
// You can construct a concrete instance of `ProviderAuthLoginOciInput` via:
//
//	ProviderAuthLoginOciArgs{...}
type ProviderAuthLoginOciInput interface {
	pulumi.Input

	ToProviderAuthLoginOciOutput() ProviderAuthLoginOciOutput
	ToProviderAuthLoginOciOutputWithContext(context.Context) ProviderAuthLoginOciOutput
}

type ProviderAuthLoginOciArgs struct {
	// Authentication type to use when getting OCI credentials.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginOciArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginOci)(nil)).Elem()
}

func (i ProviderAuthLoginOciArgs) ToProviderAuthLoginOciOutput() ProviderAuthLoginOciOutput {
	return i.ToProviderAuthLoginOciOutputWithContext(context.Background())
}

func (i ProviderAuthLoginOciArgs) ToProviderAuthLoginOciOutputWithContext(ctx context.Context) ProviderAuthLoginOciOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOciOutput)
}

func (i ProviderAuthLoginOciArgs) ToProviderAuthLoginOciPtrOutput() ProviderAuthLoginOciPtrOutput {
	return i.ToProviderAuthLoginOciPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginOciArgs) ToProviderAuthLoginOciPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOciPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOciOutput).ToProviderAuthLoginOciPtrOutputWithContext(ctx)
}

// ProviderAuthLoginOciPtrInput is an input type that accepts ProviderAuthLoginOciArgs, ProviderAuthLoginOciPtr and ProviderAuthLoginOciPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginOciPtrInput` via:
//
//	        ProviderAuthLoginOciArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginOciPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginOciPtrOutput() ProviderAuthLoginOciPtrOutput
	ToProviderAuthLoginOciPtrOutputWithContext(context.Context) ProviderAuthLoginOciPtrOutput
}

type providerAuthLoginOciPtrType ProviderAuthLoginOciArgs

func ProviderAuthLoginOciPtr(v *ProviderAuthLoginOciArgs) ProviderAuthLoginOciPtrInput {
	return (*providerAuthLoginOciPtrType)(v)
}

func (*providerAuthLoginOciPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginOci)(nil)).Elem()
}

func (i *providerAuthLoginOciPtrType) ToProviderAuthLoginOciPtrOutput() ProviderAuthLoginOciPtrOutput {
	return i.ToProviderAuthLoginOciPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginOciPtrType) ToProviderAuthLoginOciPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOciPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOciPtrOutput)
}

type ProviderAuthLoginOciOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginOciOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginOci)(nil)).Elem()
}

func (o ProviderAuthLoginOciOutput) ToProviderAuthLoginOciOutput() ProviderAuthLoginOciOutput {
	return o
}

func (o ProviderAuthLoginOciOutput) ToProviderAuthLoginOciOutputWithContext(ctx context.Context) ProviderAuthLoginOciOutput {
	return o
}

func (o ProviderAuthLoginOciOutput) ToProviderAuthLoginOciPtrOutput() ProviderAuthLoginOciPtrOutput {
	return o.ToProviderAuthLoginOciPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginOciOutput) ToProviderAuthLoginOciPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOciPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginOci) *ProviderAuthLoginOci {
		return &v
	}).(ProviderAuthLoginOciPtrOutput)
}

// Authentication type to use when getting OCI credentials.
func (o ProviderAuthLoginOciOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginOci) string { return v.AuthType }).(pulumi.StringOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginOciOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOci) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginOciOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOci) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginOciOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginOci) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginOciOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOci) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginOciPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginOciPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginOci)(nil)).Elem()
}

func (o ProviderAuthLoginOciPtrOutput) ToProviderAuthLoginOciPtrOutput() ProviderAuthLoginOciPtrOutput {
	return o
}

func (o ProviderAuthLoginOciPtrOutput) ToProviderAuthLoginOciPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOciPtrOutput {
	return o
}

func (o ProviderAuthLoginOciPtrOutput) Elem() ProviderAuthLoginOciOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOci) ProviderAuthLoginOci {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginOci
		return ret
	}).(ProviderAuthLoginOciOutput)
}

// Authentication type to use when getting OCI credentials.
func (o ProviderAuthLoginOciPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOci) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginOciPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOci) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginOciPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOci) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginOciPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOci) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginOciPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOci) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginOidc struct {
	// The callback address. Must be a valid URI without the path.
	CallbackAddress *string `pulumi:"callbackAddress"`
	// The callback listener's address. Must be a valid URI without the path.
	CallbackListenerAddress *string `pulumi:"callbackListenerAddress"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginOidcInput is an input type that accepts ProviderAuthLoginOidcArgs and ProviderAuthLoginOidcOutput values.
// You can construct a concrete instance of `ProviderAuthLoginOidcInput` via:
//
//	ProviderAuthLoginOidcArgs{...}
type ProviderAuthLoginOidcInput interface {
	pulumi.Input

	ToProviderAuthLoginOidcOutput() ProviderAuthLoginOidcOutput
	ToProviderAuthLoginOidcOutputWithContext(context.Context) ProviderAuthLoginOidcOutput
}

type ProviderAuthLoginOidcArgs struct {
	// The callback address. Must be a valid URI without the path.
	CallbackAddress pulumi.StringPtrInput `pulumi:"callbackAddress"`
	// The callback listener's address. Must be a valid URI without the path.
	CallbackListenerAddress pulumi.StringPtrInput `pulumi:"callbackListenerAddress"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginOidc)(nil)).Elem()
}

func (i ProviderAuthLoginOidcArgs) ToProviderAuthLoginOidcOutput() ProviderAuthLoginOidcOutput {
	return i.ToProviderAuthLoginOidcOutputWithContext(context.Background())
}

func (i ProviderAuthLoginOidcArgs) ToProviderAuthLoginOidcOutputWithContext(ctx context.Context) ProviderAuthLoginOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOidcOutput)
}

func (i ProviderAuthLoginOidcArgs) ToProviderAuthLoginOidcPtrOutput() ProviderAuthLoginOidcPtrOutput {
	return i.ToProviderAuthLoginOidcPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginOidcArgs) ToProviderAuthLoginOidcPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOidcOutput).ToProviderAuthLoginOidcPtrOutputWithContext(ctx)
}

// ProviderAuthLoginOidcPtrInput is an input type that accepts ProviderAuthLoginOidcArgs, ProviderAuthLoginOidcPtr and ProviderAuthLoginOidcPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginOidcPtrInput` via:
//
//	        ProviderAuthLoginOidcArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginOidcPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginOidcPtrOutput() ProviderAuthLoginOidcPtrOutput
	ToProviderAuthLoginOidcPtrOutputWithContext(context.Context) ProviderAuthLoginOidcPtrOutput
}

type providerAuthLoginOidcPtrType ProviderAuthLoginOidcArgs

func ProviderAuthLoginOidcPtr(v *ProviderAuthLoginOidcArgs) ProviderAuthLoginOidcPtrInput {
	return (*providerAuthLoginOidcPtrType)(v)
}

func (*providerAuthLoginOidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginOidc)(nil)).Elem()
}

func (i *providerAuthLoginOidcPtrType) ToProviderAuthLoginOidcPtrOutput() ProviderAuthLoginOidcPtrOutput {
	return i.ToProviderAuthLoginOidcPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginOidcPtrType) ToProviderAuthLoginOidcPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginOidcPtrOutput)
}

type ProviderAuthLoginOidcOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginOidc)(nil)).Elem()
}

func (o ProviderAuthLoginOidcOutput) ToProviderAuthLoginOidcOutput() ProviderAuthLoginOidcOutput {
	return o
}

func (o ProviderAuthLoginOidcOutput) ToProviderAuthLoginOidcOutputWithContext(ctx context.Context) ProviderAuthLoginOidcOutput {
	return o
}

func (o ProviderAuthLoginOidcOutput) ToProviderAuthLoginOidcPtrOutput() ProviderAuthLoginOidcPtrOutput {
	return o.ToProviderAuthLoginOidcPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginOidcOutput) ToProviderAuthLoginOidcPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginOidc) *ProviderAuthLoginOidc {
		return &v
	}).(ProviderAuthLoginOidcPtrOutput)
}

// The callback address. Must be a valid URI without the path.
func (o ProviderAuthLoginOidcOutput) CallbackAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOidc) *string { return v.CallbackAddress }).(pulumi.StringPtrOutput)
}

// The callback listener's address. Must be a valid URI without the path.
func (o ProviderAuthLoginOidcOutput) CallbackListenerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOidc) *string { return v.CallbackListenerAddress }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginOidcOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOidc) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginOidcOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOidc) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginOidcOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginOidc) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginOidcOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginOidc) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginOidcPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginOidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginOidc)(nil)).Elem()
}

func (o ProviderAuthLoginOidcPtrOutput) ToProviderAuthLoginOidcPtrOutput() ProviderAuthLoginOidcPtrOutput {
	return o
}

func (o ProviderAuthLoginOidcPtrOutput) ToProviderAuthLoginOidcPtrOutputWithContext(ctx context.Context) ProviderAuthLoginOidcPtrOutput {
	return o
}

func (o ProviderAuthLoginOidcPtrOutput) Elem() ProviderAuthLoginOidcOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOidc) ProviderAuthLoginOidc {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginOidc
		return ret
	}).(ProviderAuthLoginOidcOutput)
}

// The callback address. Must be a valid URI without the path.
func (o ProviderAuthLoginOidcPtrOutput) CallbackAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOidc) *string {
		if v == nil {
			return nil
		}
		return v.CallbackAddress
	}).(pulumi.StringPtrOutput)
}

// The callback listener's address. Must be a valid URI without the path.
func (o ProviderAuthLoginOidcPtrOutput) CallbackListenerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOidc) *string {
		if v == nil {
			return nil
		}
		return v.CallbackListenerAddress
	}).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginOidcPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOidc) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginOidcPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOidc) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o ProviderAuthLoginOidcPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOidc) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginOidcPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginOidc) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginRadius struct {
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The Radius password for username.
	Password string `pulumi:"password"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// The Radius username.
	Username string `pulumi:"username"`
}

// ProviderAuthLoginRadiusInput is an input type that accepts ProviderAuthLoginRadiusArgs and ProviderAuthLoginRadiusOutput values.
// You can construct a concrete instance of `ProviderAuthLoginRadiusInput` via:
//
//	ProviderAuthLoginRadiusArgs{...}
type ProviderAuthLoginRadiusInput interface {
	pulumi.Input

	ToProviderAuthLoginRadiusOutput() ProviderAuthLoginRadiusOutput
	ToProviderAuthLoginRadiusOutputWithContext(context.Context) ProviderAuthLoginRadiusOutput
}

type ProviderAuthLoginRadiusArgs struct {
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The Radius password for username.
	Password pulumi.StringInput `pulumi:"password"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// The Radius username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProviderAuthLoginRadiusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginRadius)(nil)).Elem()
}

func (i ProviderAuthLoginRadiusArgs) ToProviderAuthLoginRadiusOutput() ProviderAuthLoginRadiusOutput {
	return i.ToProviderAuthLoginRadiusOutputWithContext(context.Background())
}

func (i ProviderAuthLoginRadiusArgs) ToProviderAuthLoginRadiusOutputWithContext(ctx context.Context) ProviderAuthLoginRadiusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginRadiusOutput)
}

func (i ProviderAuthLoginRadiusArgs) ToProviderAuthLoginRadiusPtrOutput() ProviderAuthLoginRadiusPtrOutput {
	return i.ToProviderAuthLoginRadiusPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginRadiusArgs) ToProviderAuthLoginRadiusPtrOutputWithContext(ctx context.Context) ProviderAuthLoginRadiusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginRadiusOutput).ToProviderAuthLoginRadiusPtrOutputWithContext(ctx)
}

// ProviderAuthLoginRadiusPtrInput is an input type that accepts ProviderAuthLoginRadiusArgs, ProviderAuthLoginRadiusPtr and ProviderAuthLoginRadiusPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginRadiusPtrInput` via:
//
//	        ProviderAuthLoginRadiusArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginRadiusPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginRadiusPtrOutput() ProviderAuthLoginRadiusPtrOutput
	ToProviderAuthLoginRadiusPtrOutputWithContext(context.Context) ProviderAuthLoginRadiusPtrOutput
}

type providerAuthLoginRadiusPtrType ProviderAuthLoginRadiusArgs

func ProviderAuthLoginRadiusPtr(v *ProviderAuthLoginRadiusArgs) ProviderAuthLoginRadiusPtrInput {
	return (*providerAuthLoginRadiusPtrType)(v)
}

func (*providerAuthLoginRadiusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginRadius)(nil)).Elem()
}

func (i *providerAuthLoginRadiusPtrType) ToProviderAuthLoginRadiusPtrOutput() ProviderAuthLoginRadiusPtrOutput {
	return i.ToProviderAuthLoginRadiusPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginRadiusPtrType) ToProviderAuthLoginRadiusPtrOutputWithContext(ctx context.Context) ProviderAuthLoginRadiusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginRadiusPtrOutput)
}

type ProviderAuthLoginRadiusOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginRadiusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginRadius)(nil)).Elem()
}

func (o ProviderAuthLoginRadiusOutput) ToProviderAuthLoginRadiusOutput() ProviderAuthLoginRadiusOutput {
	return o
}

func (o ProviderAuthLoginRadiusOutput) ToProviderAuthLoginRadiusOutputWithContext(ctx context.Context) ProviderAuthLoginRadiusOutput {
	return o
}

func (o ProviderAuthLoginRadiusOutput) ToProviderAuthLoginRadiusPtrOutput() ProviderAuthLoginRadiusPtrOutput {
	return o.ToProviderAuthLoginRadiusPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginRadiusOutput) ToProviderAuthLoginRadiusPtrOutputWithContext(ctx context.Context) ProviderAuthLoginRadiusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginRadius) *ProviderAuthLoginRadius {
		return &v
	}).(ProviderAuthLoginRadiusPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginRadiusOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginRadius) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginRadiusOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginRadius) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The Radius password for username.
func (o ProviderAuthLoginRadiusOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginRadius) string { return v.Password }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginRadiusOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginRadius) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// The Radius username.
func (o ProviderAuthLoginRadiusOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginRadius) string { return v.Username }).(pulumi.StringOutput)
}

type ProviderAuthLoginRadiusPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginRadiusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginRadius)(nil)).Elem()
}

func (o ProviderAuthLoginRadiusPtrOutput) ToProviderAuthLoginRadiusPtrOutput() ProviderAuthLoginRadiusPtrOutput {
	return o
}

func (o ProviderAuthLoginRadiusPtrOutput) ToProviderAuthLoginRadiusPtrOutputWithContext(ctx context.Context) ProviderAuthLoginRadiusPtrOutput {
	return o
}

func (o ProviderAuthLoginRadiusPtrOutput) Elem() ProviderAuthLoginRadiusOutput {
	return o.ApplyT(func(v *ProviderAuthLoginRadius) ProviderAuthLoginRadius {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginRadius
		return ret
	}).(ProviderAuthLoginRadiusOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginRadiusPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginRadius) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginRadiusPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginRadius) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The Radius password for username.
func (o ProviderAuthLoginRadiusPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginRadius) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginRadiusPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginRadius) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

// The Radius username.
func (o ProviderAuthLoginRadiusPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginRadius) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProviderAuthLoginTokenFile struct {
	// The name of a file containing a single line that is a valid Vault token
	Filename string `pulumi:"filename"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// ProviderAuthLoginTokenFileInput is an input type that accepts ProviderAuthLoginTokenFileArgs and ProviderAuthLoginTokenFileOutput values.
// You can construct a concrete instance of `ProviderAuthLoginTokenFileInput` via:
//
//	ProviderAuthLoginTokenFileArgs{...}
type ProviderAuthLoginTokenFileInput interface {
	pulumi.Input

	ToProviderAuthLoginTokenFileOutput() ProviderAuthLoginTokenFileOutput
	ToProviderAuthLoginTokenFileOutputWithContext(context.Context) ProviderAuthLoginTokenFileOutput
}

type ProviderAuthLoginTokenFileArgs struct {
	// The name of a file containing a single line that is a valid Vault token
	Filename pulumi.StringInput `pulumi:"filename"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (ProviderAuthLoginTokenFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginTokenFile)(nil)).Elem()
}

func (i ProviderAuthLoginTokenFileArgs) ToProviderAuthLoginTokenFileOutput() ProviderAuthLoginTokenFileOutput {
	return i.ToProviderAuthLoginTokenFileOutputWithContext(context.Background())
}

func (i ProviderAuthLoginTokenFileArgs) ToProviderAuthLoginTokenFileOutputWithContext(ctx context.Context) ProviderAuthLoginTokenFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginTokenFileOutput)
}

func (i ProviderAuthLoginTokenFileArgs) ToProviderAuthLoginTokenFilePtrOutput() ProviderAuthLoginTokenFilePtrOutput {
	return i.ToProviderAuthLoginTokenFilePtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginTokenFileArgs) ToProviderAuthLoginTokenFilePtrOutputWithContext(ctx context.Context) ProviderAuthLoginTokenFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginTokenFileOutput).ToProviderAuthLoginTokenFilePtrOutputWithContext(ctx)
}

// ProviderAuthLoginTokenFilePtrInput is an input type that accepts ProviderAuthLoginTokenFileArgs, ProviderAuthLoginTokenFilePtr and ProviderAuthLoginTokenFilePtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginTokenFilePtrInput` via:
//
//	        ProviderAuthLoginTokenFileArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginTokenFilePtrInput interface {
	pulumi.Input

	ToProviderAuthLoginTokenFilePtrOutput() ProviderAuthLoginTokenFilePtrOutput
	ToProviderAuthLoginTokenFilePtrOutputWithContext(context.Context) ProviderAuthLoginTokenFilePtrOutput
}

type providerAuthLoginTokenFilePtrType ProviderAuthLoginTokenFileArgs

func ProviderAuthLoginTokenFilePtr(v *ProviderAuthLoginTokenFileArgs) ProviderAuthLoginTokenFilePtrInput {
	return (*providerAuthLoginTokenFilePtrType)(v)
}

func (*providerAuthLoginTokenFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginTokenFile)(nil)).Elem()
}

func (i *providerAuthLoginTokenFilePtrType) ToProviderAuthLoginTokenFilePtrOutput() ProviderAuthLoginTokenFilePtrOutput {
	return i.ToProviderAuthLoginTokenFilePtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginTokenFilePtrType) ToProviderAuthLoginTokenFilePtrOutputWithContext(ctx context.Context) ProviderAuthLoginTokenFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginTokenFilePtrOutput)
}

type ProviderAuthLoginTokenFileOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginTokenFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginTokenFile)(nil)).Elem()
}

func (o ProviderAuthLoginTokenFileOutput) ToProviderAuthLoginTokenFileOutput() ProviderAuthLoginTokenFileOutput {
	return o
}

func (o ProviderAuthLoginTokenFileOutput) ToProviderAuthLoginTokenFileOutputWithContext(ctx context.Context) ProviderAuthLoginTokenFileOutput {
	return o
}

func (o ProviderAuthLoginTokenFileOutput) ToProviderAuthLoginTokenFilePtrOutput() ProviderAuthLoginTokenFilePtrOutput {
	return o.ToProviderAuthLoginTokenFilePtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginTokenFileOutput) ToProviderAuthLoginTokenFilePtrOutputWithContext(ctx context.Context) ProviderAuthLoginTokenFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginTokenFile) *ProviderAuthLoginTokenFile {
		return &v
	}).(ProviderAuthLoginTokenFilePtrOutput)
}

// The name of a file containing a single line that is a valid Vault token
func (o ProviderAuthLoginTokenFileOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginTokenFile) string { return v.Filename }).(pulumi.StringOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginTokenFileOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginTokenFile) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginTokenFileOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginTokenFile) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginTokenFilePtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginTokenFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginTokenFile)(nil)).Elem()
}

func (o ProviderAuthLoginTokenFilePtrOutput) ToProviderAuthLoginTokenFilePtrOutput() ProviderAuthLoginTokenFilePtrOutput {
	return o
}

func (o ProviderAuthLoginTokenFilePtrOutput) ToProviderAuthLoginTokenFilePtrOutputWithContext(ctx context.Context) ProviderAuthLoginTokenFilePtrOutput {
	return o
}

func (o ProviderAuthLoginTokenFilePtrOutput) Elem() ProviderAuthLoginTokenFileOutput {
	return o.ApplyT(func(v *ProviderAuthLoginTokenFile) ProviderAuthLoginTokenFile {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginTokenFile
		return ret
	}).(ProviderAuthLoginTokenFileOutput)
}

// The name of a file containing a single line that is a valid Vault token
func (o ProviderAuthLoginTokenFilePtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginTokenFile) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginTokenFilePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginTokenFile) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginTokenFilePtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginTokenFile) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

type ProviderAuthLoginUserpass struct {
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Login with password
	Password *string `pulumi:"password"`
	// Login with password from a file
	PasswordFile *string `pulumi:"passwordFile"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// Login with username
	Username string `pulumi:"username"`
}

// ProviderAuthLoginUserpassInput is an input type that accepts ProviderAuthLoginUserpassArgs and ProviderAuthLoginUserpassOutput values.
// You can construct a concrete instance of `ProviderAuthLoginUserpassInput` via:
//
//	ProviderAuthLoginUserpassArgs{...}
type ProviderAuthLoginUserpassInput interface {
	pulumi.Input

	ToProviderAuthLoginUserpassOutput() ProviderAuthLoginUserpassOutput
	ToProviderAuthLoginUserpassOutputWithContext(context.Context) ProviderAuthLoginUserpassOutput
}

type ProviderAuthLoginUserpassArgs struct {
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Login with password
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Login with password from a file
	PasswordFile pulumi.StringPtrInput `pulumi:"passwordFile"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// Login with username
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProviderAuthLoginUserpassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginUserpass)(nil)).Elem()
}

func (i ProviderAuthLoginUserpassArgs) ToProviderAuthLoginUserpassOutput() ProviderAuthLoginUserpassOutput {
	return i.ToProviderAuthLoginUserpassOutputWithContext(context.Background())
}

func (i ProviderAuthLoginUserpassArgs) ToProviderAuthLoginUserpassOutputWithContext(ctx context.Context) ProviderAuthLoginUserpassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginUserpassOutput)
}

func (i ProviderAuthLoginUserpassArgs) ToProviderAuthLoginUserpassPtrOutput() ProviderAuthLoginUserpassPtrOutput {
	return i.ToProviderAuthLoginUserpassPtrOutputWithContext(context.Background())
}

func (i ProviderAuthLoginUserpassArgs) ToProviderAuthLoginUserpassPtrOutputWithContext(ctx context.Context) ProviderAuthLoginUserpassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginUserpassOutput).ToProviderAuthLoginUserpassPtrOutputWithContext(ctx)
}

// ProviderAuthLoginUserpassPtrInput is an input type that accepts ProviderAuthLoginUserpassArgs, ProviderAuthLoginUserpassPtr and ProviderAuthLoginUserpassPtrOutput values.
// You can construct a concrete instance of `ProviderAuthLoginUserpassPtrInput` via:
//
//	        ProviderAuthLoginUserpassArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthLoginUserpassPtrInput interface {
	pulumi.Input

	ToProviderAuthLoginUserpassPtrOutput() ProviderAuthLoginUserpassPtrOutput
	ToProviderAuthLoginUserpassPtrOutputWithContext(context.Context) ProviderAuthLoginUserpassPtrOutput
}

type providerAuthLoginUserpassPtrType ProviderAuthLoginUserpassArgs

func ProviderAuthLoginUserpassPtr(v *ProviderAuthLoginUserpassArgs) ProviderAuthLoginUserpassPtrInput {
	return (*providerAuthLoginUserpassPtrType)(v)
}

func (*providerAuthLoginUserpassPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginUserpass)(nil)).Elem()
}

func (i *providerAuthLoginUserpassPtrType) ToProviderAuthLoginUserpassPtrOutput() ProviderAuthLoginUserpassPtrOutput {
	return i.ToProviderAuthLoginUserpassPtrOutputWithContext(context.Background())
}

func (i *providerAuthLoginUserpassPtrType) ToProviderAuthLoginUserpassPtrOutputWithContext(ctx context.Context) ProviderAuthLoginUserpassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthLoginUserpassPtrOutput)
}

type ProviderAuthLoginUserpassOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginUserpassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthLoginUserpass)(nil)).Elem()
}

func (o ProviderAuthLoginUserpassOutput) ToProviderAuthLoginUserpassOutput() ProviderAuthLoginUserpassOutput {
	return o
}

func (o ProviderAuthLoginUserpassOutput) ToProviderAuthLoginUserpassOutputWithContext(ctx context.Context) ProviderAuthLoginUserpassOutput {
	return o
}

func (o ProviderAuthLoginUserpassOutput) ToProviderAuthLoginUserpassPtrOutput() ProviderAuthLoginUserpassPtrOutput {
	return o.ToProviderAuthLoginUserpassPtrOutputWithContext(context.Background())
}

func (o ProviderAuthLoginUserpassOutput) ToProviderAuthLoginUserpassPtrOutputWithContext(ctx context.Context) ProviderAuthLoginUserpassPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthLoginUserpass) *ProviderAuthLoginUserpass {
		return &v
	}).(ProviderAuthLoginUserpassPtrOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginUserpassOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginUserpass) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginUserpassOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginUserpass) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Login with password
func (o ProviderAuthLoginUserpassOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginUserpass) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Login with password from a file
func (o ProviderAuthLoginUserpassOutput) PasswordFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginUserpass) *string { return v.PasswordFile }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginUserpassOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderAuthLoginUserpass) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// Login with username
func (o ProviderAuthLoginUserpassOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthLoginUserpass) string { return v.Username }).(pulumi.StringOutput)
}

type ProviderAuthLoginUserpassPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthLoginUserpassPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthLoginUserpass)(nil)).Elem()
}

func (o ProviderAuthLoginUserpassPtrOutput) ToProviderAuthLoginUserpassPtrOutput() ProviderAuthLoginUserpassPtrOutput {
	return o
}

func (o ProviderAuthLoginUserpassPtrOutput) ToProviderAuthLoginUserpassPtrOutputWithContext(ctx context.Context) ProviderAuthLoginUserpassPtrOutput {
	return o
}

func (o ProviderAuthLoginUserpassPtrOutput) Elem() ProviderAuthLoginUserpassOutput {
	return o.ApplyT(func(v *ProviderAuthLoginUserpass) ProviderAuthLoginUserpass {
		if v != nil {
			return *v
		}
		var ret ProviderAuthLoginUserpass
		return ret
	}).(ProviderAuthLoginUserpassOutput)
}

// The path where the authentication engine is mounted.
func (o ProviderAuthLoginUserpassPtrOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginUserpass) *string {
		if v == nil {
			return nil
		}
		return v.Mount
	}).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o ProviderAuthLoginUserpassPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginUserpass) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Login with password
func (o ProviderAuthLoginUserpassPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginUserpass) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Login with password from a file
func (o ProviderAuthLoginUserpassPtrOutput) PasswordFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginUserpass) *string {
		if v == nil {
			return nil
		}
		return v.PasswordFile
	}).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o ProviderAuthLoginUserpassPtrOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginUserpass) *bool {
		if v == nil {
			return nil
		}
		return v.UseRootNamespace
	}).(pulumi.BoolPtrOutput)
}

// Login with username
func (o ProviderAuthLoginUserpassPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthLoginUserpass) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProviderClientAuth struct {
	// Path to a file containing the client certificate.
	CertFile string `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile string `pulumi:"keyFile"`
}

// ProviderClientAuthInput is an input type that accepts ProviderClientAuthArgs and ProviderClientAuthOutput values.
// You can construct a concrete instance of `ProviderClientAuthInput` via:
//
//	ProviderClientAuthArgs{...}
type ProviderClientAuthInput interface {
	pulumi.Input

	ToProviderClientAuthOutput() ProviderClientAuthOutput
	ToProviderClientAuthOutputWithContext(context.Context) ProviderClientAuthOutput
}

type ProviderClientAuthArgs struct {
	// Path to a file containing the client certificate.
	CertFile pulumi.StringInput `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile pulumi.StringInput `pulumi:"keyFile"`
}

func (ProviderClientAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderClientAuth)(nil)).Elem()
}

func (i ProviderClientAuthArgs) ToProviderClientAuthOutput() ProviderClientAuthOutput {
	return i.ToProviderClientAuthOutputWithContext(context.Background())
}

func (i ProviderClientAuthArgs) ToProviderClientAuthOutputWithContext(ctx context.Context) ProviderClientAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderClientAuthOutput)
}

func (i ProviderClientAuthArgs) ToProviderClientAuthPtrOutput() ProviderClientAuthPtrOutput {
	return i.ToProviderClientAuthPtrOutputWithContext(context.Background())
}

func (i ProviderClientAuthArgs) ToProviderClientAuthPtrOutputWithContext(ctx context.Context) ProviderClientAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderClientAuthOutput).ToProviderClientAuthPtrOutputWithContext(ctx)
}

// ProviderClientAuthPtrInput is an input type that accepts ProviderClientAuthArgs, ProviderClientAuthPtr and ProviderClientAuthPtrOutput values.
// You can construct a concrete instance of `ProviderClientAuthPtrInput` via:
//
//	        ProviderClientAuthArgs{...}
//
//	or:
//
//	        nil
type ProviderClientAuthPtrInput interface {
	pulumi.Input

	ToProviderClientAuthPtrOutput() ProviderClientAuthPtrOutput
	ToProviderClientAuthPtrOutputWithContext(context.Context) ProviderClientAuthPtrOutput
}

type providerClientAuthPtrType ProviderClientAuthArgs

func ProviderClientAuthPtr(v *ProviderClientAuthArgs) ProviderClientAuthPtrInput {
	return (*providerClientAuthPtrType)(v)
}

func (*providerClientAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderClientAuth)(nil)).Elem()
}

func (i *providerClientAuthPtrType) ToProviderClientAuthPtrOutput() ProviderClientAuthPtrOutput {
	return i.ToProviderClientAuthPtrOutputWithContext(context.Background())
}

func (i *providerClientAuthPtrType) ToProviderClientAuthPtrOutputWithContext(ctx context.Context) ProviderClientAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderClientAuthPtrOutput)
}

type ProviderClientAuthOutput struct{ *pulumi.OutputState }

func (ProviderClientAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderClientAuth)(nil)).Elem()
}

func (o ProviderClientAuthOutput) ToProviderClientAuthOutput() ProviderClientAuthOutput {
	return o
}

func (o ProviderClientAuthOutput) ToProviderClientAuthOutputWithContext(ctx context.Context) ProviderClientAuthOutput {
	return o
}

func (o ProviderClientAuthOutput) ToProviderClientAuthPtrOutput() ProviderClientAuthPtrOutput {
	return o.ToProviderClientAuthPtrOutputWithContext(context.Background())
}

func (o ProviderClientAuthOutput) ToProviderClientAuthPtrOutputWithContext(ctx context.Context) ProviderClientAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderClientAuth) *ProviderClientAuth {
		return &v
	}).(ProviderClientAuthPtrOutput)
}

// Path to a file containing the client certificate.
func (o ProviderClientAuthOutput) CertFile() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderClientAuth) string { return v.CertFile }).(pulumi.StringOutput)
}

// Path to a file containing the private key that the certificate was issued for.
func (o ProviderClientAuthOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderClientAuth) string { return v.KeyFile }).(pulumi.StringOutput)
}

type ProviderClientAuthPtrOutput struct{ *pulumi.OutputState }

func (ProviderClientAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderClientAuth)(nil)).Elem()
}

func (o ProviderClientAuthPtrOutput) ToProviderClientAuthPtrOutput() ProviderClientAuthPtrOutput {
	return o
}

func (o ProviderClientAuthPtrOutput) ToProviderClientAuthPtrOutputWithContext(ctx context.Context) ProviderClientAuthPtrOutput {
	return o
}

func (o ProviderClientAuthPtrOutput) Elem() ProviderClientAuthOutput {
	return o.ApplyT(func(v *ProviderClientAuth) ProviderClientAuth {
		if v != nil {
			return *v
		}
		var ret ProviderClientAuth
		return ret
	}).(ProviderClientAuthOutput)
}

// Path to a file containing the client certificate.
func (o ProviderClientAuthPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderClientAuth) *string {
		if v == nil {
			return nil
		}
		return &v.CertFile
	}).(pulumi.StringPtrOutput)
}

// Path to a file containing the private key that the certificate was issued for.
func (o ProviderClientAuthPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderClientAuth) *string {
		if v == nil {
			return nil
		}
		return &v.KeyFile
	}).(pulumi.StringPtrOutput)
}

type ProviderHeader struct {
	// The header name
	Name string `pulumi:"name"`
	// The header value
	Value string `pulumi:"value"`
}

// ProviderHeaderInput is an input type that accepts ProviderHeaderArgs and ProviderHeaderOutput values.
// You can construct a concrete instance of `ProviderHeaderInput` via:
//
//	ProviderHeaderArgs{...}
type ProviderHeaderInput interface {
	pulumi.Input

	ToProviderHeaderOutput() ProviderHeaderOutput
	ToProviderHeaderOutputWithContext(context.Context) ProviderHeaderOutput
}

type ProviderHeaderArgs struct {
	// The header name
	Name pulumi.StringInput `pulumi:"name"`
	// The header value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProviderHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderHeader)(nil)).Elem()
}

func (i ProviderHeaderArgs) ToProviderHeaderOutput() ProviderHeaderOutput {
	return i.ToProviderHeaderOutputWithContext(context.Background())
}

func (i ProviderHeaderArgs) ToProviderHeaderOutputWithContext(ctx context.Context) ProviderHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderHeaderOutput)
}

// ProviderHeaderArrayInput is an input type that accepts ProviderHeaderArray and ProviderHeaderArrayOutput values.
// You can construct a concrete instance of `ProviderHeaderArrayInput` via:
//
//	ProviderHeaderArray{ ProviderHeaderArgs{...} }
type ProviderHeaderArrayInput interface {
	pulumi.Input

	ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput
	ToProviderHeaderArrayOutputWithContext(context.Context) ProviderHeaderArrayOutput
}

type ProviderHeaderArray []ProviderHeaderInput

func (ProviderHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderHeader)(nil)).Elem()
}

func (i ProviderHeaderArray) ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput {
	return i.ToProviderHeaderArrayOutputWithContext(context.Background())
}

func (i ProviderHeaderArray) ToProviderHeaderArrayOutputWithContext(ctx context.Context) ProviderHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderHeaderArrayOutput)
}

type ProviderHeaderOutput struct{ *pulumi.OutputState }

func (ProviderHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderHeader)(nil)).Elem()
}

func (o ProviderHeaderOutput) ToProviderHeaderOutput() ProviderHeaderOutput {
	return o
}

func (o ProviderHeaderOutput) ToProviderHeaderOutputWithContext(ctx context.Context) ProviderHeaderOutput {
	return o
}

// The header name
func (o ProviderHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderHeader) string { return v.Name }).(pulumi.StringOutput)
}

// The header value
func (o ProviderHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ProviderHeaderArrayOutput struct{ *pulumi.OutputState }

func (ProviderHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderHeader)(nil)).Elem()
}

func (o ProviderHeaderArrayOutput) ToProviderHeaderArrayOutput() ProviderHeaderArrayOutput {
	return o
}

func (o ProviderHeaderArrayOutput) ToProviderHeaderArrayOutputWithContext(ctx context.Context) ProviderHeaderArrayOutput {
	return o
}

func (o ProviderHeaderArrayOutput) Index(i pulumi.IntInput) ProviderHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderHeader {
		return vs[0].([]ProviderHeader)[vs[1].(int)]
	}).(ProviderHeaderOutput)
}

type GetPolicyDocumentRule struct {
	// Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
	AllowedParameters []GetPolicyDocumentRuleAllowedParameter `pulumi:"allowedParameters"`
	// A list of capabilities that this rule apply to `path`. For example, ["read", "write"].
	Capabilities []string `pulumi:"capabilities"`
	// Blacklists a list of parameter and values. Any values specified here take precedence over `allowedParameter`. See Parameters below.
	DeniedParameters []GetPolicyDocumentRuleDeniedParameter `pulumi:"deniedParameters"`
	// Description of the rule. Will be added as a comment to rendered rule.
	Description *string `pulumi:"description"`
	// The maximum allowed TTL that clients can specify for a wrapped response.
	MaxWrappingTtl *string `pulumi:"maxWrappingTtl"`
	// The minimum allowed TTL that clients can specify for a wrapped response.
	MinWrappingTtl *string `pulumi:"minWrappingTtl"`
	// A path in Vault that this rule applies to.
	Path string `pulumi:"path"`
	// A list of parameters that must be specified.
	RequiredParameters []string `pulumi:"requiredParameters"`
}

// GetPolicyDocumentRuleInput is an input type that accepts GetPolicyDocumentRuleArgs and GetPolicyDocumentRuleOutput values.
// You can construct a concrete instance of `GetPolicyDocumentRuleInput` via:
//
//	GetPolicyDocumentRuleArgs{...}
type GetPolicyDocumentRuleInput interface {
	pulumi.Input

	ToGetPolicyDocumentRuleOutput() GetPolicyDocumentRuleOutput
	ToGetPolicyDocumentRuleOutputWithContext(context.Context) GetPolicyDocumentRuleOutput
}

type GetPolicyDocumentRuleArgs struct {
	// Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
	AllowedParameters GetPolicyDocumentRuleAllowedParameterArrayInput `pulumi:"allowedParameters"`
	// A list of capabilities that this rule apply to `path`. For example, ["read", "write"].
	Capabilities pulumi.StringArrayInput `pulumi:"capabilities"`
	// Blacklists a list of parameter and values. Any values specified here take precedence over `allowedParameter`. See Parameters below.
	DeniedParameters GetPolicyDocumentRuleDeniedParameterArrayInput `pulumi:"deniedParameters"`
	// Description of the rule. Will be added as a comment to rendered rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The maximum allowed TTL that clients can specify for a wrapped response.
	MaxWrappingTtl pulumi.StringPtrInput `pulumi:"maxWrappingTtl"`
	// The minimum allowed TTL that clients can specify for a wrapped response.
	MinWrappingTtl pulumi.StringPtrInput `pulumi:"minWrappingTtl"`
	// A path in Vault that this rule applies to.
	Path pulumi.StringInput `pulumi:"path"`
	// A list of parameters that must be specified.
	RequiredParameters pulumi.StringArrayInput `pulumi:"requiredParameters"`
}

func (GetPolicyDocumentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentRule)(nil)).Elem()
}

func (i GetPolicyDocumentRuleArgs) ToGetPolicyDocumentRuleOutput() GetPolicyDocumentRuleOutput {
	return i.ToGetPolicyDocumentRuleOutputWithContext(context.Background())
}

func (i GetPolicyDocumentRuleArgs) ToGetPolicyDocumentRuleOutputWithContext(ctx context.Context) GetPolicyDocumentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentRuleOutput)
}

// GetPolicyDocumentRuleArrayInput is an input type that accepts GetPolicyDocumentRuleArray and GetPolicyDocumentRuleArrayOutput values.
// You can construct a concrete instance of `GetPolicyDocumentRuleArrayInput` via:
//
//	GetPolicyDocumentRuleArray{ GetPolicyDocumentRuleArgs{...} }
type GetPolicyDocumentRuleArrayInput interface {
	pulumi.Input

	ToGetPolicyDocumentRuleArrayOutput() GetPolicyDocumentRuleArrayOutput
	ToGetPolicyDocumentRuleArrayOutputWithContext(context.Context) GetPolicyDocumentRuleArrayOutput
}

type GetPolicyDocumentRuleArray []GetPolicyDocumentRuleInput

func (GetPolicyDocumentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentRule)(nil)).Elem()
}

func (i GetPolicyDocumentRuleArray) ToGetPolicyDocumentRuleArrayOutput() GetPolicyDocumentRuleArrayOutput {
	return i.ToGetPolicyDocumentRuleArrayOutputWithContext(context.Background())
}

func (i GetPolicyDocumentRuleArray) ToGetPolicyDocumentRuleArrayOutputWithContext(ctx context.Context) GetPolicyDocumentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentRuleArrayOutput)
}

type GetPolicyDocumentRuleOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentRule)(nil)).Elem()
}

func (o GetPolicyDocumentRuleOutput) ToGetPolicyDocumentRuleOutput() GetPolicyDocumentRuleOutput {
	return o
}

func (o GetPolicyDocumentRuleOutput) ToGetPolicyDocumentRuleOutputWithContext(ctx context.Context) GetPolicyDocumentRuleOutput {
	return o
}

// Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
func (o GetPolicyDocumentRuleOutput) AllowedParameters() GetPolicyDocumentRuleAllowedParameterArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) []GetPolicyDocumentRuleAllowedParameter { return v.AllowedParameters }).(GetPolicyDocumentRuleAllowedParameterArrayOutput)
}

// A list of capabilities that this rule apply to `path`. For example, ["read", "write"].
func (o GetPolicyDocumentRuleOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) []string { return v.Capabilities }).(pulumi.StringArrayOutput)
}

// Blacklists a list of parameter and values. Any values specified here take precedence over `allowedParameter`. See Parameters below.
func (o GetPolicyDocumentRuleOutput) DeniedParameters() GetPolicyDocumentRuleDeniedParameterArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) []GetPolicyDocumentRuleDeniedParameter { return v.DeniedParameters }).(GetPolicyDocumentRuleDeniedParameterArrayOutput)
}

// Description of the rule. Will be added as a comment to rendered rule.
func (o GetPolicyDocumentRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The maximum allowed TTL that clients can specify for a wrapped response.
func (o GetPolicyDocumentRuleOutput) MaxWrappingTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) *string { return v.MaxWrappingTtl }).(pulumi.StringPtrOutput)
}

// The minimum allowed TTL that clients can specify for a wrapped response.
func (o GetPolicyDocumentRuleOutput) MinWrappingTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) *string { return v.MinWrappingTtl }).(pulumi.StringPtrOutput)
}

// A path in Vault that this rule applies to.
func (o GetPolicyDocumentRuleOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) string { return v.Path }).(pulumi.StringOutput)
}

// A list of parameters that must be specified.
func (o GetPolicyDocumentRuleOutput) RequiredParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentRule) []string { return v.RequiredParameters }).(pulumi.StringArrayOutput)
}

type GetPolicyDocumentRuleArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentRule)(nil)).Elem()
}

func (o GetPolicyDocumentRuleArrayOutput) ToGetPolicyDocumentRuleArrayOutput() GetPolicyDocumentRuleArrayOutput {
	return o
}

func (o GetPolicyDocumentRuleArrayOutput) ToGetPolicyDocumentRuleArrayOutputWithContext(ctx context.Context) GetPolicyDocumentRuleArrayOutput {
	return o
}

func (o GetPolicyDocumentRuleArrayOutput) Index(i pulumi.IntInput) GetPolicyDocumentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyDocumentRule {
		return vs[0].([]GetPolicyDocumentRule)[vs[1].(int)]
	}).(GetPolicyDocumentRuleOutput)
}

type GetPolicyDocumentRuleAllowedParameter struct {
	// name of permitted or denied parameter.
	Key string `pulumi:"key"`
	// list of values what are permitted or denied by policy rule.
	Values []string `pulumi:"values"`
}

// GetPolicyDocumentRuleAllowedParameterInput is an input type that accepts GetPolicyDocumentRuleAllowedParameterArgs and GetPolicyDocumentRuleAllowedParameterOutput values.
// You can construct a concrete instance of `GetPolicyDocumentRuleAllowedParameterInput` via:
//
//	GetPolicyDocumentRuleAllowedParameterArgs{...}
type GetPolicyDocumentRuleAllowedParameterInput interface {
	pulumi.Input

	ToGetPolicyDocumentRuleAllowedParameterOutput() GetPolicyDocumentRuleAllowedParameterOutput
	ToGetPolicyDocumentRuleAllowedParameterOutputWithContext(context.Context) GetPolicyDocumentRuleAllowedParameterOutput
}

type GetPolicyDocumentRuleAllowedParameterArgs struct {
	// name of permitted or denied parameter.
	Key pulumi.StringInput `pulumi:"key"`
	// list of values what are permitted or denied by policy rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPolicyDocumentRuleAllowedParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentRuleAllowedParameter)(nil)).Elem()
}

func (i GetPolicyDocumentRuleAllowedParameterArgs) ToGetPolicyDocumentRuleAllowedParameterOutput() GetPolicyDocumentRuleAllowedParameterOutput {
	return i.ToGetPolicyDocumentRuleAllowedParameterOutputWithContext(context.Background())
}

func (i GetPolicyDocumentRuleAllowedParameterArgs) ToGetPolicyDocumentRuleAllowedParameterOutputWithContext(ctx context.Context) GetPolicyDocumentRuleAllowedParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentRuleAllowedParameterOutput)
}

// GetPolicyDocumentRuleAllowedParameterArrayInput is an input type that accepts GetPolicyDocumentRuleAllowedParameterArray and GetPolicyDocumentRuleAllowedParameterArrayOutput values.
// You can construct a concrete instance of `GetPolicyDocumentRuleAllowedParameterArrayInput` via:
//
//	GetPolicyDocumentRuleAllowedParameterArray{ GetPolicyDocumentRuleAllowedParameterArgs{...} }
type GetPolicyDocumentRuleAllowedParameterArrayInput interface {
	pulumi.Input

	ToGetPolicyDocumentRuleAllowedParameterArrayOutput() GetPolicyDocumentRuleAllowedParameterArrayOutput
	ToGetPolicyDocumentRuleAllowedParameterArrayOutputWithContext(context.Context) GetPolicyDocumentRuleAllowedParameterArrayOutput
}

type GetPolicyDocumentRuleAllowedParameterArray []GetPolicyDocumentRuleAllowedParameterInput

func (GetPolicyDocumentRuleAllowedParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentRuleAllowedParameter)(nil)).Elem()
}

func (i GetPolicyDocumentRuleAllowedParameterArray) ToGetPolicyDocumentRuleAllowedParameterArrayOutput() GetPolicyDocumentRuleAllowedParameterArrayOutput {
	return i.ToGetPolicyDocumentRuleAllowedParameterArrayOutputWithContext(context.Background())
}

func (i GetPolicyDocumentRuleAllowedParameterArray) ToGetPolicyDocumentRuleAllowedParameterArrayOutputWithContext(ctx context.Context) GetPolicyDocumentRuleAllowedParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentRuleAllowedParameterArrayOutput)
}

type GetPolicyDocumentRuleAllowedParameterOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentRuleAllowedParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentRuleAllowedParameter)(nil)).Elem()
}

func (o GetPolicyDocumentRuleAllowedParameterOutput) ToGetPolicyDocumentRuleAllowedParameterOutput() GetPolicyDocumentRuleAllowedParameterOutput {
	return o
}

func (o GetPolicyDocumentRuleAllowedParameterOutput) ToGetPolicyDocumentRuleAllowedParameterOutputWithContext(ctx context.Context) GetPolicyDocumentRuleAllowedParameterOutput {
	return o
}

// name of permitted or denied parameter.
func (o GetPolicyDocumentRuleAllowedParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDocumentRuleAllowedParameter) string { return v.Key }).(pulumi.StringOutput)
}

// list of values what are permitted or denied by policy rule.
func (o GetPolicyDocumentRuleAllowedParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentRuleAllowedParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPolicyDocumentRuleAllowedParameterArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentRuleAllowedParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentRuleAllowedParameter)(nil)).Elem()
}

func (o GetPolicyDocumentRuleAllowedParameterArrayOutput) ToGetPolicyDocumentRuleAllowedParameterArrayOutput() GetPolicyDocumentRuleAllowedParameterArrayOutput {
	return o
}

func (o GetPolicyDocumentRuleAllowedParameterArrayOutput) ToGetPolicyDocumentRuleAllowedParameterArrayOutputWithContext(ctx context.Context) GetPolicyDocumentRuleAllowedParameterArrayOutput {
	return o
}

func (o GetPolicyDocumentRuleAllowedParameterArrayOutput) Index(i pulumi.IntInput) GetPolicyDocumentRuleAllowedParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyDocumentRuleAllowedParameter {
		return vs[0].([]GetPolicyDocumentRuleAllowedParameter)[vs[1].(int)]
	}).(GetPolicyDocumentRuleAllowedParameterOutput)
}

type GetPolicyDocumentRuleDeniedParameter struct {
	// name of permitted or denied parameter.
	Key string `pulumi:"key"`
	// list of values what are permitted or denied by policy rule.
	Values []string `pulumi:"values"`
}

// GetPolicyDocumentRuleDeniedParameterInput is an input type that accepts GetPolicyDocumentRuleDeniedParameterArgs and GetPolicyDocumentRuleDeniedParameterOutput values.
// You can construct a concrete instance of `GetPolicyDocumentRuleDeniedParameterInput` via:
//
//	GetPolicyDocumentRuleDeniedParameterArgs{...}
type GetPolicyDocumentRuleDeniedParameterInput interface {
	pulumi.Input

	ToGetPolicyDocumentRuleDeniedParameterOutput() GetPolicyDocumentRuleDeniedParameterOutput
	ToGetPolicyDocumentRuleDeniedParameterOutputWithContext(context.Context) GetPolicyDocumentRuleDeniedParameterOutput
}

type GetPolicyDocumentRuleDeniedParameterArgs struct {
	// name of permitted or denied parameter.
	Key pulumi.StringInput `pulumi:"key"`
	// list of values what are permitted or denied by policy rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPolicyDocumentRuleDeniedParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentRuleDeniedParameter)(nil)).Elem()
}

func (i GetPolicyDocumentRuleDeniedParameterArgs) ToGetPolicyDocumentRuleDeniedParameterOutput() GetPolicyDocumentRuleDeniedParameterOutput {
	return i.ToGetPolicyDocumentRuleDeniedParameterOutputWithContext(context.Background())
}

func (i GetPolicyDocumentRuleDeniedParameterArgs) ToGetPolicyDocumentRuleDeniedParameterOutputWithContext(ctx context.Context) GetPolicyDocumentRuleDeniedParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentRuleDeniedParameterOutput)
}

// GetPolicyDocumentRuleDeniedParameterArrayInput is an input type that accepts GetPolicyDocumentRuleDeniedParameterArray and GetPolicyDocumentRuleDeniedParameterArrayOutput values.
// You can construct a concrete instance of `GetPolicyDocumentRuleDeniedParameterArrayInput` via:
//
//	GetPolicyDocumentRuleDeniedParameterArray{ GetPolicyDocumentRuleDeniedParameterArgs{...} }
type GetPolicyDocumentRuleDeniedParameterArrayInput interface {
	pulumi.Input

	ToGetPolicyDocumentRuleDeniedParameterArrayOutput() GetPolicyDocumentRuleDeniedParameterArrayOutput
	ToGetPolicyDocumentRuleDeniedParameterArrayOutputWithContext(context.Context) GetPolicyDocumentRuleDeniedParameterArrayOutput
}

type GetPolicyDocumentRuleDeniedParameterArray []GetPolicyDocumentRuleDeniedParameterInput

func (GetPolicyDocumentRuleDeniedParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentRuleDeniedParameter)(nil)).Elem()
}

func (i GetPolicyDocumentRuleDeniedParameterArray) ToGetPolicyDocumentRuleDeniedParameterArrayOutput() GetPolicyDocumentRuleDeniedParameterArrayOutput {
	return i.ToGetPolicyDocumentRuleDeniedParameterArrayOutputWithContext(context.Background())
}

func (i GetPolicyDocumentRuleDeniedParameterArray) ToGetPolicyDocumentRuleDeniedParameterArrayOutputWithContext(ctx context.Context) GetPolicyDocumentRuleDeniedParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyDocumentRuleDeniedParameterArrayOutput)
}

type GetPolicyDocumentRuleDeniedParameterOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentRuleDeniedParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDocumentRuleDeniedParameter)(nil)).Elem()
}

func (o GetPolicyDocumentRuleDeniedParameterOutput) ToGetPolicyDocumentRuleDeniedParameterOutput() GetPolicyDocumentRuleDeniedParameterOutput {
	return o
}

func (o GetPolicyDocumentRuleDeniedParameterOutput) ToGetPolicyDocumentRuleDeniedParameterOutputWithContext(ctx context.Context) GetPolicyDocumentRuleDeniedParameterOutput {
	return o
}

// name of permitted or denied parameter.
func (o GetPolicyDocumentRuleDeniedParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDocumentRuleDeniedParameter) string { return v.Key }).(pulumi.StringOutput)
}

// list of values what are permitted or denied by policy rule.
func (o GetPolicyDocumentRuleDeniedParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDocumentRuleDeniedParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPolicyDocumentRuleDeniedParameterArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyDocumentRuleDeniedParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyDocumentRuleDeniedParameter)(nil)).Elem()
}

func (o GetPolicyDocumentRuleDeniedParameterArrayOutput) ToGetPolicyDocumentRuleDeniedParameterArrayOutput() GetPolicyDocumentRuleDeniedParameterArrayOutput {
	return o
}

func (o GetPolicyDocumentRuleDeniedParameterArrayOutput) ToGetPolicyDocumentRuleDeniedParameterArrayOutputWithContext(ctx context.Context) GetPolicyDocumentRuleDeniedParameterArrayOutput {
	return o
}

func (o GetPolicyDocumentRuleDeniedParameterArrayOutput) Index(i pulumi.IntInput) GetPolicyDocumentRuleDeniedParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyDocumentRuleDeniedParameter {
		return vs[0].([]GetPolicyDocumentRuleDeniedParameter)[vs[1].(int)]
	}).(GetPolicyDocumentRuleDeniedParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendTuneInput)(nil)).Elem(), AuthBackendTuneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendTunePtrInput)(nil)).Elem(), AuthBackendTuneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginInput)(nil)).Elem(), ProviderAuthLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginPtrInput)(nil)).Elem(), ProviderAuthLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginAwsInput)(nil)).Elem(), ProviderAuthLoginAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginAwsPtrInput)(nil)).Elem(), ProviderAuthLoginAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginAzureInput)(nil)).Elem(), ProviderAuthLoginAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginAzurePtrInput)(nil)).Elem(), ProviderAuthLoginAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginCertInput)(nil)).Elem(), ProviderAuthLoginCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginCertPtrInput)(nil)).Elem(), ProviderAuthLoginCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginGcpInput)(nil)).Elem(), ProviderAuthLoginGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginGcpPtrInput)(nil)).Elem(), ProviderAuthLoginGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginJwtInput)(nil)).Elem(), ProviderAuthLoginJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginJwtPtrInput)(nil)).Elem(), ProviderAuthLoginJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginKerberosInput)(nil)).Elem(), ProviderAuthLoginKerberosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginKerberosPtrInput)(nil)).Elem(), ProviderAuthLoginKerberosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginOciInput)(nil)).Elem(), ProviderAuthLoginOciArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginOciPtrInput)(nil)).Elem(), ProviderAuthLoginOciArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginOidcInput)(nil)).Elem(), ProviderAuthLoginOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginOidcPtrInput)(nil)).Elem(), ProviderAuthLoginOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginRadiusInput)(nil)).Elem(), ProviderAuthLoginRadiusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginRadiusPtrInput)(nil)).Elem(), ProviderAuthLoginRadiusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginTokenFileInput)(nil)).Elem(), ProviderAuthLoginTokenFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginTokenFilePtrInput)(nil)).Elem(), ProviderAuthLoginTokenFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginUserpassInput)(nil)).Elem(), ProviderAuthLoginUserpassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthLoginUserpassPtrInput)(nil)).Elem(), ProviderAuthLoginUserpassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderClientAuthInput)(nil)).Elem(), ProviderClientAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderClientAuthPtrInput)(nil)).Elem(), ProviderClientAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderHeaderInput)(nil)).Elem(), ProviderHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderHeaderArrayInput)(nil)).Elem(), ProviderHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentRuleInput)(nil)).Elem(), GetPolicyDocumentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentRuleArrayInput)(nil)).Elem(), GetPolicyDocumentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentRuleAllowedParameterInput)(nil)).Elem(), GetPolicyDocumentRuleAllowedParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentRuleAllowedParameterArrayInput)(nil)).Elem(), GetPolicyDocumentRuleAllowedParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentRuleDeniedParameterInput)(nil)).Elem(), GetPolicyDocumentRuleDeniedParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyDocumentRuleDeniedParameterArrayInput)(nil)).Elem(), GetPolicyDocumentRuleDeniedParameterArray{})
	pulumi.RegisterOutputType(AuthBackendTuneOutput{})
	pulumi.RegisterOutputType(AuthBackendTunePtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginAwsOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginAwsPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginAzureOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginAzurePtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginCertOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginCertPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginGcpOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginGcpPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginJwtOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginJwtPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginKerberosOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginKerberosPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginOciOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginOciPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginOidcOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginOidcPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginRadiusOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginRadiusPtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginTokenFileOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginTokenFilePtrOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginUserpassOutput{})
	pulumi.RegisterOutputType(ProviderAuthLoginUserpassPtrOutput{})
	pulumi.RegisterOutputType(ProviderClientAuthOutput{})
	pulumi.RegisterOutputType(ProviderClientAuthPtrOutput{})
	pulumi.RegisterOutputType(ProviderHeaderOutput{})
	pulumi.RegisterOutputType(ProviderHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentRuleOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentRuleArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentRuleAllowedParameterOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentRuleAllowedParameterArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentRuleDeniedParameterOutput{})
	pulumi.RegisterOutputType(GetPolicyDocumentRuleDeniedParameterArrayOutput{})
}
