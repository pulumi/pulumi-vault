// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the vault package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// If true, adds the value of the `address` argument to the Terraform process environment.
	AddAddressToEnv pulumi.StringPtrOutput `pulumi:"addAddressToEnv"`
	// URL of the root of the target Vault server.
	Address pulumi.StringOutput `pulumi:"address"`
	// Path to directory containing CA certificate files to validate the server's certificate.
	CaCertDir pulumi.StringPtrOutput `pulumi:"caCertDir"`
	// Path to a CA certificate file to validate the server's certificate.
	CaCertFile pulumi.StringPtrOutput `pulumi:"caCertFile"`
	// The namespace to use. Available only for Vault Enterprise.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Token to use to authenticate to Vault.
	Token pulumi.StringOutput `pulumi:"token"`
	// Token name to use for creating the Vault child token.
	TokenName pulumi.StringPtrOutput `pulumi:"tokenName"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if isZero(args.MaxLeaseTtlSeconds) {
		args.MaxLeaseTtlSeconds = pulumi.IntPtr(getEnvOrDefault(1200, parseEnvInt, "TERRAFORM_VAULT_MAX_TTL").(int))
	}
	if isZero(args.MaxRetries) {
		args.MaxRetries = pulumi.IntPtr(getEnvOrDefault(2, parseEnvInt, "VAULT_MAX_RETRIES").(int))
	}
	if isZero(args.SkipTlsVerify) {
		args.SkipTlsVerify = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "VAULT_SKIP_VERIFY").(bool))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:vault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// If true, adds the value of the `address` argument to the Terraform process environment.
	AddAddressToEnv *string `pulumi:"addAddressToEnv"`
	// URL of the root of the target Vault server.
	Address string `pulumi:"address"`
	// Login to vault with an existing auth method using auth/<mount>/login
	AuthLogins []ProviderAuthLogin `pulumi:"authLogins"`
	// Path to directory containing CA certificate files to validate the server's certificate.
	CaCertDir *string `pulumi:"caCertDir"`
	// Path to a CA certificate file to validate the server's certificate.
	CaCertFile *string `pulumi:"caCertFile"`
	// Client authentication credentials.
	ClientAuths []ProviderClientAuth `pulumi:"clientAuths"`
	// The headers to send with each Vault request.
	Headers []ProviderHeader `pulumi:"headers"`
	// Maximum TTL for secret leases requested by this provider.
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// Maximum number of retries when a 5xx error code is encountered.
	MaxRetries *int `pulumi:"maxRetries"`
	// Maximum number of retries for Client Controlled Consistency related operations
	MaxRetriesCcc *int `pulumi:"maxRetriesCcc"`
	// The namespace to use. Available only for Vault Enterprise.
	Namespace *string `pulumi:"namespace"`
	// Set this to true to prevent the creation of ephemeral child token used by this provider.
	SkipChildToken *bool `pulumi:"skipChildToken"`
	// Set this to true only if the target Vault server is an insecure development instance.
	SkipTlsVerify *bool `pulumi:"skipTlsVerify"`
	// Token to use to authenticate to Vault.
	Token string `pulumi:"token"`
	// Token name to use for creating the Vault child token.
	TokenName *string `pulumi:"tokenName"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// If true, adds the value of the `address` argument to the Terraform process environment.
	AddAddressToEnv pulumi.StringPtrInput
	// URL of the root of the target Vault server.
	Address pulumi.StringInput
	// Login to vault with an existing auth method using auth/<mount>/login
	AuthLogins ProviderAuthLoginArrayInput
	// Path to directory containing CA certificate files to validate the server's certificate.
	CaCertDir pulumi.StringPtrInput
	// Path to a CA certificate file to validate the server's certificate.
	CaCertFile pulumi.StringPtrInput
	// Client authentication credentials.
	ClientAuths ProviderClientAuthArrayInput
	// The headers to send with each Vault request.
	Headers ProviderHeaderArrayInput
	// Maximum TTL for secret leases requested by this provider.
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// Maximum number of retries when a 5xx error code is encountered.
	MaxRetries pulumi.IntPtrInput
	// Maximum number of retries for Client Controlled Consistency related operations
	MaxRetriesCcc pulumi.IntPtrInput
	// The namespace to use. Available only for Vault Enterprise.
	Namespace pulumi.StringPtrInput
	// Set this to true to prevent the creation of ephemeral child token used by this provider.
	SkipChildToken pulumi.BoolPtrInput
	// Set this to true only if the target Vault server is an insecure development instance.
	SkipTlsVerify pulumi.BoolPtrInput
	// Token to use to authenticate to Vault.
	Token pulumi.StringInput
	// Token name to use for creating the Vault child token.
	TokenName pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
