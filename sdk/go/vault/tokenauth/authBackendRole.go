// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tokenauth

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages Token auth backend role in a Vault server. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/token.html) for more
// information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault/tokenauth"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := tokenauth.NewAuthBackendRole(ctx, "example", &tokenauth.AuthBackendRoleArgs{
// 			AllowedPolicies: pulumi.StringArray{
// 				pulumi.String("dev"),
// 				pulumi.String("test"),
// 			},
// 			DisallowedPolicies: pulumi.StringArray{
// 				pulumi.String("default"),
// 			},
// 			ExplicitMaxTtl: pulumi.String("115200"),
// 			Orphan:         pulumi.Bool(true),
// 			PathSuffix:     pulumi.String("path-suffix"),
// 			Period:         pulumi.String("86400"),
// 			Renewable:      pulumi.Bool(true),
// 			RoleName:       pulumi.String("my-role"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Token auth backend roles can be imported with `auth/token/roles/` followed by the `role_name`, e.g.
//
// ```sh
//  $ pulumi import vault:tokenauth/authBackendRole:AuthBackendRole example auth/token/roles/my-role
// ```
type AuthBackendRole struct {
	pulumi.CustomResourceState

	// List of allowed policies for given role.
	AllowedPolicies pulumi.StringArrayOutput `pulumi:"allowedPolicies"`
	// If set, restricts usage of the generated token to client IPs falling within the range of the specified CIDR(s).
	//
	// Deprecated: use `token_bound_cidrs` instead if you are running Vault >= 1.2
	BoundCidrs pulumi.StringArrayOutput `pulumi:"boundCidrs"`
	// List of disallowed policies for given role.
	DisallowedPolicies pulumi.StringArrayOutput `pulumi:"disallowedPolicies"`
	// If set, the token will have an explicit max TTL set upon it.
	//
	// Deprecated: use `token_explicit_max_ttl` instead if you are running Vault >= 1.2
	ExplicitMaxTtl pulumi.StringPtrOutput `pulumi:"explicitMaxTtl"`
	// If true, tokens created against this policy will be orphan tokens.
	Orphan pulumi.BoolPtrOutput `pulumi:"orphan"`
	// Tokens created against this role will have the given suffix as part of their path in addition to the role name.
	PathSuffix pulumi.StringPtrOutput `pulumi:"pathSuffix"`
	// The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.
	//
	// Deprecated: use `token_period` instead if you are running Vault >= 1.2
	Period pulumi.StringPtrOutput `pulumi:"period"`
	// Wether to disable the ability of the token to be renewed past its initial TTL.
	Renewable pulumi.BoolPtrOutput `pulumi:"renewable"`
	// The name of the role.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayOutput `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrOutput `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrOutput `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrOutput `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrOutput `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrOutput `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayOutput `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrOutput `pulumi:"tokenTtl"`
	// Specifies the type of tokens that should be returned by the role. If either service or batch is specified, that kind of token will always be returned.
	TokenType pulumi.StringPtrOutput `pulumi:"tokenType"`
}

// NewAuthBackendRole registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendRole(ctx *pulumi.Context,
	name string, args *AuthBackendRoleArgs, opts ...pulumi.ResourceOption) (*AuthBackendRole, error) {
	if args == nil || args.RoleName == nil {
		return nil, errors.New("missing required argument 'RoleName'")
	}
	if args == nil {
		args = &AuthBackendRoleArgs{}
	}
	var resource AuthBackendRole
	err := ctx.RegisterResource("vault:tokenauth/authBackendRole:AuthBackendRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackendRole gets an existing AuthBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendRoleState, opts ...pulumi.ResourceOption) (*AuthBackendRole, error) {
	var resource AuthBackendRole
	err := ctx.ReadResource("vault:tokenauth/authBackendRole:AuthBackendRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackendRole resources.
type authBackendRoleState struct {
	// List of allowed policies for given role.
	AllowedPolicies []string `pulumi:"allowedPolicies"`
	// If set, restricts usage of the generated token to client IPs falling within the range of the specified CIDR(s).
	//
	// Deprecated: use `token_bound_cidrs` instead if you are running Vault >= 1.2
	BoundCidrs []string `pulumi:"boundCidrs"`
	// List of disallowed policies for given role.
	DisallowedPolicies []string `pulumi:"disallowedPolicies"`
	// If set, the token will have an explicit max TTL set upon it.
	//
	// Deprecated: use `token_explicit_max_ttl` instead if you are running Vault >= 1.2
	ExplicitMaxTtl *string `pulumi:"explicitMaxTtl"`
	// If true, tokens created against this policy will be orphan tokens.
	Orphan *bool `pulumi:"orphan"`
	// Tokens created against this role will have the given suffix as part of their path in addition to the role name.
	PathSuffix *string `pulumi:"pathSuffix"`
	// The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.
	//
	// Deprecated: use `token_period` instead if you are running Vault >= 1.2
	Period *string `pulumi:"period"`
	// Wether to disable the ability of the token to be renewed past its initial TTL.
	Renewable *bool `pulumi:"renewable"`
	// The name of the role.
	RoleName *string `pulumi:"roleName"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// Specifies the type of tokens that should be returned by the role. If either service or batch is specified, that kind of token will always be returned.
	TokenType *string `pulumi:"tokenType"`
}

type AuthBackendRoleState struct {
	// List of allowed policies for given role.
	AllowedPolicies pulumi.StringArrayInput
	// If set, restricts usage of the generated token to client IPs falling within the range of the specified CIDR(s).
	//
	// Deprecated: use `token_bound_cidrs` instead if you are running Vault >= 1.2
	BoundCidrs pulumi.StringArrayInput
	// List of disallowed policies for given role.
	DisallowedPolicies pulumi.StringArrayInput
	// If set, the token will have an explicit max TTL set upon it.
	//
	// Deprecated: use `token_explicit_max_ttl` instead if you are running Vault >= 1.2
	ExplicitMaxTtl pulumi.StringPtrInput
	// If true, tokens created against this policy will be orphan tokens.
	Orphan pulumi.BoolPtrInput
	// Tokens created against this role will have the given suffix as part of their path in addition to the role name.
	PathSuffix pulumi.StringPtrInput
	// The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.
	//
	// Deprecated: use `token_period` instead if you are running Vault >= 1.2
	Period pulumi.StringPtrInput
	// Wether to disable the ability of the token to be renewed past its initial TTL.
	Renewable pulumi.BoolPtrInput
	// The name of the role.
	RoleName pulumi.StringPtrInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// Specifies the type of tokens that should be returned by the role. If either service or batch is specified, that kind of token will always be returned.
	TokenType pulumi.StringPtrInput
}

func (AuthBackendRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendRoleState)(nil)).Elem()
}

type authBackendRoleArgs struct {
	// List of allowed policies for given role.
	AllowedPolicies []string `pulumi:"allowedPolicies"`
	// If set, restricts usage of the generated token to client IPs falling within the range of the specified CIDR(s).
	//
	// Deprecated: use `token_bound_cidrs` instead if you are running Vault >= 1.2
	BoundCidrs []string `pulumi:"boundCidrs"`
	// List of disallowed policies for given role.
	DisallowedPolicies []string `pulumi:"disallowedPolicies"`
	// If set, the token will have an explicit max TTL set upon it.
	//
	// Deprecated: use `token_explicit_max_ttl` instead if you are running Vault >= 1.2
	ExplicitMaxTtl *string `pulumi:"explicitMaxTtl"`
	// If true, tokens created against this policy will be orphan tokens.
	Orphan *bool `pulumi:"orphan"`
	// Tokens created against this role will have the given suffix as part of their path in addition to the role name.
	PathSuffix *string `pulumi:"pathSuffix"`
	// The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.
	//
	// Deprecated: use `token_period` instead if you are running Vault >= 1.2
	Period *string `pulumi:"period"`
	// Wether to disable the ability of the token to be renewed past its initial TTL.
	Renewable *bool `pulumi:"renewable"`
	// The name of the role.
	RoleName string `pulumi:"roleName"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// Specifies the type of tokens that should be returned by the role. If either service or batch is specified, that kind of token will always be returned.
	TokenType *string `pulumi:"tokenType"`
}

// The set of arguments for constructing a AuthBackendRole resource.
type AuthBackendRoleArgs struct {
	// List of allowed policies for given role.
	AllowedPolicies pulumi.StringArrayInput
	// If set, restricts usage of the generated token to client IPs falling within the range of the specified CIDR(s).
	//
	// Deprecated: use `token_bound_cidrs` instead if you are running Vault >= 1.2
	BoundCidrs pulumi.StringArrayInput
	// List of disallowed policies for given role.
	DisallowedPolicies pulumi.StringArrayInput
	// If set, the token will have an explicit max TTL set upon it.
	//
	// Deprecated: use `token_explicit_max_ttl` instead if you are running Vault >= 1.2
	ExplicitMaxTtl pulumi.StringPtrInput
	// If true, tokens created against this policy will be orphan tokens.
	Orphan pulumi.BoolPtrInput
	// Tokens created against this role will have the given suffix as part of their path in addition to the role name.
	PathSuffix pulumi.StringPtrInput
	// The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.
	//
	// Deprecated: use `token_period` instead if you are running Vault >= 1.2
	Period pulumi.StringPtrInput
	// Wether to disable the ability of the token to be renewed past its initial TTL.
	Renewable pulumi.BoolPtrInput
	// The name of the role.
	RoleName pulumi.StringInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// Specifies the type of tokens that should be returned by the role. If either service or batch is specified, that kind of token will always be returned.
	TokenType pulumi.StringPtrInput
}

func (AuthBackendRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendRoleArgs)(nil)).Elem()
}

type AuthBackendRoleInput interface {
	pulumi.Input

	ToAuthBackendRoleOutput() AuthBackendRoleOutput
	ToAuthBackendRoleOutputWithContext(ctx context.Context) AuthBackendRoleOutput
}

func (AuthBackendRole) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthBackendRole)(nil)).Elem()
}

func (i AuthBackendRole) ToAuthBackendRoleOutput() AuthBackendRoleOutput {
	return i.ToAuthBackendRoleOutputWithContext(context.Background())
}

func (i AuthBackendRole) ToAuthBackendRoleOutputWithContext(ctx context.Context) AuthBackendRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendRoleOutput)
}

type AuthBackendRoleOutput struct {
	*pulumi.OutputState
}

func (AuthBackendRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthBackendRoleOutput)(nil)).Elem()
}

func (o AuthBackendRoleOutput) ToAuthBackendRoleOutput() AuthBackendRoleOutput {
	return o
}

func (o AuthBackendRoleOutput) ToAuthBackendRoleOutputWithContext(ctx context.Context) AuthBackendRoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AuthBackendRoleOutput{})
}
