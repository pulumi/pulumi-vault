// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Current namespace
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vault.LookupNamespace(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Single namespace
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vault.LookupNamespace(ctx, &vault.LookupNamespaceArgs{
//				Path: pulumi.StringRef("ns1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Nested namespace
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			child, err := vault.LookupNamespace(ctx, &vault.LookupNamespaceArgs{
//				Namespace: pulumi.StringRef("parent"),
//				Path:      pulumi.StringRef("child"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_ := child.Id
//			// -> foo/parent/child/
//			_ := child.PathFq
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupNamespace(ctx *pulumi.Context, args *LookupNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNamespaceResult
	err := ctx.Invoke("vault:index/getNamespace:getNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNamespace.
type LookupNamespaceArgs struct {
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	Namespace *string `pulumi:"namespace"`
	// The path of the namespace. Must not have a trailing `/`.
	// If not specified or empty, path attributes are set for the current namespace
	// based on the `namespace` arguments of the provider and this data source.
	// Other path related attributes will be empty in this case.
	Path *string `pulumi:"path"`
}

// A collection of values returned by getNamespace.
type LookupNamespaceResult struct {
	// (Optional) A map of strings containing arbitrary metadata for the namespace.
	// Only fetched if `path` is specified.
	// *Requires Vault 1.12+.*
	CustomMetadata map[string]interface{} `pulumi:"customMetadata"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	Namespace *string `pulumi:"namespace"`
	// Vault server's internal ID of the namespace.
	// Only fetched if `path` is specified.
	NamespaceId string  `pulumi:"namespaceId"`
	Path        *string `pulumi:"path"`
	// The fully qualified path to the namespace. Useful when provisioning resources in a child `namespace`.
	// The path is relative to the provider's `namespace` argument.
	PathFq string `pulumi:"pathFq"`
}

func LookupNamespaceOutput(ctx *pulumi.Context, args LookupNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupNamespaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNamespaceResult, error) {
			args := v.(LookupNamespaceArgs)
			r, err := LookupNamespace(ctx, &args, opts...)
			var s LookupNamespaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNamespaceResultOutput)
}

// A collection of arguments for invoking getNamespace.
type LookupNamespaceOutputArgs struct {
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The path of the namespace. Must not have a trailing `/`.
	// If not specified or empty, path attributes are set for the current namespace
	// based on the `namespace` arguments of the provider and this data source.
	// Other path related attributes will be empty in this case.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (LookupNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceArgs)(nil)).Elem()
}

// A collection of values returned by getNamespace.
type LookupNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceResult)(nil)).Elem()
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutput() LookupNamespaceResultOutput {
	return o
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutputWithContext(ctx context.Context) LookupNamespaceResultOutput {
	return o
}

// (Optional) A map of strings containing arbitrary metadata for the namespace.
// Only fetched if `path` is specified.
// *Requires Vault 1.12+.*
func (o LookupNamespaceResultOutput) CustomMetadata() pulumi.MapOutput {
	return o.ApplyT(func(v LookupNamespaceResult) map[string]interface{} { return v.CustomMetadata }).(pulumi.MapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNamespaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNamespaceResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Vault server's internal ID of the namespace.
// Only fetched if `path` is specified.
func (o LookupNamespaceResultOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.NamespaceId }).(pulumi.StringOutput)
}

func (o LookupNamespaceResultOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceResult) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The fully qualified path to the namespace. Useful when provisioning resources in a child `namespace`.
// The path is relative to the provider's `namespace` argument.
func (o LookupNamespaceResultOutput) PathFq() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.PathFq }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNamespaceResultOutput{})
}
