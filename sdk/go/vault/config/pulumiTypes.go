// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AuthLogin struct {
	Method *string `pulumi:"method"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace  *string           `pulumi:"namespace"`
	Parameters map[string]string `pulumi:"parameters"`
	Path       string            `pulumi:"path"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginInput is an input type that accepts AuthLoginArgs and AuthLoginOutput values.
// You can construct a concrete instance of `AuthLoginInput` via:
//
//	AuthLoginArgs{...}
type AuthLoginInput interface {
	pulumi.Input

	ToAuthLoginOutput() AuthLoginOutput
	ToAuthLoginOutputWithContext(context.Context) AuthLoginOutput
}

type AuthLoginArgs struct {
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace  pulumi.StringPtrInput `pulumi:"namespace"`
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	Path       pulumi.StringInput    `pulumi:"path"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLogin)(nil)).Elem()
}

func (i AuthLoginArgs) ToAuthLoginOutput() AuthLoginOutput {
	return i.ToAuthLoginOutputWithContext(context.Background())
}

func (i AuthLoginArgs) ToAuthLoginOutputWithContext(ctx context.Context) AuthLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginOutput)
}

type AuthLoginOutput struct{ *pulumi.OutputState }

func (AuthLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLogin)(nil)).Elem()
}

func (o AuthLoginOutput) ToAuthLoginOutput() AuthLoginOutput {
	return o
}

func (o AuthLoginOutput) ToAuthLoginOutputWithContext(ctx context.Context) AuthLoginOutput {
	return o
}

func (o AuthLoginOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLogin) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLogin) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o AuthLoginOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v AuthLogin) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o AuthLoginOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLogin) string { return v.Path }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLogin) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginAws struct {
	// The AWS access key ID.
	AwsAccessKeyId *string `pulumi:"awsAccessKeyId"`
	// The IAM endpoint URL.
	AwsIamEndpoint *string `pulumi:"awsIamEndpoint"`
	// The name of the AWS profile.
	AwsProfile *string `pulumi:"awsProfile"`
	// The AWS region.
	AwsRegion *string `pulumi:"awsRegion"`
	// The ARN of the AWS Role to assume.Used during STS AssumeRole
	AwsRoleArn *string `pulumi:"awsRoleArn"`
	// Specifies the name to attach to the AWS role session. Used during STS AssumeRole
	AwsRoleSessionName *string `pulumi:"awsRoleSessionName"`
	// The AWS secret access key.
	AwsSecretAccessKey *string `pulumi:"awsSecretAccessKey"`
	// The AWS session token.
	AwsSessionToken *string `pulumi:"awsSessionToken"`
	// Path to the AWS shared credentials file.
	AwsSharedCredentialsFile *string `pulumi:"awsSharedCredentialsFile"`
	// The STS endpoint URL.
	AwsStsEndpoint *string `pulumi:"awsStsEndpoint"`
	// Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token.
	AwsWebIdentityTokenFile *string `pulumi:"awsWebIdentityTokenFile"`
	// The Vault header value to include in the STS signing request.
	HeaderValue *string `pulumi:"headerValue"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The Vault role to use when logging into Vault.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginAwsInput is an input type that accepts AuthLoginAwsArgs and AuthLoginAwsOutput values.
// You can construct a concrete instance of `AuthLoginAwsInput` via:
//
//	AuthLoginAwsArgs{...}
type AuthLoginAwsInput interface {
	pulumi.Input

	ToAuthLoginAwsOutput() AuthLoginAwsOutput
	ToAuthLoginAwsOutputWithContext(context.Context) AuthLoginAwsOutput
}

type AuthLoginAwsArgs struct {
	// The AWS access key ID.
	AwsAccessKeyId pulumi.StringPtrInput `pulumi:"awsAccessKeyId"`
	// The IAM endpoint URL.
	AwsIamEndpoint pulumi.StringPtrInput `pulumi:"awsIamEndpoint"`
	// The name of the AWS profile.
	AwsProfile pulumi.StringPtrInput `pulumi:"awsProfile"`
	// The AWS region.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// The ARN of the AWS Role to assume.Used during STS AssumeRole
	AwsRoleArn pulumi.StringPtrInput `pulumi:"awsRoleArn"`
	// Specifies the name to attach to the AWS role session. Used during STS AssumeRole
	AwsRoleSessionName pulumi.StringPtrInput `pulumi:"awsRoleSessionName"`
	// The AWS secret access key.
	AwsSecretAccessKey pulumi.StringPtrInput `pulumi:"awsSecretAccessKey"`
	// The AWS session token.
	AwsSessionToken pulumi.StringPtrInput `pulumi:"awsSessionToken"`
	// Path to the AWS shared credentials file.
	AwsSharedCredentialsFile pulumi.StringPtrInput `pulumi:"awsSharedCredentialsFile"`
	// The STS endpoint URL.
	AwsStsEndpoint pulumi.StringPtrInput `pulumi:"awsStsEndpoint"`
	// Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token.
	AwsWebIdentityTokenFile pulumi.StringPtrInput `pulumi:"awsWebIdentityTokenFile"`
	// The Vault header value to include in the STS signing request.
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The Vault role to use when logging into Vault.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginAws)(nil)).Elem()
}

func (i AuthLoginAwsArgs) ToAuthLoginAwsOutput() AuthLoginAwsOutput {
	return i.ToAuthLoginAwsOutputWithContext(context.Background())
}

func (i AuthLoginAwsArgs) ToAuthLoginAwsOutputWithContext(ctx context.Context) AuthLoginAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginAwsOutput)
}

type AuthLoginAwsOutput struct{ *pulumi.OutputState }

func (AuthLoginAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginAws)(nil)).Elem()
}

func (o AuthLoginAwsOutput) ToAuthLoginAwsOutput() AuthLoginAwsOutput {
	return o
}

func (o AuthLoginAwsOutput) ToAuthLoginAwsOutputWithContext(ctx context.Context) AuthLoginAwsOutput {
	return o
}

// The AWS access key ID.
func (o AuthLoginAwsOutput) AwsAccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsAccessKeyId }).(pulumi.StringPtrOutput)
}

// The IAM endpoint URL.
func (o AuthLoginAwsOutput) AwsIamEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsIamEndpoint }).(pulumi.StringPtrOutput)
}

// The name of the AWS profile.
func (o AuthLoginAwsOutput) AwsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsProfile }).(pulumi.StringPtrOutput)
}

// The AWS region.
func (o AuthLoginAwsOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// The ARN of the AWS Role to assume.Used during STS AssumeRole
func (o AuthLoginAwsOutput) AwsRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsRoleArn }).(pulumi.StringPtrOutput)
}

// Specifies the name to attach to the AWS role session. Used during STS AssumeRole
func (o AuthLoginAwsOutput) AwsRoleSessionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsRoleSessionName }).(pulumi.StringPtrOutput)
}

// The AWS secret access key.
func (o AuthLoginAwsOutput) AwsSecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsSecretAccessKey }).(pulumi.StringPtrOutput)
}

// The AWS session token.
func (o AuthLoginAwsOutput) AwsSessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsSessionToken }).(pulumi.StringPtrOutput)
}

// Path to the AWS shared credentials file.
func (o AuthLoginAwsOutput) AwsSharedCredentialsFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsSharedCredentialsFile }).(pulumi.StringPtrOutput)
}

// The STS endpoint URL.
func (o AuthLoginAwsOutput) AwsStsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsStsEndpoint }).(pulumi.StringPtrOutput)
}

// Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token.
func (o AuthLoginAwsOutput) AwsWebIdentityTokenFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.AwsWebIdentityTokenFile }).(pulumi.StringPtrOutput)
}

// The Vault header value to include in the STS signing request.
func (o AuthLoginAwsOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginAwsOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginAwsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The Vault role to use when logging into Vault.
func (o AuthLoginAwsOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginAws) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginAwsOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginAws) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginAzure struct {
	// The identity's client ID.
	ClientId *string `pulumi:"clientId"`
	// A signed JSON Web Token. If not specified on will be created automatically
	Jwt *string `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// The scopes to include in the token request.
	Scope *string `pulumi:"scope"`
	// The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
	SubscriptionId string `pulumi:"subscriptionId"`
	// Provides the tenant ID to use in a multi-tenant authentication scenario.
	TenantId *string `pulumi:"tenantId"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmName *string `pulumi:"vmName"`
	// The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmssName *string `pulumi:"vmssName"`
}

// AuthLoginAzureInput is an input type that accepts AuthLoginAzureArgs and AuthLoginAzureOutput values.
// You can construct a concrete instance of `AuthLoginAzureInput` via:
//
//	AuthLoginAzureArgs{...}
type AuthLoginAzureInput interface {
	pulumi.Input

	ToAuthLoginAzureOutput() AuthLoginAzureOutput
	ToAuthLoginAzureOutputWithContext(context.Context) AuthLoginAzureOutput
}

type AuthLoginAzureArgs struct {
	// The identity's client ID.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// A signed JSON Web Token. If not specified on will be created automatically
	Jwt pulumi.StringPtrInput `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// The scopes to include in the token request.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// Provides the tenant ID to use in a multi-tenant authentication scenario.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmName pulumi.StringPtrInput `pulumi:"vmName"`
	// The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
	VmssName pulumi.StringPtrInput `pulumi:"vmssName"`
}

func (AuthLoginAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginAzure)(nil)).Elem()
}

func (i AuthLoginAzureArgs) ToAuthLoginAzureOutput() AuthLoginAzureOutput {
	return i.ToAuthLoginAzureOutputWithContext(context.Background())
}

func (i AuthLoginAzureArgs) ToAuthLoginAzureOutputWithContext(ctx context.Context) AuthLoginAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginAzureOutput)
}

type AuthLoginAzureOutput struct{ *pulumi.OutputState }

func (AuthLoginAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginAzure)(nil)).Elem()
}

func (o AuthLoginAzureOutput) ToAuthLoginAzureOutput() AuthLoginAzureOutput {
	return o
}

func (o AuthLoginAzureOutput) ToAuthLoginAzureOutputWithContext(ctx context.Context) AuthLoginAzureOutput {
	return o
}

// The identity's client ID.
func (o AuthLoginAzureOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// A signed JSON Web Token. If not specified on will be created automatically
func (o AuthLoginAzureOutput) Jwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.Jwt }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginAzureOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginAzureOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o AuthLoginAzureOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginAzure) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Name of the login role.
func (o AuthLoginAzureOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginAzure) string { return v.Role }).(pulumi.StringOutput)
}

// The scopes to include in the token request.
func (o AuthLoginAzureOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o AuthLoginAzureOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginAzure) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Provides the tenant ID to use in a multi-tenant authentication scenario.
func (o AuthLoginAzureOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginAzureOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o AuthLoginAzureOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.VmName }).(pulumi.StringPtrOutput)
}

// The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
func (o AuthLoginAzureOutput) VmssName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginAzure) *string { return v.VmssName }).(pulumi.StringPtrOutput)
}

type AuthLoginCert struct {
	// Path to a file containing the client certificate.
	CertFile string `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile string `pulumi:"keyFile"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// Name of the certificate's role
	Name *string `pulumi:"name"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginCertInput is an input type that accepts AuthLoginCertArgs and AuthLoginCertOutput values.
// You can construct a concrete instance of `AuthLoginCertInput` via:
//
//	AuthLoginCertArgs{...}
type AuthLoginCertInput interface {
	pulumi.Input

	ToAuthLoginCertOutput() AuthLoginCertOutput
	ToAuthLoginCertOutputWithContext(context.Context) AuthLoginCertOutput
}

type AuthLoginCertArgs struct {
	// Path to a file containing the client certificate.
	CertFile pulumi.StringInput `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile pulumi.StringInput `pulumi:"keyFile"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// Name of the certificate's role
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginCert)(nil)).Elem()
}

func (i AuthLoginCertArgs) ToAuthLoginCertOutput() AuthLoginCertOutput {
	return i.ToAuthLoginCertOutputWithContext(context.Background())
}

func (i AuthLoginCertArgs) ToAuthLoginCertOutputWithContext(ctx context.Context) AuthLoginCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginCertOutput)
}

type AuthLoginCertOutput struct{ *pulumi.OutputState }

func (AuthLoginCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginCert)(nil)).Elem()
}

func (o AuthLoginCertOutput) ToAuthLoginCertOutput() AuthLoginCertOutput {
	return o
}

func (o AuthLoginCertOutput) ToAuthLoginCertOutputWithContext(ctx context.Context) AuthLoginCertOutput {
	return o
}

// Path to a file containing the client certificate.
func (o AuthLoginCertOutput) CertFile() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginCert) string { return v.CertFile }).(pulumi.StringOutput)
}

// Path to a file containing the private key that the certificate was issued for.
func (o AuthLoginCertOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginCert) string { return v.KeyFile }).(pulumi.StringOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginCertOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginCert) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// Name of the certificate's role
func (o AuthLoginCertOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginCert) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginCertOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginCert) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginCertOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginCert) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginGcp struct {
	// Path to the Google Cloud credentials file.
	Credentials *string `pulumi:"credentials"`
	// A signed JSON Web Token.
	Jwt *string `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// IAM service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginGcpInput is an input type that accepts AuthLoginGcpArgs and AuthLoginGcpOutput values.
// You can construct a concrete instance of `AuthLoginGcpInput` via:
//
//	AuthLoginGcpArgs{...}
type AuthLoginGcpInput interface {
	pulumi.Input

	ToAuthLoginGcpOutput() AuthLoginGcpOutput
	ToAuthLoginGcpOutputWithContext(context.Context) AuthLoginGcpOutput
}

type AuthLoginGcpArgs struct {
	// Path to the Google Cloud credentials file.
	Credentials pulumi.StringPtrInput `pulumi:"credentials"`
	// A signed JSON Web Token.
	Jwt pulumi.StringPtrInput `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// IAM service account.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginGcp)(nil)).Elem()
}

func (i AuthLoginGcpArgs) ToAuthLoginGcpOutput() AuthLoginGcpOutput {
	return i.ToAuthLoginGcpOutputWithContext(context.Background())
}

func (i AuthLoginGcpArgs) ToAuthLoginGcpOutputWithContext(ctx context.Context) AuthLoginGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginGcpOutput)
}

type AuthLoginGcpOutput struct{ *pulumi.OutputState }

func (AuthLoginGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginGcp)(nil)).Elem()
}

func (o AuthLoginGcpOutput) ToAuthLoginGcpOutput() AuthLoginGcpOutput {
	return o
}

func (o AuthLoginGcpOutput) ToAuthLoginGcpOutputWithContext(ctx context.Context) AuthLoginGcpOutput {
	return o
}

// Path to the Google Cloud credentials file.
func (o AuthLoginGcpOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginGcp) *string { return v.Credentials }).(pulumi.StringPtrOutput)
}

// A signed JSON Web Token.
func (o AuthLoginGcpOutput) Jwt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginGcp) *string { return v.Jwt }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginGcpOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginGcp) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginGcpOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginGcp) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o AuthLoginGcpOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginGcp) string { return v.Role }).(pulumi.StringOutput)
}

// IAM service account.
func (o AuthLoginGcpOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginGcp) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginGcpOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginGcp) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginJwt struct {
	// A signed JSON Web Token.
	Jwt string `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginJwtInput is an input type that accepts AuthLoginJwtArgs and AuthLoginJwtOutput values.
// You can construct a concrete instance of `AuthLoginJwtInput` via:
//
//	AuthLoginJwtArgs{...}
type AuthLoginJwtInput interface {
	pulumi.Input

	ToAuthLoginJwtOutput() AuthLoginJwtOutput
	ToAuthLoginJwtOutputWithContext(context.Context) AuthLoginJwtOutput
}

type AuthLoginJwtArgs struct {
	// A signed JSON Web Token.
	Jwt pulumi.StringInput `pulumi:"jwt"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginJwt)(nil)).Elem()
}

func (i AuthLoginJwtArgs) ToAuthLoginJwtOutput() AuthLoginJwtOutput {
	return i.ToAuthLoginJwtOutputWithContext(context.Background())
}

func (i AuthLoginJwtArgs) ToAuthLoginJwtOutputWithContext(ctx context.Context) AuthLoginJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginJwtOutput)
}

type AuthLoginJwtOutput struct{ *pulumi.OutputState }

func (AuthLoginJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginJwt)(nil)).Elem()
}

func (o AuthLoginJwtOutput) ToAuthLoginJwtOutput() AuthLoginJwtOutput {
	return o
}

func (o AuthLoginJwtOutput) ToAuthLoginJwtOutputWithContext(ctx context.Context) AuthLoginJwtOutput {
	return o
}

// A signed JSON Web Token.
func (o AuthLoginJwtOutput) Jwt() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginJwt) string { return v.Jwt }).(pulumi.StringOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginJwtOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginJwt) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginJwtOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginJwt) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o AuthLoginJwtOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginJwt) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginJwtOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginJwt) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginKerberos struct {
	// Disable the Kerberos FAST negotiation.
	DisableFastNegotiation *bool `pulumi:"disableFastNegotiation"`
	// The Kerberos keytab file containing the entry of the login entity.
	KeytabPath *string `pulumi:"keytabPath"`
	// A valid Kerberos configuration file e.g. /etc/krb5.conf.
	Krb5confPath *string `pulumi:"krb5confPath"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The Kerberos server's authoritative authentication domain
	Realm *string `pulumi:"realm"`
	// Strip the host from the username found in the keytab.
	RemoveInstanceName *bool `pulumi:"removeInstanceName"`
	// The service principle name.
	Service *string `pulumi:"service"`
	// Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
	Token *string `pulumi:"token"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// The username to login into Kerberos with.
	Username *string `pulumi:"username"`
}

// AuthLoginKerberosInput is an input type that accepts AuthLoginKerberosArgs and AuthLoginKerberosOutput values.
// You can construct a concrete instance of `AuthLoginKerberosInput` via:
//
//	AuthLoginKerberosArgs{...}
type AuthLoginKerberosInput interface {
	pulumi.Input

	ToAuthLoginKerberosOutput() AuthLoginKerberosOutput
	ToAuthLoginKerberosOutputWithContext(context.Context) AuthLoginKerberosOutput
}

type AuthLoginKerberosArgs struct {
	// Disable the Kerberos FAST negotiation.
	DisableFastNegotiation pulumi.BoolPtrInput `pulumi:"disableFastNegotiation"`
	// The Kerberos keytab file containing the entry of the login entity.
	KeytabPath pulumi.StringPtrInput `pulumi:"keytabPath"`
	// A valid Kerberos configuration file e.g. /etc/krb5.conf.
	Krb5confPath pulumi.StringPtrInput `pulumi:"krb5confPath"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The Kerberos server's authoritative authentication domain
	Realm pulumi.StringPtrInput `pulumi:"realm"`
	// Strip the host from the username found in the keytab.
	RemoveInstanceName pulumi.BoolPtrInput `pulumi:"removeInstanceName"`
	// The service principle name.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// The username to login into Kerberos with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (AuthLoginKerberosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginKerberos)(nil)).Elem()
}

func (i AuthLoginKerberosArgs) ToAuthLoginKerberosOutput() AuthLoginKerberosOutput {
	return i.ToAuthLoginKerberosOutputWithContext(context.Background())
}

func (i AuthLoginKerberosArgs) ToAuthLoginKerberosOutputWithContext(ctx context.Context) AuthLoginKerberosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginKerberosOutput)
}

type AuthLoginKerberosOutput struct{ *pulumi.OutputState }

func (AuthLoginKerberosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginKerberos)(nil)).Elem()
}

func (o AuthLoginKerberosOutput) ToAuthLoginKerberosOutput() AuthLoginKerberosOutput {
	return o
}

func (o AuthLoginKerberosOutput) ToAuthLoginKerberosOutputWithContext(ctx context.Context) AuthLoginKerberosOutput {
	return o
}

// Disable the Kerberos FAST negotiation.
func (o AuthLoginKerberosOutput) DisableFastNegotiation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *bool { return v.DisableFastNegotiation }).(pulumi.BoolPtrOutput)
}

// The Kerberos keytab file containing the entry of the login entity.
func (o AuthLoginKerberosOutput) KeytabPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.KeytabPath }).(pulumi.StringPtrOutput)
}

// A valid Kerberos configuration file e.g. /etc/krb5.conf.
func (o AuthLoginKerberosOutput) Krb5confPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.Krb5confPath }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginKerberosOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginKerberosOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The Kerberos server's authoritative authentication domain
func (o AuthLoginKerberosOutput) Realm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.Realm }).(pulumi.StringPtrOutput)
}

// Strip the host from the username found in the keytab.
func (o AuthLoginKerberosOutput) RemoveInstanceName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *bool { return v.RemoveInstanceName }).(pulumi.BoolPtrOutput)
}

// The service principle name.
func (o AuthLoginKerberosOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
func (o AuthLoginKerberosOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginKerberosOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// The username to login into Kerberos with.
func (o AuthLoginKerberosOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginKerberos) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type AuthLoginOci struct {
	// Authentication type to use when getting OCI credentials.
	AuthType string `pulumi:"authType"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginOciInput is an input type that accepts AuthLoginOciArgs and AuthLoginOciOutput values.
// You can construct a concrete instance of `AuthLoginOciInput` via:
//
//	AuthLoginOciArgs{...}
type AuthLoginOciInput interface {
	pulumi.Input

	ToAuthLoginOciOutput() AuthLoginOciOutput
	ToAuthLoginOciOutputWithContext(context.Context) AuthLoginOciOutput
}

type AuthLoginOciArgs struct {
	// Authentication type to use when getting OCI credentials.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginOciArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginOci)(nil)).Elem()
}

func (i AuthLoginOciArgs) ToAuthLoginOciOutput() AuthLoginOciOutput {
	return i.ToAuthLoginOciOutputWithContext(context.Background())
}

func (i AuthLoginOciArgs) ToAuthLoginOciOutputWithContext(ctx context.Context) AuthLoginOciOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginOciOutput)
}

type AuthLoginOciOutput struct{ *pulumi.OutputState }

func (AuthLoginOciOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginOci)(nil)).Elem()
}

func (o AuthLoginOciOutput) ToAuthLoginOciOutput() AuthLoginOciOutput {
	return o
}

func (o AuthLoginOciOutput) ToAuthLoginOciOutputWithContext(ctx context.Context) AuthLoginOciOutput {
	return o
}

// Authentication type to use when getting OCI credentials.
func (o AuthLoginOciOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginOci) string { return v.AuthType }).(pulumi.StringOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginOciOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginOci) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginOciOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginOci) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o AuthLoginOciOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginOci) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginOciOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginOci) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginOidc struct {
	// The callback address. Must be a valid URI without the path.
	CallbackAddress *string `pulumi:"callbackAddress"`
	// The callback listener's address. Must be a valid URI without the path.
	CallbackListenerAddress *string `pulumi:"callbackListenerAddress"`
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Name of the login role.
	Role string `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginOidcInput is an input type that accepts AuthLoginOidcArgs and AuthLoginOidcOutput values.
// You can construct a concrete instance of `AuthLoginOidcInput` via:
//
//	AuthLoginOidcArgs{...}
type AuthLoginOidcInput interface {
	pulumi.Input

	ToAuthLoginOidcOutput() AuthLoginOidcOutput
	ToAuthLoginOidcOutputWithContext(context.Context) AuthLoginOidcOutput
}

type AuthLoginOidcArgs struct {
	// The callback address. Must be a valid URI without the path.
	CallbackAddress pulumi.StringPtrInput `pulumi:"callbackAddress"`
	// The callback listener's address. Must be a valid URI without the path.
	CallbackListenerAddress pulumi.StringPtrInput `pulumi:"callbackListenerAddress"`
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Name of the login role.
	Role pulumi.StringInput `pulumi:"role"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginOidc)(nil)).Elem()
}

func (i AuthLoginOidcArgs) ToAuthLoginOidcOutput() AuthLoginOidcOutput {
	return i.ToAuthLoginOidcOutputWithContext(context.Background())
}

func (i AuthLoginOidcArgs) ToAuthLoginOidcOutputWithContext(ctx context.Context) AuthLoginOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginOidcOutput)
}

type AuthLoginOidcOutput struct{ *pulumi.OutputState }

func (AuthLoginOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginOidc)(nil)).Elem()
}

func (o AuthLoginOidcOutput) ToAuthLoginOidcOutput() AuthLoginOidcOutput {
	return o
}

func (o AuthLoginOidcOutput) ToAuthLoginOidcOutputWithContext(ctx context.Context) AuthLoginOidcOutput {
	return o
}

// The callback address. Must be a valid URI without the path.
func (o AuthLoginOidcOutput) CallbackAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginOidc) *string { return v.CallbackAddress }).(pulumi.StringPtrOutput)
}

// The callback listener's address. Must be a valid URI without the path.
func (o AuthLoginOidcOutput) CallbackListenerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginOidc) *string { return v.CallbackListenerAddress }).(pulumi.StringPtrOutput)
}

// The path where the authentication engine is mounted.
func (o AuthLoginOidcOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginOidc) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginOidcOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginOidc) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the login role.
func (o AuthLoginOidcOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginOidc) string { return v.Role }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginOidcOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginOidc) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginRadius struct {
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// The Radius password for username.
	Password string `pulumi:"password"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// The Radius username.
	Username string `pulumi:"username"`
}

// AuthLoginRadiusInput is an input type that accepts AuthLoginRadiusArgs and AuthLoginRadiusOutput values.
// You can construct a concrete instance of `AuthLoginRadiusInput` via:
//
//	AuthLoginRadiusArgs{...}
type AuthLoginRadiusInput interface {
	pulumi.Input

	ToAuthLoginRadiusOutput() AuthLoginRadiusOutput
	ToAuthLoginRadiusOutputWithContext(context.Context) AuthLoginRadiusOutput
}

type AuthLoginRadiusArgs struct {
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The Radius password for username.
	Password pulumi.StringInput `pulumi:"password"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// The Radius username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (AuthLoginRadiusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginRadius)(nil)).Elem()
}

func (i AuthLoginRadiusArgs) ToAuthLoginRadiusOutput() AuthLoginRadiusOutput {
	return i.ToAuthLoginRadiusOutputWithContext(context.Background())
}

func (i AuthLoginRadiusArgs) ToAuthLoginRadiusOutputWithContext(ctx context.Context) AuthLoginRadiusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginRadiusOutput)
}

type AuthLoginRadiusOutput struct{ *pulumi.OutputState }

func (AuthLoginRadiusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginRadius)(nil)).Elem()
}

func (o AuthLoginRadiusOutput) ToAuthLoginRadiusOutput() AuthLoginRadiusOutput {
	return o
}

func (o AuthLoginRadiusOutput) ToAuthLoginRadiusOutputWithContext(ctx context.Context) AuthLoginRadiusOutput {
	return o
}

// The path where the authentication engine is mounted.
func (o AuthLoginRadiusOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginRadius) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginRadiusOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginRadius) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The Radius password for username.
func (o AuthLoginRadiusOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginRadius) string { return v.Password }).(pulumi.StringOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginRadiusOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginRadius) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// The Radius username.
func (o AuthLoginRadiusOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginRadius) string { return v.Username }).(pulumi.StringOutput)
}

type AuthLoginTokenFile struct {
	// The name of a file containing a single line that is a valid Vault token
	Filename string `pulumi:"filename"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
}

// AuthLoginTokenFileInput is an input type that accepts AuthLoginTokenFileArgs and AuthLoginTokenFileOutput values.
// You can construct a concrete instance of `AuthLoginTokenFileInput` via:
//
//	AuthLoginTokenFileArgs{...}
type AuthLoginTokenFileInput interface {
	pulumi.Input

	ToAuthLoginTokenFileOutput() AuthLoginTokenFileOutput
	ToAuthLoginTokenFileOutputWithContext(context.Context) AuthLoginTokenFileOutput
}

type AuthLoginTokenFileArgs struct {
	// The name of a file containing a single line that is a valid Vault token
	Filename pulumi.StringInput `pulumi:"filename"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
}

func (AuthLoginTokenFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginTokenFile)(nil)).Elem()
}

func (i AuthLoginTokenFileArgs) ToAuthLoginTokenFileOutput() AuthLoginTokenFileOutput {
	return i.ToAuthLoginTokenFileOutputWithContext(context.Background())
}

func (i AuthLoginTokenFileArgs) ToAuthLoginTokenFileOutputWithContext(ctx context.Context) AuthLoginTokenFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginTokenFileOutput)
}

type AuthLoginTokenFileOutput struct{ *pulumi.OutputState }

func (AuthLoginTokenFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginTokenFile)(nil)).Elem()
}

func (o AuthLoginTokenFileOutput) ToAuthLoginTokenFileOutput() AuthLoginTokenFileOutput {
	return o
}

func (o AuthLoginTokenFileOutput) ToAuthLoginTokenFileOutputWithContext(ctx context.Context) AuthLoginTokenFileOutput {
	return o
}

// The name of a file containing a single line that is a valid Vault token
func (o AuthLoginTokenFileOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginTokenFile) string { return v.Filename }).(pulumi.StringOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginTokenFileOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginTokenFile) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginTokenFileOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginTokenFile) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

type AuthLoginUserpass struct {
	// The path where the authentication engine is mounted.
	Mount *string `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace *string `pulumi:"namespace"`
	// Login with password
	Password *string `pulumi:"password"`
	// Login with password from a file
	PasswordFile *string `pulumi:"passwordFile"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace *bool `pulumi:"useRootNamespace"`
	// Login with username
	Username string `pulumi:"username"`
}

// AuthLoginUserpassInput is an input type that accepts AuthLoginUserpassArgs and AuthLoginUserpassOutput values.
// You can construct a concrete instance of `AuthLoginUserpassInput` via:
//
//	AuthLoginUserpassArgs{...}
type AuthLoginUserpassInput interface {
	pulumi.Input

	ToAuthLoginUserpassOutput() AuthLoginUserpassOutput
	ToAuthLoginUserpassOutputWithContext(context.Context) AuthLoginUserpassOutput
}

type AuthLoginUserpassArgs struct {
	// The path where the authentication engine is mounted.
	Mount pulumi.StringPtrInput `pulumi:"mount"`
	// The authentication engine's namespace. Conflicts with use_root_namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Login with password
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Login with password from a file
	PasswordFile pulumi.StringPtrInput `pulumi:"passwordFile"`
	// Authenticate to the root Vault namespace. Conflicts with namespace
	UseRootNamespace pulumi.BoolPtrInput `pulumi:"useRootNamespace"`
	// Login with username
	Username pulumi.StringInput `pulumi:"username"`
}

func (AuthLoginUserpassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginUserpass)(nil)).Elem()
}

func (i AuthLoginUserpassArgs) ToAuthLoginUserpassOutput() AuthLoginUserpassOutput {
	return i.ToAuthLoginUserpassOutputWithContext(context.Background())
}

func (i AuthLoginUserpassArgs) ToAuthLoginUserpassOutputWithContext(ctx context.Context) AuthLoginUserpassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthLoginUserpassOutput)
}

type AuthLoginUserpassOutput struct{ *pulumi.OutputState }

func (AuthLoginUserpassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthLoginUserpass)(nil)).Elem()
}

func (o AuthLoginUserpassOutput) ToAuthLoginUserpassOutput() AuthLoginUserpassOutput {
	return o
}

func (o AuthLoginUserpassOutput) ToAuthLoginUserpassOutputWithContext(ctx context.Context) AuthLoginUserpassOutput {
	return o
}

// The path where the authentication engine is mounted.
func (o AuthLoginUserpassOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginUserpass) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

// The authentication engine's namespace. Conflicts with use_root_namespace
func (o AuthLoginUserpassOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginUserpass) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Login with password
func (o AuthLoginUserpassOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginUserpass) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Login with password from a file
func (o AuthLoginUserpassOutput) PasswordFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthLoginUserpass) *string { return v.PasswordFile }).(pulumi.StringPtrOutput)
}

// Authenticate to the root Vault namespace. Conflicts with namespace
func (o AuthLoginUserpassOutput) UseRootNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthLoginUserpass) *bool { return v.UseRootNamespace }).(pulumi.BoolPtrOutput)
}

// Login with username
func (o AuthLoginUserpassOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v AuthLoginUserpass) string { return v.Username }).(pulumi.StringOutput)
}

type ClientAuth struct {
	// Path to a file containing the client certificate.
	CertFile string `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile string `pulumi:"keyFile"`
}

// ClientAuthInput is an input type that accepts ClientAuthArgs and ClientAuthOutput values.
// You can construct a concrete instance of `ClientAuthInput` via:
//
//	ClientAuthArgs{...}
type ClientAuthInput interface {
	pulumi.Input

	ToClientAuthOutput() ClientAuthOutput
	ToClientAuthOutputWithContext(context.Context) ClientAuthOutput
}

type ClientAuthArgs struct {
	// Path to a file containing the client certificate.
	CertFile pulumi.StringInput `pulumi:"certFile"`
	// Path to a file containing the private key that the certificate was issued for.
	KeyFile pulumi.StringInput `pulumi:"keyFile"`
}

func (ClientAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientAuth)(nil)).Elem()
}

func (i ClientAuthArgs) ToClientAuthOutput() ClientAuthOutput {
	return i.ToClientAuthOutputWithContext(context.Background())
}

func (i ClientAuthArgs) ToClientAuthOutputWithContext(ctx context.Context) ClientAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAuthOutput)
}

type ClientAuthOutput struct{ *pulumi.OutputState }

func (ClientAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientAuth)(nil)).Elem()
}

func (o ClientAuthOutput) ToClientAuthOutput() ClientAuthOutput {
	return o
}

func (o ClientAuthOutput) ToClientAuthOutputWithContext(ctx context.Context) ClientAuthOutput {
	return o
}

// Path to a file containing the client certificate.
func (o ClientAuthOutput) CertFile() pulumi.StringOutput {
	return o.ApplyT(func(v ClientAuth) string { return v.CertFile }).(pulumi.StringOutput)
}

// Path to a file containing the private key that the certificate was issued for.
func (o ClientAuthOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v ClientAuth) string { return v.KeyFile }).(pulumi.StringOutput)
}

type Headers struct {
	// The header name
	Name string `pulumi:"name"`
	// The header value
	Value string `pulumi:"value"`
}

// HeadersInput is an input type that accepts HeadersArgs and HeadersOutput values.
// You can construct a concrete instance of `HeadersInput` via:
//
//	HeadersArgs{...}
type HeadersInput interface {
	pulumi.Input

	ToHeadersOutput() HeadersOutput
	ToHeadersOutputWithContext(context.Context) HeadersOutput
}

type HeadersArgs struct {
	// The header name
	Name pulumi.StringInput `pulumi:"name"`
	// The header value
	Value pulumi.StringInput `pulumi:"value"`
}

func (HeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Headers)(nil)).Elem()
}

func (i HeadersArgs) ToHeadersOutput() HeadersOutput {
	return i.ToHeadersOutputWithContext(context.Background())
}

func (i HeadersArgs) ToHeadersOutputWithContext(ctx context.Context) HeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeadersOutput)
}

// HeadersArrayInput is an input type that accepts HeadersArray and HeadersArrayOutput values.
// You can construct a concrete instance of `HeadersArrayInput` via:
//
//	HeadersArray{ HeadersArgs{...} }
type HeadersArrayInput interface {
	pulumi.Input

	ToHeadersArrayOutput() HeadersArrayOutput
	ToHeadersArrayOutputWithContext(context.Context) HeadersArrayOutput
}

type HeadersArray []HeadersInput

func (HeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Headers)(nil)).Elem()
}

func (i HeadersArray) ToHeadersArrayOutput() HeadersArrayOutput {
	return i.ToHeadersArrayOutputWithContext(context.Background())
}

func (i HeadersArray) ToHeadersArrayOutputWithContext(ctx context.Context) HeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeadersArrayOutput)
}

type HeadersOutput struct{ *pulumi.OutputState }

func (HeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Headers)(nil)).Elem()
}

func (o HeadersOutput) ToHeadersOutput() HeadersOutput {
	return o
}

func (o HeadersOutput) ToHeadersOutputWithContext(ctx context.Context) HeadersOutput {
	return o
}

// The header name
func (o HeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Headers) string { return v.Name }).(pulumi.StringOutput)
}

// The header value
func (o HeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Headers) string { return v.Value }).(pulumi.StringOutput)
}

type HeadersArrayOutput struct{ *pulumi.OutputState }

func (HeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Headers)(nil)).Elem()
}

func (o HeadersArrayOutput) ToHeadersArrayOutput() HeadersArrayOutput {
	return o
}

func (o HeadersArrayOutput) ToHeadersArrayOutputWithContext(ctx context.Context) HeadersArrayOutput {
	return o
}

func (o HeadersArrayOutput) Index(i pulumi.IntInput) HeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Headers {
		return vs[0].([]Headers)[vs[1].(int)]
	}).(HeadersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginInput)(nil)).Elem(), AuthLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginAwsInput)(nil)).Elem(), AuthLoginAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginAzureInput)(nil)).Elem(), AuthLoginAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginCertInput)(nil)).Elem(), AuthLoginCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginGcpInput)(nil)).Elem(), AuthLoginGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginJwtInput)(nil)).Elem(), AuthLoginJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginKerberosInput)(nil)).Elem(), AuthLoginKerberosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginOciInput)(nil)).Elem(), AuthLoginOciArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginOidcInput)(nil)).Elem(), AuthLoginOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginRadiusInput)(nil)).Elem(), AuthLoginRadiusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginTokenFileInput)(nil)).Elem(), AuthLoginTokenFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthLoginUserpassInput)(nil)).Elem(), AuthLoginUserpassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientAuthInput)(nil)).Elem(), ClientAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeadersInput)(nil)).Elem(), HeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeadersArrayInput)(nil)).Elem(), HeadersArray{})
	pulumi.RegisterOutputType(AuthLoginOutput{})
	pulumi.RegisterOutputType(AuthLoginAwsOutput{})
	pulumi.RegisterOutputType(AuthLoginAzureOutput{})
	pulumi.RegisterOutputType(AuthLoginCertOutput{})
	pulumi.RegisterOutputType(AuthLoginGcpOutput{})
	pulumi.RegisterOutputType(AuthLoginJwtOutput{})
	pulumi.RegisterOutputType(AuthLoginKerberosOutput{})
	pulumi.RegisterOutputType(AuthLoginOciOutput{})
	pulumi.RegisterOutputType(AuthLoginOidcOutput{})
	pulumi.RegisterOutputType(AuthLoginRadiusOutput{})
	pulumi.RegisterOutputType(AuthLoginTokenFileOutput{})
	pulumi.RegisterOutputType(AuthLoginUserpassOutput{})
	pulumi.RegisterOutputType(ClientAuthOutput{})
	pulumi.RegisterOutputType(HeadersOutput{})
	pulumi.RegisterOutputType(HeadersArrayOutput{})
}
