// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secrets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/secrets"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secrets.NewSyncGcpDestination(ctx, "gcp", &secrets.SyncGcpDestinationArgs{
//				Credentials:        readFileOrPanic(_var.Credentials_file),
//				SecretNameTemplate: pulumi.String("vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"),
//				CustomTags: pulumi.Map{
//					"foo": pulumi.Any("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// GCP Secrets sync destinations can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import vault:secrets/syncGcpDestination:SyncGcpDestination gcp gcp-dest
// ```
type SyncGcpDestination struct {
	pulumi.CustomResourceState

	// JSON-encoded credentials to use to connect to GCP.
	// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
	// variable.
	Credentials pulumi.StringPtrOutput `pulumi:"credentials"`
	// Custom tags to set on the secret managed at the destination.
	CustomTags pulumi.MapOutput `pulumi:"customTags"`
	// Unique name of the GCP destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate pulumi.StringOutput `pulumi:"secretNameTemplate"`
	// The type of the secrets destination (`gcp-sm`).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSyncGcpDestination registers a new resource with the given unique name, arguments, and options.
func NewSyncGcpDestination(ctx *pulumi.Context,
	name string, args *SyncGcpDestinationArgs, opts ...pulumi.ResourceOption) (*SyncGcpDestination, error) {
	if args == nil {
		args = &SyncGcpDestinationArgs{}
	}

	if args.Credentials != nil {
		args.Credentials = pulumi.ToSecret(args.Credentials).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"credentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyncGcpDestination
	err := ctx.RegisterResource("vault:secrets/syncGcpDestination:SyncGcpDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncGcpDestination gets an existing SyncGcpDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncGcpDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncGcpDestinationState, opts ...pulumi.ResourceOption) (*SyncGcpDestination, error) {
	var resource SyncGcpDestination
	err := ctx.ReadResource("vault:secrets/syncGcpDestination:SyncGcpDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncGcpDestination resources.
type syncGcpDestinationState struct {
	// JSON-encoded credentials to use to connect to GCP.
	// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
	// variable.
	Credentials *string `pulumi:"credentials"`
	// Custom tags to set on the secret managed at the destination.
	CustomTags map[string]interface{} `pulumi:"customTags"`
	// Unique name of the GCP destination.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	Namespace *string `pulumi:"namespace"`
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate *string `pulumi:"secretNameTemplate"`
	// The type of the secrets destination (`gcp-sm`).
	Type *string `pulumi:"type"`
}

type SyncGcpDestinationState struct {
	// JSON-encoded credentials to use to connect to GCP.
	// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
	// variable.
	Credentials pulumi.StringPtrInput
	// Custom tags to set on the secret managed at the destination.
	CustomTags pulumi.MapInput
	// Unique name of the GCP destination.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	Namespace pulumi.StringPtrInput
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate pulumi.StringPtrInput
	// The type of the secrets destination (`gcp-sm`).
	Type pulumi.StringPtrInput
}

func (SyncGcpDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncGcpDestinationState)(nil)).Elem()
}

type syncGcpDestinationArgs struct {
	// JSON-encoded credentials to use to connect to GCP.
	// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
	// variable.
	Credentials *string `pulumi:"credentials"`
	// Custom tags to set on the secret managed at the destination.
	CustomTags map[string]interface{} `pulumi:"customTags"`
	// Unique name of the GCP destination.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	Namespace *string `pulumi:"namespace"`
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate *string `pulumi:"secretNameTemplate"`
}

// The set of arguments for constructing a SyncGcpDestination resource.
type SyncGcpDestinationArgs struct {
	// JSON-encoded credentials to use to connect to GCP.
	// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
	// variable.
	Credentials pulumi.StringPtrInput
	// Custom tags to set on the secret managed at the destination.
	CustomTags pulumi.MapInput
	// Unique name of the GCP destination.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	Namespace pulumi.StringPtrInput
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate pulumi.StringPtrInput
}

func (SyncGcpDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncGcpDestinationArgs)(nil)).Elem()
}

type SyncGcpDestinationInput interface {
	pulumi.Input

	ToSyncGcpDestinationOutput() SyncGcpDestinationOutput
	ToSyncGcpDestinationOutputWithContext(ctx context.Context) SyncGcpDestinationOutput
}

func (*SyncGcpDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGcpDestination)(nil)).Elem()
}

func (i *SyncGcpDestination) ToSyncGcpDestinationOutput() SyncGcpDestinationOutput {
	return i.ToSyncGcpDestinationOutputWithContext(context.Background())
}

func (i *SyncGcpDestination) ToSyncGcpDestinationOutputWithContext(ctx context.Context) SyncGcpDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGcpDestinationOutput)
}

// SyncGcpDestinationArrayInput is an input type that accepts SyncGcpDestinationArray and SyncGcpDestinationArrayOutput values.
// You can construct a concrete instance of `SyncGcpDestinationArrayInput` via:
//
//	SyncGcpDestinationArray{ SyncGcpDestinationArgs{...} }
type SyncGcpDestinationArrayInput interface {
	pulumi.Input

	ToSyncGcpDestinationArrayOutput() SyncGcpDestinationArrayOutput
	ToSyncGcpDestinationArrayOutputWithContext(context.Context) SyncGcpDestinationArrayOutput
}

type SyncGcpDestinationArray []SyncGcpDestinationInput

func (SyncGcpDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncGcpDestination)(nil)).Elem()
}

func (i SyncGcpDestinationArray) ToSyncGcpDestinationArrayOutput() SyncGcpDestinationArrayOutput {
	return i.ToSyncGcpDestinationArrayOutputWithContext(context.Background())
}

func (i SyncGcpDestinationArray) ToSyncGcpDestinationArrayOutputWithContext(ctx context.Context) SyncGcpDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGcpDestinationArrayOutput)
}

// SyncGcpDestinationMapInput is an input type that accepts SyncGcpDestinationMap and SyncGcpDestinationMapOutput values.
// You can construct a concrete instance of `SyncGcpDestinationMapInput` via:
//
//	SyncGcpDestinationMap{ "key": SyncGcpDestinationArgs{...} }
type SyncGcpDestinationMapInput interface {
	pulumi.Input

	ToSyncGcpDestinationMapOutput() SyncGcpDestinationMapOutput
	ToSyncGcpDestinationMapOutputWithContext(context.Context) SyncGcpDestinationMapOutput
}

type SyncGcpDestinationMap map[string]SyncGcpDestinationInput

func (SyncGcpDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncGcpDestination)(nil)).Elem()
}

func (i SyncGcpDestinationMap) ToSyncGcpDestinationMapOutput() SyncGcpDestinationMapOutput {
	return i.ToSyncGcpDestinationMapOutputWithContext(context.Background())
}

func (i SyncGcpDestinationMap) ToSyncGcpDestinationMapOutputWithContext(ctx context.Context) SyncGcpDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGcpDestinationMapOutput)
}

type SyncGcpDestinationOutput struct{ *pulumi.OutputState }

func (SyncGcpDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGcpDestination)(nil)).Elem()
}

func (o SyncGcpDestinationOutput) ToSyncGcpDestinationOutput() SyncGcpDestinationOutput {
	return o
}

func (o SyncGcpDestinationOutput) ToSyncGcpDestinationOutputWithContext(ctx context.Context) SyncGcpDestinationOutput {
	return o
}

// JSON-encoded credentials to use to connect to GCP.
// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
// variable.
func (o SyncGcpDestinationOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGcpDestination) pulumi.StringPtrOutput { return v.Credentials }).(pulumi.StringPtrOutput)
}

// Custom tags to set on the secret managed at the destination.
func (o SyncGcpDestinationOutput) CustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v *SyncGcpDestination) pulumi.MapOutput { return v.CustomTags }).(pulumi.MapOutput)
}

// Unique name of the GCP destination.
func (o SyncGcpDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncGcpDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
func (o SyncGcpDestinationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGcpDestination) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Template describing how to generate external secret names.
// Supports a subset of the Go Template syntax.
func (o SyncGcpDestinationOutput) SecretNameTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncGcpDestination) pulumi.StringOutput { return v.SecretNameTemplate }).(pulumi.StringOutput)
}

// The type of the secrets destination (`gcp-sm`).
func (o SyncGcpDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncGcpDestination) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SyncGcpDestinationArrayOutput struct{ *pulumi.OutputState }

func (SyncGcpDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncGcpDestination)(nil)).Elem()
}

func (o SyncGcpDestinationArrayOutput) ToSyncGcpDestinationArrayOutput() SyncGcpDestinationArrayOutput {
	return o
}

func (o SyncGcpDestinationArrayOutput) ToSyncGcpDestinationArrayOutputWithContext(ctx context.Context) SyncGcpDestinationArrayOutput {
	return o
}

func (o SyncGcpDestinationArrayOutput) Index(i pulumi.IntInput) SyncGcpDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncGcpDestination {
		return vs[0].([]*SyncGcpDestination)[vs[1].(int)]
	}).(SyncGcpDestinationOutput)
}

type SyncGcpDestinationMapOutput struct{ *pulumi.OutputState }

func (SyncGcpDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncGcpDestination)(nil)).Elem()
}

func (o SyncGcpDestinationMapOutput) ToSyncGcpDestinationMapOutput() SyncGcpDestinationMapOutput {
	return o
}

func (o SyncGcpDestinationMapOutput) ToSyncGcpDestinationMapOutputWithContext(ctx context.Context) SyncGcpDestinationMapOutput {
	return o
}

func (o SyncGcpDestinationMapOutput) MapIndex(k pulumi.StringInput) SyncGcpDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncGcpDestination {
		return vs[0].(map[string]*SyncGcpDestination)[vs[1].(string)]
	}).(SyncGcpDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncGcpDestinationInput)(nil)).Elem(), &SyncGcpDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncGcpDestinationArrayInput)(nil)).Elem(), SyncGcpDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncGcpDestinationMapInput)(nil)).Elem(), SyncGcpDestinationMap{})
	pulumi.RegisterOutputType(SyncGcpDestinationOutput{})
	pulumi.RegisterOutputType(SyncGcpDestinationArrayOutput{})
	pulumi.RegisterOutputType(SyncGcpDestinationMapOutput{})
}
