// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secrets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/secrets"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := secrets.NewSyncGhDestination(ctx, "gh", &secrets.SyncGhDestinationArgs{
//				AccessToken:        pulumi.Any(_var.Access_token),
//				RepositoryOwner:    pulumi.Any(_var.Repo_owner),
//				RepositoryName:     pulumi.String("repo-name-example"),
//				SecretNameTemplate: pulumi.String("vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// GitHub Secrets sync destinations can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import vault:secrets/syncGhDestination:SyncGhDestination gh gh-dest
// ```
type SyncGhDestination struct {
	pulumi.CustomResourceState

	// Fine-grained or personal access token.
	// Can be omitted and directly provided to Vault using the `GITHUB_ACCESS_TOKEN` environment
	// variable.
	AccessToken pulumi.StringPtrOutput `pulumi:"accessToken"`
	// The user-defined name of the GitHub App configuration. This is a reference to the name used\
	// on the new endpoint when configuring the GitHub app on the Vault Server. Can be modified.
	// Takes precedence over the `accessToken` field.
	AppName pulumi.StringPtrOutput `pulumi:"appName"`
	// The ID of the installation generated by GitHub when the app referenced by the `appName`
	// was installed in the user’s GitHub account. Can be modified. Necessary if the `appName` field is also provided.
	InstallationId pulumi.IntPtrOutput `pulumi:"installationId"`
	// Unique name of the GitHub destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Name of the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_NAME` environment
	// variable.
	RepositoryName pulumi.StringPtrOutput `pulumi:"repositoryName"`
	// GitHub organization or username that owns the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_OWNER` environment
	// variable.
	RepositoryOwner pulumi.StringPtrOutput `pulumi:"repositoryOwner"`
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate pulumi.StringOutput `pulumi:"secretNameTemplate"`
	// The type of the secrets destination (`gh`).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSyncGhDestination registers a new resource with the given unique name, arguments, and options.
func NewSyncGhDestination(ctx *pulumi.Context,
	name string, args *SyncGhDestinationArgs, opts ...pulumi.ResourceOption) (*SyncGhDestination, error) {
	if args == nil {
		args = &SyncGhDestinationArgs{}
	}

	if args.AccessToken != nil {
		args.AccessToken = pulumi.ToSecret(args.AccessToken).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyncGhDestination
	err := ctx.RegisterResource("vault:secrets/syncGhDestination:SyncGhDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncGhDestination gets an existing SyncGhDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncGhDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncGhDestinationState, opts ...pulumi.ResourceOption) (*SyncGhDestination, error) {
	var resource SyncGhDestination
	err := ctx.ReadResource("vault:secrets/syncGhDestination:SyncGhDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncGhDestination resources.
type syncGhDestinationState struct {
	// Fine-grained or personal access token.
	// Can be omitted and directly provided to Vault using the `GITHUB_ACCESS_TOKEN` environment
	// variable.
	AccessToken *string `pulumi:"accessToken"`
	// The user-defined name of the GitHub App configuration. This is a reference to the name used\
	// on the new endpoint when configuring the GitHub app on the Vault Server. Can be modified.
	// Takes precedence over the `accessToken` field.
	AppName *string `pulumi:"appName"`
	// The ID of the installation generated by GitHub when the app referenced by the `appName`
	// was installed in the user’s GitHub account. Can be modified. Necessary if the `appName` field is also provided.
	InstallationId *int `pulumi:"installationId"`
	// Unique name of the GitHub destination.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	Namespace *string `pulumi:"namespace"`
	// Name of the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_NAME` environment
	// variable.
	RepositoryName *string `pulumi:"repositoryName"`
	// GitHub organization or username that owns the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_OWNER` environment
	// variable.
	RepositoryOwner *string `pulumi:"repositoryOwner"`
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate *string `pulumi:"secretNameTemplate"`
	// The type of the secrets destination (`gh`).
	Type *string `pulumi:"type"`
}

type SyncGhDestinationState struct {
	// Fine-grained or personal access token.
	// Can be omitted and directly provided to Vault using the `GITHUB_ACCESS_TOKEN` environment
	// variable.
	AccessToken pulumi.StringPtrInput
	// The user-defined name of the GitHub App configuration. This is a reference to the name used\
	// on the new endpoint when configuring the GitHub app on the Vault Server. Can be modified.
	// Takes precedence over the `accessToken` field.
	AppName pulumi.StringPtrInput
	// The ID of the installation generated by GitHub when the app referenced by the `appName`
	// was installed in the user’s GitHub account. Can be modified. Necessary if the `appName` field is also provided.
	InstallationId pulumi.IntPtrInput
	// Unique name of the GitHub destination.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	Namespace pulumi.StringPtrInput
	// Name of the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_NAME` environment
	// variable.
	RepositoryName pulumi.StringPtrInput
	// GitHub organization or username that owns the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_OWNER` environment
	// variable.
	RepositoryOwner pulumi.StringPtrInput
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate pulumi.StringPtrInput
	// The type of the secrets destination (`gh`).
	Type pulumi.StringPtrInput
}

func (SyncGhDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncGhDestinationState)(nil)).Elem()
}

type syncGhDestinationArgs struct {
	// Fine-grained or personal access token.
	// Can be omitted and directly provided to Vault using the `GITHUB_ACCESS_TOKEN` environment
	// variable.
	AccessToken *string `pulumi:"accessToken"`
	// The user-defined name of the GitHub App configuration. This is a reference to the name used\
	// on the new endpoint when configuring the GitHub app on the Vault Server. Can be modified.
	// Takes precedence over the `accessToken` field.
	AppName *string `pulumi:"appName"`
	// The ID of the installation generated by GitHub when the app referenced by the `appName`
	// was installed in the user’s GitHub account. Can be modified. Necessary if the `appName` field is also provided.
	InstallationId *int `pulumi:"installationId"`
	// Unique name of the GitHub destination.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	Namespace *string `pulumi:"namespace"`
	// Name of the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_NAME` environment
	// variable.
	RepositoryName *string `pulumi:"repositoryName"`
	// GitHub organization or username that owns the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_OWNER` environment
	// variable.
	RepositoryOwner *string `pulumi:"repositoryOwner"`
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate *string `pulumi:"secretNameTemplate"`
}

// The set of arguments for constructing a SyncGhDestination resource.
type SyncGhDestinationArgs struct {
	// Fine-grained or personal access token.
	// Can be omitted and directly provided to Vault using the `GITHUB_ACCESS_TOKEN` environment
	// variable.
	AccessToken pulumi.StringPtrInput
	// The user-defined name of the GitHub App configuration. This is a reference to the name used\
	// on the new endpoint when configuring the GitHub app on the Vault Server. Can be modified.
	// Takes precedence over the `accessToken` field.
	AppName pulumi.StringPtrInput
	// The ID of the installation generated by GitHub when the app referenced by the `appName`
	// was installed in the user’s GitHub account. Can be modified. Necessary if the `appName` field is also provided.
	InstallationId pulumi.IntPtrInput
	// Unique name of the GitHub destination.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	Namespace pulumi.StringPtrInput
	// Name of the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_NAME` environment
	// variable.
	RepositoryName pulumi.StringPtrInput
	// GitHub organization or username that owns the repository.
	// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_OWNER` environment
	// variable.
	RepositoryOwner pulumi.StringPtrInput
	// Template describing how to generate external secret names.
	// Supports a subset of the Go Template syntax.
	SecretNameTemplate pulumi.StringPtrInput
}

func (SyncGhDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncGhDestinationArgs)(nil)).Elem()
}

type SyncGhDestinationInput interface {
	pulumi.Input

	ToSyncGhDestinationOutput() SyncGhDestinationOutput
	ToSyncGhDestinationOutputWithContext(ctx context.Context) SyncGhDestinationOutput
}

func (*SyncGhDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGhDestination)(nil)).Elem()
}

func (i *SyncGhDestination) ToSyncGhDestinationOutput() SyncGhDestinationOutput {
	return i.ToSyncGhDestinationOutputWithContext(context.Background())
}

func (i *SyncGhDestination) ToSyncGhDestinationOutputWithContext(ctx context.Context) SyncGhDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGhDestinationOutput)
}

// SyncGhDestinationArrayInput is an input type that accepts SyncGhDestinationArray and SyncGhDestinationArrayOutput values.
// You can construct a concrete instance of `SyncGhDestinationArrayInput` via:
//
//	SyncGhDestinationArray{ SyncGhDestinationArgs{...} }
type SyncGhDestinationArrayInput interface {
	pulumi.Input

	ToSyncGhDestinationArrayOutput() SyncGhDestinationArrayOutput
	ToSyncGhDestinationArrayOutputWithContext(context.Context) SyncGhDestinationArrayOutput
}

type SyncGhDestinationArray []SyncGhDestinationInput

func (SyncGhDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncGhDestination)(nil)).Elem()
}

func (i SyncGhDestinationArray) ToSyncGhDestinationArrayOutput() SyncGhDestinationArrayOutput {
	return i.ToSyncGhDestinationArrayOutputWithContext(context.Background())
}

func (i SyncGhDestinationArray) ToSyncGhDestinationArrayOutputWithContext(ctx context.Context) SyncGhDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGhDestinationArrayOutput)
}

// SyncGhDestinationMapInput is an input type that accepts SyncGhDestinationMap and SyncGhDestinationMapOutput values.
// You can construct a concrete instance of `SyncGhDestinationMapInput` via:
//
//	SyncGhDestinationMap{ "key": SyncGhDestinationArgs{...} }
type SyncGhDestinationMapInput interface {
	pulumi.Input

	ToSyncGhDestinationMapOutput() SyncGhDestinationMapOutput
	ToSyncGhDestinationMapOutputWithContext(context.Context) SyncGhDestinationMapOutput
}

type SyncGhDestinationMap map[string]SyncGhDestinationInput

func (SyncGhDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncGhDestination)(nil)).Elem()
}

func (i SyncGhDestinationMap) ToSyncGhDestinationMapOutput() SyncGhDestinationMapOutput {
	return i.ToSyncGhDestinationMapOutputWithContext(context.Background())
}

func (i SyncGhDestinationMap) ToSyncGhDestinationMapOutputWithContext(ctx context.Context) SyncGhDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGhDestinationMapOutput)
}

type SyncGhDestinationOutput struct{ *pulumi.OutputState }

func (SyncGhDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGhDestination)(nil)).Elem()
}

func (o SyncGhDestinationOutput) ToSyncGhDestinationOutput() SyncGhDestinationOutput {
	return o
}

func (o SyncGhDestinationOutput) ToSyncGhDestinationOutputWithContext(ctx context.Context) SyncGhDestinationOutput {
	return o
}

// Fine-grained or personal access token.
// Can be omitted and directly provided to Vault using the `GITHUB_ACCESS_TOKEN` environment
// variable.
func (o SyncGhDestinationOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringPtrOutput { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// The user-defined name of the GitHub App configuration. This is a reference to the name used\
// on the new endpoint when configuring the GitHub app on the Vault Server. Can be modified.
// Takes precedence over the `accessToken` field.
func (o SyncGhDestinationOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringPtrOutput { return v.AppName }).(pulumi.StringPtrOutput)
}

// The ID of the installation generated by GitHub when the app referenced by the `appName`
// was installed in the user’s GitHub account. Can be modified. Necessary if the `appName` field is also provided.
func (o SyncGhDestinationOutput) InstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.IntPtrOutput { return v.InstallationId }).(pulumi.IntPtrOutput)
}

// Unique name of the GitHub destination.
func (o SyncGhDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
func (o SyncGhDestinationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Name of the repository.
// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_NAME` environment
// variable.
func (o SyncGhDestinationOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringPtrOutput { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// GitHub organization or username that owns the repository.
// Can be omitted and directly provided to Vault using the `GITHUB_REPOSITORY_OWNER` environment
// variable.
func (o SyncGhDestinationOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringPtrOutput { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

// Template describing how to generate external secret names.
// Supports a subset of the Go Template syntax.
func (o SyncGhDestinationOutput) SecretNameTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringOutput { return v.SecretNameTemplate }).(pulumi.StringOutput)
}

// The type of the secrets destination (`gh`).
func (o SyncGhDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncGhDestination) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SyncGhDestinationArrayOutput struct{ *pulumi.OutputState }

func (SyncGhDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncGhDestination)(nil)).Elem()
}

func (o SyncGhDestinationArrayOutput) ToSyncGhDestinationArrayOutput() SyncGhDestinationArrayOutput {
	return o
}

func (o SyncGhDestinationArrayOutput) ToSyncGhDestinationArrayOutputWithContext(ctx context.Context) SyncGhDestinationArrayOutput {
	return o
}

func (o SyncGhDestinationArrayOutput) Index(i pulumi.IntInput) SyncGhDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncGhDestination {
		return vs[0].([]*SyncGhDestination)[vs[1].(int)]
	}).(SyncGhDestinationOutput)
}

type SyncGhDestinationMapOutput struct{ *pulumi.OutputState }

func (SyncGhDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncGhDestination)(nil)).Elem()
}

func (o SyncGhDestinationMapOutput) ToSyncGhDestinationMapOutput() SyncGhDestinationMapOutput {
	return o
}

func (o SyncGhDestinationMapOutput) ToSyncGhDestinationMapOutputWithContext(ctx context.Context) SyncGhDestinationMapOutput {
	return o
}

func (o SyncGhDestinationMapOutput) MapIndex(k pulumi.StringInput) SyncGhDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncGhDestination {
		return vs[0].(map[string]*SyncGhDestination)[vs[1].(string)]
	}).(SyncGhDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncGhDestinationInput)(nil)).Elem(), &SyncGhDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncGhDestinationArrayInput)(nil)).Elem(), SyncGhDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncGhDestinationMapInput)(nil)).Elem(), SyncGhDestinationMap{})
	pulumi.RegisterOutputType(SyncGhDestinationOutput{})
	pulumi.RegisterOutputType(SyncGhDestinationArrayOutput{})
	pulumi.RegisterOutputType(SyncGhDestinationMapOutput{})
}
