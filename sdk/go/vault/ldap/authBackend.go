// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource for managing an [LDAP auth backend within Vault](https://www.vaultproject.io/docs/auth/ldap.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/ldap_auth_backend.html.markdown.
type AuthBackend struct {
	s *pulumi.ResourceState
}

// NewAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewAuthBackend(ctx *pulumi.Context,
	name string, args *AuthBackendArgs, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["binddn"] = nil
		inputs["bindpass"] = nil
		inputs["certificate"] = nil
		inputs["denyNullBind"] = nil
		inputs["description"] = nil
		inputs["discoverdn"] = nil
		inputs["groupattr"] = nil
		inputs["groupdn"] = nil
		inputs["groupfilter"] = nil
		inputs["insecureTls"] = nil
		inputs["path"] = nil
		inputs["starttls"] = nil
		inputs["tlsMaxVersion"] = nil
		inputs["tlsMinVersion"] = nil
		inputs["tokenBoundCidrs"] = nil
		inputs["tokenExplicitMaxTtl"] = nil
		inputs["tokenMaxTtl"] = nil
		inputs["tokenNoDefaultPolicy"] = nil
		inputs["tokenNumUses"] = nil
		inputs["tokenPeriod"] = nil
		inputs["tokenPolicies"] = nil
		inputs["tokenTtl"] = nil
		inputs["tokenType"] = nil
		inputs["upndomain"] = nil
		inputs["url"] = nil
		inputs["useTokenGroups"] = nil
		inputs["userattr"] = nil
		inputs["userdn"] = nil
	} else {
		inputs["binddn"] = args.Binddn
		inputs["bindpass"] = args.Bindpass
		inputs["certificate"] = args.Certificate
		inputs["denyNullBind"] = args.DenyNullBind
		inputs["description"] = args.Description
		inputs["discoverdn"] = args.Discoverdn
		inputs["groupattr"] = args.Groupattr
		inputs["groupdn"] = args.Groupdn
		inputs["groupfilter"] = args.Groupfilter
		inputs["insecureTls"] = args.InsecureTls
		inputs["path"] = args.Path
		inputs["starttls"] = args.Starttls
		inputs["tlsMaxVersion"] = args.TlsMaxVersion
		inputs["tlsMinVersion"] = args.TlsMinVersion
		inputs["tokenBoundCidrs"] = args.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = args.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = args.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = args.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = args.TokenNumUses
		inputs["tokenPeriod"] = args.TokenPeriod
		inputs["tokenPolicies"] = args.TokenPolicies
		inputs["tokenTtl"] = args.TokenTtl
		inputs["tokenType"] = args.TokenType
		inputs["upndomain"] = args.Upndomain
		inputs["url"] = args.Url
		inputs["useTokenGroups"] = args.UseTokenGroups
		inputs["userattr"] = args.Userattr
		inputs["userdn"] = args.Userdn
	}
	inputs["accessor"] = nil
	s, err := ctx.RegisterResource("vault:ldap/authBackend:AuthBackend", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// GetAuthBackend gets an existing AuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendState, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessor"] = state.Accessor
		inputs["binddn"] = state.Binddn
		inputs["bindpass"] = state.Bindpass
		inputs["certificate"] = state.Certificate
		inputs["denyNullBind"] = state.DenyNullBind
		inputs["description"] = state.Description
		inputs["discoverdn"] = state.Discoverdn
		inputs["groupattr"] = state.Groupattr
		inputs["groupdn"] = state.Groupdn
		inputs["groupfilter"] = state.Groupfilter
		inputs["insecureTls"] = state.InsecureTls
		inputs["path"] = state.Path
		inputs["starttls"] = state.Starttls
		inputs["tlsMaxVersion"] = state.TlsMaxVersion
		inputs["tlsMinVersion"] = state.TlsMinVersion
		inputs["tokenBoundCidrs"] = state.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = state.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = state.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = state.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = state.TokenNumUses
		inputs["tokenPeriod"] = state.TokenPeriod
		inputs["tokenPolicies"] = state.TokenPolicies
		inputs["tokenTtl"] = state.TokenTtl
		inputs["tokenType"] = state.TokenType
		inputs["upndomain"] = state.Upndomain
		inputs["url"] = state.Url
		inputs["useTokenGroups"] = state.UseTokenGroups
		inputs["userattr"] = state.Userattr
		inputs["userdn"] = state.Userdn
	}
	s, err := ctx.ReadResource("vault:ldap/authBackend:AuthBackend", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackend) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackend) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The accessor for this auth mount.
func (r *AuthBackend) Accessor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessor"])
}

// DN of object to bind when performing user search
func (r *AuthBackend) Binddn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["binddn"])
}

// Password to use with `binddn` when performing user search
func (r *AuthBackend) Bindpass() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["bindpass"])
}

// Trusted CA to validate TLS certificate
func (r *AuthBackend) Certificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificate"])
}

func (r *AuthBackend) DenyNullBind() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["denyNullBind"])
}

// Description for the LDAP auth backend mount
func (r *AuthBackend) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *AuthBackend) Discoverdn() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["discoverdn"])
}

// LDAP attribute to follow on objects returned by groupfilter
func (r *AuthBackend) Groupattr() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupattr"])
}

// Base DN under which to perform group search
func (r *AuthBackend) Groupdn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupdn"])
}

// Go template used to construct group membership query
func (r *AuthBackend) Groupfilter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupfilter"])
}

// Control whether or TLS certificates must be validated
func (r *AuthBackend) InsecureTls() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["insecureTls"])
}

// Path to mount the LDAP auth backend under
func (r *AuthBackend) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Control use of TLS when conecting to LDAP
func (r *AuthBackend) Starttls() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["starttls"])
}

// Maximum acceptable version of TLS
func (r *AuthBackend) TlsMaxVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tlsMaxVersion"])
}

// Minimum acceptable version of TLS
func (r *AuthBackend) TlsMinVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tlsMinVersion"])
}

// List of CIDR blocks; if set, specifies blocks of IP
// addresses which can authenticate successfully, and ties the resulting token to these blocks
// as well.
func (r *AuthBackend) TokenBoundCidrs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenBoundCidrs"])
}

// If set, will encode an
// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
// `tokenMaxTtl` would otherwise allow a renewal.
func (r *AuthBackend) TokenExplicitMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenExplicitMaxTtl"])
}

// The maximum lifetime for generated tokens in number of seconds.
// Its current value will be referenced at renewal time.
func (r *AuthBackend) TokenMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenMaxTtl"])
}

// If set, the default policy will not be set on
// generated tokens; otherwise it will be added to the policies set in token_policies.
func (r *AuthBackend) TokenNoDefaultPolicy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tokenNoDefaultPolicy"])
}

// The
// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
// if any, in number of seconds to set on the token.
func (r *AuthBackend) TokenNumUses() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenNumUses"])
}

// If set, indicates that the
// token generated using this role should never expire. The token should be renewed within the
// duration specified by this value. At each renewal, the token's TTL will be set to the
// value of this field. Specified in seconds.
func (r *AuthBackend) TokenPeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenPeriod"])
}

// List of policies to encode onto generated tokens. Depending
// on the auth method, this list may be supplemented by user/group/other values.
func (r *AuthBackend) TokenPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenPolicies"])
}

// The incremental lifetime for generated tokens in number of seconds.
// Its current value will be referenced at renewal time.
func (r *AuthBackend) TokenTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenTtl"])
}

// The type of token that should be generated. Can be `service`,
// `batch`, or `default` to use the mount's tuned default (which unless changed will be
// `service` tokens). For token store roles, there are two additional possibilities:
// `default-service` and `default-batch` which specify the type to return unless the client
// requests a different type at generation time.
func (r *AuthBackend) TokenType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenType"])
}

// The userPrincipalDomain used to construct UPN string
func (r *AuthBackend) Upndomain() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["upndomain"])
}

// The URL of the LDAP server
func (r *AuthBackend) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
func (r *AuthBackend) UseTokenGroups() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["useTokenGroups"])
}

// Attribute on user object matching username passed in
func (r *AuthBackend) Userattr() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userattr"])
}

// Base DN under which to perform user search
func (r *AuthBackend) Userdn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userdn"])
}

// Input properties used for looking up and filtering AuthBackend resources.
type AuthBackendState struct {
	// The accessor for this auth mount.
	Accessor interface{}
	// DN of object to bind when performing user search
	Binddn interface{}
	// Password to use with `binddn` when performing user search
	Bindpass interface{}
	// Trusted CA to validate TLS certificate
	Certificate interface{}
	DenyNullBind interface{}
	// Description for the LDAP auth backend mount
	Description interface{}
	Discoverdn interface{}
	// LDAP attribute to follow on objects returned by groupfilter
	Groupattr interface{}
	// Base DN under which to perform group search
	Groupdn interface{}
	// Go template used to construct group membership query
	Groupfilter interface{}
	// Control whether or TLS certificates must be validated
	InsecureTls interface{}
	// Path to mount the LDAP auth backend under
	Path interface{}
	// Control use of TLS when conecting to LDAP
	Starttls interface{}
	// Maximum acceptable version of TLS
	TlsMaxVersion interface{}
	// Minimum acceptable version of TLS
	TlsMinVersion interface{}
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs interface{}
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl interface{}
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy interface{}
	// The
	// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
	// if any, in number of seconds to set on the token.
	TokenNumUses interface{}
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod interface{}
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies interface{}
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl interface{}
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType interface{}
	// The userPrincipalDomain used to construct UPN string
	Upndomain interface{}
	// The URL of the LDAP server
	Url interface{}
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
	UseTokenGroups interface{}
	// Attribute on user object matching username passed in
	Userattr interface{}
	// Base DN under which to perform user search
	Userdn interface{}
}

// The set of arguments for constructing a AuthBackend resource.
type AuthBackendArgs struct {
	// DN of object to bind when performing user search
	Binddn interface{}
	// Password to use with `binddn` when performing user search
	Bindpass interface{}
	// Trusted CA to validate TLS certificate
	Certificate interface{}
	DenyNullBind interface{}
	// Description for the LDAP auth backend mount
	Description interface{}
	Discoverdn interface{}
	// LDAP attribute to follow on objects returned by groupfilter
	Groupattr interface{}
	// Base DN under which to perform group search
	Groupdn interface{}
	// Go template used to construct group membership query
	Groupfilter interface{}
	// Control whether or TLS certificates must be validated
	InsecureTls interface{}
	// Path to mount the LDAP auth backend under
	Path interface{}
	// Control use of TLS when conecting to LDAP
	Starttls interface{}
	// Maximum acceptable version of TLS
	TlsMaxVersion interface{}
	// Minimum acceptable version of TLS
	TlsMinVersion interface{}
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs interface{}
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl interface{}
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy interface{}
	// The
	// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
	// if any, in number of seconds to set on the token.
	TokenNumUses interface{}
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod interface{}
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies interface{}
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl interface{}
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType interface{}
	// The userPrincipalDomain used to construct UPN string
	Upndomain interface{}
	// The URL of the LDAP server
	Url interface{}
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
	UseTokenGroups interface{}
	// Attribute on user object matching username passed in
	Userattr interface{}
	// Base DN under which to perform user search
	Userdn interface{}
}
