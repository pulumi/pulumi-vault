// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for managing an [LDAP auth backend within Vault](https://www.vaultproject.io/docs/auth/ldap.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/ldap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ldap.NewAuthBackend(ctx, "ldap", &ldap.AuthBackendArgs{
//				Path:             pulumi.String("ldap"),
//				Url:              pulumi.String("ldaps://dc-01.example.org"),
//				Userdn:           pulumi.String("OU=Users,OU=Accounts,DC=example,DC=org"),
//				Userattr:         pulumi.String("sAMAccountName"),
//				Upndomain:        pulumi.String("EXAMPLE.ORG"),
//				Discoverdn:       pulumi.Bool(false),
//				Groupdn:          pulumi.String("OU=Groups,DC=example,DC=org"),
//				Groupfilter:      pulumi.String("(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))"),
//				RotationSchedule: pulumi.String("0 * * * SAT"),
//				RotationWindow:   pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// LDAP authentication backends can be imported using the `path`, e.g.
//
// ```sh
// $ pulumi import vault:ldap/authBackend:AuthBackend ldap ldap
// ```
type AuthBackend struct {
	pulumi.CustomResourceState

	// The accessor for this auth mount.
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// DN of object to bind when performing user search
	Binddn pulumi.StringOutput `pulumi:"binddn"`
	// Password to use with `binddn` when performing user search
	Bindpass pulumi.StringOutput `pulumi:"bindpass"`
	// Control case senstivity of objects fetched from LDAP, this is used for object matching in vault
	CaseSensitiveNames pulumi.BoolOutput `pulumi:"caseSensitiveNames"`
	// Trusted CA to validate TLS certificate
	Certificate   pulumi.StringOutput `pulumi:"certificate"`
	ClientTlsCert pulumi.StringOutput `pulumi:"clientTlsCert"`
	ClientTlsKey  pulumi.StringOutput `pulumi:"clientTlsKey"`
	// Timeout in seconds when connecting to LDAP before attempting to connect to the next server in the URL provided in `url` (integer: 30)
	ConnectionTimeout pulumi.IntOutput `pulumi:"connectionTimeout"`
	// Prevents users from bypassing authentication when providing an empty password.
	DenyNullBind pulumi.BoolOutput `pulumi:"denyNullBind"`
	// Description for the LDAP auth backend mount
	Description pulumi.StringOutput `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation pulumi.BoolPtrOutput `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrOutput `pulumi:"disableRemount"`
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn pulumi.BoolOutput `pulumi:"discoverdn"`
	// LDAP attribute to follow on objects returned by groupfilter
	Groupattr pulumi.StringOutput `pulumi:"groupattr"`
	// Base DN under which to perform group search
	Groupdn pulumi.StringOutput `pulumi:"groupdn"`
	// Go template used to construct group membership query
	Groupfilter pulumi.StringOutput `pulumi:"groupfilter"`
	// Control whether or TLS certificates must be validated
	InsecureTls pulumi.BoolOutput `pulumi:"insecureTls"`
	// Specifies if the auth method is local only.
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Sets the max page size for LDAP lookups, by default it's set to -1.
	// *Available only for Vault 1.11.11+, 1.12.7+, and 1.13.3+*.
	MaxPageSize pulumi.IntPtrOutput `pulumi:"maxPageSize"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Path to mount the LDAP auth backend under
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod pulumi.IntPtrOutput `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule pulumi.StringPtrOutput `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow pulumi.IntPtrOutput `pulumi:"rotationWindow"`
	// Control use of TLS when conecting to LDAP
	Starttls pulumi.BoolOutput `pulumi:"starttls"`
	// Maximum acceptable version of TLS
	TlsMaxVersion pulumi.StringOutput `pulumi:"tlsMaxVersion"`
	// Minimum acceptable version of TLS
	TlsMinVersion pulumi.StringOutput `pulumi:"tlsMinVersion"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayOutput `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrOutput `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrOutput `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrOutput `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrOutput `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrOutput `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayOutput `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrOutput `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrOutput `pulumi:"tokenType"`
	// The `userPrincipalDomain` used to construct the UPN string for the authenticating user.
	Upndomain pulumi.StringOutput `pulumi:"upndomain"`
	// The URL of the LDAP server
	Url pulumi.StringOutput `pulumi:"url"`
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
	UseTokenGroups pulumi.BoolOutput `pulumi:"useTokenGroups"`
	// Attribute on user object matching username passed in
	Userattr pulumi.StringOutput `pulumi:"userattr"`
	// Base DN under which to perform user search
	Userdn pulumi.StringOutput `pulumi:"userdn"`
	// LDAP user search filter
	Userfilter pulumi.StringOutput `pulumi:"userfilter"`
	// Force the auth method to use the username passed by the user as the alias name.
	UsernameAsAlias pulumi.BoolOutput `pulumi:"usernameAsAlias"`
}

// NewAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewAuthBackend(ctx *pulumi.Context,
	name string, args *AuthBackendArgs, opts ...pulumi.ResourceOption) (*AuthBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Bindpass != nil {
		args.Bindpass = pulumi.ToSecret(args.Bindpass).(pulumi.StringPtrInput)
	}
	if args.ClientTlsKey != nil {
		args.ClientTlsKey = pulumi.ToSecret(args.ClientTlsKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"bindpass",
		"clientTlsKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthBackend
	err := ctx.RegisterResource("vault:ldap/authBackend:AuthBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackend gets an existing AuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendState, opts ...pulumi.ResourceOption) (*AuthBackend, error) {
	var resource AuthBackend
	err := ctx.ReadResource("vault:ldap/authBackend:AuthBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackend resources.
type authBackendState struct {
	// The accessor for this auth mount.
	Accessor *string `pulumi:"accessor"`
	// DN of object to bind when performing user search
	Binddn *string `pulumi:"binddn"`
	// Password to use with `binddn` when performing user search
	Bindpass *string `pulumi:"bindpass"`
	// Control case senstivity of objects fetched from LDAP, this is used for object matching in vault
	CaseSensitiveNames *bool `pulumi:"caseSensitiveNames"`
	// Trusted CA to validate TLS certificate
	Certificate   *string `pulumi:"certificate"`
	ClientTlsCert *string `pulumi:"clientTlsCert"`
	ClientTlsKey  *string `pulumi:"clientTlsKey"`
	// Timeout in seconds when connecting to LDAP before attempting to connect to the next server in the URL provided in `url` (integer: 30)
	ConnectionTimeout *int `pulumi:"connectionTimeout"`
	// Prevents users from bypassing authentication when providing an empty password.
	DenyNullBind *bool `pulumi:"denyNullBind"`
	// Description for the LDAP auth backend mount
	Description *string `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn *bool `pulumi:"discoverdn"`
	// LDAP attribute to follow on objects returned by groupfilter
	Groupattr *string `pulumi:"groupattr"`
	// Base DN under which to perform group search
	Groupdn *string `pulumi:"groupdn"`
	// Go template used to construct group membership query
	Groupfilter *string `pulumi:"groupfilter"`
	// Control whether or TLS certificates must be validated
	InsecureTls *bool `pulumi:"insecureTls"`
	// Specifies if the auth method is local only.
	Local *bool `pulumi:"local"`
	// Sets the max page size for LDAP lookups, by default it's set to -1.
	// *Available only for Vault 1.11.11+, 1.12.7+, and 1.13.3+*.
	MaxPageSize *int `pulumi:"maxPageSize"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Path to mount the LDAP auth backend under
	Path *string `pulumi:"path"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow *int `pulumi:"rotationWindow"`
	// Control use of TLS when conecting to LDAP
	Starttls *bool `pulumi:"starttls"`
	// Maximum acceptable version of TLS
	TlsMaxVersion *string `pulumi:"tlsMaxVersion"`
	// Minimum acceptable version of TLS
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType *string `pulumi:"tokenType"`
	// The `userPrincipalDomain` used to construct the UPN string for the authenticating user.
	Upndomain *string `pulumi:"upndomain"`
	// The URL of the LDAP server
	Url *string `pulumi:"url"`
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
	UseTokenGroups *bool `pulumi:"useTokenGroups"`
	// Attribute on user object matching username passed in
	Userattr *string `pulumi:"userattr"`
	// Base DN under which to perform user search
	Userdn *string `pulumi:"userdn"`
	// LDAP user search filter
	Userfilter *string `pulumi:"userfilter"`
	// Force the auth method to use the username passed by the user as the alias name.
	UsernameAsAlias *bool `pulumi:"usernameAsAlias"`
}

type AuthBackendState struct {
	// The accessor for this auth mount.
	Accessor pulumi.StringPtrInput
	// DN of object to bind when performing user search
	Binddn pulumi.StringPtrInput
	// Password to use with `binddn` when performing user search
	Bindpass pulumi.StringPtrInput
	// Control case senstivity of objects fetched from LDAP, this is used for object matching in vault
	CaseSensitiveNames pulumi.BoolPtrInput
	// Trusted CA to validate TLS certificate
	Certificate   pulumi.StringPtrInput
	ClientTlsCert pulumi.StringPtrInput
	ClientTlsKey  pulumi.StringPtrInput
	// Timeout in seconds when connecting to LDAP before attempting to connect to the next server in the URL provided in `url` (integer: 30)
	ConnectionTimeout pulumi.IntPtrInput
	// Prevents users from bypassing authentication when providing an empty password.
	DenyNullBind pulumi.BoolPtrInput
	// Description for the LDAP auth backend mount
	Description pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn pulumi.BoolPtrInput
	// LDAP attribute to follow on objects returned by groupfilter
	Groupattr pulumi.StringPtrInput
	// Base DN under which to perform group search
	Groupdn pulumi.StringPtrInput
	// Go template used to construct group membership query
	Groupfilter pulumi.StringPtrInput
	// Control whether or TLS certificates must be validated
	InsecureTls pulumi.BoolPtrInput
	// Specifies if the auth method is local only.
	Local pulumi.BoolPtrInput
	// Sets the max page size for LDAP lookups, by default it's set to -1.
	// *Available only for Vault 1.11.11+, 1.12.7+, and 1.13.3+*.
	MaxPageSize pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Path to mount the LDAP auth backend under
	Path pulumi.StringPtrInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow pulumi.IntPtrInput
	// Control use of TLS when conecting to LDAP
	Starttls pulumi.BoolPtrInput
	// Maximum acceptable version of TLS
	TlsMaxVersion pulumi.StringPtrInput
	// Minimum acceptable version of TLS
	TlsMinVersion pulumi.StringPtrInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrInput
	// The `userPrincipalDomain` used to construct the UPN string for the authenticating user.
	Upndomain pulumi.StringPtrInput
	// The URL of the LDAP server
	Url pulumi.StringPtrInput
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
	UseTokenGroups pulumi.BoolPtrInput
	// Attribute on user object matching username passed in
	Userattr pulumi.StringPtrInput
	// Base DN under which to perform user search
	Userdn pulumi.StringPtrInput
	// LDAP user search filter
	Userfilter pulumi.StringPtrInput
	// Force the auth method to use the username passed by the user as the alias name.
	UsernameAsAlias pulumi.BoolPtrInput
}

func (AuthBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendState)(nil)).Elem()
}

type authBackendArgs struct {
	// DN of object to bind when performing user search
	Binddn *string `pulumi:"binddn"`
	// Password to use with `binddn` when performing user search
	Bindpass *string `pulumi:"bindpass"`
	// Control case senstivity of objects fetched from LDAP, this is used for object matching in vault
	CaseSensitiveNames *bool `pulumi:"caseSensitiveNames"`
	// Trusted CA to validate TLS certificate
	Certificate   *string `pulumi:"certificate"`
	ClientTlsCert *string `pulumi:"clientTlsCert"`
	ClientTlsKey  *string `pulumi:"clientTlsKey"`
	// Timeout in seconds when connecting to LDAP before attempting to connect to the next server in the URL provided in `url` (integer: 30)
	ConnectionTimeout *int `pulumi:"connectionTimeout"`
	// Prevents users from bypassing authentication when providing an empty password.
	DenyNullBind *bool `pulumi:"denyNullBind"`
	// Description for the LDAP auth backend mount
	Description *string `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn *bool `pulumi:"discoverdn"`
	// LDAP attribute to follow on objects returned by groupfilter
	Groupattr *string `pulumi:"groupattr"`
	// Base DN under which to perform group search
	Groupdn *string `pulumi:"groupdn"`
	// Go template used to construct group membership query
	Groupfilter *string `pulumi:"groupfilter"`
	// Control whether or TLS certificates must be validated
	InsecureTls *bool `pulumi:"insecureTls"`
	// Specifies if the auth method is local only.
	Local *bool `pulumi:"local"`
	// Sets the max page size for LDAP lookups, by default it's set to -1.
	// *Available only for Vault 1.11.11+, 1.12.7+, and 1.13.3+*.
	MaxPageSize *int `pulumi:"maxPageSize"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Path to mount the LDAP auth backend under
	Path *string `pulumi:"path"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow *int `pulumi:"rotationWindow"`
	// Control use of TLS when conecting to LDAP
	Starttls *bool `pulumi:"starttls"`
	// Maximum acceptable version of TLS
	TlsMaxVersion *string `pulumi:"tlsMaxVersion"`
	// Minimum acceptable version of TLS
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType *string `pulumi:"tokenType"`
	// The `userPrincipalDomain` used to construct the UPN string for the authenticating user.
	Upndomain *string `pulumi:"upndomain"`
	// The URL of the LDAP server
	Url string `pulumi:"url"`
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
	UseTokenGroups *bool `pulumi:"useTokenGroups"`
	// Attribute on user object matching username passed in
	Userattr *string `pulumi:"userattr"`
	// Base DN under which to perform user search
	Userdn *string `pulumi:"userdn"`
	// LDAP user search filter
	Userfilter *string `pulumi:"userfilter"`
	// Force the auth method to use the username passed by the user as the alias name.
	UsernameAsAlias *bool `pulumi:"usernameAsAlias"`
}

// The set of arguments for constructing a AuthBackend resource.
type AuthBackendArgs struct {
	// DN of object to bind when performing user search
	Binddn pulumi.StringPtrInput
	// Password to use with `binddn` when performing user search
	Bindpass pulumi.StringPtrInput
	// Control case senstivity of objects fetched from LDAP, this is used for object matching in vault
	CaseSensitiveNames pulumi.BoolPtrInput
	// Trusted CA to validate TLS certificate
	Certificate   pulumi.StringPtrInput
	ClientTlsCert pulumi.StringPtrInput
	ClientTlsKey  pulumi.StringPtrInput
	// Timeout in seconds when connecting to LDAP before attempting to connect to the next server in the URL provided in `url` (integer: 30)
	ConnectionTimeout pulumi.IntPtrInput
	// Prevents users from bypassing authentication when providing an empty password.
	DenyNullBind pulumi.BoolPtrInput
	// Description for the LDAP auth backend mount
	Description pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn pulumi.BoolPtrInput
	// LDAP attribute to follow on objects returned by groupfilter
	Groupattr pulumi.StringPtrInput
	// Base DN under which to perform group search
	Groupdn pulumi.StringPtrInput
	// Go template used to construct group membership query
	Groupfilter pulumi.StringPtrInput
	// Control whether or TLS certificates must be validated
	InsecureTls pulumi.BoolPtrInput
	// Specifies if the auth method is local only.
	Local pulumi.BoolPtrInput
	// Sets the max page size for LDAP lookups, by default it's set to -1.
	// *Available only for Vault 1.11.11+, 1.12.7+, and 1.13.3+*.
	MaxPageSize pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Path to mount the LDAP auth backend under
	Path pulumi.StringPtrInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow pulumi.IntPtrInput
	// Control use of TLS when conecting to LDAP
	Starttls pulumi.BoolPtrInput
	// Maximum acceptable version of TLS
	TlsMaxVersion pulumi.StringPtrInput
	// Minimum acceptable version of TLS
	TlsMinVersion pulumi.StringPtrInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrInput
	// The `userPrincipalDomain` used to construct the UPN string for the authenticating user.
	Upndomain pulumi.StringPtrInput
	// The URL of the LDAP server
	Url pulumi.StringInput
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
	UseTokenGroups pulumi.BoolPtrInput
	// Attribute on user object matching username passed in
	Userattr pulumi.StringPtrInput
	// Base DN under which to perform user search
	Userdn pulumi.StringPtrInput
	// LDAP user search filter
	Userfilter pulumi.StringPtrInput
	// Force the auth method to use the username passed by the user as the alias name.
	UsernameAsAlias pulumi.BoolPtrInput
}

func (AuthBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendArgs)(nil)).Elem()
}

type AuthBackendInput interface {
	pulumi.Input

	ToAuthBackendOutput() AuthBackendOutput
	ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput
}

func (*AuthBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackend)(nil)).Elem()
}

func (i *AuthBackend) ToAuthBackendOutput() AuthBackendOutput {
	return i.ToAuthBackendOutputWithContext(context.Background())
}

func (i *AuthBackend) ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendOutput)
}

// AuthBackendArrayInput is an input type that accepts AuthBackendArray and AuthBackendArrayOutput values.
// You can construct a concrete instance of `AuthBackendArrayInput` via:
//
//	AuthBackendArray{ AuthBackendArgs{...} }
type AuthBackendArrayInput interface {
	pulumi.Input

	ToAuthBackendArrayOutput() AuthBackendArrayOutput
	ToAuthBackendArrayOutputWithContext(context.Context) AuthBackendArrayOutput
}

type AuthBackendArray []AuthBackendInput

func (AuthBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackend)(nil)).Elem()
}

func (i AuthBackendArray) ToAuthBackendArrayOutput() AuthBackendArrayOutput {
	return i.ToAuthBackendArrayOutputWithContext(context.Background())
}

func (i AuthBackendArray) ToAuthBackendArrayOutputWithContext(ctx context.Context) AuthBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendArrayOutput)
}

// AuthBackendMapInput is an input type that accepts AuthBackendMap and AuthBackendMapOutput values.
// You can construct a concrete instance of `AuthBackendMapInput` via:
//
//	AuthBackendMap{ "key": AuthBackendArgs{...} }
type AuthBackendMapInput interface {
	pulumi.Input

	ToAuthBackendMapOutput() AuthBackendMapOutput
	ToAuthBackendMapOutputWithContext(context.Context) AuthBackendMapOutput
}

type AuthBackendMap map[string]AuthBackendInput

func (AuthBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackend)(nil)).Elem()
}

func (i AuthBackendMap) ToAuthBackendMapOutput() AuthBackendMapOutput {
	return i.ToAuthBackendMapOutputWithContext(context.Background())
}

func (i AuthBackendMap) ToAuthBackendMapOutputWithContext(ctx context.Context) AuthBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendMapOutput)
}

type AuthBackendOutput struct{ *pulumi.OutputState }

func (AuthBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackend)(nil)).Elem()
}

func (o AuthBackendOutput) ToAuthBackendOutput() AuthBackendOutput {
	return o
}

func (o AuthBackendOutput) ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput {
	return o
}

// The accessor for this auth mount.
func (o AuthBackendOutput) Accessor() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Accessor }).(pulumi.StringOutput)
}

// DN of object to bind when performing user search
func (o AuthBackendOutput) Binddn() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Binddn }).(pulumi.StringOutput)
}

// Password to use with `binddn` when performing user search
func (o AuthBackendOutput) Bindpass() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Bindpass }).(pulumi.StringOutput)
}

// Control case senstivity of objects fetched from LDAP, this is used for object matching in vault
func (o AuthBackendOutput) CaseSensitiveNames() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.CaseSensitiveNames }).(pulumi.BoolOutput)
}

// Trusted CA to validate TLS certificate
func (o AuthBackendOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

func (o AuthBackendOutput) ClientTlsCert() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.ClientTlsCert }).(pulumi.StringOutput)
}

func (o AuthBackendOutput) ClientTlsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.ClientTlsKey }).(pulumi.StringOutput)
}

// Timeout in seconds when connecting to LDAP before attempting to connect to the next server in the URL provided in `url` (integer: 30)
func (o AuthBackendOutput) ConnectionTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntOutput { return v.ConnectionTimeout }).(pulumi.IntOutput)
}

// Prevents users from bypassing authentication when providing an empty password.
func (o AuthBackendOutput) DenyNullBind() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.DenyNullBind }).(pulumi.BoolOutput)
}

// Description for the LDAP auth backend mount
func (o AuthBackendOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
func (o AuthBackendOutput) DisableAutomatedRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolPtrOutput { return v.DisableAutomatedRotation }).(pulumi.BoolPtrOutput)
}

// If set, opts out of mount migration on path updates.
// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
func (o AuthBackendOutput) DisableRemount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolPtrOutput { return v.DisableRemount }).(pulumi.BoolPtrOutput)
}

// Use anonymous bind to discover the bind DN of a user.
func (o AuthBackendOutput) Discoverdn() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.Discoverdn }).(pulumi.BoolOutput)
}

// LDAP attribute to follow on objects returned by groupfilter
func (o AuthBackendOutput) Groupattr() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Groupattr }).(pulumi.StringOutput)
}

// Base DN under which to perform group search
func (o AuthBackendOutput) Groupdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Groupdn }).(pulumi.StringOutput)
}

// Go template used to construct group membership query
func (o AuthBackendOutput) Groupfilter() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Groupfilter }).(pulumi.StringOutput)
}

// Control whether or TLS certificates must be validated
func (o AuthBackendOutput) InsecureTls() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.InsecureTls }).(pulumi.BoolOutput)
}

// Specifies if the auth method is local only.
func (o AuthBackendOutput) Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolPtrOutput { return v.Local }).(pulumi.BoolPtrOutput)
}

// Sets the max page size for LDAP lookups, by default it's set to -1.
// *Available only for Vault 1.11.11+, 1.12.7+, and 1.13.3+*.
func (o AuthBackendOutput) MaxPageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.MaxPageSize }).(pulumi.IntPtrOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o AuthBackendOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Path to mount the LDAP auth backend under
func (o AuthBackendOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// The amount of time in seconds Vault should wait before rotating the root credential.
// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
func (o AuthBackendOutput) RotationPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.RotationPeriod }).(pulumi.IntPtrOutput)
}

// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
func (o AuthBackendOutput) RotationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.RotationSchedule }).(pulumi.StringPtrOutput)
}

// The maximum amount of time in seconds allowed to complete
// a rotation when a scheduled token rotation occurs. The default rotation window is
// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
func (o AuthBackendOutput) RotationWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.RotationWindow }).(pulumi.IntPtrOutput)
}

// Control use of TLS when conecting to LDAP
func (o AuthBackendOutput) Starttls() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.Starttls }).(pulumi.BoolOutput)
}

// Maximum acceptable version of TLS
func (o AuthBackendOutput) TlsMaxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.TlsMaxVersion }).(pulumi.StringOutput)
}

// Minimum acceptable version of TLS
func (o AuthBackendOutput) TlsMinVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.TlsMinVersion }).(pulumi.StringOutput)
}

// Specifies the blocks of IP addresses which are allowed to use the generated token
func (o AuthBackendOutput) TokenBoundCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringArrayOutput { return v.TokenBoundCidrs }).(pulumi.StringArrayOutput)
}

// Generated Token's Explicit Maximum TTL in seconds
func (o AuthBackendOutput) TokenExplicitMaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.TokenExplicitMaxTtl }).(pulumi.IntPtrOutput)
}

// The maximum lifetime of the generated token
func (o AuthBackendOutput) TokenMaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.TokenMaxTtl }).(pulumi.IntPtrOutput)
}

// If true, the 'default' policy will not automatically be added to generated tokens
func (o AuthBackendOutput) TokenNoDefaultPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolPtrOutput { return v.TokenNoDefaultPolicy }).(pulumi.BoolPtrOutput)
}

// The maximum number of times a token may be used, a value of zero means unlimited
func (o AuthBackendOutput) TokenNumUses() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.TokenNumUses }).(pulumi.IntPtrOutput)
}

// Generated Token's Period
func (o AuthBackendOutput) TokenPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.TokenPeriod }).(pulumi.IntPtrOutput)
}

// Generated Token's Policies
func (o AuthBackendOutput) TokenPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringArrayOutput { return v.TokenPolicies }).(pulumi.StringArrayOutput)
}

// The initial ttl of the token to generate in seconds
func (o AuthBackendOutput) TokenTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.IntPtrOutput { return v.TokenTtl }).(pulumi.IntPtrOutput)
}

// The type of token to generate, service or batch
func (o AuthBackendOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.TokenType }).(pulumi.StringPtrOutput)
}

// The `userPrincipalDomain` used to construct the UPN string for the authenticating user.
func (o AuthBackendOutput) Upndomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Upndomain }).(pulumi.StringOutput)
}

// The URL of the LDAP server
func (o AuthBackendOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships
func (o AuthBackendOutput) UseTokenGroups() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.UseTokenGroups }).(pulumi.BoolOutput)
}

// Attribute on user object matching username passed in
func (o AuthBackendOutput) Userattr() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Userattr }).(pulumi.StringOutput)
}

// Base DN under which to perform user search
func (o AuthBackendOutput) Userdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Userdn }).(pulumi.StringOutput)
}

// LDAP user search filter
func (o AuthBackendOutput) Userfilter() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.Userfilter }).(pulumi.StringOutput)
}

// Force the auth method to use the username passed by the user as the alias name.
func (o AuthBackendOutput) UsernameAsAlias() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.UsernameAsAlias }).(pulumi.BoolOutput)
}

type AuthBackendArrayOutput struct{ *pulumi.OutputState }

func (AuthBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackend)(nil)).Elem()
}

func (o AuthBackendArrayOutput) ToAuthBackendArrayOutput() AuthBackendArrayOutput {
	return o
}

func (o AuthBackendArrayOutput) ToAuthBackendArrayOutputWithContext(ctx context.Context) AuthBackendArrayOutput {
	return o
}

func (o AuthBackendArrayOutput) Index(i pulumi.IntInput) AuthBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthBackend {
		return vs[0].([]*AuthBackend)[vs[1].(int)]
	}).(AuthBackendOutput)
}

type AuthBackendMapOutput struct{ *pulumi.OutputState }

func (AuthBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackend)(nil)).Elem()
}

func (o AuthBackendMapOutput) ToAuthBackendMapOutput() AuthBackendMapOutput {
	return o
}

func (o AuthBackendMapOutput) ToAuthBackendMapOutputWithContext(ctx context.Context) AuthBackendMapOutput {
	return o
}

func (o AuthBackendMapOutput) MapIndex(k pulumi.StringInput) AuthBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthBackend {
		return vs[0].(map[string]*AuthBackend)[vs[1].(string)]
	}).(AuthBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendInput)(nil)).Elem(), &AuthBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendArrayInput)(nil)).Elem(), AuthBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendMapInput)(nil)).Elem(), AuthBackendMap{})
	pulumi.RegisterOutputType(AuthBackendOutput{})
	pulumi.RegisterOutputType(AuthBackendArrayOutput{})
	pulumi.RegisterOutputType(AuthBackendMapOutput{})
}
