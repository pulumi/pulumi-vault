// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource to create a user in an [LDAP auth backend within Vault](https://www.vaultproject.io/docs/auth/ldap.html).
type AuthBackendUser struct {
	pulumi.CustomResourceState

	// Path to the authentication backend
	Backend pulumi.StringPtrOutput `pulumi:"backend"`
	// Override LDAP groups which should be granted to user
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Policies which should be granted to user
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	// The LDAP username
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewAuthBackendUser registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendUser(ctx *pulumi.Context,
	name string, args *AuthBackendUserArgs, opts ...pulumi.ResourceOption) (*AuthBackendUser, error) {
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &AuthBackendUserArgs{}
	}
	var resource AuthBackendUser
	err := ctx.RegisterResource("vault:ldap/authBackendUser:AuthBackendUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackendUser gets an existing AuthBackendUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendUserState, opts ...pulumi.ResourceOption) (*AuthBackendUser, error) {
	var resource AuthBackendUser
	err := ctx.ReadResource("vault:ldap/authBackendUser:AuthBackendUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackendUser resources.
type authBackendUserState struct {
	// Path to the authentication backend
	Backend *string `pulumi:"backend"`
	// Override LDAP groups which should be granted to user
	Groups []string `pulumi:"groups"`
	// Policies which should be granted to user
	Policies []string `pulumi:"policies"`
	// The LDAP username
	Username *string `pulumi:"username"`
}

type AuthBackendUserState struct {
	// Path to the authentication backend
	Backend pulumi.StringPtrInput
	// Override LDAP groups which should be granted to user
	Groups pulumi.StringArrayInput
	// Policies which should be granted to user
	Policies pulumi.StringArrayInput
	// The LDAP username
	Username pulumi.StringPtrInput
}

func (AuthBackendUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendUserState)(nil)).Elem()
}

type authBackendUserArgs struct {
	// Path to the authentication backend
	Backend *string `pulumi:"backend"`
	// Override LDAP groups which should be granted to user
	Groups []string `pulumi:"groups"`
	// Policies which should be granted to user
	Policies []string `pulumi:"policies"`
	// The LDAP username
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a AuthBackendUser resource.
type AuthBackendUserArgs struct {
	// Path to the authentication backend
	Backend pulumi.StringPtrInput
	// Override LDAP groups which should be granted to user
	Groups pulumi.StringArrayInput
	// Policies which should be granted to user
	Policies pulumi.StringArrayInput
	// The LDAP username
	Username pulumi.StringInput
}

func (AuthBackendUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendUserArgs)(nil)).Elem()
}
