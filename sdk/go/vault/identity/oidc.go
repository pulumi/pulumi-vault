// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure the [Identity Tokens Backend](https://www.vaultproject.io/docs/secrets/identity/index.html#identity-tokens).
//
// The Identity secrets engine is the identity management solution for Vault. It internally maintains
// the clients who are recognized by Vault.
//
// > **NOTE:** Each Vault server may only have one Identity Tokens Backend configuration. Multiple configurations of the resource against the same Vault server will cause a perpetual difference.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.NewOidc(ctx, "server", &identity.OidcArgs{
//				Issuer: pulumi.String("https://www.acme.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type Oidc struct {
	pulumi.CustomResourceState

	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
}

// NewOidc registers a new resource with the given unique name, arguments, and options.
func NewOidc(ctx *pulumi.Context,
	name string, args *OidcArgs, opts ...pulumi.ResourceOption) (*Oidc, error) {
	if args == nil {
		args = &OidcArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Oidc
	err := ctx.RegisterResource("vault:identity/oidc:Oidc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOidc gets an existing Oidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOidc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OidcState, opts ...pulumi.ResourceOption) (*Oidc, error) {
	var resource Oidc
	err := ctx.ReadResource("vault:identity/oidc:Oidc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Oidc resources.
type oidcState struct {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	Issuer *string `pulumi:"issuer"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
}

type OidcState struct {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	Issuer pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
}

func (OidcState) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcState)(nil)).Elem()
}

type oidcArgs struct {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	Issuer *string `pulumi:"issuer"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a Oidc resource.
type OidcArgs struct {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	Issuer pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
}

func (OidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcArgs)(nil)).Elem()
}

type OidcInput interface {
	pulumi.Input

	ToOidcOutput() OidcOutput
	ToOidcOutputWithContext(ctx context.Context) OidcOutput
}

func (*Oidc) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (i *Oidc) ToOidcOutput() OidcOutput {
	return i.ToOidcOutputWithContext(context.Background())
}

func (i *Oidc) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcOutput)
}

// OidcArrayInput is an input type that accepts OidcArray and OidcArrayOutput values.
// You can construct a concrete instance of `OidcArrayInput` via:
//
//	OidcArray{ OidcArgs{...} }
type OidcArrayInput interface {
	pulumi.Input

	ToOidcArrayOutput() OidcArrayOutput
	ToOidcArrayOutputWithContext(context.Context) OidcArrayOutput
}

type OidcArray []OidcInput

func (OidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Oidc)(nil)).Elem()
}

func (i OidcArray) ToOidcArrayOutput() OidcArrayOutput {
	return i.ToOidcArrayOutputWithContext(context.Background())
}

func (i OidcArray) ToOidcArrayOutputWithContext(ctx context.Context) OidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcArrayOutput)
}

// OidcMapInput is an input type that accepts OidcMap and OidcMapOutput values.
// You can construct a concrete instance of `OidcMapInput` via:
//
//	OidcMap{ "key": OidcArgs{...} }
type OidcMapInput interface {
	pulumi.Input

	ToOidcMapOutput() OidcMapOutput
	ToOidcMapOutputWithContext(context.Context) OidcMapOutput
}

type OidcMap map[string]OidcInput

func (OidcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Oidc)(nil)).Elem()
}

func (i OidcMap) ToOidcMapOutput() OidcMapOutput {
	return i.ToOidcMapOutputWithContext(context.Background())
}

func (i OidcMap) ToOidcMapOutputWithContext(ctx context.Context) OidcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcMapOutput)
}

type OidcOutput struct{ *pulumi.OutputState }

func (OidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (o OidcOutput) ToOidcOutput() OidcOutput {
	return o
}

func (o OidcOutput) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return o
}

// Issuer URL to be used in the iss claim of the token. If not set, Vault's
// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
// scheme, host, and optionally, port number and path components, but no query or fragment
// components.
func (o OidcOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
// *Available only for Vault Enterprise*.
func (o OidcOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

type OidcArrayOutput struct{ *pulumi.OutputState }

func (OidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Oidc)(nil)).Elem()
}

func (o OidcArrayOutput) ToOidcArrayOutput() OidcArrayOutput {
	return o
}

func (o OidcArrayOutput) ToOidcArrayOutputWithContext(ctx context.Context) OidcArrayOutput {
	return o
}

func (o OidcArrayOutput) Index(i pulumi.IntInput) OidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Oidc {
		return vs[0].([]*Oidc)[vs[1].(int)]
	}).(OidcOutput)
}

type OidcMapOutput struct{ *pulumi.OutputState }

func (OidcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Oidc)(nil)).Elem()
}

func (o OidcMapOutput) ToOidcMapOutput() OidcMapOutput {
	return o
}

func (o OidcMapOutput) ToOidcMapOutputWithContext(ctx context.Context) OidcMapOutput {
	return o
}

func (o OidcMapOutput) MapIndex(k pulumi.StringInput) OidcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Oidc {
		return vs[0].(map[string]*Oidc)[vs[1].(string)]
	}).(OidcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OidcInput)(nil)).Elem(), &Oidc{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcArrayInput)(nil)).Elem(), OidcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcMapInput)(nil)).Elem(), OidcMap{})
	pulumi.RegisterOutputType(OidcOutput{})
	pulumi.RegisterOutputType(OidcArrayOutput{})
	pulumi.RegisterOutputType(OidcMapOutput{})
}
