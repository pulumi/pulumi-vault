// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EntityPolicies struct {
	pulumi.CustomResourceState

	// ID of the entity.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// Name of the entity.
	EntityName pulumi.StringOutput `pulumi:"entityName"`
	// Should the resource manage policies exclusively
	Exclusive pulumi.BoolPtrOutput `pulumi:"exclusive"`
	// Policies to be tied to the entity.
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
}

// NewEntityPolicies registers a new resource with the given unique name, arguments, and options.
func NewEntityPolicies(ctx *pulumi.Context,
	name string, args *EntityPoliciesArgs, opts ...pulumi.ResourceOption) (*EntityPolicies, error) {
	if args == nil || args.EntityId == nil {
		return nil, errors.New("missing required argument 'EntityId'")
	}
	if args == nil || args.Policies == nil {
		return nil, errors.New("missing required argument 'Policies'")
	}
	if args == nil {
		args = &EntityPoliciesArgs{}
	}
	var resource EntityPolicies
	err := ctx.RegisterResource("vault:identity/entityPolicies:EntityPolicies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntityPolicies gets an existing EntityPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntityPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityPoliciesState, opts ...pulumi.ResourceOption) (*EntityPolicies, error) {
	var resource EntityPolicies
	err := ctx.ReadResource("vault:identity/entityPolicies:EntityPolicies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EntityPolicies resources.
type entityPoliciesState struct {
	// ID of the entity.
	EntityId *string `pulumi:"entityId"`
	// Name of the entity.
	EntityName *string `pulumi:"entityName"`
	// Should the resource manage policies exclusively
	Exclusive *bool `pulumi:"exclusive"`
	// Policies to be tied to the entity.
	Policies []string `pulumi:"policies"`
}

type EntityPoliciesState struct {
	// ID of the entity.
	EntityId pulumi.StringPtrInput
	// Name of the entity.
	EntityName pulumi.StringPtrInput
	// Should the resource manage policies exclusively
	Exclusive pulumi.BoolPtrInput
	// Policies to be tied to the entity.
	Policies pulumi.StringArrayInput
}

func (EntityPoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityPoliciesState)(nil)).Elem()
}

type entityPoliciesArgs struct {
	// ID of the entity.
	EntityId string `pulumi:"entityId"`
	// Should the resource manage policies exclusively
	Exclusive *bool `pulumi:"exclusive"`
	// Policies to be tied to the entity.
	Policies []string `pulumi:"policies"`
}

// The set of arguments for constructing a EntityPolicies resource.
type EntityPoliciesArgs struct {
	// ID of the entity.
	EntityId pulumi.StringInput
	// Should the resource manage policies exclusively
	Exclusive pulumi.BoolPtrInput
	// Policies to be tied to the entity.
	Policies pulumi.StringArrayInput
}

func (EntityPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityPoliciesArgs)(nil)).Elem()
}

type EntityPoliciesInput interface {
	pulumi.Input

	ToEntityPoliciesOutput() EntityPoliciesOutput
	ToEntityPoliciesOutputWithContext(ctx context.Context) EntityPoliciesOutput
}

func (EntityPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPolicies)(nil)).Elem()
}

func (i EntityPolicies) ToEntityPoliciesOutput() EntityPoliciesOutput {
	return i.ToEntityPoliciesOutputWithContext(context.Background())
}

func (i EntityPolicies) ToEntityPoliciesOutputWithContext(ctx context.Context) EntityPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPoliciesOutput)
}

type EntityPoliciesOutput struct {
	*pulumi.OutputState
}

func (EntityPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPoliciesOutput)(nil)).Elem()
}

func (o EntityPoliciesOutput) ToEntityPoliciesOutput() EntityPoliciesOutput {
	return o
}

func (o EntityPoliciesOutput) ToEntityPoliciesOutputWithContext(ctx context.Context) EntityPoliciesOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EntityPoliciesOutput{})
}
