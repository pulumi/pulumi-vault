// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for configuring the totp MFA method.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.NewMfaTotp(ctx, "example", &identity.MfaTotpArgs{
//				Issuer: pulumi.String("issuer1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource can be imported using its `uuid` field, e.g.
//
// ```sh
//
//	$ pulumi import vault:identity/mfaTotp:MfaTotp example 0d89c36a-4ff5-4d70-8749-bb6a5598aeec
//
// ```
type MfaTotp struct {
	pulumi.CustomResourceState

	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm pulumi.StringPtrOutput `pulumi:"algorithm"`
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits pulumi.IntPtrOutput `pulumi:"digits"`
	// The name of the key's issuing organization.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Specifies the size in bytes of the generated key.
	KeySize pulumi.IntPtrOutput `pulumi:"keySize"`
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts pulumi.IntPtrOutput `pulumi:"maxValidationAttempts"`
	// Method ID.
	MethodId pulumi.StringOutput `pulumi:"methodId"`
	// Mount accessor.
	MountAccessor pulumi.StringOutput `pulumi:"mountAccessor"`
	// Method name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Method's namespace ID.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// Method's namespace path.
	NamespacePath pulumi.StringOutput `pulumi:"namespacePath"`
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The pixel size of the generated square QR code.
	QrSize pulumi.IntOutput `pulumi:"qrSize"`
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew pulumi.IntPtrOutput `pulumi:"skew"`
	// MFA type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Resource UUID.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewMfaTotp registers a new resource with the given unique name, arguments, and options.
func NewMfaTotp(ctx *pulumi.Context,
	name string, args *MfaTotpArgs, opts ...pulumi.ResourceOption) (*MfaTotp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	var resource MfaTotp
	err := ctx.RegisterResource("vault:identity/mfaTotp:MfaTotp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfaTotp gets an existing MfaTotp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaTotp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaTotpState, opts ...pulumi.ResourceOption) (*MfaTotp, error) {
	var resource MfaTotp
	err := ctx.ReadResource("vault:identity/mfaTotp:MfaTotp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MfaTotp resources.
type mfaTotpState struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm *string `pulumi:"algorithm"`
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits *int `pulumi:"digits"`
	// The name of the key's issuing organization.
	Issuer *string `pulumi:"issuer"`
	// Specifies the size in bytes of the generated key.
	KeySize *int `pulumi:"keySize"`
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts *int `pulumi:"maxValidationAttempts"`
	// Method ID.
	MethodId *string `pulumi:"methodId"`
	// Mount accessor.
	MountAccessor *string `pulumi:"mountAccessor"`
	// Method name.
	Name *string `pulumi:"name"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// Method's namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// Method's namespace path.
	NamespacePath *string `pulumi:"namespacePath"`
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period *int `pulumi:"period"`
	// The pixel size of the generated square QR code.
	QrSize *int `pulumi:"qrSize"`
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew *int `pulumi:"skew"`
	// MFA type.
	Type *string `pulumi:"type"`
	// Resource UUID.
	Uuid *string `pulumi:"uuid"`
}

type MfaTotpState struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm pulumi.StringPtrInput
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits pulumi.IntPtrInput
	// The name of the key's issuing organization.
	Issuer pulumi.StringPtrInput
	// Specifies the size in bytes of the generated key.
	KeySize pulumi.IntPtrInput
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts pulumi.IntPtrInput
	// Method ID.
	MethodId pulumi.StringPtrInput
	// Mount accessor.
	MountAccessor pulumi.StringPtrInput
	// Method name.
	Name pulumi.StringPtrInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// Method's namespace ID.
	NamespaceId pulumi.StringPtrInput
	// Method's namespace path.
	NamespacePath pulumi.StringPtrInput
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period pulumi.IntPtrInput
	// The pixel size of the generated square QR code.
	QrSize pulumi.IntPtrInput
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew pulumi.IntPtrInput
	// MFA type.
	Type pulumi.StringPtrInput
	// Resource UUID.
	Uuid pulumi.StringPtrInput
}

func (MfaTotpState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaTotpState)(nil)).Elem()
}

type mfaTotpArgs struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm *string `pulumi:"algorithm"`
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits *int `pulumi:"digits"`
	// The name of the key's issuing organization.
	Issuer string `pulumi:"issuer"`
	// Specifies the size in bytes of the generated key.
	KeySize *int `pulumi:"keySize"`
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts *int `pulumi:"maxValidationAttempts"`
	// Target namespace. (requires Enterprise)
	Namespace *string `pulumi:"namespace"`
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period *int `pulumi:"period"`
	// The pixel size of the generated square QR code.
	QrSize *int `pulumi:"qrSize"`
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew *int `pulumi:"skew"`
}

// The set of arguments for constructing a MfaTotp resource.
type MfaTotpArgs struct {
	// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
	Algorithm pulumi.StringPtrInput
	// The number of digits in the generated TOTP token. This value can either be 6 or 8
	Digits pulumi.IntPtrInput
	// The name of the key's issuing organization.
	Issuer pulumi.StringInput
	// Specifies the size in bytes of the generated key.
	KeySize pulumi.IntPtrInput
	// The maximum number of consecutive failed validation attempts allowed.
	MaxValidationAttempts pulumi.IntPtrInput
	// Target namespace. (requires Enterprise)
	Namespace pulumi.StringPtrInput
	// The length of time in seconds used to generate a counter for the TOTP token calculation.
	Period pulumi.IntPtrInput
	// The pixel size of the generated square QR code.
	QrSize pulumi.IntPtrInput
	// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
	Skew pulumi.IntPtrInput
}

func (MfaTotpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaTotpArgs)(nil)).Elem()
}

type MfaTotpInput interface {
	pulumi.Input

	ToMfaTotpOutput() MfaTotpOutput
	ToMfaTotpOutputWithContext(ctx context.Context) MfaTotpOutput
}

func (*MfaTotp) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaTotp)(nil)).Elem()
}

func (i *MfaTotp) ToMfaTotpOutput() MfaTotpOutput {
	return i.ToMfaTotpOutputWithContext(context.Background())
}

func (i *MfaTotp) ToMfaTotpOutputWithContext(ctx context.Context) MfaTotpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaTotpOutput)
}

// MfaTotpArrayInput is an input type that accepts MfaTotpArray and MfaTotpArrayOutput values.
// You can construct a concrete instance of `MfaTotpArrayInput` via:
//
//	MfaTotpArray{ MfaTotpArgs{...} }
type MfaTotpArrayInput interface {
	pulumi.Input

	ToMfaTotpArrayOutput() MfaTotpArrayOutput
	ToMfaTotpArrayOutputWithContext(context.Context) MfaTotpArrayOutput
}

type MfaTotpArray []MfaTotpInput

func (MfaTotpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaTotp)(nil)).Elem()
}

func (i MfaTotpArray) ToMfaTotpArrayOutput() MfaTotpArrayOutput {
	return i.ToMfaTotpArrayOutputWithContext(context.Background())
}

func (i MfaTotpArray) ToMfaTotpArrayOutputWithContext(ctx context.Context) MfaTotpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaTotpArrayOutput)
}

// MfaTotpMapInput is an input type that accepts MfaTotpMap and MfaTotpMapOutput values.
// You can construct a concrete instance of `MfaTotpMapInput` via:
//
//	MfaTotpMap{ "key": MfaTotpArgs{...} }
type MfaTotpMapInput interface {
	pulumi.Input

	ToMfaTotpMapOutput() MfaTotpMapOutput
	ToMfaTotpMapOutputWithContext(context.Context) MfaTotpMapOutput
}

type MfaTotpMap map[string]MfaTotpInput

func (MfaTotpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaTotp)(nil)).Elem()
}

func (i MfaTotpMap) ToMfaTotpMapOutput() MfaTotpMapOutput {
	return i.ToMfaTotpMapOutputWithContext(context.Background())
}

func (i MfaTotpMap) ToMfaTotpMapOutputWithContext(ctx context.Context) MfaTotpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaTotpMapOutput)
}

type MfaTotpOutput struct{ *pulumi.OutputState }

func (MfaTotpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaTotp)(nil)).Elem()
}

func (o MfaTotpOutput) ToMfaTotpOutput() MfaTotpOutput {
	return o
}

func (o MfaTotpOutput) ToMfaTotpOutputWithContext(ctx context.Context) MfaTotpOutput {
	return o
}

// Specifies the hashing algorithm used to generate the TOTP code. Options include SHA1, SHA256, SHA512.
func (o MfaTotpOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringPtrOutput { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The number of digits in the generated TOTP token. This value can either be 6 or 8
func (o MfaTotpOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.IntPtrOutput { return v.Digits }).(pulumi.IntPtrOutput)
}

// The name of the key's issuing organization.
func (o MfaTotpOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Specifies the size in bytes of the generated key.
func (o MfaTotpOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.IntPtrOutput { return v.KeySize }).(pulumi.IntPtrOutput)
}

// The maximum number of consecutive failed validation attempts allowed.
func (o MfaTotpOutput) MaxValidationAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.IntPtrOutput { return v.MaxValidationAttempts }).(pulumi.IntPtrOutput)
}

// Method ID.
func (o MfaTotpOutput) MethodId() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.MethodId }).(pulumi.StringOutput)
}

// Mount accessor.
func (o MfaTotpOutput) MountAccessor() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.MountAccessor }).(pulumi.StringOutput)
}

// Method name.
func (o MfaTotpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Target namespace. (requires Enterprise)
func (o MfaTotpOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Method's namespace ID.
func (o MfaTotpOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// Method's namespace path.
func (o MfaTotpOutput) NamespacePath() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.NamespacePath }).(pulumi.StringOutput)
}

// The length of time in seconds used to generate a counter for the TOTP token calculation.
func (o MfaTotpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The pixel size of the generated square QR code.
func (o MfaTotpOutput) QrSize() pulumi.IntOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.IntOutput { return v.QrSize }).(pulumi.IntOutput)
}

// The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.
func (o MfaTotpOutput) Skew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.IntPtrOutput { return v.Skew }).(pulumi.IntPtrOutput)
}

// MFA type.
func (o MfaTotpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Resource UUID.
func (o MfaTotpOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaTotp) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type MfaTotpArrayOutput struct{ *pulumi.OutputState }

func (MfaTotpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaTotp)(nil)).Elem()
}

func (o MfaTotpArrayOutput) ToMfaTotpArrayOutput() MfaTotpArrayOutput {
	return o
}

func (o MfaTotpArrayOutput) ToMfaTotpArrayOutputWithContext(ctx context.Context) MfaTotpArrayOutput {
	return o
}

func (o MfaTotpArrayOutput) Index(i pulumi.IntInput) MfaTotpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MfaTotp {
		return vs[0].([]*MfaTotp)[vs[1].(int)]
	}).(MfaTotpOutput)
}

type MfaTotpMapOutput struct{ *pulumi.OutputState }

func (MfaTotpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaTotp)(nil)).Elem()
}

func (o MfaTotpMapOutput) ToMfaTotpMapOutput() MfaTotpMapOutput {
	return o
}

func (o MfaTotpMapOutput) ToMfaTotpMapOutputWithContext(ctx context.Context) MfaTotpMapOutput {
	return o
}

func (o MfaTotpMapOutput) MapIndex(k pulumi.StringInput) MfaTotpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MfaTotp {
		return vs[0].(map[string]*MfaTotp)[vs[1].(string)]
	}).(MfaTotpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaTotpInput)(nil)).Elem(), &MfaTotp{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaTotpArrayInput)(nil)).Elem(), MfaTotpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaTotpMapInput)(nil)).Elem(), MfaTotpMap{})
	pulumi.RegisterOutputType(MfaTotpOutput{})
	pulumi.RegisterOutputType(MfaTotpArrayOutput{})
	pulumi.RegisterOutputType(MfaTotpMapOutput{})
}
