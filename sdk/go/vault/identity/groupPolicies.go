// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Database secret backend roles can be imported using the `backend`, `/roles/`, and the `name` e.g.
//
// ```sh
//  $ pulumi import vault:identity/groupPolicies:GroupPolicies example postgres/roles/my-role
// ```
type GroupPolicies struct {
	pulumi.CustomResourceState

	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	Exclusive pulumi.BoolPtrOutput `pulumi:"exclusive"`
	// ID of the group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Name of the group.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Policies to be tied to the group.
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
}

// NewGroupPolicies registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicies(ctx *pulumi.Context,
	name string, args *GroupPoliciesArgs, opts ...pulumi.ResourceOption) (*GroupPolicies, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.Policies == nil {
		return nil, errors.New("missing required argument 'Policies'")
	}
	if args == nil {
		args = &GroupPoliciesArgs{}
	}
	var resource GroupPolicies
	err := ctx.RegisterResource("vault:identity/groupPolicies:GroupPolicies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicies gets an existing GroupPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPoliciesState, opts ...pulumi.ResourceOption) (*GroupPolicies, error) {
	var resource GroupPolicies
	err := ctx.ReadResource("vault:identity/groupPolicies:GroupPolicies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicies resources.
type groupPoliciesState struct {
	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	Exclusive *bool `pulumi:"exclusive"`
	// ID of the group.
	GroupId *string `pulumi:"groupId"`
	// Name of the group.
	GroupName *string `pulumi:"groupName"`
	// Policies to be tied to the group.
	Policies []string `pulumi:"policies"`
}

type GroupPoliciesState struct {
	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	Exclusive pulumi.BoolPtrInput
	// ID of the group.
	GroupId pulumi.StringPtrInput
	// Name of the group.
	GroupName pulumi.StringPtrInput
	// Policies to be tied to the group.
	Policies pulumi.StringArrayInput
}

func (GroupPoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPoliciesState)(nil)).Elem()
}

type groupPoliciesArgs struct {
	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	Exclusive *bool `pulumi:"exclusive"`
	// ID of the group.
	GroupId string `pulumi:"groupId"`
	// Policies to be tied to the group.
	Policies []string `pulumi:"policies"`
}

// The set of arguments for constructing a GroupPolicies resource.
type GroupPoliciesArgs struct {
	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	Exclusive pulumi.BoolPtrInput
	// ID of the group.
	GroupId pulumi.StringInput
	// Policies to be tied to the group.
	Policies pulumi.StringArrayInput
}

func (GroupPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPoliciesArgs)(nil)).Elem()
}

type GroupPoliciesInput interface {
	pulumi.Input

	ToGroupPoliciesOutput() GroupPoliciesOutput
	ToGroupPoliciesOutputWithContext(ctx context.Context) GroupPoliciesOutput
}

func (GroupPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicies)(nil)).Elem()
}

func (i GroupPolicies) ToGroupPoliciesOutput() GroupPoliciesOutput {
	return i.ToGroupPoliciesOutputWithContext(context.Background())
}

func (i GroupPolicies) ToGroupPoliciesOutputWithContext(ctx context.Context) GroupPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPoliciesOutput)
}

type GroupPoliciesOutput struct {
	*pulumi.OutputState
}

func (GroupPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPoliciesOutput)(nil)).Elem()
}

func (o GroupPoliciesOutput) ToGroupPoliciesOutput() GroupPoliciesOutput {
	return o
}

func (o GroupPoliciesOutput) ToGroupPoliciesOutputWithContext(ctx context.Context) GroupPoliciesOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GroupPoliciesOutput{})
}
