// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			key, err := identity.NewOidcKey(ctx, "key", &identity.OidcKeyArgs{
//				Algorithm: pulumi.String("RS256"),
//			})
//			if err != nil {
//				return err
//			}
//			roleOidcRole, err := identity.NewOidcRole(ctx, "roleOidcRole", &identity.OidcRoleArgs{
//				Key: key.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = identity.NewOidcKeyAllowedClientID(ctx, "roleOidcKeyAllowedClientID", &identity.OidcKeyAllowedClientIDArgs{
//				KeyName:         key.Name,
//				AllowedClientId: roleOidcRole.ClientId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// The key can be imported with the key name, for example:
//
// ```sh
// $ pulumi import vault:identity/oidcKey:OidcKey key key
// ```
type OidcKey struct {
	pulumi.CustomResourceState

	// Signing algorithm to use. Signing algorithm to use.
	// Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
	Algorithm pulumi.StringPtrOutput `pulumi:"algorithm"`
	// Array of role client ID allowed to use this key for signing. If
	// empty, no roles are allowed. If `["*"]`, all roles are allowed.
	AllowedClientIds pulumi.StringArrayOutput `pulumi:"allowedClientIds"`
	// Name of the OIDC Key to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// How often to generate a new signing key in number of seconds
	RotationPeriod pulumi.IntPtrOutput `pulumi:"rotationPeriod"`
	// "Controls how long the public portion of a signing key will be
	// available for verification after being rotated in seconds.
	VerificationTtl pulumi.IntPtrOutput `pulumi:"verificationTtl"`
}

// NewOidcKey registers a new resource with the given unique name, arguments, and options.
func NewOidcKey(ctx *pulumi.Context,
	name string, args *OidcKeyArgs, opts ...pulumi.ResourceOption) (*OidcKey, error) {
	if args == nil {
		args = &OidcKeyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OidcKey
	err := ctx.RegisterResource("vault:identity/oidcKey:OidcKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOidcKey gets an existing OidcKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOidcKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OidcKeyState, opts ...pulumi.ResourceOption) (*OidcKey, error) {
	var resource OidcKey
	err := ctx.ReadResource("vault:identity/oidcKey:OidcKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OidcKey resources.
type oidcKeyState struct {
	// Signing algorithm to use. Signing algorithm to use.
	// Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
	Algorithm *string `pulumi:"algorithm"`
	// Array of role client ID allowed to use this key for signing. If
	// empty, no roles are allowed. If `["*"]`, all roles are allowed.
	AllowedClientIds []string `pulumi:"allowedClientIds"`
	// Name of the OIDC Key to create.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// How often to generate a new signing key in number of seconds
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// "Controls how long the public portion of a signing key will be
	// available for verification after being rotated in seconds.
	VerificationTtl *int `pulumi:"verificationTtl"`
}

type OidcKeyState struct {
	// Signing algorithm to use. Signing algorithm to use.
	// Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
	Algorithm pulumi.StringPtrInput
	// Array of role client ID allowed to use this key for signing. If
	// empty, no roles are allowed. If `["*"]`, all roles are allowed.
	AllowedClientIds pulumi.StringArrayInput
	// Name of the OIDC Key to create.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// How often to generate a new signing key in number of seconds
	RotationPeriod pulumi.IntPtrInput
	// "Controls how long the public portion of a signing key will be
	// available for verification after being rotated in seconds.
	VerificationTtl pulumi.IntPtrInput
}

func (OidcKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcKeyState)(nil)).Elem()
}

type oidcKeyArgs struct {
	// Signing algorithm to use. Signing algorithm to use.
	// Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
	Algorithm *string `pulumi:"algorithm"`
	// Array of role client ID allowed to use this key for signing. If
	// empty, no roles are allowed. If `["*"]`, all roles are allowed.
	AllowedClientIds []string `pulumi:"allowedClientIds"`
	// Name of the OIDC Key to create.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// How often to generate a new signing key in number of seconds
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// "Controls how long the public portion of a signing key will be
	// available for verification after being rotated in seconds.
	VerificationTtl *int `pulumi:"verificationTtl"`
}

// The set of arguments for constructing a OidcKey resource.
type OidcKeyArgs struct {
	// Signing algorithm to use. Signing algorithm to use.
	// Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
	Algorithm pulumi.StringPtrInput
	// Array of role client ID allowed to use this key for signing. If
	// empty, no roles are allowed. If `["*"]`, all roles are allowed.
	AllowedClientIds pulumi.StringArrayInput
	// Name of the OIDC Key to create.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// How often to generate a new signing key in number of seconds
	RotationPeriod pulumi.IntPtrInput
	// "Controls how long the public portion of a signing key will be
	// available for verification after being rotated in seconds.
	VerificationTtl pulumi.IntPtrInput
}

func (OidcKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcKeyArgs)(nil)).Elem()
}

type OidcKeyInput interface {
	pulumi.Input

	ToOidcKeyOutput() OidcKeyOutput
	ToOidcKeyOutputWithContext(ctx context.Context) OidcKeyOutput
}

func (*OidcKey) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcKey)(nil)).Elem()
}

func (i *OidcKey) ToOidcKeyOutput() OidcKeyOutput {
	return i.ToOidcKeyOutputWithContext(context.Background())
}

func (i *OidcKey) ToOidcKeyOutputWithContext(ctx context.Context) OidcKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcKeyOutput)
}

// OidcKeyArrayInput is an input type that accepts OidcKeyArray and OidcKeyArrayOutput values.
// You can construct a concrete instance of `OidcKeyArrayInput` via:
//
//	OidcKeyArray{ OidcKeyArgs{...} }
type OidcKeyArrayInput interface {
	pulumi.Input

	ToOidcKeyArrayOutput() OidcKeyArrayOutput
	ToOidcKeyArrayOutputWithContext(context.Context) OidcKeyArrayOutput
}

type OidcKeyArray []OidcKeyInput

func (OidcKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OidcKey)(nil)).Elem()
}

func (i OidcKeyArray) ToOidcKeyArrayOutput() OidcKeyArrayOutput {
	return i.ToOidcKeyArrayOutputWithContext(context.Background())
}

func (i OidcKeyArray) ToOidcKeyArrayOutputWithContext(ctx context.Context) OidcKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcKeyArrayOutput)
}

// OidcKeyMapInput is an input type that accepts OidcKeyMap and OidcKeyMapOutput values.
// You can construct a concrete instance of `OidcKeyMapInput` via:
//
//	OidcKeyMap{ "key": OidcKeyArgs{...} }
type OidcKeyMapInput interface {
	pulumi.Input

	ToOidcKeyMapOutput() OidcKeyMapOutput
	ToOidcKeyMapOutputWithContext(context.Context) OidcKeyMapOutput
}

type OidcKeyMap map[string]OidcKeyInput

func (OidcKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OidcKey)(nil)).Elem()
}

func (i OidcKeyMap) ToOidcKeyMapOutput() OidcKeyMapOutput {
	return i.ToOidcKeyMapOutputWithContext(context.Background())
}

func (i OidcKeyMap) ToOidcKeyMapOutputWithContext(ctx context.Context) OidcKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcKeyMapOutput)
}

type OidcKeyOutput struct{ *pulumi.OutputState }

func (OidcKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcKey)(nil)).Elem()
}

func (o OidcKeyOutput) ToOidcKeyOutput() OidcKeyOutput {
	return o
}

func (o OidcKeyOutput) ToOidcKeyOutputWithContext(ctx context.Context) OidcKeyOutput {
	return o
}

// Signing algorithm to use. Signing algorithm to use.
// Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
func (o OidcKeyOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcKey) pulumi.StringPtrOutput { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// Array of role client ID allowed to use this key for signing. If
// empty, no roles are allowed. If `["*"]`, all roles are allowed.
func (o OidcKeyOutput) AllowedClientIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OidcKey) pulumi.StringArrayOutput { return v.AllowedClientIds }).(pulumi.StringArrayOutput)
}

// Name of the OIDC Key to create.
func (o OidcKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OidcKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o OidcKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcKey) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// How often to generate a new signing key in number of seconds
func (o OidcKeyOutput) RotationPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OidcKey) pulumi.IntPtrOutput { return v.RotationPeriod }).(pulumi.IntPtrOutput)
}

// "Controls how long the public portion of a signing key will be
// available for verification after being rotated in seconds.
func (o OidcKeyOutput) VerificationTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OidcKey) pulumi.IntPtrOutput { return v.VerificationTtl }).(pulumi.IntPtrOutput)
}

type OidcKeyArrayOutput struct{ *pulumi.OutputState }

func (OidcKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OidcKey)(nil)).Elem()
}

func (o OidcKeyArrayOutput) ToOidcKeyArrayOutput() OidcKeyArrayOutput {
	return o
}

func (o OidcKeyArrayOutput) ToOidcKeyArrayOutputWithContext(ctx context.Context) OidcKeyArrayOutput {
	return o
}

func (o OidcKeyArrayOutput) Index(i pulumi.IntInput) OidcKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OidcKey {
		return vs[0].([]*OidcKey)[vs[1].(int)]
	}).(OidcKeyOutput)
}

type OidcKeyMapOutput struct{ *pulumi.OutputState }

func (OidcKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OidcKey)(nil)).Elem()
}

func (o OidcKeyMapOutput) ToOidcKeyMapOutput() OidcKeyMapOutput {
	return o
}

func (o OidcKeyMapOutput) ToOidcKeyMapOutputWithContext(ctx context.Context) OidcKeyMapOutput {
	return o
}

func (o OidcKeyMapOutput) MapIndex(k pulumi.StringInput) OidcKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OidcKey {
		return vs[0].(map[string]*OidcKey)[vs[1].(string)]
	}).(OidcKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OidcKeyInput)(nil)).Elem(), &OidcKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcKeyArrayInput)(nil)).Elem(), OidcKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcKeyMapInput)(nil)).Elem(), OidcKeyMap{})
	pulumi.RegisterOutputType(OidcKeyOutput{})
	pulumi.RegisterOutputType(OidcKeyArrayOutput{})
	pulumi.RegisterOutputType(OidcKeyMapOutput{})
}
