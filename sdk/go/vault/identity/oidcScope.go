// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages OIDC Scopes in a Vault server. See the [Vault documentation](https://www.vaultproject.io/api-docs/secret/identity/oidc-provider#create-or-update-a-scope)
// for more information.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.NewOidcScope(ctx, "groups", &identity.OidcScopeArgs{
//				Description: pulumi.String("Vault OIDC Groups Scope"),
//				Template:    pulumi.String("{\"groups\":{{identity.entity.groups.names}}}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// OIDC Scopes can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import vault:identity/oidcScope:OidcScope groups groups
// ```
type OidcScope struct {
	pulumi.CustomResourceState

	// A description of the scope.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the scope. The `openid` scope name is reserved.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	Template pulumi.StringPtrOutput `pulumi:"template"`
}

// NewOidcScope registers a new resource with the given unique name, arguments, and options.
func NewOidcScope(ctx *pulumi.Context,
	name string, args *OidcScopeArgs, opts ...pulumi.ResourceOption) (*OidcScope, error) {
	if args == nil {
		args = &OidcScopeArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OidcScope
	err := ctx.RegisterResource("vault:identity/oidcScope:OidcScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOidcScope gets an existing OidcScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOidcScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OidcScopeState, opts ...pulumi.ResourceOption) (*OidcScope, error) {
	var resource OidcScope
	err := ctx.ReadResource("vault:identity/oidcScope:OidcScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OidcScope resources.
type oidcScopeState struct {
	// A description of the scope.
	Description *string `pulumi:"description"`
	// The name of the scope. The `openid` scope name is reserved.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	Template *string `pulumi:"template"`
}

type OidcScopeState struct {
	// A description of the scope.
	Description pulumi.StringPtrInput
	// The name of the scope. The `openid` scope name is reserved.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	Template pulumi.StringPtrInput
}

func (OidcScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcScopeState)(nil)).Elem()
}

type oidcScopeArgs struct {
	// A description of the scope.
	Description *string `pulumi:"description"`
	// The name of the scope. The `openid` scope name is reserved.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	Template *string `pulumi:"template"`
}

// The set of arguments for constructing a OidcScope resource.
type OidcScopeArgs struct {
	// A description of the scope.
	Description pulumi.StringPtrInput
	// The name of the scope. The `openid` scope name is reserved.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	Template pulumi.StringPtrInput
}

func (OidcScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcScopeArgs)(nil)).Elem()
}

type OidcScopeInput interface {
	pulumi.Input

	ToOidcScopeOutput() OidcScopeOutput
	ToOidcScopeOutputWithContext(ctx context.Context) OidcScopeOutput
}

func (*OidcScope) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcScope)(nil)).Elem()
}

func (i *OidcScope) ToOidcScopeOutput() OidcScopeOutput {
	return i.ToOidcScopeOutputWithContext(context.Background())
}

func (i *OidcScope) ToOidcScopeOutputWithContext(ctx context.Context) OidcScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcScopeOutput)
}

// OidcScopeArrayInput is an input type that accepts OidcScopeArray and OidcScopeArrayOutput values.
// You can construct a concrete instance of `OidcScopeArrayInput` via:
//
//	OidcScopeArray{ OidcScopeArgs{...} }
type OidcScopeArrayInput interface {
	pulumi.Input

	ToOidcScopeArrayOutput() OidcScopeArrayOutput
	ToOidcScopeArrayOutputWithContext(context.Context) OidcScopeArrayOutput
}

type OidcScopeArray []OidcScopeInput

func (OidcScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OidcScope)(nil)).Elem()
}

func (i OidcScopeArray) ToOidcScopeArrayOutput() OidcScopeArrayOutput {
	return i.ToOidcScopeArrayOutputWithContext(context.Background())
}

func (i OidcScopeArray) ToOidcScopeArrayOutputWithContext(ctx context.Context) OidcScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcScopeArrayOutput)
}

// OidcScopeMapInput is an input type that accepts OidcScopeMap and OidcScopeMapOutput values.
// You can construct a concrete instance of `OidcScopeMapInput` via:
//
//	OidcScopeMap{ "key": OidcScopeArgs{...} }
type OidcScopeMapInput interface {
	pulumi.Input

	ToOidcScopeMapOutput() OidcScopeMapOutput
	ToOidcScopeMapOutputWithContext(context.Context) OidcScopeMapOutput
}

type OidcScopeMap map[string]OidcScopeInput

func (OidcScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OidcScope)(nil)).Elem()
}

func (i OidcScopeMap) ToOidcScopeMapOutput() OidcScopeMapOutput {
	return i.ToOidcScopeMapOutputWithContext(context.Background())
}

func (i OidcScopeMap) ToOidcScopeMapOutputWithContext(ctx context.Context) OidcScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcScopeMapOutput)
}

type OidcScopeOutput struct{ *pulumi.OutputState }

func (OidcScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcScope)(nil)).Elem()
}

func (o OidcScopeOutput) ToOidcScopeOutput() OidcScopeOutput {
	return o
}

func (o OidcScopeOutput) ToOidcScopeOutputWithContext(ctx context.Context) OidcScopeOutput {
	return o
}

// A description of the scope.
func (o OidcScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the scope. The `openid` scope name is reserved.
func (o OidcScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OidcScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o OidcScopeOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcScope) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
func (o OidcScopeOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcScope) pulumi.StringPtrOutput { return v.Template }).(pulumi.StringPtrOutput)
}

type OidcScopeArrayOutput struct{ *pulumi.OutputState }

func (OidcScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OidcScope)(nil)).Elem()
}

func (o OidcScopeArrayOutput) ToOidcScopeArrayOutput() OidcScopeArrayOutput {
	return o
}

func (o OidcScopeArrayOutput) ToOidcScopeArrayOutputWithContext(ctx context.Context) OidcScopeArrayOutput {
	return o
}

func (o OidcScopeArrayOutput) Index(i pulumi.IntInput) OidcScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OidcScope {
		return vs[0].([]*OidcScope)[vs[1].(int)]
	}).(OidcScopeOutput)
}

type OidcScopeMapOutput struct{ *pulumi.OutputState }

func (OidcScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OidcScope)(nil)).Elem()
}

func (o OidcScopeMapOutput) ToOidcScopeMapOutput() OidcScopeMapOutput {
	return o
}

func (o OidcScopeMapOutput) ToOidcScopeMapOutputWithContext(ctx context.Context) OidcScopeMapOutput {
	return o
}

func (o OidcScopeMapOutput) MapIndex(k pulumi.StringInput) OidcScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OidcScope {
		return vs[0].(map[string]*OidcScope)[vs[1].(string)]
	}).(OidcScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OidcScopeInput)(nil)).Elem(), &OidcScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcScopeArrayInput)(nil)).Elem(), OidcScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcScopeMapInput)(nil)).Elem(), OidcScopeMap{})
	pulumi.RegisterOutputType(OidcScopeOutput{})
	pulumi.RegisterOutputType(OidcScopeArrayOutput{})
	pulumi.RegisterOutputType(OidcScopeMapOutput{})
}
