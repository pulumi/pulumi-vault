// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GroupMemberEntityIds struct {
	pulumi.CustomResourceState

	// Should the resource manage member entity ids exclusively? Beware of race conditions when disabling exclusive management
	Exclusive pulumi.BoolPtrOutput `pulumi:"exclusive"`
	// ID of the group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Name of the group.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Entity IDs to be assigned as group members.
	MemberEntityIds pulumi.StringArrayOutput `pulumi:"memberEntityIds"`
}

// NewGroupMemberEntityIds registers a new resource with the given unique name, arguments, and options.
func NewGroupMemberEntityIds(ctx *pulumi.Context,
	name string, args *GroupMemberEntityIdsArgs, opts ...pulumi.ResourceOption) (*GroupMemberEntityIds, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil {
		args = &GroupMemberEntityIdsArgs{}
	}
	var resource GroupMemberEntityIds
	err := ctx.RegisterResource("vault:identity/groupMemberEntityIds:GroupMemberEntityIds", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMemberEntityIds gets an existing GroupMemberEntityIds resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMemberEntityIds(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMemberEntityIdsState, opts ...pulumi.ResourceOption) (*GroupMemberEntityIds, error) {
	var resource GroupMemberEntityIds
	err := ctx.ReadResource("vault:identity/groupMemberEntityIds:GroupMemberEntityIds", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMemberEntityIds resources.
type groupMemberEntityIdsState struct {
	// Should the resource manage member entity ids exclusively? Beware of race conditions when disabling exclusive management
	Exclusive *bool `pulumi:"exclusive"`
	// ID of the group.
	GroupId *string `pulumi:"groupId"`
	// Name of the group.
	GroupName *string `pulumi:"groupName"`
	// Entity IDs to be assigned as group members.
	MemberEntityIds []string `pulumi:"memberEntityIds"`
}

type GroupMemberEntityIdsState struct {
	// Should the resource manage member entity ids exclusively? Beware of race conditions when disabling exclusive management
	Exclusive pulumi.BoolPtrInput
	// ID of the group.
	GroupId pulumi.StringPtrInput
	// Name of the group.
	GroupName pulumi.StringPtrInput
	// Entity IDs to be assigned as group members.
	MemberEntityIds pulumi.StringArrayInput
}

func (GroupMemberEntityIdsState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMemberEntityIdsState)(nil)).Elem()
}

type groupMemberEntityIdsArgs struct {
	// Should the resource manage member entity ids exclusively? Beware of race conditions when disabling exclusive management
	Exclusive *bool `pulumi:"exclusive"`
	// ID of the group.
	GroupId string `pulumi:"groupId"`
	// Entity IDs to be assigned as group members.
	MemberEntityIds []string `pulumi:"memberEntityIds"`
}

// The set of arguments for constructing a GroupMemberEntityIds resource.
type GroupMemberEntityIdsArgs struct {
	// Should the resource manage member entity ids exclusively? Beware of race conditions when disabling exclusive management
	Exclusive pulumi.BoolPtrInput
	// ID of the group.
	GroupId pulumi.StringInput
	// Entity IDs to be assigned as group members.
	MemberEntityIds pulumi.StringArrayInput
}

func (GroupMemberEntityIdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMemberEntityIdsArgs)(nil)).Elem()
}

type GroupMemberEntityIdsInput interface {
	pulumi.Input

	ToGroupMemberEntityIdsOutput() GroupMemberEntityIdsOutput
	ToGroupMemberEntityIdsOutputWithContext(ctx context.Context) GroupMemberEntityIdsOutput
}

func (GroupMemberEntityIds) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMemberEntityIds)(nil)).Elem()
}

func (i GroupMemberEntityIds) ToGroupMemberEntityIdsOutput() GroupMemberEntityIdsOutput {
	return i.ToGroupMemberEntityIdsOutputWithContext(context.Background())
}

func (i GroupMemberEntityIds) ToGroupMemberEntityIdsOutputWithContext(ctx context.Context) GroupMemberEntityIdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMemberEntityIdsOutput)
}

type GroupMemberEntityIdsOutput struct {
	*pulumi.OutputState
}

func (GroupMemberEntityIdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMemberEntityIdsOutput)(nil)).Elem()
}

func (o GroupMemberEntityIdsOutput) ToGroupMemberEntityIdsOutput() GroupMemberEntityIdsOutput {
	return o
}

func (o GroupMemberEntityIdsOutput) ToGroupMemberEntityIdsOutputWithContext(ctx context.Context) GroupMemberEntityIdsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GroupMemberEntityIdsOutput{})
}
