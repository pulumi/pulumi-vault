// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Github Auth mount in a Vault server. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/github.html) for more
// information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault/github"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := github.NewAuthBackend(ctx, "example", &github.AuthBackendArgs{
// 			Organization: pulumi.String("myorg"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Github authentication mounts can be imported using the `path`, e.g.
//
// ```sh
//  $ pulumi import vault:github/authBackend:AuthBackend example github
// ```
type AuthBackend struct {
	pulumi.CustomResourceState

	// The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// The API endpoint to use. Useful if you
	// are running GitHub Enterprise or an API-compatible authentication server.
	BaseUrl pulumi.StringPtrOutput `pulumi:"baseUrl"`
	// Specifies the description of the mount.
	// This overrides the current stored value, if any.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Maximum duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_max_ttl` instead if you are running Vault >= 1.2
	MaxTtl pulumi.StringPtrOutput `pulumi:"maxTtl"`
	// The organization configured users must be part of.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Path where the auth backend is mounted. Defaults to `auth/github`
	// if not specified.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayOutput `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrOutput `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrOutput `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrOutput `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrOutput `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrOutput `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayOutput `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrOutput `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrOutput `pulumi:"tokenType"`
	// Duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_ttl` instead if you are running Vault >= 1.2
	Ttl  pulumi.StringPtrOutput `pulumi:"ttl"`
	Tune AuthBackendTuneOutput  `pulumi:"tune"`
}

// NewAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewAuthBackend(ctx *pulumi.Context,
	name string, args *AuthBackendArgs, opts ...pulumi.ResourceOption) (*AuthBackend, error) {
	if args == nil || args.Organization == nil {
		return nil, errors.New("missing required argument 'Organization'")
	}
	if args == nil {
		args = &AuthBackendArgs{}
	}
	var resource AuthBackend
	err := ctx.RegisterResource("vault:github/authBackend:AuthBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackend gets an existing AuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendState, opts ...pulumi.ResourceOption) (*AuthBackend, error) {
	var resource AuthBackend
	err := ctx.ReadResource("vault:github/authBackend:AuthBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackend resources.
type authBackendState struct {
	// The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
	Accessor *string `pulumi:"accessor"`
	// The API endpoint to use. Useful if you
	// are running GitHub Enterprise or an API-compatible authentication server.
	BaseUrl *string `pulumi:"baseUrl"`
	// Specifies the description of the mount.
	// This overrides the current stored value, if any.
	Description *string `pulumi:"description"`
	// Maximum duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_max_ttl` instead if you are running Vault >= 1.2
	MaxTtl *string `pulumi:"maxTtl"`
	// The organization configured users must be part of.
	Organization *string `pulumi:"organization"`
	// Path where the auth backend is mounted. Defaults to `auth/github`
	// if not specified.
	Path *string `pulumi:"path"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType *string `pulumi:"tokenType"`
	// Duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_ttl` instead if you are running Vault >= 1.2
	Ttl  *string          `pulumi:"ttl"`
	Tune *AuthBackendTune `pulumi:"tune"`
}

type AuthBackendState struct {
	// The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
	Accessor pulumi.StringPtrInput
	// The API endpoint to use. Useful if you
	// are running GitHub Enterprise or an API-compatible authentication server.
	BaseUrl pulumi.StringPtrInput
	// Specifies the description of the mount.
	// This overrides the current stored value, if any.
	Description pulumi.StringPtrInput
	// Maximum duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_max_ttl` instead if you are running Vault >= 1.2
	MaxTtl pulumi.StringPtrInput
	// The organization configured users must be part of.
	Organization pulumi.StringPtrInput
	// Path where the auth backend is mounted. Defaults to `auth/github`
	// if not specified.
	Path pulumi.StringPtrInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrInput
	// Duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_ttl` instead if you are running Vault >= 1.2
	Ttl  pulumi.StringPtrInput
	Tune AuthBackendTunePtrInput
}

func (AuthBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendState)(nil)).Elem()
}

type authBackendArgs struct {
	// The API endpoint to use. Useful if you
	// are running GitHub Enterprise or an API-compatible authentication server.
	BaseUrl *string `pulumi:"baseUrl"`
	// Specifies the description of the mount.
	// This overrides the current stored value, if any.
	Description *string `pulumi:"description"`
	// Maximum duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_max_ttl` instead if you are running Vault >= 1.2
	MaxTtl *string `pulumi:"maxTtl"`
	// The organization configured users must be part of.
	Organization string `pulumi:"organization"`
	// Path where the auth backend is mounted. Defaults to `auth/github`
	// if not specified.
	Path *string `pulumi:"path"`
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs []string `pulumi:"tokenBoundCidrs"`
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl *int `pulumi:"tokenExplicitMaxTtl"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int `pulumi:"tokenMaxTtl"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `pulumi:"tokenNoDefaultPolicy"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int `pulumi:"tokenNumUses"`
	// Generated Token's Period
	TokenPeriod *int `pulumi:"tokenPeriod"`
	// Generated Token's Policies
	TokenPolicies []string `pulumi:"tokenPolicies"`
	// The initial ttl of the token to generate in seconds
	TokenTtl *int `pulumi:"tokenTtl"`
	// The type of token to generate, service or batch
	TokenType *string `pulumi:"tokenType"`
	// Duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_ttl` instead if you are running Vault >= 1.2
	Ttl  *string          `pulumi:"ttl"`
	Tune *AuthBackendTune `pulumi:"tune"`
}

// The set of arguments for constructing a AuthBackend resource.
type AuthBackendArgs struct {
	// The API endpoint to use. Useful if you
	// are running GitHub Enterprise or an API-compatible authentication server.
	BaseUrl pulumi.StringPtrInput
	// Specifies the description of the mount.
	// This overrides the current stored value, if any.
	Description pulumi.StringPtrInput
	// Maximum duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_max_ttl` instead if you are running Vault >= 1.2
	MaxTtl pulumi.StringPtrInput
	// The organization configured users must be part of.
	Organization pulumi.StringInput
	// Path where the auth backend is mounted. Defaults to `auth/github`
	// if not specified.
	Path pulumi.StringPtrInput
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	TokenBoundCidrs pulumi.StringArrayInput
	// Generated Token's Explicit Maximum TTL in seconds
	TokenExplicitMaxTtl pulumi.IntPtrInput
	// The maximum lifetime of the generated token
	TokenMaxTtl pulumi.IntPtrInput
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy pulumi.BoolPtrInput
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses pulumi.IntPtrInput
	// Generated Token's Period
	TokenPeriod pulumi.IntPtrInput
	// Generated Token's Policies
	TokenPolicies pulumi.StringArrayInput
	// The initial ttl of the token to generate in seconds
	TokenTtl pulumi.IntPtrInput
	// The type of token to generate, service or batch
	TokenType pulumi.StringPtrInput
	// Duration after which authentication will be expired.
	// This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
	//
	// Deprecated: use `token_ttl` instead if you are running Vault >= 1.2
	Ttl  pulumi.StringPtrInput
	Tune AuthBackendTunePtrInput
}

func (AuthBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendArgs)(nil)).Elem()
}

type AuthBackendInput interface {
	pulumi.Input

	ToAuthBackendOutput() AuthBackendOutput
	ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput
}

func (AuthBackend) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthBackend)(nil)).Elem()
}

func (i AuthBackend) ToAuthBackendOutput() AuthBackendOutput {
	return i.ToAuthBackendOutputWithContext(context.Background())
}

func (i AuthBackend) ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendOutput)
}

type AuthBackendOutput struct {
	*pulumi.OutputState
}

func (AuthBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthBackendOutput)(nil)).Elem()
}

func (o AuthBackendOutput) ToAuthBackendOutput() AuthBackendOutput {
	return o
}

func (o AuthBackendOutput) ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AuthBackendOutput{})
}
