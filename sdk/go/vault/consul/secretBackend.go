// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ### Creating a standard backend resource:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewSecretBackend(ctx, "test", &consul.SecretBackendArgs{
//				Path:        pulumi.String("consul"),
//				Description: pulumi.String("Manages the Consul backend"),
//				Address:     pulumi.String("127.0.0.1:8500"),
//				Token:       pulumi.String("4240861b-ce3d-8530-115a-521ff070dd29"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating a backend resource to bootstrap a new Consul instance:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/consul"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := consul.NewSecretBackend(ctx, "test", &consul.SecretBackendArgs{
//				Path:        pulumi.String("consul"),
//				Description: pulumi.String("Bootstrap the Consul backend"),
//				Address:     pulumi.String("127.0.0.1:8500"),
//				Bootstrap:   pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Consul secret backends can be imported using the `path`, e.g.
//
// ```sh
// $ pulumi import vault:consul/secretBackend:SecretBackend example consul
// ```
type SecretBackend struct {
	pulumi.CustomResourceState

	// Accessor of the mount
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address pulumi.StringOutput `pulumi:"address"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayOutput `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayOutput `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacResponseKeys"`
	// Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
	Bootstrap pulumi.BoolPtrOutput `pulumi:"bootstrap"`
	// CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
	CaCert pulumi.StringPtrOutput `pulumi:"caCert"`
	// Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if
	// this is set you need to also set client_key.
	ClientCert pulumi.StringPtrOutput `pulumi:"clientCert"`
	// Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set
	// you need to also set client_cert.
	ClientKey pulumi.StringPtrOutput `pulumi:"clientKey"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrOutput `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayOutput `pulumi:"delegatedAuthAccessors"`
	// A human-friendly description for this backend.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrOutput `pulumi:"disableRemount"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrOutput `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolOutput `pulumi:"forceNoCache"`
	// The key to use for signing plugin workload identity tokens
	IdentityTokenKey pulumi.StringPtrOutput `pulumi:"identityTokenKey"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrOutput `pulumi:"listingVisibility"`
	// Specifies if the secret backend is local only
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrOutput `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapOutput `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayOutput `pulumi:"passthroughRequestHeaders"`
	// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults
	// to `consul`.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrOutput `pulumi:"pluginVersion"`
	// Specifies the URL scheme to use. Defaults to `http`.
	Scheme pulumi.StringPtrOutput `pulumi:"scheme"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolOutput `pulumi:"sealWrap"`
	// Specifies the Consul token to use when managing or issuing new tokens.
	Token pulumi.StringPtrOutput `pulumi:"token"`
}

// NewSecretBackend registers a new resource with the given unique name, arguments, and options.
func NewSecretBackend(ctx *pulumi.Context,
	name string, args *SecretBackendArgs, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.ClientCert != nil {
		args.ClientCert = pulumi.ToSecret(args.ClientCert).(pulumi.StringPtrInput)
	}
	if args.ClientKey != nil {
		args.ClientKey = pulumi.ToSecret(args.ClientKey).(pulumi.StringPtrInput)
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientCert",
		"clientKey",
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretBackend
	err := ctx.RegisterResource("vault:consul/secretBackend:SecretBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackend gets an existing SecretBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendState, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	var resource SecretBackend
	err := ctx.ReadResource("vault:consul/secretBackend:SecretBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackend resources.
type secretBackendState struct {
	// Accessor of the mount
	Accessor *string `pulumi:"accessor"`
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address *string `pulumi:"address"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []string `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
	Bootstrap *bool `pulumi:"bootstrap"`
	// CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
	CaCert *string `pulumi:"caCert"`
	// Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if
	// this is set you need to also set client_key.
	ClientCert *string `pulumi:"clientCert"`
	// Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set
	// you need to also set client_cert.
	ClientKey *string `pulumi:"clientKey"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []string `pulumi:"delegatedAuthAccessors"`
	// A human-friendly description for this backend.
	Description *string `pulumi:"description"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache *bool `pulumi:"forceNoCache"`
	// The key to use for signing plugin workload identity tokens
	IdentityTokenKey *string `pulumi:"identityTokenKey"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `pulumi:"listingVisibility"`
	// Specifies if the secret backend is local only
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]string `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []string `pulumi:"passthroughRequestHeaders"`
	// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults
	// to `consul`.
	Path *string `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `pulumi:"pluginVersion"`
	// Specifies the URL scheme to use. Defaults to `http`.
	Scheme *string `pulumi:"scheme"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// Specifies the Consul token to use when managing or issuing new tokens.
	Token *string `pulumi:"token"`
}

type SecretBackendState struct {
	// Accessor of the mount
	Accessor pulumi.StringPtrInput
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address pulumi.StringPtrInput
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayInput
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
	Bootstrap pulumi.BoolPtrInput
	// CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
	CaCert pulumi.StringPtrInput
	// Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if
	// this is set you need to also set client_key.
	ClientCert pulumi.StringPtrInput
	// Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set
	// you need to also set client_cert.
	ClientKey pulumi.StringPtrInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayInput
	// A human-friendly description for this backend.
	Description pulumi.StringPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolPtrInput
	// The key to use for signing plugin workload identity tokens
	IdentityTokenKey pulumi.StringPtrInput
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrInput
	// Specifies if the secret backend is local only
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapInput
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayInput
	// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults
	// to `consul`.
	Path pulumi.StringPtrInput
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrInput
	// Specifies the URL scheme to use. Defaults to `http`.
	Scheme pulumi.StringPtrInput
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// Specifies the Consul token to use when managing or issuing new tokens.
	Token pulumi.StringPtrInput
}

func (SecretBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendState)(nil)).Elem()
}

type secretBackendArgs struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address string `pulumi:"address"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []string `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
	Bootstrap *bool `pulumi:"bootstrap"`
	// CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
	CaCert *string `pulumi:"caCert"`
	// Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if
	// this is set you need to also set client_key.
	ClientCert *string `pulumi:"clientCert"`
	// Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set
	// you need to also set client_cert.
	ClientKey *string `pulumi:"clientKey"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []string `pulumi:"delegatedAuthAccessors"`
	// A human-friendly description for this backend.
	Description *string `pulumi:"description"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache *bool `pulumi:"forceNoCache"`
	// The key to use for signing plugin workload identity tokens
	IdentityTokenKey *string `pulumi:"identityTokenKey"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `pulumi:"listingVisibility"`
	// Specifies if the secret backend is local only
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]string `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []string `pulumi:"passthroughRequestHeaders"`
	// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults
	// to `consul`.
	Path *string `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `pulumi:"pluginVersion"`
	// Specifies the URL scheme to use. Defaults to `http`.
	Scheme *string `pulumi:"scheme"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// Specifies the Consul token to use when managing or issuing new tokens.
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a SecretBackend resource.
type SecretBackendArgs struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address pulumi.StringInput
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayInput
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
	Bootstrap pulumi.BoolPtrInput
	// CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
	CaCert pulumi.StringPtrInput
	// Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if
	// this is set you need to also set client_key.
	ClientCert pulumi.StringPtrInput
	// Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set
	// you need to also set client_cert.
	ClientKey pulumi.StringPtrInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayInput
	// A human-friendly description for this backend.
	Description pulumi.StringPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolPtrInput
	// The key to use for signing plugin workload identity tokens
	IdentityTokenKey pulumi.StringPtrInput
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrInput
	// Specifies if the secret backend is local only
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapInput
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayInput
	// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults
	// to `consul`.
	Path pulumi.StringPtrInput
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrInput
	// Specifies the URL scheme to use. Defaults to `http`.
	Scheme pulumi.StringPtrInput
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// Specifies the Consul token to use when managing or issuing new tokens.
	Token pulumi.StringPtrInput
}

func (SecretBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendArgs)(nil)).Elem()
}

type SecretBackendInput interface {
	pulumi.Input

	ToSecretBackendOutput() SecretBackendOutput
	ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput
}

func (*SecretBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackend)(nil)).Elem()
}

func (i *SecretBackend) ToSecretBackendOutput() SecretBackendOutput {
	return i.ToSecretBackendOutputWithContext(context.Background())
}

func (i *SecretBackend) ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendOutput)
}

// SecretBackendArrayInput is an input type that accepts SecretBackendArray and SecretBackendArrayOutput values.
// You can construct a concrete instance of `SecretBackendArrayInput` via:
//
//	SecretBackendArray{ SecretBackendArgs{...} }
type SecretBackendArrayInput interface {
	pulumi.Input

	ToSecretBackendArrayOutput() SecretBackendArrayOutput
	ToSecretBackendArrayOutputWithContext(context.Context) SecretBackendArrayOutput
}

type SecretBackendArray []SecretBackendInput

func (SecretBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackend)(nil)).Elem()
}

func (i SecretBackendArray) ToSecretBackendArrayOutput() SecretBackendArrayOutput {
	return i.ToSecretBackendArrayOutputWithContext(context.Background())
}

func (i SecretBackendArray) ToSecretBackendArrayOutputWithContext(ctx context.Context) SecretBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendArrayOutput)
}

// SecretBackendMapInput is an input type that accepts SecretBackendMap and SecretBackendMapOutput values.
// You can construct a concrete instance of `SecretBackendMapInput` via:
//
//	SecretBackendMap{ "key": SecretBackendArgs{...} }
type SecretBackendMapInput interface {
	pulumi.Input

	ToSecretBackendMapOutput() SecretBackendMapOutput
	ToSecretBackendMapOutputWithContext(context.Context) SecretBackendMapOutput
}

type SecretBackendMap map[string]SecretBackendInput

func (SecretBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackend)(nil)).Elem()
}

func (i SecretBackendMap) ToSecretBackendMapOutput() SecretBackendMapOutput {
	return i.ToSecretBackendMapOutputWithContext(context.Background())
}

func (i SecretBackendMap) ToSecretBackendMapOutputWithContext(ctx context.Context) SecretBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendMapOutput)
}

type SecretBackendOutput struct{ *pulumi.OutputState }

func (SecretBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackend)(nil)).Elem()
}

func (o SecretBackendOutput) ToSecretBackendOutput() SecretBackendOutput {
	return o
}

func (o SecretBackendOutput) ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput {
	return o
}

// Accessor of the mount
func (o SecretBackendOutput) Accessor() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringOutput { return v.Accessor }).(pulumi.StringOutput)
}

// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
func (o SecretBackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// List of managed key registry entry names that the mount in question is allowed to access
func (o SecretBackendOutput) AllowedManagedKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AllowedManagedKeys }).(pulumi.StringArrayOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o SecretBackendOutput) AllowedResponseHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AllowedResponseHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
func (o SecretBackendOutput) AuditNonHmacRequestKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AuditNonHmacRequestKeys }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
func (o SecretBackendOutput) AuditNonHmacResponseKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AuditNonHmacResponseKeys }).(pulumi.StringArrayOutput)
}

// Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
func (o SecretBackendOutput) Bootstrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.Bootstrap }).(pulumi.BoolPtrOutput)
}

// CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
func (o SecretBackendOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if
// this is set you need to also set client_key.
func (o SecretBackendOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set
// you need to also set client_cert.
func (o SecretBackendOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Default lease duration for secrets in seconds
func (o SecretBackendOutput) DefaultLeaseTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.IntPtrOutput { return v.DefaultLeaseTtlSeconds }).(pulumi.IntPtrOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o SecretBackendOutput) DelegatedAuthAccessors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.DelegatedAuthAccessors }).(pulumi.StringArrayOutput)
}

// A human-friendly description for this backend.
func (o SecretBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If set, opts out of mount migration on path updates.
// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
func (o SecretBackendOutput) DisableRemount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.DisableRemount }).(pulumi.BoolPtrOutput)
}

// Enable the secrets engine to access Vault's external entropy source
func (o SecretBackendOutput) ExternalEntropyAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.ExternalEntropyAccess }).(pulumi.BoolPtrOutput)
}

// If set to true, disables caching.
func (o SecretBackendOutput) ForceNoCache() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolOutput { return v.ForceNoCache }).(pulumi.BoolOutput)
}

// The key to use for signing plugin workload identity tokens
func (o SecretBackendOutput) IdentityTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.IdentityTokenKey }).(pulumi.StringPtrOutput)
}

// Specifies whether to show this mount in the UI-specific listing endpoint
func (o SecretBackendOutput) ListingVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.ListingVisibility }).(pulumi.StringPtrOutput)
}

// Specifies if the secret backend is local only
func (o SecretBackendOutput) Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.Local }).(pulumi.BoolPtrOutput)
}

// Maximum possible lease duration for secrets in seconds
func (o SecretBackendOutput) MaxLeaseTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.IntPtrOutput { return v.MaxLeaseTtlSeconds }).(pulumi.IntPtrOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o SecretBackendOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies mount type specific options that are passed to the backend
func (o SecretBackendOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringMapOutput { return v.Options }).(pulumi.StringMapOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o SecretBackendOutput) PassthroughRequestHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.PassthroughRequestHeaders }).(pulumi.StringArrayOutput)
}

// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults
// to `consul`.
func (o SecretBackendOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
func (o SecretBackendOutput) PluginVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.PluginVersion }).(pulumi.StringPtrOutput)
}

// Specifies the URL scheme to use. Defaults to `http`.
func (o SecretBackendOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Scheme }).(pulumi.StringPtrOutput)
}

// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
func (o SecretBackendOutput) SealWrap() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolOutput { return v.SealWrap }).(pulumi.BoolOutput)
}

// Specifies the Consul token to use when managing or issuing new tokens.
func (o SecretBackendOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

type SecretBackendArrayOutput struct{ *pulumi.OutputState }

func (SecretBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackend)(nil)).Elem()
}

func (o SecretBackendArrayOutput) ToSecretBackendArrayOutput() SecretBackendArrayOutput {
	return o
}

func (o SecretBackendArrayOutput) ToSecretBackendArrayOutputWithContext(ctx context.Context) SecretBackendArrayOutput {
	return o
}

func (o SecretBackendArrayOutput) Index(i pulumi.IntInput) SecretBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretBackend {
		return vs[0].([]*SecretBackend)[vs[1].(int)]
	}).(SecretBackendOutput)
}

type SecretBackendMapOutput struct{ *pulumi.OutputState }

func (SecretBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackend)(nil)).Elem()
}

func (o SecretBackendMapOutput) ToSecretBackendMapOutput() SecretBackendMapOutput {
	return o
}

func (o SecretBackendMapOutput) ToSecretBackendMapOutputWithContext(ctx context.Context) SecretBackendMapOutput {
	return o
}

func (o SecretBackendMapOutput) MapIndex(k pulumi.StringInput) SecretBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretBackend {
		return vs[0].(map[string]*SecretBackend)[vs[1].(string)]
	}).(SecretBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendInput)(nil)).Elem(), &SecretBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendArrayInput)(nil)).Elem(), SecretBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendMapInput)(nil)).Elem(), SecretBackendMap{})
	pulumi.RegisterOutputType(SecretBackendOutput{})
	pulumi.RegisterOutputType(SecretBackendArrayOutput{})
	pulumi.RegisterOutputType(SecretBackendMapOutput{})
}
