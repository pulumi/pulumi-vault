// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Consul secrets role for a Consul secrets engine in Vault. Consul secret backends can then issue Consul tokens.
type SecretBackendRole struct {
	pulumi.CustomResourceState

	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
	Backend pulumi.StringPtrOutput `pulumi:"backend"`
	// Indicates that the token should not be replicated globally and instead be local to the current datacenter.
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Maximum TTL for leases associated with this role, in seconds.
	MaxTtl pulumi.IntPtrOutput `pulumi:"maxTtl"`
	// The name of the Consul secrets engine role to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. **Deprecated**
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// The list of Consul ACL policies to associate with these roles.
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	TokenType pulumi.StringPtrOutput `pulumi:"tokenType"`
	// Specifies the TTL for this role.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
}

// NewSecretBackendRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendRole(ctx *pulumi.Context,
	name string, args *SecretBackendRoleArgs, opts ...pulumi.ResourceOption) (*SecretBackendRole, error) {
	if args == nil || args.Policies == nil {
		return nil, errors.New("missing required argument 'Policies'")
	}
	if args == nil {
		args = &SecretBackendRoleArgs{}
	}
	var resource SecretBackendRole
	err := ctx.RegisterResource("vault:consul/secretBackendRole:SecretBackendRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackendRole gets an existing SecretBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendRoleState, opts ...pulumi.ResourceOption) (*SecretBackendRole, error) {
	var resource SecretBackendRole
	err := ctx.ReadResource("vault:consul/secretBackendRole:SecretBackendRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackendRole resources.
type secretBackendRoleState struct {
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
	Backend *string `pulumi:"backend"`
	// Indicates that the token should not be replicated globally and instead be local to the current datacenter.
	Local *bool `pulumi:"local"`
	// Maximum TTL for leases associated with this role, in seconds.
	MaxTtl *int `pulumi:"maxTtl"`
	// The name of the Consul secrets engine role to create.
	Name *string `pulumi:"name"`
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. **Deprecated**
	Path *string `pulumi:"path"`
	// The list of Consul ACL policies to associate with these roles.
	Policies []string `pulumi:"policies"`
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	TokenType *string `pulumi:"tokenType"`
	// Specifies the TTL for this role.
	Ttl *int `pulumi:"ttl"`
}

type SecretBackendRoleState struct {
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
	Backend pulumi.StringPtrInput
	// Indicates that the token should not be replicated globally and instead be local to the current datacenter.
	Local pulumi.BoolPtrInput
	// Maximum TTL for leases associated with this role, in seconds.
	MaxTtl pulumi.IntPtrInput
	// The name of the Consul secrets engine role to create.
	Name pulumi.StringPtrInput
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. **Deprecated**
	Path pulumi.StringPtrInput
	// The list of Consul ACL policies to associate with these roles.
	Policies pulumi.StringArrayInput
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	TokenType pulumi.StringPtrInput
	// Specifies the TTL for this role.
	Ttl pulumi.IntPtrInput
}

func (SecretBackendRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendRoleState)(nil)).Elem()
}

type secretBackendRoleArgs struct {
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
	Backend *string `pulumi:"backend"`
	// Indicates that the token should not be replicated globally and instead be local to the current datacenter.
	Local *bool `pulumi:"local"`
	// Maximum TTL for leases associated with this role, in seconds.
	MaxTtl *int `pulumi:"maxTtl"`
	// The name of the Consul secrets engine role to create.
	Name *string `pulumi:"name"`
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. **Deprecated**
	Path *string `pulumi:"path"`
	// The list of Consul ACL policies to associate with these roles.
	Policies []string `pulumi:"policies"`
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	TokenType *string `pulumi:"tokenType"`
	// Specifies the TTL for this role.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a SecretBackendRole resource.
type SecretBackendRoleArgs struct {
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. One of `path` or `backend` is required.
	Backend pulumi.StringPtrInput
	// Indicates that the token should not be replicated globally and instead be local to the current datacenter.
	Local pulumi.BoolPtrInput
	// Maximum TTL for leases associated with this role, in seconds.
	MaxTtl pulumi.IntPtrInput
	// The name of the Consul secrets engine role to create.
	Name pulumi.StringPtrInput
	// The unique name of an existing Consul secrets backend mount. Must not begin or end with a `/`. **Deprecated**
	Path pulumi.StringPtrInput
	// The list of Consul ACL policies to associate with these roles.
	Policies pulumi.StringArrayInput
	// Specifies the type of token to create when using this role. Valid values are "client" or "management".
	TokenType pulumi.StringPtrInput
	// Specifies the TTL for this role.
	Ttl pulumi.IntPtrInput
}

func (SecretBackendRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendRoleArgs)(nil)).Elem()
}
