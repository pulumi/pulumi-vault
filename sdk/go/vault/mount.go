// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Mount struct {
	pulumi.CustomResourceState

	// The accessor for this mount.
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntOutput `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntOutput `pulumi:"maxLeaseTtlSeconds"`
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.MapOutput `pulumi:"options"`
	// Where the secret backend will be mounted
	Path pulumi.StringOutput `pulumi:"path"`
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolOutput `pulumi:"sealWrap"`
	// Type of the backend, such as "aws"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMount registers a new resource with the given unique name, arguments, and options.
func NewMount(ctx *pulumi.Context,
	name string, args *MountArgs, opts ...pulumi.ResourceOption) (*Mount, error) {
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &MountArgs{}
	}
	var resource Mount
	err := ctx.RegisterResource("vault:index/mount:Mount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMount gets an existing Mount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountState, opts ...pulumi.ResourceOption) (*Mount, error) {
	var resource Mount
	err := ctx.ReadResource("vault:index/mount:Mount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mount resources.
type mountState struct {
	// The accessor for this mount.
	Accessor *string `pulumi:"accessor"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount
	Description *string `pulumi:"description"`
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]interface{} `pulumi:"options"`
	// Where the secret backend will be mounted
	Path *string `pulumi:"path"`
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// Type of the backend, such as "aws"
	Type *string `pulumi:"type"`
}

type MountState struct {
	// The accessor for this mount.
	Accessor pulumi.StringPtrInput
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Human-friendly description of the mount
	Description pulumi.StringPtrInput
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.MapInput
	// Where the secret backend will be mounted
	Path pulumi.StringPtrInput
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// Type of the backend, such as "aws"
	Type pulumi.StringPtrInput
}

func (MountState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountState)(nil)).Elem()
}

type mountArgs struct {
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount
	Description *string `pulumi:"description"`
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]interface{} `pulumi:"options"`
	// Where the secret backend will be mounted
	Path string `pulumi:"path"`
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// Type of the backend, such as "aws"
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Mount resource.
type MountArgs struct {
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Human-friendly description of the mount
	Description pulumi.StringPtrInput
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.MapInput
	// Where the secret backend will be mounted
	Path pulumi.StringInput
	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// Type of the backend, such as "aws"
	Type pulumi.StringInput
}

func (MountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountArgs)(nil)).Elem()
}
