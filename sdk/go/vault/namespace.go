// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource to manage [Namespaces](https://www.vaultproject.io/docs/enterprise/namespaces/index.html).
//
// **Note** this feature is available only with Vault Enterprise.
type Namespace struct {
	pulumi.CustomResourceState

	// ID of the namepsace.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// The path of the namespace. Must not have a trailing `/`
	Path pulumi.StringOutput `pulumi:"path"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil {
		args = &NamespaceArgs{}
	}
	var resource Namespace
	err := ctx.RegisterResource("vault:index/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("vault:index/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// ID of the namepsace.
	NamespaceId *string `pulumi:"namespaceId"`
	// The path of the namespace. Must not have a trailing `/`
	Path *string `pulumi:"path"`
}

type NamespaceState struct {
	// ID of the namepsace.
	NamespaceId pulumi.StringPtrInput
	// The path of the namespace. Must not have a trailing `/`
	Path pulumi.StringPtrInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// The path of the namespace. Must not have a trailing `/`
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// The path of the namespace. Must not have a trailing `/`
	Path pulumi.StringInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}
