// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssh

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This is a data source which can be used to sign an SSH public key
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/ssh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssh.GetSecretBackendSign(ctx, &ssh.GetSecretBackendSignArgs{
//				Path:            "ssh",
//				PublicKey:       "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDR6q4PTcuIkpdGEqaCaxnR8/REqlbSiEIKaRZkVSjiTXOaiSfUsy9cY2+7+oO9fLMUrhylImerjzEoagX1IjYvc9IeUBaRnfacN7QwUDfstgp2jknbg7rNX9j9nFxwltV/jYQPcRq8Ud0wn1nb4qixq+diM7+Up+xJOeaKxbpjEUJH5dcvaBB+Aa24tJpjOQxtFyQ6dUxlgJu0tcygZR92kKYCVjZDohlSED3i/Ak2KFwqCKx2IZWq9z1vMEgmRzv++4Qt1OsbpW8itiCyWn6lmV33eDCdjMrr9TEThQNnMinPrHdmVUnPZ/OomP+rLDRE9lQR16uaSvKhg5TWOFIXRPyEhX9arEATrE4KSWeQN2qgHOb6P24YqgEm1ZdHJq25q/nBBAa1x0tFMiWqZwOsGeJ9nTeOeyiqFKH5YRBo6DIy3ag3taFsfQSve6oqjnrudUd1hJ8/bNSz8amECfP0ULvAEAgpiurj3eCPc3OcXl4tAld9F6KwabEJV5eelcs= user@example.com",
//				Name:            "test",
//				ValidPrincipals: pulumi.StringRef("my-user"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSecretBackendSign(ctx *pulumi.Context, args *GetSecretBackendSignArgs, opts ...pulumi.InvokeOption) (*GetSecretBackendSignResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecretBackendSignResult
	err := ctx.Invoke("vault:ssh/getSecretBackendSign:getSecretBackendSign", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretBackendSign.
type GetSecretBackendSignArgs struct {
	// Specifies the type of certificate to be created; either "user" or "host".
	CertType *string `pulumi:"certType"`
	// Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
	CriticalOptions map[string]string `pulumi:"criticalOptions"`
	// Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
	Extensions map[string]string `pulumi:"extensions"`
	// Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
	KeyId *string `pulumi:"keyId"`
	// Specifies the name of the role to sign.
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	// Full path where SSH backend is mounted.
	Path string `pulumi:"path"`
	// Specifies the SSH public key that should be signed.
	PublicKey string `pulumi:"publicKey"`
	// Specifies the Requested Time To Live. Cannot be greater than the role's maxTtl value. If not provided, the role's ttl value will be used. Note that the role values default to system values if not explicitly set.
	Ttl *string `pulumi:"ttl"`
	// Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allowEmptyPrincipals or a value has been set for either the defaultUser or defaultUserTemplate role parameters.
	ValidPrincipals *string `pulumi:"validPrincipals"`
}

// A collection of values returned by getSecretBackendSign.
type GetSecretBackendSignResult struct {
	CertType        *string           `pulumi:"certType"`
	CriticalOptions map[string]string `pulumi:"criticalOptions"`
	Extensions      map[string]string `pulumi:"extensions"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	KeyId     *string `pulumi:"keyId"`
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
	Path      string  `pulumi:"path"`
	PublicKey string  `pulumi:"publicKey"`
	// The serial number of the certificate returned from Vault
	SerialNumber string `pulumi:"serialNumber"`
	// The signed certificate returned from Vault
	SignedKey       string  `pulumi:"signedKey"`
	Ttl             *string `pulumi:"ttl"`
	ValidPrincipals *string `pulumi:"validPrincipals"`
}

func GetSecretBackendSignOutput(ctx *pulumi.Context, args GetSecretBackendSignOutputArgs, opts ...pulumi.InvokeOption) GetSecretBackendSignResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSecretBackendSignResultOutput, error) {
			args := v.(GetSecretBackendSignArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vault:ssh/getSecretBackendSign:getSecretBackendSign", args, GetSecretBackendSignResultOutput{}, options).(GetSecretBackendSignResultOutput), nil
		}).(GetSecretBackendSignResultOutput)
}

// A collection of arguments for invoking getSecretBackendSign.
type GetSecretBackendSignOutputArgs struct {
	// Specifies the type of certificate to be created; either "user" or "host".
	CertType pulumi.StringPtrInput `pulumi:"certType"`
	// Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
	CriticalOptions pulumi.StringMapInput `pulumi:"criticalOptions"`
	// Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// Specifies the name of the role to sign.
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Full path where SSH backend is mounted.
	Path pulumi.StringInput `pulumi:"path"`
	// Specifies the SSH public key that should be signed.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// Specifies the Requested Time To Live. Cannot be greater than the role's maxTtl value. If not provided, the role's ttl value will be used. Note that the role values default to system values if not explicitly set.
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
	// Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allowEmptyPrincipals or a value has been set for either the defaultUser or defaultUserTemplate role parameters.
	ValidPrincipals pulumi.StringPtrInput `pulumi:"validPrincipals"`
}

func (GetSecretBackendSignOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretBackendSignArgs)(nil)).Elem()
}

// A collection of values returned by getSecretBackendSign.
type GetSecretBackendSignResultOutput struct{ *pulumi.OutputState }

func (GetSecretBackendSignResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretBackendSignResult)(nil)).Elem()
}

func (o GetSecretBackendSignResultOutput) ToGetSecretBackendSignResultOutput() GetSecretBackendSignResultOutput {
	return o
}

func (o GetSecretBackendSignResultOutput) ToGetSecretBackendSignResultOutputWithContext(ctx context.Context) GetSecretBackendSignResultOutput {
	return o
}

func (o GetSecretBackendSignResultOutput) CertType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) *string { return v.CertType }).(pulumi.StringPtrOutput)
}

func (o GetSecretBackendSignResultOutput) CriticalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) map[string]string { return v.CriticalOptions }).(pulumi.StringMapOutput)
}

func (o GetSecretBackendSignResultOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecretBackendSignResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSecretBackendSignResultOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

func (o GetSecretBackendSignResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSecretBackendSignResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetSecretBackendSignResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetSecretBackendSignResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

// The serial number of the certificate returned from Vault
func (o GetSecretBackendSignResultOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// The signed certificate returned from Vault
func (o GetSecretBackendSignResultOutput) SignedKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) string { return v.SignedKey }).(pulumi.StringOutput)
}

func (o GetSecretBackendSignResultOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

func (o GetSecretBackendSignResultOutput) ValidPrincipals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretBackendSignResult) *string { return v.ValidPrincipals }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecretBackendSignResultOutput{})
}
