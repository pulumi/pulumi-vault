// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package generic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Generic secrets can be imported using the `path`, e.g.
//
// ```sh
//  $ pulumi import vault:generic/secret:Secret example secret/foo
// ```
type Secret struct {
	pulumi.CustomResourceState

	// A mapping whose keys are the top-level data keys returned from
	// Vault and whose values are the corresponding values. This map can only
	// represent string data, so any non-string values returned from Vault are
	// serialized as JSON.
	Data pulumi.MapOutput `pulumi:"data"`
	// String containing a JSON-encoded object that will be
	// written as the secret data at the given path.
	DataJson pulumi.StringOutput `pulumi:"dataJson"`
	// True/false. Set this to true if your vault
	// authentication is not able to read the data. Setting this to `true` will
	// break drift detection. Defaults to false.
	DisableRead pulumi.BoolPtrOutput `pulumi:"disableRead"`
	// The full logical path at which to write the given data.
	// To write data into the "generic" secret backend mounted in Vault by default,
	// this should be prefixed with `secret/`. Writing to other backends with this
	// resource is possible; consult each backend's documentation to see which
	// endpoints support the `PUT` and `DELETE` methods.
	Path pulumi.StringOutput `pulumi:"path"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil || args.DataJson == nil {
		return nil, errors.New("missing required argument 'DataJson'")
	}
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil {
		args = &SecretArgs{}
	}
	var resource Secret
	err := ctx.RegisterResource("vault:generic/secret:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("vault:generic/secret:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
	// A mapping whose keys are the top-level data keys returned from
	// Vault and whose values are the corresponding values. This map can only
	// represent string data, so any non-string values returned from Vault are
	// serialized as JSON.
	Data map[string]interface{} `pulumi:"data"`
	// String containing a JSON-encoded object that will be
	// written as the secret data at the given path.
	DataJson *string `pulumi:"dataJson"`
	// True/false. Set this to true if your vault
	// authentication is not able to read the data. Setting this to `true` will
	// break drift detection. Defaults to false.
	DisableRead *bool `pulumi:"disableRead"`
	// The full logical path at which to write the given data.
	// To write data into the "generic" secret backend mounted in Vault by default,
	// this should be prefixed with `secret/`. Writing to other backends with this
	// resource is possible; consult each backend's documentation to see which
	// endpoints support the `PUT` and `DELETE` methods.
	Path *string `pulumi:"path"`
}

type SecretState struct {
	// A mapping whose keys are the top-level data keys returned from
	// Vault and whose values are the corresponding values. This map can only
	// represent string data, so any non-string values returned from Vault are
	// serialized as JSON.
	Data pulumi.MapInput
	// String containing a JSON-encoded object that will be
	// written as the secret data at the given path.
	DataJson pulumi.StringPtrInput
	// True/false. Set this to true if your vault
	// authentication is not able to read the data. Setting this to `true` will
	// break drift detection. Defaults to false.
	DisableRead pulumi.BoolPtrInput
	// The full logical path at which to write the given data.
	// To write data into the "generic" secret backend mounted in Vault by default,
	// this should be prefixed with `secret/`. Writing to other backends with this
	// resource is possible; consult each backend's documentation to see which
	// endpoints support the `PUT` and `DELETE` methods.
	Path pulumi.StringPtrInput
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	// String containing a JSON-encoded object that will be
	// written as the secret data at the given path.
	DataJson string `pulumi:"dataJson"`
	// True/false. Set this to true if your vault
	// authentication is not able to read the data. Setting this to `true` will
	// break drift detection. Defaults to false.
	DisableRead *bool `pulumi:"disableRead"`
	// The full logical path at which to write the given data.
	// To write data into the "generic" secret backend mounted in Vault by default,
	// this should be prefixed with `secret/`. Writing to other backends with this
	// resource is possible; consult each backend's documentation to see which
	// endpoints support the `PUT` and `DELETE` methods.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// String containing a JSON-encoded object that will be
	// written as the secret data at the given path.
	DataJson pulumi.StringInput
	// True/false. Set this to true if your vault
	// authentication is not able to read the data. Setting this to `true` will
	// break drift detection. Defaults to false.
	DisableRead pulumi.BoolPtrInput
	// The full logical path at which to write the given data.
	// To write data into the "generic" secret backend mounted in Vault by default,
	// this should be prefixed with `secret/`. Writing to other backends with this
	// resource is possible; consult each backend's documentation to see which
	// endpoints support the `PUT` and `DELETE` methods.
	Path pulumi.StringInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (Secret) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

type SecretOutput struct {
	*pulumi.OutputState
}

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretOutput)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecretOutput{})
}
