// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Local Storage
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vault.NewRaftSnapshotAgentConfig(ctx, "localBackups", &vault.RaftSnapshotAgentConfigArgs{
//				IntervalSeconds: pulumi.Int(86400),
//				LocalMaxSpace:   pulumi.Int(10000000),
//				PathPrefix:      pulumi.String("/opt/vault/snapshots/"),
//				Retain:          pulumi.Int(7),
//				StorageType:     pulumi.String("local"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### AWS S3
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			awsAccessKeyId := cfg.RequireObject("awsAccessKeyId")
//			awsSecretAccessKey := cfg.RequireObject("awsSecretAccessKey")
//			current, err := aws.GetRegion(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vault.NewRaftSnapshotAgentConfig(ctx, "s3Backups", &vault.RaftSnapshotAgentConfigArgs{
//				IntervalSeconds:    pulumi.Int(86400),
//				Retain:             pulumi.Int(7),
//				PathPrefix:         pulumi.String("/path/in/bucket"),
//				StorageType:        pulumi.String("aws-s3"),
//				AwsS3Bucket:        pulumi.String("my-bucket"),
//				AwsS3Region:        pulumi.String(current.Name),
//				AwsAccessKeyId:     pulumi.Any(awsAccessKeyId),
//				AwsSecretAccessKey: pulumi.Any(awsSecretAccessKey),
//				AwsS3EnableKms:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Azure BLOB
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			azureAccountName := cfg.RequireObject("azureAccountName")
//			azureAccountKey := cfg.RequireObject("azureAccountKey")
//			_, err := vault.NewRaftSnapshotAgentConfig(ctx, "azureBackups", &vault.RaftSnapshotAgentConfigArgs{
//				IntervalSeconds:    pulumi.Int(86400),
//				Retain:             pulumi.Int(7),
//				PathPrefix:         pulumi.String("/"),
//				StorageType:        pulumi.String("azure-blob"),
//				AzureContainerName: pulumi.String("vault-blob"),
//				AzureAccountName:   pulumi.Any(azureAccountName),
//				AzureAccountKey:    pulumi.Any(azureAccountKey),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Raft Snapshot Agent Configurations can be imported using the `name`, e.g.
//
// ```sh
//
//	$ pulumi import vault:index/raftSnapshotAgentConfig:RaftSnapshotAgentConfig local local
//
// ```
type RaftSnapshotAgentConfig struct {
	pulumi.CustomResourceState

	// AWS access key ID.
	AwsAccessKeyId pulumi.StringPtrOutput `pulumi:"awsAccessKeyId"`
	// `<required>` - S3 bucket to write snapshots to.
	AwsS3Bucket pulumi.StringPtrOutput `pulumi:"awsS3Bucket"`
	// Disable TLS for the S3 endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `awsS3Endpoint`.
	AwsS3DisableTls pulumi.BoolPtrOutput `pulumi:"awsS3DisableTls"`
	// Use KMS to encrypt bucket contents.
	AwsS3EnableKms pulumi.BoolPtrOutput `pulumi:"awsS3EnableKms"`
	// AWS endpoint. This is typically only set when
	// using a non-AWS S3 implementation like Minio.
	AwsS3Endpoint pulumi.StringPtrOutput `pulumi:"awsS3Endpoint"`
	// Use the endpoint/bucket URL style
	// instead of bucket.endpoint. May be needed when setting `awsS3Endpoint`.
	AwsS3ForcePathStyle pulumi.BoolPtrOutput `pulumi:"awsS3ForcePathStyle"`
	// Use named KMS key, when `awsS3EnableKms = true`
	AwsS3KmsKey pulumi.StringPtrOutput `pulumi:"awsS3KmsKey"`
	// `<required>` - AWS region bucket is in.
	AwsS3Region pulumi.StringPtrOutput `pulumi:"awsS3Region"`
	// Use AES256 to encrypt bucket contents.
	AwsS3ServerSideEncryption pulumi.BoolPtrOutput `pulumi:"awsS3ServerSideEncryption"`
	// AWS secret access key.
	AwsSecretAccessKey pulumi.StringPtrOutput `pulumi:"awsSecretAccessKey"`
	// AWS session token.
	AwsSessionToken pulumi.StringPtrOutput `pulumi:"awsSessionToken"`
	// Azure account key.
	AzureAccountKey pulumi.StringPtrOutput `pulumi:"azureAccountKey"`
	// Azure account name.
	AzureAccountName pulumi.StringPtrOutput `pulumi:"azureAccountName"`
	// Azure blob environment.
	AzureBlobEnvironment pulumi.StringPtrOutput `pulumi:"azureBlobEnvironment"`
	// `<required>` - Azure container name to write
	// snapshots to.
	AzureContainerName pulumi.StringPtrOutput `pulumi:"azureContainerName"`
	// Azure blob storage endpoint. This is typically
	// only set when using a non-Azure implementation like Azurite.
	AzureEndpoint pulumi.StringPtrOutput `pulumi:"azureEndpoint"`
	// Within the directory or bucket
	// prefix given by `pathPrefix`, the file or object name of snapshot files
	// will start with this string.
	FilePrefix pulumi.StringPtrOutput `pulumi:"filePrefix"`
	// Disable TLS for the GCS endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `googleEndpoint`.
	GoogleDisableTls pulumi.BoolPtrOutput `pulumi:"googleDisableTls"`
	// GCS endpoint. This is typically only set when
	// using a non-Google GCS implementation like fake-gcs-server.
	GoogleEndpoint pulumi.StringPtrOutput `pulumi:"googleEndpoint"`
	// `<required>` - GCS bucket to write snapshots to.
	GoogleGcsBucket pulumi.StringPtrOutput `pulumi:"googleGcsBucket"`
	// Google service account key in JSON format.
	// The raw value looks like this:
	GoogleServiceAccountKey pulumi.StringPtrOutput `pulumi:"googleServiceAccountKey"`
	// `<required>` - Time (in seconds) between snapshots.
	IntervalSeconds pulumi.IntOutput `pulumi:"intervalSeconds"`
	// For `storageType = local`, the maximum
	// space, in bytes, to use for snapshots. Snapshot attempts will fail if there is not enough
	// space left in this allowance.
	LocalMaxSpace pulumi.IntPtrOutput `pulumi:"localMaxSpace"`
	// `<required>` â€“ Name of the configuration to modify.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// `<required>` - For `storageType = "local"`, the directory to
	// write the snapshots in. For cloud storage types, the bucket prefix to use.
	// Types `azure-s3` and `google-gcs` require a trailing `/` (slash).
	// Types `local` and `aws-s3` the trailing `/` is optional.
	PathPrefix pulumi.StringOutput `pulumi:"pathPrefix"`
	// How many snapshots are to be kept; when writing a
	// snapshot, if there are more snapshots already stored than this number, the
	// oldest ones will be deleted.
	Retain pulumi.IntPtrOutput `pulumi:"retain"`
	// `<required>` - One of "local", "azure-blob", "aws-s3",
	// or "google-gcs". The remaining parameters described below are all specific to
	// the selected `storageType` and prefixed accordingly.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
}

// NewRaftSnapshotAgentConfig registers a new resource with the given unique name, arguments, and options.
func NewRaftSnapshotAgentConfig(ctx *pulumi.Context,
	name string, args *RaftSnapshotAgentConfigArgs, opts ...pulumi.ResourceOption) (*RaftSnapshotAgentConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntervalSeconds == nil {
		return nil, errors.New("invalid value for required argument 'IntervalSeconds'")
	}
	if args.PathPrefix == nil {
		return nil, errors.New("invalid value for required argument 'PathPrefix'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	var resource RaftSnapshotAgentConfig
	err := ctx.RegisterResource("vault:index/raftSnapshotAgentConfig:RaftSnapshotAgentConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRaftSnapshotAgentConfig gets an existing RaftSnapshotAgentConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRaftSnapshotAgentConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RaftSnapshotAgentConfigState, opts ...pulumi.ResourceOption) (*RaftSnapshotAgentConfig, error) {
	var resource RaftSnapshotAgentConfig
	err := ctx.ReadResource("vault:index/raftSnapshotAgentConfig:RaftSnapshotAgentConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RaftSnapshotAgentConfig resources.
type raftSnapshotAgentConfigState struct {
	// AWS access key ID.
	AwsAccessKeyId *string `pulumi:"awsAccessKeyId"`
	// `<required>` - S3 bucket to write snapshots to.
	AwsS3Bucket *string `pulumi:"awsS3Bucket"`
	// Disable TLS for the S3 endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `awsS3Endpoint`.
	AwsS3DisableTls *bool `pulumi:"awsS3DisableTls"`
	// Use KMS to encrypt bucket contents.
	AwsS3EnableKms *bool `pulumi:"awsS3EnableKms"`
	// AWS endpoint. This is typically only set when
	// using a non-AWS S3 implementation like Minio.
	AwsS3Endpoint *string `pulumi:"awsS3Endpoint"`
	// Use the endpoint/bucket URL style
	// instead of bucket.endpoint. May be needed when setting `awsS3Endpoint`.
	AwsS3ForcePathStyle *bool `pulumi:"awsS3ForcePathStyle"`
	// Use named KMS key, when `awsS3EnableKms = true`
	AwsS3KmsKey *string `pulumi:"awsS3KmsKey"`
	// `<required>` - AWS region bucket is in.
	AwsS3Region *string `pulumi:"awsS3Region"`
	// Use AES256 to encrypt bucket contents.
	AwsS3ServerSideEncryption *bool `pulumi:"awsS3ServerSideEncryption"`
	// AWS secret access key.
	AwsSecretAccessKey *string `pulumi:"awsSecretAccessKey"`
	// AWS session token.
	AwsSessionToken *string `pulumi:"awsSessionToken"`
	// Azure account key.
	AzureAccountKey *string `pulumi:"azureAccountKey"`
	// Azure account name.
	AzureAccountName *string `pulumi:"azureAccountName"`
	// Azure blob environment.
	AzureBlobEnvironment *string `pulumi:"azureBlobEnvironment"`
	// `<required>` - Azure container name to write
	// snapshots to.
	AzureContainerName *string `pulumi:"azureContainerName"`
	// Azure blob storage endpoint. This is typically
	// only set when using a non-Azure implementation like Azurite.
	AzureEndpoint *string `pulumi:"azureEndpoint"`
	// Within the directory or bucket
	// prefix given by `pathPrefix`, the file or object name of snapshot files
	// will start with this string.
	FilePrefix *string `pulumi:"filePrefix"`
	// Disable TLS for the GCS endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `googleEndpoint`.
	GoogleDisableTls *bool `pulumi:"googleDisableTls"`
	// GCS endpoint. This is typically only set when
	// using a non-Google GCS implementation like fake-gcs-server.
	GoogleEndpoint *string `pulumi:"googleEndpoint"`
	// `<required>` - GCS bucket to write snapshots to.
	GoogleGcsBucket *string `pulumi:"googleGcsBucket"`
	// Google service account key in JSON format.
	// The raw value looks like this:
	GoogleServiceAccountKey *string `pulumi:"googleServiceAccountKey"`
	// `<required>` - Time (in seconds) between snapshots.
	IntervalSeconds *int `pulumi:"intervalSeconds"`
	// For `storageType = local`, the maximum
	// space, in bytes, to use for snapshots. Snapshot attempts will fail if there is not enough
	// space left in this allowance.
	LocalMaxSpace *int `pulumi:"localMaxSpace"`
	// `<required>` â€“ Name of the configuration to modify.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// `<required>` - For `storageType = "local"`, the directory to
	// write the snapshots in. For cloud storage types, the bucket prefix to use.
	// Types `azure-s3` and `google-gcs` require a trailing `/` (slash).
	// Types `local` and `aws-s3` the trailing `/` is optional.
	PathPrefix *string `pulumi:"pathPrefix"`
	// How many snapshots are to be kept; when writing a
	// snapshot, if there are more snapshots already stored than this number, the
	// oldest ones will be deleted.
	Retain *int `pulumi:"retain"`
	// `<required>` - One of "local", "azure-blob", "aws-s3",
	// or "google-gcs". The remaining parameters described below are all specific to
	// the selected `storageType` and prefixed accordingly.
	StorageType *string `pulumi:"storageType"`
}

type RaftSnapshotAgentConfigState struct {
	// AWS access key ID.
	AwsAccessKeyId pulumi.StringPtrInput
	// `<required>` - S3 bucket to write snapshots to.
	AwsS3Bucket pulumi.StringPtrInput
	// Disable TLS for the S3 endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `awsS3Endpoint`.
	AwsS3DisableTls pulumi.BoolPtrInput
	// Use KMS to encrypt bucket contents.
	AwsS3EnableKms pulumi.BoolPtrInput
	// AWS endpoint. This is typically only set when
	// using a non-AWS S3 implementation like Minio.
	AwsS3Endpoint pulumi.StringPtrInput
	// Use the endpoint/bucket URL style
	// instead of bucket.endpoint. May be needed when setting `awsS3Endpoint`.
	AwsS3ForcePathStyle pulumi.BoolPtrInput
	// Use named KMS key, when `awsS3EnableKms = true`
	AwsS3KmsKey pulumi.StringPtrInput
	// `<required>` - AWS region bucket is in.
	AwsS3Region pulumi.StringPtrInput
	// Use AES256 to encrypt bucket contents.
	AwsS3ServerSideEncryption pulumi.BoolPtrInput
	// AWS secret access key.
	AwsSecretAccessKey pulumi.StringPtrInput
	// AWS session token.
	AwsSessionToken pulumi.StringPtrInput
	// Azure account key.
	AzureAccountKey pulumi.StringPtrInput
	// Azure account name.
	AzureAccountName pulumi.StringPtrInput
	// Azure blob environment.
	AzureBlobEnvironment pulumi.StringPtrInput
	// `<required>` - Azure container name to write
	// snapshots to.
	AzureContainerName pulumi.StringPtrInput
	// Azure blob storage endpoint. This is typically
	// only set when using a non-Azure implementation like Azurite.
	AzureEndpoint pulumi.StringPtrInput
	// Within the directory or bucket
	// prefix given by `pathPrefix`, the file or object name of snapshot files
	// will start with this string.
	FilePrefix pulumi.StringPtrInput
	// Disable TLS for the GCS endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `googleEndpoint`.
	GoogleDisableTls pulumi.BoolPtrInput
	// GCS endpoint. This is typically only set when
	// using a non-Google GCS implementation like fake-gcs-server.
	GoogleEndpoint pulumi.StringPtrInput
	// `<required>` - GCS bucket to write snapshots to.
	GoogleGcsBucket pulumi.StringPtrInput
	// Google service account key in JSON format.
	// The raw value looks like this:
	GoogleServiceAccountKey pulumi.StringPtrInput
	// `<required>` - Time (in seconds) between snapshots.
	IntervalSeconds pulumi.IntPtrInput
	// For `storageType = local`, the maximum
	// space, in bytes, to use for snapshots. Snapshot attempts will fail if there is not enough
	// space left in this allowance.
	LocalMaxSpace pulumi.IntPtrInput
	// `<required>` â€“ Name of the configuration to modify.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// `<required>` - For `storageType = "local"`, the directory to
	// write the snapshots in. For cloud storage types, the bucket prefix to use.
	// Types `azure-s3` and `google-gcs` require a trailing `/` (slash).
	// Types `local` and `aws-s3` the trailing `/` is optional.
	PathPrefix pulumi.StringPtrInput
	// How many snapshots are to be kept; when writing a
	// snapshot, if there are more snapshots already stored than this number, the
	// oldest ones will be deleted.
	Retain pulumi.IntPtrInput
	// `<required>` - One of "local", "azure-blob", "aws-s3",
	// or "google-gcs". The remaining parameters described below are all specific to
	// the selected `storageType` and prefixed accordingly.
	StorageType pulumi.StringPtrInput
}

func (RaftSnapshotAgentConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*raftSnapshotAgentConfigState)(nil)).Elem()
}

type raftSnapshotAgentConfigArgs struct {
	// AWS access key ID.
	AwsAccessKeyId *string `pulumi:"awsAccessKeyId"`
	// `<required>` - S3 bucket to write snapshots to.
	AwsS3Bucket *string `pulumi:"awsS3Bucket"`
	// Disable TLS for the S3 endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `awsS3Endpoint`.
	AwsS3DisableTls *bool `pulumi:"awsS3DisableTls"`
	// Use KMS to encrypt bucket contents.
	AwsS3EnableKms *bool `pulumi:"awsS3EnableKms"`
	// AWS endpoint. This is typically only set when
	// using a non-AWS S3 implementation like Minio.
	AwsS3Endpoint *string `pulumi:"awsS3Endpoint"`
	// Use the endpoint/bucket URL style
	// instead of bucket.endpoint. May be needed when setting `awsS3Endpoint`.
	AwsS3ForcePathStyle *bool `pulumi:"awsS3ForcePathStyle"`
	// Use named KMS key, when `awsS3EnableKms = true`
	AwsS3KmsKey *string `pulumi:"awsS3KmsKey"`
	// `<required>` - AWS region bucket is in.
	AwsS3Region *string `pulumi:"awsS3Region"`
	// Use AES256 to encrypt bucket contents.
	AwsS3ServerSideEncryption *bool `pulumi:"awsS3ServerSideEncryption"`
	// AWS secret access key.
	AwsSecretAccessKey *string `pulumi:"awsSecretAccessKey"`
	// AWS session token.
	AwsSessionToken *string `pulumi:"awsSessionToken"`
	// Azure account key.
	AzureAccountKey *string `pulumi:"azureAccountKey"`
	// Azure account name.
	AzureAccountName *string `pulumi:"azureAccountName"`
	// Azure blob environment.
	AzureBlobEnvironment *string `pulumi:"azureBlobEnvironment"`
	// `<required>` - Azure container name to write
	// snapshots to.
	AzureContainerName *string `pulumi:"azureContainerName"`
	// Azure blob storage endpoint. This is typically
	// only set when using a non-Azure implementation like Azurite.
	AzureEndpoint *string `pulumi:"azureEndpoint"`
	// Within the directory or bucket
	// prefix given by `pathPrefix`, the file or object name of snapshot files
	// will start with this string.
	FilePrefix *string `pulumi:"filePrefix"`
	// Disable TLS for the GCS endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `googleEndpoint`.
	GoogleDisableTls *bool `pulumi:"googleDisableTls"`
	// GCS endpoint. This is typically only set when
	// using a non-Google GCS implementation like fake-gcs-server.
	GoogleEndpoint *string `pulumi:"googleEndpoint"`
	// `<required>` - GCS bucket to write snapshots to.
	GoogleGcsBucket *string `pulumi:"googleGcsBucket"`
	// Google service account key in JSON format.
	// The raw value looks like this:
	GoogleServiceAccountKey *string `pulumi:"googleServiceAccountKey"`
	// `<required>` - Time (in seconds) between snapshots.
	IntervalSeconds int `pulumi:"intervalSeconds"`
	// For `storageType = local`, the maximum
	// space, in bytes, to use for snapshots. Snapshot attempts will fail if there is not enough
	// space left in this allowance.
	LocalMaxSpace *int `pulumi:"localMaxSpace"`
	// `<required>` â€“ Name of the configuration to modify.
	Name *string `pulumi:"name"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// `<required>` - For `storageType = "local"`, the directory to
	// write the snapshots in. For cloud storage types, the bucket prefix to use.
	// Types `azure-s3` and `google-gcs` require a trailing `/` (slash).
	// Types `local` and `aws-s3` the trailing `/` is optional.
	PathPrefix string `pulumi:"pathPrefix"`
	// How many snapshots are to be kept; when writing a
	// snapshot, if there are more snapshots already stored than this number, the
	// oldest ones will be deleted.
	Retain *int `pulumi:"retain"`
	// `<required>` - One of "local", "azure-blob", "aws-s3",
	// or "google-gcs". The remaining parameters described below are all specific to
	// the selected `storageType` and prefixed accordingly.
	StorageType string `pulumi:"storageType"`
}

// The set of arguments for constructing a RaftSnapshotAgentConfig resource.
type RaftSnapshotAgentConfigArgs struct {
	// AWS access key ID.
	AwsAccessKeyId pulumi.StringPtrInput
	// `<required>` - S3 bucket to write snapshots to.
	AwsS3Bucket pulumi.StringPtrInput
	// Disable TLS for the S3 endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `awsS3Endpoint`.
	AwsS3DisableTls pulumi.BoolPtrInput
	// Use KMS to encrypt bucket contents.
	AwsS3EnableKms pulumi.BoolPtrInput
	// AWS endpoint. This is typically only set when
	// using a non-AWS S3 implementation like Minio.
	AwsS3Endpoint pulumi.StringPtrInput
	// Use the endpoint/bucket URL style
	// instead of bucket.endpoint. May be needed when setting `awsS3Endpoint`.
	AwsS3ForcePathStyle pulumi.BoolPtrInput
	// Use named KMS key, when `awsS3EnableKms = true`
	AwsS3KmsKey pulumi.StringPtrInput
	// `<required>` - AWS region bucket is in.
	AwsS3Region pulumi.StringPtrInput
	// Use AES256 to encrypt bucket contents.
	AwsS3ServerSideEncryption pulumi.BoolPtrInput
	// AWS secret access key.
	AwsSecretAccessKey pulumi.StringPtrInput
	// AWS session token.
	AwsSessionToken pulumi.StringPtrInput
	// Azure account key.
	AzureAccountKey pulumi.StringPtrInput
	// Azure account name.
	AzureAccountName pulumi.StringPtrInput
	// Azure blob environment.
	AzureBlobEnvironment pulumi.StringPtrInput
	// `<required>` - Azure container name to write
	// snapshots to.
	AzureContainerName pulumi.StringPtrInput
	// Azure blob storage endpoint. This is typically
	// only set when using a non-Azure implementation like Azurite.
	AzureEndpoint pulumi.StringPtrInput
	// Within the directory or bucket
	// prefix given by `pathPrefix`, the file or object name of snapshot files
	// will start with this string.
	FilePrefix pulumi.StringPtrInput
	// Disable TLS for the GCS endpoint. This
	// should only be used for testing purposes, typically in conjunction with
	// `googleEndpoint`.
	GoogleDisableTls pulumi.BoolPtrInput
	// GCS endpoint. This is typically only set when
	// using a non-Google GCS implementation like fake-gcs-server.
	GoogleEndpoint pulumi.StringPtrInput
	// `<required>` - GCS bucket to write snapshots to.
	GoogleGcsBucket pulumi.StringPtrInput
	// Google service account key in JSON format.
	// The raw value looks like this:
	GoogleServiceAccountKey pulumi.StringPtrInput
	// `<required>` - Time (in seconds) between snapshots.
	IntervalSeconds pulumi.IntInput
	// For `storageType = local`, the maximum
	// space, in bytes, to use for snapshots. Snapshot attempts will fail if there is not enough
	// space left in this allowance.
	LocalMaxSpace pulumi.IntPtrInput
	// `<required>` â€“ Name of the configuration to modify.
	Name pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// `<required>` - For `storageType = "local"`, the directory to
	// write the snapshots in. For cloud storage types, the bucket prefix to use.
	// Types `azure-s3` and `google-gcs` require a trailing `/` (slash).
	// Types `local` and `aws-s3` the trailing `/` is optional.
	PathPrefix pulumi.StringInput
	// How many snapshots are to be kept; when writing a
	// snapshot, if there are more snapshots already stored than this number, the
	// oldest ones will be deleted.
	Retain pulumi.IntPtrInput
	// `<required>` - One of "local", "azure-blob", "aws-s3",
	// or "google-gcs". The remaining parameters described below are all specific to
	// the selected `storageType` and prefixed accordingly.
	StorageType pulumi.StringInput
}

func (RaftSnapshotAgentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*raftSnapshotAgentConfigArgs)(nil)).Elem()
}

type RaftSnapshotAgentConfigInput interface {
	pulumi.Input

	ToRaftSnapshotAgentConfigOutput() RaftSnapshotAgentConfigOutput
	ToRaftSnapshotAgentConfigOutputWithContext(ctx context.Context) RaftSnapshotAgentConfigOutput
}

func (*RaftSnapshotAgentConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**RaftSnapshotAgentConfig)(nil)).Elem()
}

func (i *RaftSnapshotAgentConfig) ToRaftSnapshotAgentConfigOutput() RaftSnapshotAgentConfigOutput {
	return i.ToRaftSnapshotAgentConfigOutputWithContext(context.Background())
}

func (i *RaftSnapshotAgentConfig) ToRaftSnapshotAgentConfigOutputWithContext(ctx context.Context) RaftSnapshotAgentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaftSnapshotAgentConfigOutput)
}

// RaftSnapshotAgentConfigArrayInput is an input type that accepts RaftSnapshotAgentConfigArray and RaftSnapshotAgentConfigArrayOutput values.
// You can construct a concrete instance of `RaftSnapshotAgentConfigArrayInput` via:
//
//	RaftSnapshotAgentConfigArray{ RaftSnapshotAgentConfigArgs{...} }
type RaftSnapshotAgentConfigArrayInput interface {
	pulumi.Input

	ToRaftSnapshotAgentConfigArrayOutput() RaftSnapshotAgentConfigArrayOutput
	ToRaftSnapshotAgentConfigArrayOutputWithContext(context.Context) RaftSnapshotAgentConfigArrayOutput
}

type RaftSnapshotAgentConfigArray []RaftSnapshotAgentConfigInput

func (RaftSnapshotAgentConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RaftSnapshotAgentConfig)(nil)).Elem()
}

func (i RaftSnapshotAgentConfigArray) ToRaftSnapshotAgentConfigArrayOutput() RaftSnapshotAgentConfigArrayOutput {
	return i.ToRaftSnapshotAgentConfigArrayOutputWithContext(context.Background())
}

func (i RaftSnapshotAgentConfigArray) ToRaftSnapshotAgentConfigArrayOutputWithContext(ctx context.Context) RaftSnapshotAgentConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaftSnapshotAgentConfigArrayOutput)
}

// RaftSnapshotAgentConfigMapInput is an input type that accepts RaftSnapshotAgentConfigMap and RaftSnapshotAgentConfigMapOutput values.
// You can construct a concrete instance of `RaftSnapshotAgentConfigMapInput` via:
//
//	RaftSnapshotAgentConfigMap{ "key": RaftSnapshotAgentConfigArgs{...} }
type RaftSnapshotAgentConfigMapInput interface {
	pulumi.Input

	ToRaftSnapshotAgentConfigMapOutput() RaftSnapshotAgentConfigMapOutput
	ToRaftSnapshotAgentConfigMapOutputWithContext(context.Context) RaftSnapshotAgentConfigMapOutput
}

type RaftSnapshotAgentConfigMap map[string]RaftSnapshotAgentConfigInput

func (RaftSnapshotAgentConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RaftSnapshotAgentConfig)(nil)).Elem()
}

func (i RaftSnapshotAgentConfigMap) ToRaftSnapshotAgentConfigMapOutput() RaftSnapshotAgentConfigMapOutput {
	return i.ToRaftSnapshotAgentConfigMapOutputWithContext(context.Background())
}

func (i RaftSnapshotAgentConfigMap) ToRaftSnapshotAgentConfigMapOutputWithContext(ctx context.Context) RaftSnapshotAgentConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaftSnapshotAgentConfigMapOutput)
}

type RaftSnapshotAgentConfigOutput struct{ *pulumi.OutputState }

func (RaftSnapshotAgentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RaftSnapshotAgentConfig)(nil)).Elem()
}

func (o RaftSnapshotAgentConfigOutput) ToRaftSnapshotAgentConfigOutput() RaftSnapshotAgentConfigOutput {
	return o
}

func (o RaftSnapshotAgentConfigOutput) ToRaftSnapshotAgentConfigOutputWithContext(ctx context.Context) RaftSnapshotAgentConfigOutput {
	return o
}

// AWS access key ID.
func (o RaftSnapshotAgentConfigOutput) AwsAccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AwsAccessKeyId }).(pulumi.StringPtrOutput)
}

// `<required>` - S3 bucket to write snapshots to.
func (o RaftSnapshotAgentConfigOutput) AwsS3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AwsS3Bucket }).(pulumi.StringPtrOutput)
}

// Disable TLS for the S3 endpoint. This
// should only be used for testing purposes, typically in conjunction with
// `awsS3Endpoint`.
func (o RaftSnapshotAgentConfigOutput) AwsS3DisableTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.BoolPtrOutput { return v.AwsS3DisableTls }).(pulumi.BoolPtrOutput)
}

// Use KMS to encrypt bucket contents.
func (o RaftSnapshotAgentConfigOutput) AwsS3EnableKms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.BoolPtrOutput { return v.AwsS3EnableKms }).(pulumi.BoolPtrOutput)
}

// AWS endpoint. This is typically only set when
// using a non-AWS S3 implementation like Minio.
func (o RaftSnapshotAgentConfigOutput) AwsS3Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AwsS3Endpoint }).(pulumi.StringPtrOutput)
}

// Use the endpoint/bucket URL style
// instead of bucket.endpoint. May be needed when setting `awsS3Endpoint`.
func (o RaftSnapshotAgentConfigOutput) AwsS3ForcePathStyle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.BoolPtrOutput { return v.AwsS3ForcePathStyle }).(pulumi.BoolPtrOutput)
}

// Use named KMS key, when `awsS3EnableKms = true`
func (o RaftSnapshotAgentConfigOutput) AwsS3KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AwsS3KmsKey }).(pulumi.StringPtrOutput)
}

// `<required>` - AWS region bucket is in.
func (o RaftSnapshotAgentConfigOutput) AwsS3Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AwsS3Region }).(pulumi.StringPtrOutput)
}

// Use AES256 to encrypt bucket contents.
func (o RaftSnapshotAgentConfigOutput) AwsS3ServerSideEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.BoolPtrOutput { return v.AwsS3ServerSideEncryption }).(pulumi.BoolPtrOutput)
}

// AWS secret access key.
func (o RaftSnapshotAgentConfigOutput) AwsSecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AwsSecretAccessKey }).(pulumi.StringPtrOutput)
}

// AWS session token.
func (o RaftSnapshotAgentConfigOutput) AwsSessionToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AwsSessionToken }).(pulumi.StringPtrOutput)
}

// Azure account key.
func (o RaftSnapshotAgentConfigOutput) AzureAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AzureAccountKey }).(pulumi.StringPtrOutput)
}

// Azure account name.
func (o RaftSnapshotAgentConfigOutput) AzureAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AzureAccountName }).(pulumi.StringPtrOutput)
}

// Azure blob environment.
func (o RaftSnapshotAgentConfigOutput) AzureBlobEnvironment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AzureBlobEnvironment }).(pulumi.StringPtrOutput)
}

// `<required>` - Azure container name to write
// snapshots to.
func (o RaftSnapshotAgentConfigOutput) AzureContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AzureContainerName }).(pulumi.StringPtrOutput)
}

// Azure blob storage endpoint. This is typically
// only set when using a non-Azure implementation like Azurite.
func (o RaftSnapshotAgentConfigOutput) AzureEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.AzureEndpoint }).(pulumi.StringPtrOutput)
}

// Within the directory or bucket
// prefix given by `pathPrefix`, the file or object name of snapshot files
// will start with this string.
func (o RaftSnapshotAgentConfigOutput) FilePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.FilePrefix }).(pulumi.StringPtrOutput)
}

// Disable TLS for the GCS endpoint. This
// should only be used for testing purposes, typically in conjunction with
// `googleEndpoint`.
func (o RaftSnapshotAgentConfigOutput) GoogleDisableTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.BoolPtrOutput { return v.GoogleDisableTls }).(pulumi.BoolPtrOutput)
}

// GCS endpoint. This is typically only set when
// using a non-Google GCS implementation like fake-gcs-server.
func (o RaftSnapshotAgentConfigOutput) GoogleEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.GoogleEndpoint }).(pulumi.StringPtrOutput)
}

// `<required>` - GCS bucket to write snapshots to.
func (o RaftSnapshotAgentConfigOutput) GoogleGcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.GoogleGcsBucket }).(pulumi.StringPtrOutput)
}

// Google service account key in JSON format.
// The raw value looks like this:
func (o RaftSnapshotAgentConfigOutput) GoogleServiceAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.GoogleServiceAccountKey }).(pulumi.StringPtrOutput)
}

// `<required>` - Time (in seconds) between snapshots.
func (o RaftSnapshotAgentConfigOutput) IntervalSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.IntOutput { return v.IntervalSeconds }).(pulumi.IntOutput)
}

// For `storageType = local`, the maximum
// space, in bytes, to use for snapshots. Snapshot attempts will fail if there is not enough
// space left in this allowance.
func (o RaftSnapshotAgentConfigOutput) LocalMaxSpace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.IntPtrOutput { return v.LocalMaxSpace }).(pulumi.IntPtrOutput)
}

// `<required>` â€“ Name of the configuration to modify.
func (o RaftSnapshotAgentConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
// *Available only for Vault Enterprise*.
func (o RaftSnapshotAgentConfigOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// `<required>` - For `storageType = "local"`, the directory to
// write the snapshots in. For cloud storage types, the bucket prefix to use.
// Types `azure-s3` and `google-gcs` require a trailing `/` (slash).
// Types `local` and `aws-s3` the trailing `/` is optional.
func (o RaftSnapshotAgentConfigOutput) PathPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringOutput { return v.PathPrefix }).(pulumi.StringOutput)
}

// How many snapshots are to be kept; when writing a
// snapshot, if there are more snapshots already stored than this number, the
// oldest ones will be deleted.
func (o RaftSnapshotAgentConfigOutput) Retain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.IntPtrOutput { return v.Retain }).(pulumi.IntPtrOutput)
}

// `<required>` - One of "local", "azure-blob", "aws-s3",
// or "google-gcs". The remaining parameters described below are all specific to
// the selected `storageType` and prefixed accordingly.
func (o RaftSnapshotAgentConfigOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *RaftSnapshotAgentConfig) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

type RaftSnapshotAgentConfigArrayOutput struct{ *pulumi.OutputState }

func (RaftSnapshotAgentConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RaftSnapshotAgentConfig)(nil)).Elem()
}

func (o RaftSnapshotAgentConfigArrayOutput) ToRaftSnapshotAgentConfigArrayOutput() RaftSnapshotAgentConfigArrayOutput {
	return o
}

func (o RaftSnapshotAgentConfigArrayOutput) ToRaftSnapshotAgentConfigArrayOutputWithContext(ctx context.Context) RaftSnapshotAgentConfigArrayOutput {
	return o
}

func (o RaftSnapshotAgentConfigArrayOutput) Index(i pulumi.IntInput) RaftSnapshotAgentConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RaftSnapshotAgentConfig {
		return vs[0].([]*RaftSnapshotAgentConfig)[vs[1].(int)]
	}).(RaftSnapshotAgentConfigOutput)
}

type RaftSnapshotAgentConfigMapOutput struct{ *pulumi.OutputState }

func (RaftSnapshotAgentConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RaftSnapshotAgentConfig)(nil)).Elem()
}

func (o RaftSnapshotAgentConfigMapOutput) ToRaftSnapshotAgentConfigMapOutput() RaftSnapshotAgentConfigMapOutput {
	return o
}

func (o RaftSnapshotAgentConfigMapOutput) ToRaftSnapshotAgentConfigMapOutputWithContext(ctx context.Context) RaftSnapshotAgentConfigMapOutput {
	return o
}

func (o RaftSnapshotAgentConfigMapOutput) MapIndex(k pulumi.StringInput) RaftSnapshotAgentConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RaftSnapshotAgentConfig {
		return vs[0].(map[string]*RaftSnapshotAgentConfig)[vs[1].(string)]
	}).(RaftSnapshotAgentConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RaftSnapshotAgentConfigInput)(nil)).Elem(), &RaftSnapshotAgentConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*RaftSnapshotAgentConfigArrayInput)(nil)).Elem(), RaftSnapshotAgentConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RaftSnapshotAgentConfigMapInput)(nil)).Elem(), RaftSnapshotAgentConfigMap{})
	pulumi.RegisterOutputType(RaftSnapshotAgentConfigOutput{})
	pulumi.RegisterOutputType(RaftSnapshotAgentConfigArrayOutput{})
	pulumi.RegisterOutputType(RaftSnapshotAgentConfigMapOutput{})
}
