// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// AWS secret backends can be imported using the `path`, e.g.
//
// ```sh
// $ pulumi import vault:aws/secretBackend:SecretBackend aws aws
// ```
type SecretBackend struct {
	pulumi.CustomResourceState

	// The AWS Access Key ID this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	AccessKey pulumi.StringPtrOutput `pulumi:"accessKey"`
	// Accessor of the mount
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayOutput `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayOutput `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacResponseKeys"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntOutput `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayOutput `pulumi:"delegatedAuthAccessors"`
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation pulumi.BoolPtrOutput `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrOutput `pulumi:"disableRemount"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrOutput `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolOutput `pulumi:"forceNoCache"`
	// Specifies a custom HTTP IAM endpoint to use.
	IamEndpoint pulumi.StringPtrOutput `pulumi:"iamEndpoint"`
	// The audience claim value. Requires Vault 1.16+.
	IdentityTokenAudience pulumi.StringPtrOutput `pulumi:"identityTokenAudience"`
	// The key to use for signing identity tokens.
	IdentityTokenKey pulumi.StringPtrOutput `pulumi:"identityTokenKey"`
	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	IdentityTokenTtl pulumi.IntOutput `pulumi:"identityTokenTtl"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrOutput `pulumi:"listingVisibility"`
	// Specifies if the secret backend is local only
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntOutput `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapOutput `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayOutput `pulumi:"passthroughRequestHeaders"`
	// The unique path this backend should be mounted at. Must
	// not begin or end with a `/`. Defaults to `aws`.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrOutput `pulumi:"pluginVersion"`
	// The AWS region to make API calls against. Defaults to us-east-1.
	Region pulumi.StringOutput `pulumi:"region"`
	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod pulumi.IntPtrOutput `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule pulumi.StringPtrOutput `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow pulumi.IntPtrOutput `pulumi:"rotationWindow"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolOutput `pulumi:"sealWrap"`
	// The AWS Secret Access Key to use when generating new credentials.
	SecretKey pulumi.StringPtrOutput `pulumi:"secretKey"`
	// Specifies a custom HTTP STS endpoint to use.
	StsEndpoint pulumi.StringPtrOutput `pulumi:"stsEndpoint"`
	// Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
	StsFallbackEndpoints pulumi.StringArrayOutput `pulumi:"stsFallbackEndpoints"`
	// Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	StsFallbackRegions pulumi.StringArrayOutput `pulumi:"stsFallbackRegions"`
	// Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
	StsRegion pulumi.StringPtrOutput `pulumi:"stsRegion"`
	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	UsernameTemplate pulumi.StringOutput `pulumi:"usernameTemplate"`
}

// NewSecretBackend registers a new resource with the given unique name, arguments, and options.
func NewSecretBackend(ctx *pulumi.Context,
	name string, args *SecretBackendArgs, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	if args == nil {
		args = &SecretBackendArgs{}
	}

	if args.AccessKey != nil {
		args.AccessKey = pulumi.ToSecret(args.AccessKey).(pulumi.StringPtrInput)
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretBackend
	err := ctx.RegisterResource("vault:aws/secretBackend:SecretBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackend gets an existing SecretBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendState, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	var resource SecretBackend
	err := ctx.ReadResource("vault:aws/secretBackend:SecretBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackend resources.
type secretBackendState struct {
	// The AWS Access Key ID this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	AccessKey *string `pulumi:"accessKey"`
	// Accessor of the mount
	Accessor *string `pulumi:"accessor"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []string `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []string `pulumi:"delegatedAuthAccessors"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache *bool `pulumi:"forceNoCache"`
	// Specifies a custom HTTP IAM endpoint to use.
	IamEndpoint *string `pulumi:"iamEndpoint"`
	// The audience claim value. Requires Vault 1.16+.
	IdentityTokenAudience *string `pulumi:"identityTokenAudience"`
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `pulumi:"identityTokenKey"`
	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	IdentityTokenTtl *int `pulumi:"identityTokenTtl"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `pulumi:"listingVisibility"`
	// Specifies if the secret backend is local only
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]string `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []string `pulumi:"passthroughRequestHeaders"`
	// The unique path this backend should be mounted at. Must
	// not begin or end with a `/`. Defaults to `aws`.
	Path *string `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `pulumi:"pluginVersion"`
	// The AWS region to make API calls against. Defaults to us-east-1.
	Region *string `pulumi:"region"`
	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	RoleArn *string `pulumi:"roleArn"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow *int `pulumi:"rotationWindow"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// The AWS Secret Access Key to use when generating new credentials.
	SecretKey *string `pulumi:"secretKey"`
	// Specifies a custom HTTP STS endpoint to use.
	StsEndpoint *string `pulumi:"stsEndpoint"`
	// Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
	StsFallbackEndpoints []string `pulumi:"stsFallbackEndpoints"`
	// Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	StsFallbackRegions []string `pulumi:"stsFallbackRegions"`
	// Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
	StsRegion *string `pulumi:"stsRegion"`
	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

type SecretBackendState struct {
	// The AWS Access Key ID this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	AccessKey pulumi.StringPtrInput
	// Accessor of the mount
	Accessor pulumi.StringPtrInput
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayInput
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolPtrInput
	// Specifies a custom HTTP IAM endpoint to use.
	IamEndpoint pulumi.StringPtrInput
	// The audience claim value. Requires Vault 1.16+.
	IdentityTokenAudience pulumi.StringPtrInput
	// The key to use for signing identity tokens.
	IdentityTokenKey pulumi.StringPtrInput
	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	IdentityTokenTtl pulumi.IntPtrInput
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrInput
	// Specifies if the secret backend is local only
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapInput
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayInput
	// The unique path this backend should be mounted at. Must
	// not begin or end with a `/`. Defaults to `aws`.
	Path pulumi.StringPtrInput
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrInput
	// The AWS region to make API calls against. Defaults to us-east-1.
	Region pulumi.StringPtrInput
	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	RoleArn pulumi.StringPtrInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow pulumi.IntPtrInput
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// The AWS Secret Access Key to use when generating new credentials.
	SecretKey pulumi.StringPtrInput
	// Specifies a custom HTTP STS endpoint to use.
	StsEndpoint pulumi.StringPtrInput
	// Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
	StsFallbackEndpoints pulumi.StringArrayInput
	// Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	StsFallbackRegions pulumi.StringArrayInput
	// Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
	StsRegion pulumi.StringPtrInput
	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	UsernameTemplate pulumi.StringPtrInput
}

func (SecretBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendState)(nil)).Elem()
}

type secretBackendArgs struct {
	// The AWS Access Key ID this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	AccessKey *string `pulumi:"accessKey"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []string `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []string `pulumi:"delegatedAuthAccessors"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache *bool `pulumi:"forceNoCache"`
	// Specifies a custom HTTP IAM endpoint to use.
	IamEndpoint *string `pulumi:"iamEndpoint"`
	// The audience claim value. Requires Vault 1.16+.
	IdentityTokenAudience *string `pulumi:"identityTokenAudience"`
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `pulumi:"identityTokenKey"`
	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	IdentityTokenTtl *int `pulumi:"identityTokenTtl"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `pulumi:"listingVisibility"`
	// Specifies if the secret backend is local only
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]string `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []string `pulumi:"passthroughRequestHeaders"`
	// The unique path this backend should be mounted at. Must
	// not begin or end with a `/`. Defaults to `aws`.
	Path *string `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `pulumi:"pluginVersion"`
	// The AWS region to make API calls against. Defaults to us-east-1.
	Region *string `pulumi:"region"`
	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	RoleArn *string `pulumi:"roleArn"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow *int `pulumi:"rotationWindow"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// The AWS Secret Access Key to use when generating new credentials.
	SecretKey *string `pulumi:"secretKey"`
	// Specifies a custom HTTP STS endpoint to use.
	StsEndpoint *string `pulumi:"stsEndpoint"`
	// Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
	StsFallbackEndpoints []string `pulumi:"stsFallbackEndpoints"`
	// Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	StsFallbackRegions []string `pulumi:"stsFallbackRegions"`
	// Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
	StsRegion *string `pulumi:"stsRegion"`
	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	UsernameTemplate *string `pulumi:"usernameTemplate"`
}

// The set of arguments for constructing a SecretBackend resource.
type SecretBackendArgs struct {
	// The AWS Access Key ID this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	AccessKey pulumi.StringPtrInput
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayInput
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolPtrInput
	// Specifies a custom HTTP IAM endpoint to use.
	IamEndpoint pulumi.StringPtrInput
	// The audience claim value. Requires Vault 1.16+.
	IdentityTokenAudience pulumi.StringPtrInput
	// The key to use for signing identity tokens.
	IdentityTokenKey pulumi.StringPtrInput
	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	IdentityTokenTtl pulumi.IntPtrInput
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrInput
	// Specifies if the secret backend is local only
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapInput
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayInput
	// The unique path this backend should be mounted at. Must
	// not begin or end with a `/`. Defaults to `aws`.
	Path pulumi.StringPtrInput
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrInput
	// The AWS region to make API calls against. Defaults to us-east-1.
	Region pulumi.StringPtrInput
	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	RoleArn pulumi.StringPtrInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	RotationWindow pulumi.IntPtrInput
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// The AWS Secret Access Key to use when generating new credentials.
	SecretKey pulumi.StringPtrInput
	// Specifies a custom HTTP STS endpoint to use.
	StsEndpoint pulumi.StringPtrInput
	// Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
	StsFallbackEndpoints pulumi.StringArrayInput
	// Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	StsFallbackRegions pulumi.StringArrayInput
	// Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
	StsRegion pulumi.StringPtrInput
	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	UsernameTemplate pulumi.StringPtrInput
}

func (SecretBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendArgs)(nil)).Elem()
}

type SecretBackendInput interface {
	pulumi.Input

	ToSecretBackendOutput() SecretBackendOutput
	ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput
}

func (*SecretBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackend)(nil)).Elem()
}

func (i *SecretBackend) ToSecretBackendOutput() SecretBackendOutput {
	return i.ToSecretBackendOutputWithContext(context.Background())
}

func (i *SecretBackend) ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendOutput)
}

// SecretBackendArrayInput is an input type that accepts SecretBackendArray and SecretBackendArrayOutput values.
// You can construct a concrete instance of `SecretBackendArrayInput` via:
//
//	SecretBackendArray{ SecretBackendArgs{...} }
type SecretBackendArrayInput interface {
	pulumi.Input

	ToSecretBackendArrayOutput() SecretBackendArrayOutput
	ToSecretBackendArrayOutputWithContext(context.Context) SecretBackendArrayOutput
}

type SecretBackendArray []SecretBackendInput

func (SecretBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackend)(nil)).Elem()
}

func (i SecretBackendArray) ToSecretBackendArrayOutput() SecretBackendArrayOutput {
	return i.ToSecretBackendArrayOutputWithContext(context.Background())
}

func (i SecretBackendArray) ToSecretBackendArrayOutputWithContext(ctx context.Context) SecretBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendArrayOutput)
}

// SecretBackendMapInput is an input type that accepts SecretBackendMap and SecretBackendMapOutput values.
// You can construct a concrete instance of `SecretBackendMapInput` via:
//
//	SecretBackendMap{ "key": SecretBackendArgs{...} }
type SecretBackendMapInput interface {
	pulumi.Input

	ToSecretBackendMapOutput() SecretBackendMapOutput
	ToSecretBackendMapOutputWithContext(context.Context) SecretBackendMapOutput
}

type SecretBackendMap map[string]SecretBackendInput

func (SecretBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackend)(nil)).Elem()
}

func (i SecretBackendMap) ToSecretBackendMapOutput() SecretBackendMapOutput {
	return i.ToSecretBackendMapOutputWithContext(context.Background())
}

func (i SecretBackendMap) ToSecretBackendMapOutputWithContext(ctx context.Context) SecretBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendMapOutput)
}

type SecretBackendOutput struct{ *pulumi.OutputState }

func (SecretBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackend)(nil)).Elem()
}

func (o SecretBackendOutput) ToSecretBackendOutput() SecretBackendOutput {
	return o
}

func (o SecretBackendOutput) ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput {
	return o
}

// The AWS Access Key ID this backend should use to
// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
func (o SecretBackendOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Accessor of the mount
func (o SecretBackendOutput) Accessor() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringOutput { return v.Accessor }).(pulumi.StringOutput)
}

// List of managed key registry entry names that the mount in question is allowed to access
func (o SecretBackendOutput) AllowedManagedKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AllowedManagedKeys }).(pulumi.StringArrayOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o SecretBackendOutput) AllowedResponseHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AllowedResponseHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
func (o SecretBackendOutput) AuditNonHmacRequestKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AuditNonHmacRequestKeys }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
func (o SecretBackendOutput) AuditNonHmacResponseKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.AuditNonHmacResponseKeys }).(pulumi.StringArrayOutput)
}

// Default lease duration for secrets in seconds
func (o SecretBackendOutput) DefaultLeaseTtlSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.IntOutput { return v.DefaultLeaseTtlSeconds }).(pulumi.IntOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o SecretBackendOutput) DelegatedAuthAccessors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.DelegatedAuthAccessors }).(pulumi.StringArrayOutput)
}

// Human-friendly description of the mount for the backend.
func (o SecretBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
func (o SecretBackendOutput) DisableAutomatedRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.DisableAutomatedRotation }).(pulumi.BoolPtrOutput)
}

// If set, opts out of mount migration on path updates.
// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
func (o SecretBackendOutput) DisableRemount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.DisableRemount }).(pulumi.BoolPtrOutput)
}

// Enable the secrets engine to access Vault's external entropy source
func (o SecretBackendOutput) ExternalEntropyAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.ExternalEntropyAccess }).(pulumi.BoolPtrOutput)
}

// If set to true, disables caching.
func (o SecretBackendOutput) ForceNoCache() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolOutput { return v.ForceNoCache }).(pulumi.BoolOutput)
}

// Specifies a custom HTTP IAM endpoint to use.
func (o SecretBackendOutput) IamEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.IamEndpoint }).(pulumi.StringPtrOutput)
}

// The audience claim value. Requires Vault 1.16+.
func (o SecretBackendOutput) IdentityTokenAudience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.IdentityTokenAudience }).(pulumi.StringPtrOutput)
}

// The key to use for signing identity tokens.
func (o SecretBackendOutput) IdentityTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.IdentityTokenKey }).(pulumi.StringPtrOutput)
}

// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
func (o SecretBackendOutput) IdentityTokenTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.IntOutput { return v.IdentityTokenTtl }).(pulumi.IntOutput)
}

// Specifies whether to show this mount in the UI-specific listing endpoint
func (o SecretBackendOutput) ListingVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.ListingVisibility }).(pulumi.StringPtrOutput)
}

// Specifies if the secret backend is local only
func (o SecretBackendOutput) Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolPtrOutput { return v.Local }).(pulumi.BoolPtrOutput)
}

// Maximum possible lease duration for secrets in seconds
func (o SecretBackendOutput) MaxLeaseTtlSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.IntOutput { return v.MaxLeaseTtlSeconds }).(pulumi.IntOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o SecretBackendOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies mount type specific options that are passed to the backend
func (o SecretBackendOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringMapOutput { return v.Options }).(pulumi.StringMapOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o SecretBackendOutput) PassthroughRequestHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.PassthroughRequestHeaders }).(pulumi.StringArrayOutput)
}

// The unique path this backend should be mounted at. Must
// not begin or end with a `/`. Defaults to `aws`.
func (o SecretBackendOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
func (o SecretBackendOutput) PluginVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.PluginVersion }).(pulumi.StringPtrOutput)
}

// The AWS region to make API calls against. Defaults to us-east-1.
func (o SecretBackendOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
func (o SecretBackendOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The amount of time in seconds Vault should wait before rotating the root credential.
// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
func (o SecretBackendOutput) RotationPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.IntPtrOutput { return v.RotationPeriod }).(pulumi.IntPtrOutput)
}

// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
func (o SecretBackendOutput) RotationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.RotationSchedule }).(pulumi.StringPtrOutput)
}

// The maximum amount of time in seconds allowed to complete
// a rotation when a scheduled token rotation occurs. The default rotation window is
// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
func (o SecretBackendOutput) RotationWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.IntPtrOutput { return v.RotationWindow }).(pulumi.IntPtrOutput)
}

// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
func (o SecretBackendOutput) SealWrap() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.BoolOutput { return v.SealWrap }).(pulumi.BoolOutput)
}

// The AWS Secret Access Key to use when generating new credentials.
func (o SecretBackendOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// Specifies a custom HTTP STS endpoint to use.
func (o SecretBackendOutput) StsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.StsEndpoint }).(pulumi.StringPtrOutput)
}

// Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
func (o SecretBackendOutput) StsFallbackEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.StsFallbackEndpoints }).(pulumi.StringArrayOutput)
}

// Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
func (o SecretBackendOutput) StsFallbackRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringArrayOutput { return v.StsFallbackRegions }).(pulumi.StringArrayOutput)
}

// Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
func (o SecretBackendOutput) StsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringPtrOutput { return v.StsRegion }).(pulumi.StringPtrOutput)
}

// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
func (o SecretBackendOutput) UsernameTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretBackend) pulumi.StringOutput { return v.UsernameTemplate }).(pulumi.StringOutput)
}

type SecretBackendArrayOutput struct{ *pulumi.OutputState }

func (SecretBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretBackend)(nil)).Elem()
}

func (o SecretBackendArrayOutput) ToSecretBackendArrayOutput() SecretBackendArrayOutput {
	return o
}

func (o SecretBackendArrayOutput) ToSecretBackendArrayOutputWithContext(ctx context.Context) SecretBackendArrayOutput {
	return o
}

func (o SecretBackendArrayOutput) Index(i pulumi.IntInput) SecretBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretBackend {
		return vs[0].([]*SecretBackend)[vs[1].(int)]
	}).(SecretBackendOutput)
}

type SecretBackendMapOutput struct{ *pulumi.OutputState }

func (SecretBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretBackend)(nil)).Elem()
}

func (o SecretBackendMapOutput) ToSecretBackendMapOutput() SecretBackendMapOutput {
	return o
}

func (o SecretBackendMapOutput) ToSecretBackendMapOutputWithContext(ctx context.Context) SecretBackendMapOutput {
	return o
}

func (o SecretBackendMapOutput) MapIndex(k pulumi.StringInput) SecretBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretBackend {
		return vs[0].(map[string]*SecretBackend)[vs[1].(string)]
	}).(SecretBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendInput)(nil)).Elem(), &SecretBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendArrayInput)(nil)).Elem(), SecretBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretBackendMapInput)(nil)).Elem(), SecretBackendMap{})
	pulumi.RegisterOutputType(SecretBackendOutput{})
	pulumi.RegisterOutputType(SecretBackendArrayOutput{})
	pulumi.RegisterOutputType(SecretBackendMapOutput{})
}
