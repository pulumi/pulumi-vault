// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saml

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SAML Auth mount in a Vault server. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/saml/) for more
// information.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/saml"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := saml.NewAuthBackend(ctx, "test", &saml.AuthBackendArgs{
//				AcsUrls: pulumi.StringArray{
//					pulumi.String("https://my.vault.primary/v1/auth/saml/callback"),
//				},
//				DefaultRole:    pulumi.String("admin"),
//				EntityId:       pulumi.String("https://my.vault/v1/auth/saml"),
//				IdpMetadataUrl: pulumi.String("https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml/metadata"),
//				Path:           pulumi.String("saml"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// SAML authentication mounts can be imported using the `path`, e.g.
//
// ```sh
// $ pulumi import vault:saml/authBackend:AuthBackend example saml
// ```
type AuthBackend struct {
	pulumi.CustomResourceState

	// The well-formatted URLs of your Assertion Consumer Service (ACS)
	// that should receive a response from the identity provider.
	AcsUrls pulumi.StringArrayOutput `pulumi:"acsUrls"`
	// The role to use if no role is provided during login.
	DefaultRole pulumi.StringPtrOutput `pulumi:"defaultRole"`
	// If set to `true`, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrOutput `pulumi:"disableRemount"`
	// The entity ID of the SAML authentication service provider.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// The PEM encoded certificate of the identity provider. Mutually exclusive
	// with `idpMetadataUrl`.
	IdpCert pulumi.StringPtrOutput `pulumi:"idpCert"`
	// The entity ID of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpEntityId pulumi.StringPtrOutput `pulumi:"idpEntityId"`
	// The metadata URL of the identity provider.
	IdpMetadataUrl pulumi.StringPtrOutput `pulumi:"idpMetadataUrl"`
	// The SSO URL of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpSsoUrl pulumi.StringPtrOutput `pulumi:"idpSsoUrl"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Path where the auth backend will be mounted. Defaults to `auth/saml`
	// if not specified.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// If set to `true`, logs additional, potentially sensitive
	// information during the SAML exchange according to the current logging level. Not
	// recommended for production.
	VerboseLogging pulumi.BoolOutput `pulumi:"verboseLogging"`
}

// NewAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewAuthBackend(ctx *pulumi.Context,
	name string, args *AuthBackendArgs, opts ...pulumi.ResourceOption) (*AuthBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcsUrls == nil {
		return nil, errors.New("invalid value for required argument 'AcsUrls'")
	}
	if args.EntityId == nil {
		return nil, errors.New("invalid value for required argument 'EntityId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthBackend
	err := ctx.RegisterResource("vault:saml/authBackend:AuthBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackend gets an existing AuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendState, opts ...pulumi.ResourceOption) (*AuthBackend, error) {
	var resource AuthBackend
	err := ctx.ReadResource("vault:saml/authBackend:AuthBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackend resources.
type authBackendState struct {
	// The well-formatted URLs of your Assertion Consumer Service (ACS)
	// that should receive a response from the identity provider.
	AcsUrls []string `pulumi:"acsUrls"`
	// The role to use if no role is provided during login.
	DefaultRole *string `pulumi:"defaultRole"`
	// If set to `true`, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// The entity ID of the SAML authentication service provider.
	EntityId *string `pulumi:"entityId"`
	// The PEM encoded certificate of the identity provider. Mutually exclusive
	// with `idpMetadataUrl`.
	IdpCert *string `pulumi:"idpCert"`
	// The entity ID of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpEntityId *string `pulumi:"idpEntityId"`
	// The metadata URL of the identity provider.
	IdpMetadataUrl *string `pulumi:"idpMetadataUrl"`
	// The SSO URL of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpSsoUrl *string `pulumi:"idpSsoUrl"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Path where the auth backend will be mounted. Defaults to `auth/saml`
	// if not specified.
	Path *string `pulumi:"path"`
	// If set to `true`, logs additional, potentially sensitive
	// information during the SAML exchange according to the current logging level. Not
	// recommended for production.
	VerboseLogging *bool `pulumi:"verboseLogging"`
}

type AuthBackendState struct {
	// The well-formatted URLs of your Assertion Consumer Service (ACS)
	// that should receive a response from the identity provider.
	AcsUrls pulumi.StringArrayInput
	// The role to use if no role is provided during login.
	DefaultRole pulumi.StringPtrInput
	// If set to `true`, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// The entity ID of the SAML authentication service provider.
	EntityId pulumi.StringPtrInput
	// The PEM encoded certificate of the identity provider. Mutually exclusive
	// with `idpMetadataUrl`.
	IdpCert pulumi.StringPtrInput
	// The entity ID of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpEntityId pulumi.StringPtrInput
	// The metadata URL of the identity provider.
	IdpMetadataUrl pulumi.StringPtrInput
	// The SSO URL of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpSsoUrl pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Path where the auth backend will be mounted. Defaults to `auth/saml`
	// if not specified.
	Path pulumi.StringPtrInput
	// If set to `true`, logs additional, potentially sensitive
	// information during the SAML exchange according to the current logging level. Not
	// recommended for production.
	VerboseLogging pulumi.BoolPtrInput
}

func (AuthBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendState)(nil)).Elem()
}

type authBackendArgs struct {
	// The well-formatted URLs of your Assertion Consumer Service (ACS)
	// that should receive a response from the identity provider.
	AcsUrls []string `pulumi:"acsUrls"`
	// The role to use if no role is provided during login.
	DefaultRole *string `pulumi:"defaultRole"`
	// If set to `true`, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// The entity ID of the SAML authentication service provider.
	EntityId string `pulumi:"entityId"`
	// The PEM encoded certificate of the identity provider. Mutually exclusive
	// with `idpMetadataUrl`.
	IdpCert *string `pulumi:"idpCert"`
	// The entity ID of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpEntityId *string `pulumi:"idpEntityId"`
	// The metadata URL of the identity provider.
	IdpMetadataUrl *string `pulumi:"idpMetadataUrl"`
	// The SSO URL of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpSsoUrl *string `pulumi:"idpSsoUrl"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Path where the auth backend will be mounted. Defaults to `auth/saml`
	// if not specified.
	Path *string `pulumi:"path"`
	// If set to `true`, logs additional, potentially sensitive
	// information during the SAML exchange according to the current logging level. Not
	// recommended for production.
	VerboseLogging *bool `pulumi:"verboseLogging"`
}

// The set of arguments for constructing a AuthBackend resource.
type AuthBackendArgs struct {
	// The well-formatted URLs of your Assertion Consumer Service (ACS)
	// that should receive a response from the identity provider.
	AcsUrls pulumi.StringArrayInput
	// The role to use if no role is provided during login.
	DefaultRole pulumi.StringPtrInput
	// If set to `true`, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// The entity ID of the SAML authentication service provider.
	EntityId pulumi.StringInput
	// The PEM encoded certificate of the identity provider. Mutually exclusive
	// with `idpMetadataUrl`.
	IdpCert pulumi.StringPtrInput
	// The entity ID of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpEntityId pulumi.StringPtrInput
	// The metadata URL of the identity provider.
	IdpMetadataUrl pulumi.StringPtrInput
	// The SSO URL of the identity provider. Mutually exclusive with
	// `idpMetadataUrl`.
	IdpSsoUrl pulumi.StringPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Path where the auth backend will be mounted. Defaults to `auth/saml`
	// if not specified.
	Path pulumi.StringPtrInput
	// If set to `true`, logs additional, potentially sensitive
	// information during the SAML exchange according to the current logging level. Not
	// recommended for production.
	VerboseLogging pulumi.BoolPtrInput
}

func (AuthBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendArgs)(nil)).Elem()
}

type AuthBackendInput interface {
	pulumi.Input

	ToAuthBackendOutput() AuthBackendOutput
	ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput
}

func (*AuthBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackend)(nil)).Elem()
}

func (i *AuthBackend) ToAuthBackendOutput() AuthBackendOutput {
	return i.ToAuthBackendOutputWithContext(context.Background())
}

func (i *AuthBackend) ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendOutput)
}

// AuthBackendArrayInput is an input type that accepts AuthBackendArray and AuthBackendArrayOutput values.
// You can construct a concrete instance of `AuthBackendArrayInput` via:
//
//	AuthBackendArray{ AuthBackendArgs{...} }
type AuthBackendArrayInput interface {
	pulumi.Input

	ToAuthBackendArrayOutput() AuthBackendArrayOutput
	ToAuthBackendArrayOutputWithContext(context.Context) AuthBackendArrayOutput
}

type AuthBackendArray []AuthBackendInput

func (AuthBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackend)(nil)).Elem()
}

func (i AuthBackendArray) ToAuthBackendArrayOutput() AuthBackendArrayOutput {
	return i.ToAuthBackendArrayOutputWithContext(context.Background())
}

func (i AuthBackendArray) ToAuthBackendArrayOutputWithContext(ctx context.Context) AuthBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendArrayOutput)
}

// AuthBackendMapInput is an input type that accepts AuthBackendMap and AuthBackendMapOutput values.
// You can construct a concrete instance of `AuthBackendMapInput` via:
//
//	AuthBackendMap{ "key": AuthBackendArgs{...} }
type AuthBackendMapInput interface {
	pulumi.Input

	ToAuthBackendMapOutput() AuthBackendMapOutput
	ToAuthBackendMapOutputWithContext(context.Context) AuthBackendMapOutput
}

type AuthBackendMap map[string]AuthBackendInput

func (AuthBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackend)(nil)).Elem()
}

func (i AuthBackendMap) ToAuthBackendMapOutput() AuthBackendMapOutput {
	return i.ToAuthBackendMapOutputWithContext(context.Background())
}

func (i AuthBackendMap) ToAuthBackendMapOutputWithContext(ctx context.Context) AuthBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendMapOutput)
}

type AuthBackendOutput struct{ *pulumi.OutputState }

func (AuthBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackend)(nil)).Elem()
}

func (o AuthBackendOutput) ToAuthBackendOutput() AuthBackendOutput {
	return o
}

func (o AuthBackendOutput) ToAuthBackendOutputWithContext(ctx context.Context) AuthBackendOutput {
	return o
}

// The well-formatted URLs of your Assertion Consumer Service (ACS)
// that should receive a response from the identity provider.
func (o AuthBackendOutput) AcsUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringArrayOutput { return v.AcsUrls }).(pulumi.StringArrayOutput)
}

// The role to use if no role is provided during login.
func (o AuthBackendOutput) DefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.DefaultRole }).(pulumi.StringPtrOutput)
}

// If set to `true`, opts out of mount migration on path updates.
// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
func (o AuthBackendOutput) DisableRemount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolPtrOutput { return v.DisableRemount }).(pulumi.BoolPtrOutput)
}

// The entity ID of the SAML authentication service provider.
func (o AuthBackendOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringOutput { return v.EntityId }).(pulumi.StringOutput)
}

// The PEM encoded certificate of the identity provider. Mutually exclusive
// with `idpMetadataUrl`.
func (o AuthBackendOutput) IdpCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.IdpCert }).(pulumi.StringPtrOutput)
}

// The entity ID of the identity provider. Mutually exclusive with
// `idpMetadataUrl`.
func (o AuthBackendOutput) IdpEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.IdpEntityId }).(pulumi.StringPtrOutput)
}

// The metadata URL of the identity provider.
func (o AuthBackendOutput) IdpMetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.IdpMetadataUrl }).(pulumi.StringPtrOutput)
}

// The SSO URL of the identity provider. Mutually exclusive with
// `idpMetadataUrl`.
func (o AuthBackendOutput) IdpSsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.IdpSsoUrl }).(pulumi.StringPtrOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o AuthBackendOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Path where the auth backend will be mounted. Defaults to `auth/saml`
// if not specified.
func (o AuthBackendOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// If set to `true`, logs additional, potentially sensitive
// information during the SAML exchange according to the current logging level. Not
// recommended for production.
func (o AuthBackendOutput) VerboseLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthBackend) pulumi.BoolOutput { return v.VerboseLogging }).(pulumi.BoolOutput)
}

type AuthBackendArrayOutput struct{ *pulumi.OutputState }

func (AuthBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackend)(nil)).Elem()
}

func (o AuthBackendArrayOutput) ToAuthBackendArrayOutput() AuthBackendArrayOutput {
	return o
}

func (o AuthBackendArrayOutput) ToAuthBackendArrayOutputWithContext(ctx context.Context) AuthBackendArrayOutput {
	return o
}

func (o AuthBackendArrayOutput) Index(i pulumi.IntInput) AuthBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthBackend {
		return vs[0].([]*AuthBackend)[vs[1].(int)]
	}).(AuthBackendOutput)
}

type AuthBackendMapOutput struct{ *pulumi.OutputState }

func (AuthBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackend)(nil)).Elem()
}

func (o AuthBackendMapOutput) ToAuthBackendMapOutput() AuthBackendMapOutput {
	return o
}

func (o AuthBackendMapOutput) ToAuthBackendMapOutputWithContext(ctx context.Context) AuthBackendMapOutput {
	return o
}

func (o AuthBackendMapOutput) MapIndex(k pulumi.StringInput) AuthBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthBackend {
		return vs[0].(map[string]*AuthBackend)[vs[1].(string)]
	}).(AuthBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendInput)(nil)).Elem(), &AuthBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendArrayInput)(nil)).Elem(), AuthBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendMapInput)(nil)).Elem(), AuthBackendMap{})
	pulumi.RegisterOutputType(AuthBackendOutput{})
	pulumi.RegisterOutputType(AuthBackendArrayOutput{})
	pulumi.RegisterOutputType(AuthBackendMapOutput{})
}
