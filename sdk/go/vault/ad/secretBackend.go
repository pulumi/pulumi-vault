// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ad

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SecretBackend struct {
	pulumi.CustomResourceState

	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the
	// initial connection test).
	AnonymousGroupSearch pulumi.BoolPtrOutput `pulumi:"anonymousGroupSearch"`
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	Backend pulumi.StringPtrOutput `pulumi:"backend"`
	// Distinguished name of object to bind when performing user and group search.
	Binddn pulumi.StringOutput `pulumi:"binddn"`
	// LDAP password for searching for the user DN.
	Bindpass pulumi.StringOutput `pulumi:"bindpass"`
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames pulumi.BoolPtrOutput `pulumi:"caseSensitiveNames"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate pulumi.StringPtrOutput `pulumi:"certificate"`
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsCert pulumi.StringPtrOutput `pulumi:"clientTlsCert"`
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsKey pulumi.StringPtrOutput `pulumi:"clientTlsKey"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntOutput `pulumi:"defaultLeaseTtlSeconds"`
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind pulumi.BoolPtrOutput `pulumi:"denyNullBind"`
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn pulumi.BoolPtrOutput `pulumi:"discoverdn"`
	// Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
	//
	// Deprecated: Formatter is deprecated and password_policy should be used with Vault >= 1.5.
	Formatter pulumi.StringOutput `pulumi:"formatter"`
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples:
	// "cn" or "memberOf", etc. Default: cn
	Groupattr pulumi.StringPtrOutput `pulumi:"groupattr"`
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn pulumi.StringPtrOutput `pulumi:"groupdn"`
	// Go template for querying group membership of user. The template can access the following context variables: UserDN,
	// Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default:
	// (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter pulumi.StringPtrOutput `pulumi:"groupfilter"`
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	InsecureTls pulumi.BoolPtrOutput `pulumi:"insecureTls"`
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered
	// out-of-band.
	LastRotationTolerance pulumi.IntOutput `pulumi:"lastRotationTolerance"`
	// The desired length of passwords that Vault generates.
	//
	// Deprecated: Length is deprecated and password_policy should be used with Vault >= 1.5.
	Length pulumi.IntOutput `pulumi:"length"`
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to
	// use when checking the last rotation time.
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds.
	MaxLeaseTtlSeconds pulumi.IntOutput `pulumi:"maxLeaseTtlSeconds"`
	// In seconds, the maximum password time-to-live.
	MaxTtl pulumi.IntOutput `pulumi:"maxTtl"`
	// Name of the password policy to use to generate passwords.
	PasswordPolicy pulumi.StringPtrOutput `pulumi:"passwordPolicy"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout pulumi.IntPtrOutput `pulumi:"requestTimeout"`
	// Issue a StartTLS command after establishing unencrypted connection.
	Starttls pulumi.BoolOutput `pulumi:"starttls"`
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMaxVersion pulumi.StringOutput `pulumi:"tlsMaxVersion"`
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMinVersion pulumi.StringOutput `pulumi:"tlsMinVersion"`
	// In seconds, the default password time-to-live.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	Upndomain pulumi.StringOutput `pulumi:"upndomain"`
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas;
	// they will be tried in-order.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could
	// cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1
	// behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility.
	// It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior pulumi.BoolOutput `pulumi:"usePre111GroupCnBehavior"`
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will
	// find all security groups including nested ones.
	UseTokenGroups pulumi.BoolPtrOutput `pulumi:"useTokenGroups"`
	// Attribute used for users (default: cn)
	Userattr pulumi.StringPtrOutput `pulumi:"userattr"`
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn pulumi.StringPtrOutput `pulumi:"userdn"`
}

// NewSecretBackend registers a new resource with the given unique name, arguments, and options.
func NewSecretBackend(ctx *pulumi.Context,
	name string, args *SecretBackendArgs, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	if args == nil || args.Binddn == nil {
		return nil, errors.New("missing required argument 'Binddn'")
	}
	if args == nil || args.Bindpass == nil {
		return nil, errors.New("missing required argument 'Bindpass'")
	}
	if args == nil {
		args = &SecretBackendArgs{}
	}
	var resource SecretBackend
	err := ctx.RegisterResource("vault:ad/secretBackend:SecretBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackend gets an existing SecretBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendState, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	var resource SecretBackend
	err := ctx.ReadResource("vault:ad/secretBackend:SecretBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackend resources.
type secretBackendState struct {
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the
	// initial connection test).
	AnonymousGroupSearch *bool `pulumi:"anonymousGroupSearch"`
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	Backend *string `pulumi:"backend"`
	// Distinguished name of object to bind when performing user and group search.
	Binddn *string `pulumi:"binddn"`
	// LDAP password for searching for the user DN.
	Bindpass *string `pulumi:"bindpass"`
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames *bool `pulumi:"caseSensitiveNames"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate *string `pulumi:"certificate"`
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsCert *string `pulumi:"clientTlsCert"`
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsKey *string `pulumi:"clientTlsKey"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind *bool `pulumi:"denyNullBind"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn *bool `pulumi:"discoverdn"`
	// Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
	//
	// Deprecated: Formatter is deprecated and password_policy should be used with Vault >= 1.5.
	Formatter *string `pulumi:"formatter"`
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples:
	// "cn" or "memberOf", etc. Default: cn
	Groupattr *string `pulumi:"groupattr"`
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn *string `pulumi:"groupdn"`
	// Go template for querying group membership of user. The template can access the following context variables: UserDN,
	// Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default:
	// (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter *string `pulumi:"groupfilter"`
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered
	// out-of-band.
	LastRotationTolerance *int `pulumi:"lastRotationTolerance"`
	// The desired length of passwords that Vault generates.
	//
	// Deprecated: Length is deprecated and password_policy should be used with Vault >= 1.5.
	Length *int `pulumi:"length"`
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to
	// use when checking the last rotation time.
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds.
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// In seconds, the maximum password time-to-live.
	MaxTtl *int `pulumi:"maxTtl"`
	// Name of the password policy to use to generate passwords.
	PasswordPolicy *string `pulumi:"passwordPolicy"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Issue a StartTLS command after establishing unencrypted connection.
	Starttls *bool `pulumi:"starttls"`
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMaxVersion *string `pulumi:"tlsMaxVersion"`
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
	// In seconds, the default password time-to-live.
	Ttl *int `pulumi:"ttl"`
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	Upndomain *string `pulumi:"upndomain"`
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas;
	// they will be tried in-order.
	Url *string `pulumi:"url"`
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could
	// cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1
	// behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility.
	// It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior *bool `pulumi:"usePre111GroupCnBehavior"`
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will
	// find all security groups including nested ones.
	UseTokenGroups *bool `pulumi:"useTokenGroups"`
	// Attribute used for users (default: cn)
	Userattr *string `pulumi:"userattr"`
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn *string `pulumi:"userdn"`
}

type SecretBackendState struct {
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the
	// initial connection test).
	AnonymousGroupSearch pulumi.BoolPtrInput
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	Backend pulumi.StringPtrInput
	// Distinguished name of object to bind when performing user and group search.
	Binddn pulumi.StringPtrInput
	// LDAP password for searching for the user DN.
	Bindpass pulumi.StringPtrInput
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames pulumi.BoolPtrInput
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate pulumi.StringPtrInput
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsCert pulumi.StringPtrInput
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsKey pulumi.StringPtrInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind pulumi.BoolPtrInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn pulumi.BoolPtrInput
	// Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
	//
	// Deprecated: Formatter is deprecated and password_policy should be used with Vault >= 1.5.
	Formatter pulumi.StringPtrInput
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples:
	// "cn" or "memberOf", etc. Default: cn
	Groupattr pulumi.StringPtrInput
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn pulumi.StringPtrInput
	// Go template for querying group membership of user. The template can access the following context variables: UserDN,
	// Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default:
	// (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter pulumi.StringPtrInput
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	InsecureTls pulumi.BoolPtrInput
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered
	// out-of-band.
	LastRotationTolerance pulumi.IntPtrInput
	// The desired length of passwords that Vault generates.
	//
	// Deprecated: Length is deprecated and password_policy should be used with Vault >= 1.5.
	Length pulumi.IntPtrInput
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to
	// use when checking the last rotation time.
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for secrets in seconds.
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// In seconds, the maximum password time-to-live.
	MaxTtl pulumi.IntPtrInput
	// Name of the password policy to use to generate passwords.
	PasswordPolicy pulumi.StringPtrInput
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout pulumi.IntPtrInput
	// Issue a StartTLS command after establishing unencrypted connection.
	Starttls pulumi.BoolPtrInput
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMaxVersion pulumi.StringPtrInput
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMinVersion pulumi.StringPtrInput
	// In seconds, the default password time-to-live.
	Ttl pulumi.IntPtrInput
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	Upndomain pulumi.StringPtrInput
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas;
	// they will be tried in-order.
	Url pulumi.StringPtrInput
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could
	// cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1
	// behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility.
	// It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior pulumi.BoolPtrInput
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will
	// find all security groups including nested ones.
	UseTokenGroups pulumi.BoolPtrInput
	// Attribute used for users (default: cn)
	Userattr pulumi.StringPtrInput
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn pulumi.StringPtrInput
}

func (SecretBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendState)(nil)).Elem()
}

type secretBackendArgs struct {
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the
	// initial connection test).
	AnonymousGroupSearch *bool `pulumi:"anonymousGroupSearch"`
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	Backend *string `pulumi:"backend"`
	// Distinguished name of object to bind when performing user and group search.
	Binddn string `pulumi:"binddn"`
	// LDAP password for searching for the user DN.
	Bindpass string `pulumi:"bindpass"`
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames *bool `pulumi:"caseSensitiveNames"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate *string `pulumi:"certificate"`
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsCert *string `pulumi:"clientTlsCert"`
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsKey *string `pulumi:"clientTlsKey"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind *bool `pulumi:"denyNullBind"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn *bool `pulumi:"discoverdn"`
	// Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
	//
	// Deprecated: Formatter is deprecated and password_policy should be used with Vault >= 1.5.
	Formatter *string `pulumi:"formatter"`
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples:
	// "cn" or "memberOf", etc. Default: cn
	Groupattr *string `pulumi:"groupattr"`
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn *string `pulumi:"groupdn"`
	// Go template for querying group membership of user. The template can access the following context variables: UserDN,
	// Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default:
	// (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter *string `pulumi:"groupfilter"`
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered
	// out-of-band.
	LastRotationTolerance *int `pulumi:"lastRotationTolerance"`
	// The desired length of passwords that Vault generates.
	//
	// Deprecated: Length is deprecated and password_policy should be used with Vault >= 1.5.
	Length *int `pulumi:"length"`
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to
	// use when checking the last rotation time.
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for secrets in seconds.
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// In seconds, the maximum password time-to-live.
	MaxTtl *int `pulumi:"maxTtl"`
	// Name of the password policy to use to generate passwords.
	PasswordPolicy *string `pulumi:"passwordPolicy"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Issue a StartTLS command after establishing unencrypted connection.
	Starttls *bool `pulumi:"starttls"`
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMaxVersion *string `pulumi:"tlsMaxVersion"`
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
	// In seconds, the default password time-to-live.
	Ttl *int `pulumi:"ttl"`
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	Upndomain *string `pulumi:"upndomain"`
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas;
	// they will be tried in-order.
	Url *string `pulumi:"url"`
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could
	// cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1
	// behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility.
	// It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior *bool `pulumi:"usePre111GroupCnBehavior"`
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will
	// find all security groups including nested ones.
	UseTokenGroups *bool `pulumi:"useTokenGroups"`
	// Attribute used for users (default: cn)
	Userattr *string `pulumi:"userattr"`
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn *string `pulumi:"userdn"`
}

// The set of arguments for constructing a SecretBackend resource.
type SecretBackendArgs struct {
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the
	// initial connection test).
	AnonymousGroupSearch pulumi.BoolPtrInput
	// The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
	Backend pulumi.StringPtrInput
	// Distinguished name of object to bind when performing user and group search.
	Binddn pulumi.StringInput
	// LDAP password for searching for the user DN.
	Bindpass pulumi.StringInput
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames pulumi.BoolPtrInput
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate pulumi.StringPtrInput
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsCert pulumi.StringPtrInput
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
	ClientTlsKey pulumi.StringPtrInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind pulumi.BoolPtrInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Use anonymous bind to discover the bind DN of a user.
	Discoverdn pulumi.BoolPtrInput
	// Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
	//
	// Deprecated: Formatter is deprecated and password_policy should be used with Vault >= 1.5.
	Formatter pulumi.StringPtrInput
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples:
	// "cn" or "memberOf", etc. Default: cn
	Groupattr pulumi.StringPtrInput
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn pulumi.StringPtrInput
	// Go template for querying group membership of user. The template can access the following context variables: UserDN,
	// Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default:
	// (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter pulumi.StringPtrInput
	// Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
	InsecureTls pulumi.BoolPtrInput
	// The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered
	// out-of-band.
	LastRotationTolerance pulumi.IntPtrInput
	// The desired length of passwords that Vault generates.
	//
	// Deprecated: Length is deprecated and password_policy should be used with Vault >= 1.5.
	Length pulumi.IntPtrInput
	// Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to
	// use when checking the last rotation time.
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for secrets in seconds.
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// In seconds, the maximum password time-to-live.
	MaxTtl pulumi.IntPtrInput
	// Name of the password policy to use to generate passwords.
	PasswordPolicy pulumi.StringPtrInput
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout pulumi.IntPtrInput
	// Issue a StartTLS command after establishing unencrypted connection.
	Starttls pulumi.BoolPtrInput
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMaxVersion pulumi.StringPtrInput
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMinVersion pulumi.StringPtrInput
	// In seconds, the default password time-to-live.
	Ttl pulumi.IntPtrInput
	// Enables userPrincipalDomain login with [username]@UPNDomain.
	Upndomain pulumi.StringPtrInput
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas;
	// they will be tried in-order.
	Url pulumi.StringPtrInput
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could
	// cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1
	// behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility.
	// It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior pulumi.BoolPtrInput
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will
	// find all security groups including nested ones.
	UseTokenGroups pulumi.BoolPtrInput
	// Attribute used for users (default: cn)
	Userattr pulumi.StringPtrInput
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn pulumi.StringPtrInput
}

func (SecretBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendArgs)(nil)).Elem()
}

type SecretBackendInput interface {
	pulumi.Input

	ToSecretBackendOutput() SecretBackendOutput
	ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput
}

func (SecretBackend) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackend)(nil)).Elem()
}

func (i SecretBackend) ToSecretBackendOutput() SecretBackendOutput {
	return i.ToSecretBackendOutputWithContext(context.Background())
}

func (i SecretBackend) ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendOutput)
}

type SecretBackendOutput struct {
	*pulumi.OutputState
}

func (SecretBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendOutput)(nil)).Elem()
}

func (o SecretBackendOutput) ToSecretBackendOutput() SecretBackendOutput {
	return o
}

func (o SecretBackendOutput) ToSecretBackendOutputWithContext(ctx context.Context) SecretBackendOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecretBackendOutput{})
}
