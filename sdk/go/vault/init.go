// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "vault:index/audit:Audit":
		r = &Audit{}
	case "vault:index/authBackend:AuthBackend":
		r = &AuthBackend{}
	case "vault:index/certAuthBackendRole:CertAuthBackendRole":
		r = &CertAuthBackendRole{}
	case "vault:index/egpPolicy:EgpPolicy":
		r = &EgpPolicy{}
	case "vault:index/mfaDuo:MfaDuo":
		r = &MfaDuo{}
	case "vault:index/mfaOkta:MfaOkta":
		r = &MfaOkta{}
	case "vault:index/mfaPingid:MfaPingid":
		r = &MfaPingid{}
	case "vault:index/mfaTotp:MfaTotp":
		r = &MfaTotp{}
	case "vault:index/mount:Mount":
		r = &Mount{}
	case "vault:index/namespace:Namespace":
		r = &Namespace{}
	case "vault:index/nomadSecretBackend:NomadSecretBackend":
		r = &NomadSecretBackend{}
	case "vault:index/nomadSecretRole:NomadSecretRole":
		r = &NomadSecretRole{}
	case "vault:index/passwordPolicy:PasswordPolicy":
		r = &PasswordPolicy{}
	case "vault:index/policy:Policy":
		r = &Policy{}
	case "vault:index/quotaLeaseCount:QuotaLeaseCount":
		r = &QuotaLeaseCount{}
	case "vault:index/quotaRateLimit:QuotaRateLimit":
		r = &QuotaRateLimit{}
	case "vault:index/raftAutopilot:RaftAutopilot":
		r = &RaftAutopilot{}
	case "vault:index/raftSnapshotAgentConfig:RaftSnapshotAgentConfig":
		r = &RaftSnapshotAgentConfig{}
	case "vault:index/rgpPolicy:RgpPolicy":
		r = &RgpPolicy{}
	case "vault:index/token:Token":
		r = &Token{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:vault" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"vault",
		"index/audit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/authBackend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/certAuthBackendRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/egpPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/mfaDuo",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/mfaOkta",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/mfaPingid",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/mfaTotp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/mount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/namespace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/nomadSecretBackend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/nomadSecretRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/passwordPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/quotaLeaseCount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/quotaRateLimit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/raftAutopilot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/raftSnapshotAgentConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/rgpPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"vault",
		"index/token",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"vault",
		&pkg{version},
	)
}
