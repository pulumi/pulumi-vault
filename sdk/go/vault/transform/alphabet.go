// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource supports the "/transform/alphabet/{name}" Vault endpoint.
//
// It queries an existing alphabet by the given name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault"
// 	"github.com/pulumi/pulumi-vault/sdk/v3/go/vault/transform"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mountTransform, err := vault.NewMount(ctx, "mountTransform", &vault.MountArgs{
// 			Path: pulumi.String("transform"),
// 			Type: pulumi.String("transform"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = transform.NewAlphabet(ctx, "test", &transform.AlphabetArgs{
// 			Path:     mountTransform.Path,
// 			Alphabet: pulumi.String("0123456789"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Alphabet struct {
	pulumi.CustomResourceState

	// A string of characters that contains the alphabet set.
	Alphabet pulumi.StringPtrOutput `pulumi:"alphabet"`
	// The name of the alphabet.
	Name pulumi.StringOutput `pulumi:"name"`
	// Path to where the back-end is mounted within Vault.
	Path pulumi.StringOutput `pulumi:"path"`
}

// NewAlphabet registers a new resource with the given unique name, arguments, and options.
func NewAlphabet(ctx *pulumi.Context,
	name string, args *AlphabetArgs, opts ...pulumi.ResourceOption) (*Alphabet, error) {
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil {
		args = &AlphabetArgs{}
	}
	var resource Alphabet
	err := ctx.RegisterResource("vault:transform/alphabet:Alphabet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlphabet gets an existing Alphabet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlphabet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlphabetState, opts ...pulumi.ResourceOption) (*Alphabet, error) {
	var resource Alphabet
	err := ctx.ReadResource("vault:transform/alphabet:Alphabet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alphabet resources.
type alphabetState struct {
	// A string of characters that contains the alphabet set.
	Alphabet *string `pulumi:"alphabet"`
	// The name of the alphabet.
	Name *string `pulumi:"name"`
	// Path to where the back-end is mounted within Vault.
	Path *string `pulumi:"path"`
}

type AlphabetState struct {
	// A string of characters that contains the alphabet set.
	Alphabet pulumi.StringPtrInput
	// The name of the alphabet.
	Name pulumi.StringPtrInput
	// Path to where the back-end is mounted within Vault.
	Path pulumi.StringPtrInput
}

func (AlphabetState) ElementType() reflect.Type {
	return reflect.TypeOf((*alphabetState)(nil)).Elem()
}

type alphabetArgs struct {
	// A string of characters that contains the alphabet set.
	Alphabet *string `pulumi:"alphabet"`
	// The name of the alphabet.
	Name *string `pulumi:"name"`
	// Path to where the back-end is mounted within Vault.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a Alphabet resource.
type AlphabetArgs struct {
	// A string of characters that contains the alphabet set.
	Alphabet pulumi.StringPtrInput
	// The name of the alphabet.
	Name pulumi.StringPtrInput
	// Path to where the back-end is mounted within Vault.
	Path pulumi.StringInput
}

func (AlphabetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alphabetArgs)(nil)).Elem()
}

type AlphabetInput interface {
	pulumi.Input

	ToAlphabetOutput() AlphabetOutput
	ToAlphabetOutputWithContext(ctx context.Context) AlphabetOutput
}

func (Alphabet) ElementType() reflect.Type {
	return reflect.TypeOf((*Alphabet)(nil)).Elem()
}

func (i Alphabet) ToAlphabetOutput() AlphabetOutput {
	return i.ToAlphabetOutputWithContext(context.Background())
}

func (i Alphabet) ToAlphabetOutputWithContext(ctx context.Context) AlphabetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlphabetOutput)
}

type AlphabetOutput struct {
	*pulumi.OutputState
}

func (AlphabetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlphabetOutput)(nil)).Elem()
}

func (o AlphabetOutput) ToAlphabetOutput() AlphabetOutput {
	return o
}

func (o AlphabetOutput) ToAlphabetOutputWithContext(ctx context.Context) AlphabetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AlphabetOutput{})
}
