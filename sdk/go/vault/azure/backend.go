// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Backend struct {
	pulumi.CustomResourceState

	// - The OAuth2 client id to connect to Azure.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// - The OAuth2 client secret to connect to Azure.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// - The Azure environment.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// - The unique path this backend should be mounted at. Defaults to `azure`.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// - The subscription id for the Azure Active Directory.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// - The tenant id for the Azure Active Directory.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// - Use the Microsoft Graph API introduced in `vault-1.9`.
	//   Should be set to true for `vault-1.10+`
	UseMicrosoftGraphApi pulumi.BoolOutput `pulumi:"useMicrosoftGraphApi"`
}

// NewBackend registers a new resource with the given unique name, arguments, and options.
func NewBackend(ctx *pulumi.Context,
	name string, args *BackendArgs, opts ...pulumi.ResourceOption) (*Backend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	var resource Backend
	err := ctx.RegisterResource("vault:azure/backend:Backend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackend gets an existing Backend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendState, opts ...pulumi.ResourceOption) (*Backend, error) {
	var resource Backend
	err := ctx.ReadResource("vault:azure/backend:Backend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backend resources.
type backendState struct {
	// - The OAuth2 client id to connect to Azure.
	ClientId *string `pulumi:"clientId"`
	// - The OAuth2 client secret to connect to Azure.
	ClientSecret *string `pulumi:"clientSecret"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// - The Azure environment.
	Environment *string `pulumi:"environment"`
	// - The unique path this backend should be mounted at. Defaults to `azure`.
	Path *string `pulumi:"path"`
	// - The subscription id for the Azure Active Directory.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// - The tenant id for the Azure Active Directory.
	TenantId *string `pulumi:"tenantId"`
	// - Use the Microsoft Graph API introduced in `vault-1.9`.
	//   Should be set to true for `vault-1.10+`
	UseMicrosoftGraphApi *bool `pulumi:"useMicrosoftGraphApi"`
}

type BackendState struct {
	// - The OAuth2 client id to connect to Azure.
	ClientId pulumi.StringPtrInput
	// - The OAuth2 client secret to connect to Azure.
	ClientSecret pulumi.StringPtrInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// - The Azure environment.
	Environment pulumi.StringPtrInput
	// - The unique path this backend should be mounted at. Defaults to `azure`.
	Path pulumi.StringPtrInput
	// - The subscription id for the Azure Active Directory.
	SubscriptionId pulumi.StringPtrInput
	// - The tenant id for the Azure Active Directory.
	TenantId pulumi.StringPtrInput
	// - Use the Microsoft Graph API introduced in `vault-1.9`.
	//   Should be set to true for `vault-1.10+`
	UseMicrosoftGraphApi pulumi.BoolPtrInput
}

func (BackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendState)(nil)).Elem()
}

type backendArgs struct {
	// - The OAuth2 client id to connect to Azure.
	ClientId *string `pulumi:"clientId"`
	// - The OAuth2 client secret to connect to Azure.
	ClientSecret *string `pulumi:"clientSecret"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// - The Azure environment.
	Environment *string `pulumi:"environment"`
	// - The unique path this backend should be mounted at. Defaults to `azure`.
	Path *string `pulumi:"path"`
	// - The subscription id for the Azure Active Directory.
	SubscriptionId string `pulumi:"subscriptionId"`
	// - The tenant id for the Azure Active Directory.
	TenantId string `pulumi:"tenantId"`
	// - Use the Microsoft Graph API introduced in `vault-1.9`.
	//   Should be set to true for `vault-1.10+`
	UseMicrosoftGraphApi *bool `pulumi:"useMicrosoftGraphApi"`
}

// The set of arguments for constructing a Backend resource.
type BackendArgs struct {
	// - The OAuth2 client id to connect to Azure.
	ClientId pulumi.StringPtrInput
	// - The OAuth2 client secret to connect to Azure.
	ClientSecret pulumi.StringPtrInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// - The Azure environment.
	Environment pulumi.StringPtrInput
	// - The unique path this backend should be mounted at. Defaults to `azure`.
	Path pulumi.StringPtrInput
	// - The subscription id for the Azure Active Directory.
	SubscriptionId pulumi.StringInput
	// - The tenant id for the Azure Active Directory.
	TenantId pulumi.StringInput
	// - Use the Microsoft Graph API introduced in `vault-1.9`.
	//   Should be set to true for `vault-1.10+`
	UseMicrosoftGraphApi pulumi.BoolPtrInput
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendArgs)(nil)).Elem()
}

type BackendInput interface {
	pulumi.Input

	ToBackendOutput() BackendOutput
	ToBackendOutputWithContext(ctx context.Context) BackendOutput
}

func (*Backend) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (i *Backend) ToBackendOutput() BackendOutput {
	return i.ToBackendOutputWithContext(context.Background())
}

func (i *Backend) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput)
}

// BackendArrayInput is an input type that accepts BackendArray and BackendArrayOutput values.
// You can construct a concrete instance of `BackendArrayInput` via:
//
//          BackendArray{ BackendArgs{...} }
type BackendArrayInput interface {
	pulumi.Input

	ToBackendArrayOutput() BackendArrayOutput
	ToBackendArrayOutputWithContext(context.Context) BackendArrayOutput
}

type BackendArray []BackendInput

func (BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backend)(nil)).Elem()
}

func (i BackendArray) ToBackendArrayOutput() BackendArrayOutput {
	return i.ToBackendArrayOutputWithContext(context.Background())
}

func (i BackendArray) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendArrayOutput)
}

// BackendMapInput is an input type that accepts BackendMap and BackendMapOutput values.
// You can construct a concrete instance of `BackendMapInput` via:
//
//          BackendMap{ "key": BackendArgs{...} }
type BackendMapInput interface {
	pulumi.Input

	ToBackendMapOutput() BackendMapOutput
	ToBackendMapOutputWithContext(context.Context) BackendMapOutput
}

type BackendMap map[string]BackendInput

func (BackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backend)(nil)).Elem()
}

func (i BackendMap) ToBackendMapOutput() BackendMapOutput {
	return i.ToBackendMapOutputWithContext(context.Background())
}

func (i BackendMap) ToBackendMapOutputWithContext(ctx context.Context) BackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendMapOutput)
}

type BackendOutput struct{ *pulumi.OutputState }

func (BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (o BackendOutput) ToBackendOutput() BackendOutput {
	return o
}

func (o BackendOutput) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return o
}

type BackendArrayOutput struct{ *pulumi.OutputState }

func (BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backend)(nil)).Elem()
}

func (o BackendArrayOutput) ToBackendArrayOutput() BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) Index(i pulumi.IntInput) BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backend {
		return vs[0].([]*Backend)[vs[1].(int)]
	}).(BackendOutput)
}

type BackendMapOutput struct{ *pulumi.OutputState }

func (BackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backend)(nil)).Elem()
}

func (o BackendMapOutput) ToBackendMapOutput() BackendMapOutput {
	return o
}

func (o BackendMapOutput) ToBackendMapOutputWithContext(ctx context.Context) BackendMapOutput {
	return o
}

func (o BackendMapOutput) MapIndex(k pulumi.StringInput) BackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backend {
		return vs[0].(map[string]*Backend)[vs[1].(string)]
	}).(BackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendInput)(nil)).Elem(), &Backend{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendArrayInput)(nil)).Elem(), BackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendMapInput)(nil)).Elem(), BackendMap{})
	pulumi.RegisterOutputType(BackendOutput{})
	pulumi.RegisterOutputType(BackendArrayOutput{})
	pulumi.RegisterOutputType(BackendMapOutput{})
}
