// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ###
//
// You can setup the Azure secrets engine with Workload Identity Federation (WIF) for a secret-less configuration:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/azure"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := azure.NewBackend(ctx, "azure", &azure.BackendArgs{
//				SubscriptionId:        pulumi.String("11111111-2222-3333-4444-111111111111"),
//				TenantId:              pulumi.String("11111111-2222-3333-4444-222222222222"),
//				ClientId:              pulumi.String("11111111-2222-3333-4444-333333333333"),
//				IdentityTokenAudience: pulumi.String("<TOKEN_AUDIENCE>"),
//				IdentityTokenTtl:      pulumi.Int("<TOKEN_TTL>"),
//				RotationSchedule:      pulumi.String("0 * * * SAT"),
//				RotationWindow:        pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v7/go/vault/azure"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := azure.NewBackend(ctx, "azure", &azure.BackendArgs{
//				SubscriptionId:   pulumi.String("11111111-2222-3333-4444-111111111111"),
//				TenantId:         pulumi.String("11111111-2222-3333-4444-222222222222"),
//				ClientId:         pulumi.String("11111111-2222-3333-4444-333333333333"),
//				ClientSecret:     pulumi.String("12345678901234567890"),
//				Environment:      pulumi.String("AzurePublicCloud"),
//				RotationSchedule: pulumi.String("0 * * * SAT"),
//				RotationWindow:   pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Backend struct {
	pulumi.CustomResourceState

	// Accessor of the mount
	Accessor pulumi.StringOutput `pulumi:"accessor"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayOutput `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayOutput `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayOutput `pulumi:"auditNonHmacResponseKeys"`
	// The OAuth2 client id to connect to Azure.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The OAuth2 client secret to connect to Azure.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntOutput `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayOutput `pulumi:"delegatedAuthAccessors"`
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation pulumi.BoolPtrOutput `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrOutput `pulumi:"disableRemount"`
	// The Azure environment.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrOutput `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolOutput `pulumi:"forceNoCache"`
	// The audience claim value. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience pulumi.StringPtrOutput `pulumi:"identityTokenAudience"`
	// The key to use for signing identity tokens.
	IdentityTokenKey pulumi.StringPtrOutput `pulumi:"identityTokenKey"`
	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenTtl pulumi.IntOutput `pulumi:"identityTokenTtl"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrOutput `pulumi:"listingVisibility"`
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrOutput `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntOutput `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapOutput `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayOutput `pulumi:"passthroughRequestHeaders"`
	// The unique path this backend should be mounted at. Defaults to `azure`.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrOutput `pulumi:"pluginVersion"`
	// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
	RootPasswordTtl pulumi.IntOutput `pulumi:"rootPasswordTtl"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod pulumi.IntPtrOutput `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule pulumi.StringPtrOutput `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
	RotationWindow pulumi.IntPtrOutput `pulumi:"rotationWindow"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolOutput `pulumi:"sealWrap"`
	// The subscription id for the Azure Active Directory.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// The tenant id for the Azure Active Directory.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewBackend registers a new resource with the given unique name, arguments, and options.
func NewBackend(ctx *pulumi.Context,
	name string, args *BackendArgs, opts ...pulumi.ResourceOption) (*Backend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.ClientId != nil {
		args.ClientId = pulumi.ToSecret(args.ClientId).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	if args.SubscriptionId != nil {
		args.SubscriptionId = pulumi.ToSecret(args.SubscriptionId).(pulumi.StringInput)
	}
	if args.TenantId != nil {
		args.TenantId = pulumi.ToSecret(args.TenantId).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientId",
		"clientSecret",
		"subscriptionId",
		"tenantId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Backend
	err := ctx.RegisterResource("vault:azure/backend:Backend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackend gets an existing Backend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendState, opts ...pulumi.ResourceOption) (*Backend, error) {
	var resource Backend
	err := ctx.ReadResource("vault:azure/backend:Backend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backend resources.
type backendState struct {
	// Accessor of the mount
	Accessor *string `pulumi:"accessor"`
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []string `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// The OAuth2 client id to connect to Azure.
	ClientId *string `pulumi:"clientId"`
	// The OAuth2 client secret to connect to Azure.
	ClientSecret *string `pulumi:"clientSecret"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []string `pulumi:"delegatedAuthAccessors"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// The Azure environment.
	Environment *string `pulumi:"environment"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache *bool `pulumi:"forceNoCache"`
	// The audience claim value. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience *string `pulumi:"identityTokenAudience"`
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `pulumi:"identityTokenKey"`
	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenTtl *int `pulumi:"identityTokenTtl"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `pulumi:"listingVisibility"`
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]string `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []string `pulumi:"passthroughRequestHeaders"`
	// The unique path this backend should be mounted at. Defaults to `azure`.
	Path *string `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `pulumi:"pluginVersion"`
	// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
	RootPasswordTtl *int `pulumi:"rootPasswordTtl"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
	RotationWindow *int `pulumi:"rotationWindow"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// The subscription id for the Azure Active Directory.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The tenant id for the Azure Active Directory.
	TenantId *string `pulumi:"tenantId"`
}

type BackendState struct {
	// Accessor of the mount
	Accessor pulumi.StringPtrInput
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayInput
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// The OAuth2 client id to connect to Azure.
	ClientId pulumi.StringPtrInput
	// The OAuth2 client secret to connect to Azure.
	ClientSecret pulumi.StringPtrInput
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// The Azure environment.
	Environment pulumi.StringPtrInput
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolPtrInput
	// The audience claim value. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience pulumi.StringPtrInput
	// The key to use for signing identity tokens.
	IdentityTokenKey pulumi.StringPtrInput
	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenTtl pulumi.IntPtrInput
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrInput
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapInput
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayInput
	// The unique path this backend should be mounted at. Defaults to `azure`.
	Path pulumi.StringPtrInput
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrInput
	// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
	RootPasswordTtl pulumi.IntPtrInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
	RotationWindow pulumi.IntPtrInput
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// The subscription id for the Azure Active Directory.
	SubscriptionId pulumi.StringPtrInput
	// The tenant id for the Azure Active Directory.
	TenantId pulumi.StringPtrInput
}

func (BackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendState)(nil)).Elem()
}

type backendArgs struct {
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys []string `pulumi:"allowedManagedKeys"`
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []string `pulumi:"allowedResponseHeaders"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys []string `pulumi:"auditNonHmacRequestKeys"`
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys []string `pulumi:"auditNonHmacResponseKeys"`
	// The OAuth2 client id to connect to Azure.
	ClientId *string `pulumi:"clientId"`
	// The OAuth2 client secret to connect to Azure.
	ClientSecret *string `pulumi:"clientSecret"`
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []string `pulumi:"delegatedAuthAccessors"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount *bool `pulumi:"disableRemount"`
	// The Azure environment.
	Environment *string `pulumi:"environment"`
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `pulumi:"externalEntropyAccess"`
	// If set to true, disables caching.
	ForceNoCache *bool `pulumi:"forceNoCache"`
	// The audience claim value. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience *string `pulumi:"identityTokenAudience"`
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `pulumi:"identityTokenKey"`
	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenTtl *int `pulumi:"identityTokenTtl"`
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `pulumi:"listingVisibility"`
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `pulumi:"local"`
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// Specifies mount type specific options that are passed to the backend
	Options map[string]string `pulumi:"options"`
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []string `pulumi:"passthroughRequestHeaders"`
	// The unique path this backend should be mounted at. Defaults to `azure`.
	Path *string `pulumi:"path"`
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `pulumi:"pluginVersion"`
	// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
	RootPasswordTtl *int `pulumi:"rootPasswordTtl"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
	RotationWindow *int `pulumi:"rotationWindow"`
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `pulumi:"sealWrap"`
	// The subscription id for the Azure Active Directory.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The tenant id for the Azure Active Directory.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a Backend resource.
type BackendArgs struct {
	// List of managed key registry entry names that the mount in question is allowed to access
	AllowedManagedKeys pulumi.StringArrayInput
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHmacRequestKeys pulumi.StringArrayInput
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHmacResponseKeys pulumi.StringArrayInput
	// The OAuth2 client id to connect to Azure.
	ClientId pulumi.StringPtrInput
	// The OAuth2 client secret to connect to Azure.
	ClientSecret pulumi.StringPtrInput
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors pulumi.StringArrayInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation pulumi.BoolPtrInput
	// If set, opts out of mount migration on path updates.
	// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
	DisableRemount pulumi.BoolPtrInput
	// The Azure environment.
	Environment pulumi.StringPtrInput
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess pulumi.BoolPtrInput
	// If set to true, disables caching.
	ForceNoCache pulumi.BoolPtrInput
	// The audience claim value. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience pulumi.StringPtrInput
	// The key to use for signing identity tokens.
	IdentityTokenKey pulumi.StringPtrInput
	// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenTtl pulumi.IntPtrInput
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility pulumi.StringPtrInput
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local pulumi.BoolPtrInput
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// Specifies mount type specific options that are passed to the backend
	Options pulumi.StringMapInput
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders pulumi.StringArrayInput
	// The unique path this backend should be mounted at. Defaults to `azure`.
	Path pulumi.StringPtrInput
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion pulumi.StringPtrInput
	// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
	RootPasswordTtl pulumi.IntPtrInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
	RotationWindow pulumi.IntPtrInput
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap pulumi.BoolPtrInput
	// The subscription id for the Azure Active Directory.
	SubscriptionId pulumi.StringInput
	// The tenant id for the Azure Active Directory.
	TenantId pulumi.StringInput
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendArgs)(nil)).Elem()
}

type BackendInput interface {
	pulumi.Input

	ToBackendOutput() BackendOutput
	ToBackendOutputWithContext(ctx context.Context) BackendOutput
}

func (*Backend) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (i *Backend) ToBackendOutput() BackendOutput {
	return i.ToBackendOutputWithContext(context.Background())
}

func (i *Backend) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput)
}

// BackendArrayInput is an input type that accepts BackendArray and BackendArrayOutput values.
// You can construct a concrete instance of `BackendArrayInput` via:
//
//	BackendArray{ BackendArgs{...} }
type BackendArrayInput interface {
	pulumi.Input

	ToBackendArrayOutput() BackendArrayOutput
	ToBackendArrayOutputWithContext(context.Context) BackendArrayOutput
}

type BackendArray []BackendInput

func (BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backend)(nil)).Elem()
}

func (i BackendArray) ToBackendArrayOutput() BackendArrayOutput {
	return i.ToBackendArrayOutputWithContext(context.Background())
}

func (i BackendArray) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendArrayOutput)
}

// BackendMapInput is an input type that accepts BackendMap and BackendMapOutput values.
// You can construct a concrete instance of `BackendMapInput` via:
//
//	BackendMap{ "key": BackendArgs{...} }
type BackendMapInput interface {
	pulumi.Input

	ToBackendMapOutput() BackendMapOutput
	ToBackendMapOutputWithContext(context.Context) BackendMapOutput
}

type BackendMap map[string]BackendInput

func (BackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backend)(nil)).Elem()
}

func (i BackendMap) ToBackendMapOutput() BackendMapOutput {
	return i.ToBackendMapOutputWithContext(context.Background())
}

func (i BackendMap) ToBackendMapOutputWithContext(ctx context.Context) BackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendMapOutput)
}

type BackendOutput struct{ *pulumi.OutputState }

func (BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (o BackendOutput) ToBackendOutput() BackendOutput {
	return o
}

func (o BackendOutput) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return o
}

// Accessor of the mount
func (o BackendOutput) Accessor() pulumi.StringOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringOutput { return v.Accessor }).(pulumi.StringOutput)
}

// List of managed key registry entry names that the mount in question is allowed to access
func (o BackendOutput) AllowedManagedKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringArrayOutput { return v.AllowedManagedKeys }).(pulumi.StringArrayOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o BackendOutput) AllowedResponseHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringArrayOutput { return v.AllowedResponseHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
func (o BackendOutput) AuditNonHmacRequestKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringArrayOutput { return v.AuditNonHmacRequestKeys }).(pulumi.StringArrayOutput)
}

// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
func (o BackendOutput) AuditNonHmacResponseKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringArrayOutput { return v.AuditNonHmacResponseKeys }).(pulumi.StringArrayOutput)
}

// The OAuth2 client id to connect to Azure.
func (o BackendOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The OAuth2 client secret to connect to Azure.
func (o BackendOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Default lease duration for tokens and secrets in seconds
func (o BackendOutput) DefaultLeaseTtlSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntOutput { return v.DefaultLeaseTtlSeconds }).(pulumi.IntOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o BackendOutput) DelegatedAuthAccessors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringArrayOutput { return v.DelegatedAuthAccessors }).(pulumi.StringArrayOutput)
}

// Human-friendly description of the mount for the backend.
func (o BackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
// *Available only for Vault Enterprise*
func (o BackendOutput) DisableAutomatedRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolPtrOutput { return v.DisableAutomatedRotation }).(pulumi.BoolPtrOutput)
}

// If set, opts out of mount migration on path updates.
// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
func (o BackendOutput) DisableRemount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolPtrOutput { return v.DisableRemount }).(pulumi.BoolPtrOutput)
}

// The Azure environment.
func (o BackendOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// Enable the secrets engine to access Vault's external entropy source
func (o BackendOutput) ExternalEntropyAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolPtrOutput { return v.ExternalEntropyAccess }).(pulumi.BoolPtrOutput)
}

// If set to true, disables caching.
func (o BackendOutput) ForceNoCache() pulumi.BoolOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolOutput { return v.ForceNoCache }).(pulumi.BoolOutput)
}

// The audience claim value. Requires Vault 1.17+.
// *Available only for Vault Enterprise*
func (o BackendOutput) IdentityTokenAudience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.IdentityTokenAudience }).(pulumi.StringPtrOutput)
}

// The key to use for signing identity tokens.
func (o BackendOutput) IdentityTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.IdentityTokenKey }).(pulumi.StringPtrOutput)
}

// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
// *Available only for Vault Enterprise*
func (o BackendOutput) IdentityTokenTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntOutput { return v.IdentityTokenTtl }).(pulumi.IntOutput)
}

// Specifies whether to show this mount in the UI-specific listing endpoint
func (o BackendOutput) ListingVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.ListingVisibility }).(pulumi.StringPtrOutput)
}

// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
func (o BackendOutput) Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolPtrOutput { return v.Local }).(pulumi.BoolPtrOutput)
}

// Maximum possible lease duration for tokens and secrets in seconds
func (o BackendOutput) MaxLeaseTtlSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntOutput { return v.MaxLeaseTtlSeconds }).(pulumi.IntOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o BackendOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies mount type specific options that are passed to the backend
func (o BackendOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringMapOutput { return v.Options }).(pulumi.StringMapOutput)
}

// List of headers to allow and pass from the request to the plugin
func (o BackendOutput) PassthroughRequestHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringArrayOutput { return v.PassthroughRequestHeaders }).(pulumi.StringArrayOutput)
}

// The unique path this backend should be mounted at. Defaults to `azure`.
func (o BackendOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
func (o BackendOutput) PluginVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.PluginVersion }).(pulumi.StringPtrOutput)
}

// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
func (o BackendOutput) RootPasswordTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntOutput { return v.RootPasswordTtl }).(pulumi.IntOutput)
}

// The amount of time in seconds Vault should wait before rotating the root credential.
// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
// *Available only for Vault Enterprise*
func (o BackendOutput) RotationPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntPtrOutput { return v.RotationPeriod }).(pulumi.IntPtrOutput)
}

// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
// *Available only for Vault Enterprise*
func (o BackendOutput) RotationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.RotationSchedule }).(pulumi.StringPtrOutput)
}

// The maximum amount of time in seconds allowed to complete
// a rotation when a scheduled token rotation occurs. The default rotation window is
// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
func (o BackendOutput) RotationWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntPtrOutput { return v.RotationWindow }).(pulumi.IntPtrOutput)
}

// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
func (o BackendOutput) SealWrap() pulumi.BoolOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolOutput { return v.SealWrap }).(pulumi.BoolOutput)
}

// The subscription id for the Azure Active Directory.
func (o BackendOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The tenant id for the Azure Active Directory.
func (o BackendOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type BackendArrayOutput struct{ *pulumi.OutputState }

func (BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backend)(nil)).Elem()
}

func (o BackendArrayOutput) ToBackendArrayOutput() BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) Index(i pulumi.IntInput) BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backend {
		return vs[0].([]*Backend)[vs[1].(int)]
	}).(BackendOutput)
}

type BackendMapOutput struct{ *pulumi.OutputState }

func (BackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backend)(nil)).Elem()
}

func (o BackendMapOutput) ToBackendMapOutput() BackendMapOutput {
	return o
}

func (o BackendMapOutput) ToBackendMapOutputWithContext(ctx context.Context) BackendMapOutput {
	return o
}

func (o BackendMapOutput) MapIndex(k pulumi.StringInput) BackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backend {
		return vs[0].(map[string]*Backend)[vs[1].(string)]
	}).(BackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendInput)(nil)).Elem(), &Backend{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendArrayInput)(nil)).Elem(), BackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendMapInput)(nil)).Elem(), BackendMap{})
	pulumi.RegisterOutputType(BackendOutput{})
	pulumi.RegisterOutputType(BackendArrayOutput{})
	pulumi.RegisterOutputType(BackendMapOutput{})
}
