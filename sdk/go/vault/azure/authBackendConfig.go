// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// You can setup the Azure auth engine with Workload Identity Federation (WIF) for a secret-less configuration:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault"
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/azure"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vault.NewAuthBackend(ctx, "example", &vault.AuthBackendArgs{
//				Type:             pulumi.String("azure"),
//				IdentityTokenKey: pulumi.String("example-key"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azure.NewAuthBackendConfig(ctx, "example", &azure.AuthBackendConfigArgs{
//				Backend:               example.Path,
//				TenantId:              pulumi.String("11111111-2222-3333-4444-555555555555"),
//				ClientId:              pulumi.String("11111111-2222-3333-4444-555555555555"),
//				IdentityTokenAudience: pulumi.String("<TOKEN_AUDIENCE>"),
//				IdentityTokenTtl:      pulumi.Int("<TOKEN_TTL>"),
//				RotationSchedule:      pulumi.String("0 * * * SAT"),
//				RotationWindow:        pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault"
//	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/azure"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := vault.NewAuthBackend(ctx, "example", &vault.AuthBackendArgs{
//				Type: pulumi.String("azure"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azure.NewAuthBackendConfig(ctx, "example", &azure.AuthBackendConfigArgs{
//				Backend:          example.Path,
//				TenantId:         pulumi.String("11111111-2222-3333-4444-555555555555"),
//				ClientId:         pulumi.String("11111111-2222-3333-4444-555555555555"),
//				ClientSecret:     pulumi.String("01234567890123456789"),
//				Resource:         pulumi.String("https://vault.hashicorp.com"),
//				RotationSchedule: pulumi.String("0 * * * SAT"),
//				RotationWindow:   pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure auth backends can be imported using `auth/`, the `backend` path, and `/config` e.g.
//
// ```sh
// $ pulumi import vault:azure/authBackendConfig:AuthBackendConfig example auth/azure/config
// ```
type AuthBackendConfig struct {
	pulumi.CustomResourceState

	// The path the Azure auth backend being configured was
	// mounted at.  Defaults to `azure`.
	Backend pulumi.StringPtrOutput `pulumi:"backend"`
	// The client id for credentials to query the Azure APIs.
	// Currently read permissions to query compute resources are required.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The client secret for credentials to query the
	// Azure APIs.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation pulumi.BoolPtrOutput `pulumi:"disableAutomatedRotation"`
	// The Azure cloud environment. Valid values:
	// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
	// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// The audience claim value for plugin identity tokens. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience pulumi.StringPtrOutput `pulumi:"identityTokenAudience"`
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTtl pulumi.IntOutput `pulumi:"identityTokenTtl"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The configured URL for the application registered in
	// Azure Active Directory.
	Resource pulumi.StringOutput `pulumi:"resource"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod pulumi.IntPtrOutput `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule pulumi.StringPtrOutput `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationWindow pulumi.IntPtrOutput `pulumi:"rotationWindow"`
	// The tenant id for the Azure Active Directory
	// organization.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAuthBackendConfig registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendConfig(ctx *pulumi.Context,
	name string, args *AuthBackendConfigArgs, opts ...pulumi.ResourceOption) (*AuthBackendConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.ClientId != nil {
		args.ClientId = pulumi.ToSecret(args.ClientId).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	if args.TenantId != nil {
		args.TenantId = pulumi.ToSecret(args.TenantId).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientId",
		"clientSecret",
		"tenantId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthBackendConfig
	err := ctx.RegisterResource("vault:azure/authBackendConfig:AuthBackendConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthBackendConfig gets an existing AuthBackendConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthBackendConfigState, opts ...pulumi.ResourceOption) (*AuthBackendConfig, error) {
	var resource AuthBackendConfig
	err := ctx.ReadResource("vault:azure/authBackendConfig:AuthBackendConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthBackendConfig resources.
type authBackendConfigState struct {
	// The path the Azure auth backend being configured was
	// mounted at.  Defaults to `azure`.
	Backend *string `pulumi:"backend"`
	// The client id for credentials to query the Azure APIs.
	// Currently read permissions to query compute resources are required.
	ClientId *string `pulumi:"clientId"`
	// The client secret for credentials to query the
	// Azure APIs.
	ClientSecret *string `pulumi:"clientSecret"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// The Azure cloud environment. Valid values:
	// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
	// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
	Environment *string `pulumi:"environment"`
	// The audience claim value for plugin identity tokens. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience *string `pulumi:"identityTokenAudience"`
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTtl *int `pulumi:"identityTokenTtl"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The configured URL for the application registered in
	// Azure Active Directory.
	Resource *string `pulumi:"resource"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationWindow *int `pulumi:"rotationWindow"`
	// The tenant id for the Azure Active Directory
	// organization.
	TenantId *string `pulumi:"tenantId"`
}

type AuthBackendConfigState struct {
	// The path the Azure auth backend being configured was
	// mounted at.  Defaults to `azure`.
	Backend pulumi.StringPtrInput
	// The client id for credentials to query the Azure APIs.
	// Currently read permissions to query compute resources are required.
	ClientId pulumi.StringPtrInput
	// The client secret for credentials to query the
	// Azure APIs.
	ClientSecret pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation pulumi.BoolPtrInput
	// The Azure cloud environment. Valid values:
	// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
	// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
	Environment pulumi.StringPtrInput
	// The audience claim value for plugin identity tokens. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience pulumi.StringPtrInput
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTtl pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The configured URL for the application registered in
	// Azure Active Directory.
	Resource pulumi.StringPtrInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationWindow pulumi.IntPtrInput
	// The tenant id for the Azure Active Directory
	// organization.
	TenantId pulumi.StringPtrInput
}

func (AuthBackendConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendConfigState)(nil)).Elem()
}

type authBackendConfigArgs struct {
	// The path the Azure auth backend being configured was
	// mounted at.  Defaults to `azure`.
	Backend *string `pulumi:"backend"`
	// The client id for credentials to query the Azure APIs.
	// Currently read permissions to query compute resources are required.
	ClientId *string `pulumi:"clientId"`
	// The client secret for credentials to query the
	// Azure APIs.
	ClientSecret *string `pulumi:"clientSecret"`
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation *bool `pulumi:"disableAutomatedRotation"`
	// The Azure cloud environment. Valid values:
	// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
	// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
	Environment *string `pulumi:"environment"`
	// The audience claim value for plugin identity tokens. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience *string `pulumi:"identityTokenAudience"`
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTtl *int `pulumi:"identityTokenTtl"`
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace *string `pulumi:"namespace"`
	// The configured URL for the application registered in
	// Azure Active Directory.
	Resource string `pulumi:"resource"`
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod *int `pulumi:"rotationPeriod"`
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule *string `pulumi:"rotationSchedule"`
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationWindow *int `pulumi:"rotationWindow"`
	// The tenant id for the Azure Active Directory
	// organization.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AuthBackendConfig resource.
type AuthBackendConfigArgs struct {
	// The path the Azure auth backend being configured was
	// mounted at.  Defaults to `azure`.
	Backend pulumi.StringPtrInput
	// The client id for credentials to query the Azure APIs.
	// Currently read permissions to query compute resources are required.
	ClientId pulumi.StringPtrInput
	// The client secret for credentials to query the
	// Azure APIs.
	ClientSecret pulumi.StringPtrInput
	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	DisableAutomatedRotation pulumi.BoolPtrInput
	// The Azure cloud environment. Valid values:
	// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
	// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
	Environment pulumi.StringPtrInput
	// The audience claim value for plugin identity tokens. Requires Vault 1.17+.
	// *Available only for Vault Enterprise*
	IdentityTokenAudience pulumi.StringPtrInput
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTtl pulumi.IntPtrInput
	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
	// *Available only for Vault Enterprise*.
	Namespace pulumi.StringPtrInput
	// The configured URL for the application registered in
	// Azure Active Directory.
	Resource pulumi.StringInput
	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationPeriod pulumi.IntPtrInput
	// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationSchedule pulumi.StringPtrInput
	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
	// *Available only for Vault Enterprise*
	RotationWindow pulumi.IntPtrInput
	// The tenant id for the Azure Active Directory
	// organization.
	TenantId pulumi.StringInput
}

func (AuthBackendConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authBackendConfigArgs)(nil)).Elem()
}

type AuthBackendConfigInput interface {
	pulumi.Input

	ToAuthBackendConfigOutput() AuthBackendConfigOutput
	ToAuthBackendConfigOutputWithContext(ctx context.Context) AuthBackendConfigOutput
}

func (*AuthBackendConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendConfig)(nil)).Elem()
}

func (i *AuthBackendConfig) ToAuthBackendConfigOutput() AuthBackendConfigOutput {
	return i.ToAuthBackendConfigOutputWithContext(context.Background())
}

func (i *AuthBackendConfig) ToAuthBackendConfigOutputWithContext(ctx context.Context) AuthBackendConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendConfigOutput)
}

// AuthBackendConfigArrayInput is an input type that accepts AuthBackendConfigArray and AuthBackendConfigArrayOutput values.
// You can construct a concrete instance of `AuthBackendConfigArrayInput` via:
//
//	AuthBackendConfigArray{ AuthBackendConfigArgs{...} }
type AuthBackendConfigArrayInput interface {
	pulumi.Input

	ToAuthBackendConfigArrayOutput() AuthBackendConfigArrayOutput
	ToAuthBackendConfigArrayOutputWithContext(context.Context) AuthBackendConfigArrayOutput
}

type AuthBackendConfigArray []AuthBackendConfigInput

func (AuthBackendConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackendConfig)(nil)).Elem()
}

func (i AuthBackendConfigArray) ToAuthBackendConfigArrayOutput() AuthBackendConfigArrayOutput {
	return i.ToAuthBackendConfigArrayOutputWithContext(context.Background())
}

func (i AuthBackendConfigArray) ToAuthBackendConfigArrayOutputWithContext(ctx context.Context) AuthBackendConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendConfigArrayOutput)
}

// AuthBackendConfigMapInput is an input type that accepts AuthBackendConfigMap and AuthBackendConfigMapOutput values.
// You can construct a concrete instance of `AuthBackendConfigMapInput` via:
//
//	AuthBackendConfigMap{ "key": AuthBackendConfigArgs{...} }
type AuthBackendConfigMapInput interface {
	pulumi.Input

	ToAuthBackendConfigMapOutput() AuthBackendConfigMapOutput
	ToAuthBackendConfigMapOutputWithContext(context.Context) AuthBackendConfigMapOutput
}

type AuthBackendConfigMap map[string]AuthBackendConfigInput

func (AuthBackendConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackendConfig)(nil)).Elem()
}

func (i AuthBackendConfigMap) ToAuthBackendConfigMapOutput() AuthBackendConfigMapOutput {
	return i.ToAuthBackendConfigMapOutputWithContext(context.Background())
}

func (i AuthBackendConfigMap) ToAuthBackendConfigMapOutputWithContext(ctx context.Context) AuthBackendConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthBackendConfigMapOutput)
}

type AuthBackendConfigOutput struct{ *pulumi.OutputState }

func (AuthBackendConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthBackendConfig)(nil)).Elem()
}

func (o AuthBackendConfigOutput) ToAuthBackendConfigOutput() AuthBackendConfigOutput {
	return o
}

func (o AuthBackendConfigOutput) ToAuthBackendConfigOutputWithContext(ctx context.Context) AuthBackendConfigOutput {
	return o
}

// The path the Azure auth backend being configured was
// mounted at.  Defaults to `azure`.
func (o AuthBackendConfigOutput) Backend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringPtrOutput { return v.Backend }).(pulumi.StringPtrOutput)
}

// The client id for credentials to query the Azure APIs.
// Currently read permissions to query compute resources are required.
func (o AuthBackendConfigOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for credentials to query the
// Azure APIs.
func (o AuthBackendConfigOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
// *Available only for Vault Enterprise*
func (o AuthBackendConfigOutput) DisableAutomatedRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.BoolPtrOutput { return v.DisableAutomatedRotation }).(pulumi.BoolPtrOutput)
}

// The Azure cloud environment. Valid values:
// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
func (o AuthBackendConfigOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// The audience claim value for plugin identity tokens. Requires Vault 1.17+.
// *Available only for Vault Enterprise*
func (o AuthBackendConfigOutput) IdentityTokenAudience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringPtrOutput { return v.IdentityTokenAudience }).(pulumi.StringPtrOutput)
}

// The TTL of generated identity tokens in seconds.
func (o AuthBackendConfigOutput) IdentityTokenTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.IntOutput { return v.IdentityTokenTtl }).(pulumi.IntOutput)
}

// The namespace to provision the resource in.
// The value should not contain leading or trailing forward slashes.
// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
// *Available only for Vault Enterprise*.
func (o AuthBackendConfigOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The configured URL for the application registered in
// Azure Active Directory.
func (o AuthBackendConfigOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringOutput { return v.Resource }).(pulumi.StringOutput)
}

// The amount of time in seconds Vault should wait before rotating the root credential.
// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
// *Available only for Vault Enterprise*
func (o AuthBackendConfigOutput) RotationPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.IntPtrOutput { return v.RotationPeriod }).(pulumi.IntPtrOutput)
}

// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
// *Available only for Vault Enterprise*
func (o AuthBackendConfigOutput) RotationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringPtrOutput { return v.RotationSchedule }).(pulumi.StringPtrOutput)
}

// The maximum amount of time in seconds allowed to complete
// a rotation when a scheduled token rotation occurs. The default rotation window is
// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
// *Available only for Vault Enterprise*
func (o AuthBackendConfigOutput) RotationWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.IntPtrOutput { return v.RotationWindow }).(pulumi.IntPtrOutput)
}

// The tenant id for the Azure Active Directory
// organization.
func (o AuthBackendConfigOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthBackendConfig) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AuthBackendConfigArrayOutput struct{ *pulumi.OutputState }

func (AuthBackendConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthBackendConfig)(nil)).Elem()
}

func (o AuthBackendConfigArrayOutput) ToAuthBackendConfigArrayOutput() AuthBackendConfigArrayOutput {
	return o
}

func (o AuthBackendConfigArrayOutput) ToAuthBackendConfigArrayOutputWithContext(ctx context.Context) AuthBackendConfigArrayOutput {
	return o
}

func (o AuthBackendConfigArrayOutput) Index(i pulumi.IntInput) AuthBackendConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthBackendConfig {
		return vs[0].([]*AuthBackendConfig)[vs[1].(int)]
	}).(AuthBackendConfigOutput)
}

type AuthBackendConfigMapOutput struct{ *pulumi.OutputState }

func (AuthBackendConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthBackendConfig)(nil)).Elem()
}

func (o AuthBackendConfigMapOutput) ToAuthBackendConfigMapOutput() AuthBackendConfigMapOutput {
	return o
}

func (o AuthBackendConfigMapOutput) ToAuthBackendConfigMapOutputWithContext(ctx context.Context) AuthBackendConfigMapOutput {
	return o
}

func (o AuthBackendConfigMapOutput) MapIndex(k pulumi.StringInput) AuthBackendConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthBackendConfig {
		return vs[0].(map[string]*AuthBackendConfig)[vs[1].(string)]
	}).(AuthBackendConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendConfigInput)(nil)).Elem(), &AuthBackendConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendConfigArrayInput)(nil)).Elem(), AuthBackendConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthBackendConfigMapInput)(nil)).Elem(), AuthBackendConfigMap{})
	pulumi.RegisterOutputType(AuthBackendConfigOutput{})
	pulumi.RegisterOutputType(AuthBackendConfigArrayOutput{})
	pulumi.RegisterOutputType(AuthBackendConfigMapOutput{})
}
