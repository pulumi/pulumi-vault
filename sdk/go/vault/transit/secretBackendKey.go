// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transit

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type SecretBackendKey struct {
	pulumi.CustomResourceState

	// If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
	AllowPlaintextBackup pulumi.BoolPtrOutput `pulumi:"allowPlaintextBackup"`
	// The Transit secret backend the resource belongs to.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
	// derived to be set to true.
	ConvergentEncryption pulumi.BoolPtrOutput `pulumi:"convergentEncryption"`
	// Specifies if the key is allowed to be deleted.
	DeletionAllowed pulumi.BoolPtrOutput `pulumi:"deletionAllowed"`
	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
	// which is used for key derivation.
	Derived pulumi.BoolPtrOutput `pulumi:"derived"`
	// Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
	// be disabled.
	Exportable pulumi.BoolPtrOutput `pulumi:"exportable"`
	// List of key versions in the keyring.
	Keys pulumi.MapArrayOutput `pulumi:"keys"`
	// Latest key version in use in the keyring
	LatestVersion pulumi.IntOutput `pulumi:"latestVersion"`
	// Minimum key version available for use.
	MinAvailableVersion pulumi.IntOutput `pulumi:"minAvailableVersion"`
	// Minimum key version to use for decryption.
	MinDecryptionVersion pulumi.IntPtrOutput `pulumi:"minDecryptionVersion"`
	// Minimum key version to use for encryption
	MinEncryptionVersion pulumi.IntPtrOutput `pulumi:"minEncryptionVersion"`
	// Name of the encryption key to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether or not the key supports decryption, based on key type.
	SupportsDecryption pulumi.BoolOutput `pulumi:"supportsDecryption"`
	// Whether or not the key supports derivation, based on key type.
	SupportsDerivation pulumi.BoolOutput `pulumi:"supportsDerivation"`
	// Whether or not the key supports encryption, based on key type.
	SupportsEncryption pulumi.BoolOutput `pulumi:"supportsEncryption"`
	// Whether or not the key supports signing, based on key type.
	SupportsSigning pulumi.BoolOutput `pulumi:"supportsSigning"`
	// Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
	// ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072, rsa-4096
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewSecretBackendKey registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendKey(ctx *pulumi.Context,
	name string, args *SecretBackendKeyArgs, opts ...pulumi.ResourceOption) (*SecretBackendKey, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil {
		args = &SecretBackendKeyArgs{}
	}
	var resource SecretBackendKey
	err := ctx.RegisterResource("vault:transit/secretBackendKey:SecretBackendKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackendKey gets an existing SecretBackendKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendKeyState, opts ...pulumi.ResourceOption) (*SecretBackendKey, error) {
	var resource SecretBackendKey
	err := ctx.ReadResource("vault:transit/secretBackendKey:SecretBackendKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackendKey resources.
type secretBackendKeyState struct {
	// If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
	AllowPlaintextBackup *bool `pulumi:"allowPlaintextBackup"`
	// The Transit secret backend the resource belongs to.
	Backend *string `pulumi:"backend"`
	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
	// derived to be set to true.
	ConvergentEncryption *bool `pulumi:"convergentEncryption"`
	// Specifies if the key is allowed to be deleted.
	DeletionAllowed *bool `pulumi:"deletionAllowed"`
	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
	// which is used for key derivation.
	Derived *bool `pulumi:"derived"`
	// Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
	// be disabled.
	Exportable *bool `pulumi:"exportable"`
	// List of key versions in the keyring.
	Keys []map[string]interface{} `pulumi:"keys"`
	// Latest key version in use in the keyring
	LatestVersion *int `pulumi:"latestVersion"`
	// Minimum key version available for use.
	MinAvailableVersion *int `pulumi:"minAvailableVersion"`
	// Minimum key version to use for decryption.
	MinDecryptionVersion *int `pulumi:"minDecryptionVersion"`
	// Minimum key version to use for encryption
	MinEncryptionVersion *int `pulumi:"minEncryptionVersion"`
	// Name of the encryption key to create.
	Name *string `pulumi:"name"`
	// Whether or not the key supports decryption, based on key type.
	SupportsDecryption *bool `pulumi:"supportsDecryption"`
	// Whether or not the key supports derivation, based on key type.
	SupportsDerivation *bool `pulumi:"supportsDerivation"`
	// Whether or not the key supports encryption, based on key type.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// Whether or not the key supports signing, based on key type.
	SupportsSigning *bool `pulumi:"supportsSigning"`
	// Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
	// ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072, rsa-4096
	Type *string `pulumi:"type"`
}

type SecretBackendKeyState struct {
	// If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
	AllowPlaintextBackup pulumi.BoolPtrInput
	// The Transit secret backend the resource belongs to.
	Backend pulumi.StringPtrInput
	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
	// derived to be set to true.
	ConvergentEncryption pulumi.BoolPtrInput
	// Specifies if the key is allowed to be deleted.
	DeletionAllowed pulumi.BoolPtrInput
	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
	// which is used for key derivation.
	Derived pulumi.BoolPtrInput
	// Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
	// be disabled.
	Exportable pulumi.BoolPtrInput
	// List of key versions in the keyring.
	Keys pulumi.MapArrayInput
	// Latest key version in use in the keyring
	LatestVersion pulumi.IntPtrInput
	// Minimum key version available for use.
	MinAvailableVersion pulumi.IntPtrInput
	// Minimum key version to use for decryption.
	MinDecryptionVersion pulumi.IntPtrInput
	// Minimum key version to use for encryption
	MinEncryptionVersion pulumi.IntPtrInput
	// Name of the encryption key to create.
	Name pulumi.StringPtrInput
	// Whether or not the key supports decryption, based on key type.
	SupportsDecryption pulumi.BoolPtrInput
	// Whether or not the key supports derivation, based on key type.
	SupportsDerivation pulumi.BoolPtrInput
	// Whether or not the key supports encryption, based on key type.
	SupportsEncryption pulumi.BoolPtrInput
	// Whether or not the key supports signing, based on key type.
	SupportsSigning pulumi.BoolPtrInput
	// Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
	// ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072, rsa-4096
	Type pulumi.StringPtrInput
}

func (SecretBackendKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendKeyState)(nil)).Elem()
}

type secretBackendKeyArgs struct {
	// If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
	AllowPlaintextBackup *bool `pulumi:"allowPlaintextBackup"`
	// The Transit secret backend the resource belongs to.
	Backend string `pulumi:"backend"`
	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
	// derived to be set to true.
	ConvergentEncryption *bool `pulumi:"convergentEncryption"`
	// Specifies if the key is allowed to be deleted.
	DeletionAllowed *bool `pulumi:"deletionAllowed"`
	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
	// which is used for key derivation.
	Derived *bool `pulumi:"derived"`
	// Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
	// be disabled.
	Exportable *bool `pulumi:"exportable"`
	// Minimum key version to use for decryption.
	MinDecryptionVersion *int `pulumi:"minDecryptionVersion"`
	// Minimum key version to use for encryption
	MinEncryptionVersion *int `pulumi:"minEncryptionVersion"`
	// Name of the encryption key to create.
	Name *string `pulumi:"name"`
	// Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
	// ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072, rsa-4096
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a SecretBackendKey resource.
type SecretBackendKeyArgs struct {
	// If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
	AllowPlaintextBackup pulumi.BoolPtrInput
	// The Transit secret backend the resource belongs to.
	Backend pulumi.StringInput
	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
	// derived to be set to true.
	ConvergentEncryption pulumi.BoolPtrInput
	// Specifies if the key is allowed to be deleted.
	DeletionAllowed pulumi.BoolPtrInput
	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
	// which is used for key derivation.
	Derived pulumi.BoolPtrInput
	// Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
	// be disabled.
	Exportable pulumi.BoolPtrInput
	// Minimum key version to use for decryption.
	MinDecryptionVersion pulumi.IntPtrInput
	// Minimum key version to use for encryption
	MinEncryptionVersion pulumi.IntPtrInput
	// Name of the encryption key to create.
	Name pulumi.StringPtrInput
	// Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
	// ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072, rsa-4096
	Type pulumi.StringPtrInput
}

func (SecretBackendKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendKeyArgs)(nil)).Elem()
}

type SecretBackendKeyInput interface {
	pulumi.Input

	ToSecretBackendKeyOutput() SecretBackendKeyOutput
	ToSecretBackendKeyOutputWithContext(ctx context.Context) SecretBackendKeyOutput
}

func (SecretBackendKey) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendKey)(nil)).Elem()
}

func (i SecretBackendKey) ToSecretBackendKeyOutput() SecretBackendKeyOutput {
	return i.ToSecretBackendKeyOutputWithContext(context.Background())
}

func (i SecretBackendKey) ToSecretBackendKeyOutputWithContext(ctx context.Context) SecretBackendKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendKeyOutput)
}

type SecretBackendKeyOutput struct {
	*pulumi.OutputState
}

func (SecretBackendKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendKeyOutput)(nil)).Elem()
}

func (o SecretBackendKeyOutput) ToSecretBackendKeyOutput() SecretBackendKeyOutput {
	return o
}

func (o SecretBackendKeyOutput) ToSecretBackendKeyOutputWithContext(ctx context.Context) SecretBackendKeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecretBackendKeyOutput{})
}
