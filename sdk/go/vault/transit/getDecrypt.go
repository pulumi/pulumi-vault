// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This is a data source which can be used to decrypt ciphertext using a Vault Transit key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vault/sdk/v5/go/vault/transit"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transit.GetDecrypt(ctx, &transit.GetDecryptArgs{
//				Backend:    "transit",
//				Ciphertext: "vault:v1:S3GtnJ5GUNCWV+/pdL9+g1Feu/nzAv+RlmTmE91Tu0rBkeIU8MEb2nSspC/1IQ==",
//				Key:        "test",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDecrypt(ctx *pulumi.Context, args *GetDecryptArgs, opts ...pulumi.InvokeOption) (*GetDecryptResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDecryptResult
	err := ctx.Invoke("vault:transit/getDecrypt:getDecrypt", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDecrypt.
type GetDecryptArgs struct {
	// The path the transit secret backend is mounted at, with no leading or trailing `/`.
	Backend string `pulumi:"backend"`
	// Ciphertext to be decoded.
	Ciphertext string `pulumi:"ciphertext"`
	// Context for key derivation. This is required if key derivation is enabled for this key.
	Context *string `pulumi:"context"`
	// Specifies the name of the transit key to decrypt against.
	Key       string  `pulumi:"key"`
	Namespace *string `pulumi:"namespace"`
}

// A collection of values returned by getDecrypt.
type GetDecryptResult struct {
	Backend    string  `pulumi:"backend"`
	Ciphertext string  `pulumi:"ciphertext"`
	Context    *string `pulumi:"context"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	Key       string  `pulumi:"key"`
	Namespace *string `pulumi:"namespace"`
	// Decrypted plaintext returned from Vault
	Plaintext string `pulumi:"plaintext"`
}

func GetDecryptOutput(ctx *pulumi.Context, args GetDecryptOutputArgs, opts ...pulumi.InvokeOption) GetDecryptResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDecryptResult, error) {
			args := v.(GetDecryptArgs)
			r, err := GetDecrypt(ctx, &args, opts...)
			var s GetDecryptResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDecryptResultOutput)
}

// A collection of arguments for invoking getDecrypt.
type GetDecryptOutputArgs struct {
	// The path the transit secret backend is mounted at, with no leading or trailing `/`.
	Backend pulumi.StringInput `pulumi:"backend"`
	// Ciphertext to be decoded.
	Ciphertext pulumi.StringInput `pulumi:"ciphertext"`
	// Context for key derivation. This is required if key derivation is enabled for this key.
	Context pulumi.StringPtrInput `pulumi:"context"`
	// Specifies the name of the transit key to decrypt against.
	Key       pulumi.StringInput    `pulumi:"key"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GetDecryptOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDecryptArgs)(nil)).Elem()
}

// A collection of values returned by getDecrypt.
type GetDecryptResultOutput struct{ *pulumi.OutputState }

func (GetDecryptResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDecryptResult)(nil)).Elem()
}

func (o GetDecryptResultOutput) ToGetDecryptResultOutput() GetDecryptResultOutput {
	return o
}

func (o GetDecryptResultOutput) ToGetDecryptResultOutputWithContext(ctx context.Context) GetDecryptResultOutput {
	return o
}

func (o GetDecryptResultOutput) Backend() pulumi.StringOutput {
	return o.ApplyT(func(v GetDecryptResult) string { return v.Backend }).(pulumi.StringOutput)
}

func (o GetDecryptResultOutput) Ciphertext() pulumi.StringOutput {
	return o.ApplyT(func(v GetDecryptResult) string { return v.Ciphertext }).(pulumi.StringOutput)
}

func (o GetDecryptResultOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDecryptResult) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDecryptResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDecryptResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDecryptResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDecryptResult) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetDecryptResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDecryptResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Decrypted plaintext returned from Vault
func (o GetDecryptResultOutput) Plaintext() pulumi.StringOutput {
	return o.ApplyT(func(v GetDecryptResult) string { return v.Plaintext }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDecryptResultOutput{})
}
