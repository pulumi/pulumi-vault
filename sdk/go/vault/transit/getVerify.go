// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-vault/sdk/v6/go/vault/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This is a data source which can be used to verify a signature using a Vault Transit key.
func GetVerify(ctx *pulumi.Context, args *GetVerifyArgs, opts ...pulumi.InvokeOption) (*GetVerifyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVerifyResult
	err := ctx.Invoke("vault:transit/getVerify:getVerify", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVerify.
type GetVerifyArgs struct {
	BatchInputs []map[string]string `pulumi:"batchInputs"`
	// The results returned from Vault if using `batchInput`
	BatchResults        []map[string]string `pulumi:"batchResults"`
	Cmac                *string             `pulumi:"cmac"`
	Context             *string             `pulumi:"context"`
	HashAlgorithm       *string             `pulumi:"hashAlgorithm"`
	Hmac                *string             `pulumi:"hmac"`
	Input               *string             `pulumi:"input"`
	MarshalingAlgorithm *string             `pulumi:"marshalingAlgorithm"`
	Name                string              `pulumi:"name"`
	Namespace           *string             `pulumi:"namespace"`
	Path                string              `pulumi:"path"`
	Prehashed           *bool               `pulumi:"prehashed"`
	Reference           *string             `pulumi:"reference"`
	SaltLength          *string             `pulumi:"saltLength"`
	Signature           *string             `pulumi:"signature"`
	SignatureAlgorithm  *string             `pulumi:"signatureAlgorithm"`
	SignatureContext    *string             `pulumi:"signatureContext"`
	// Returns `true` if the signature verification succeeded and `false` otherwise
	Valid *bool `pulumi:"valid"`
}

// A collection of values returned by getVerify.
type GetVerifyResult struct {
	BatchInputs []map[string]string `pulumi:"batchInputs"`
	// The results returned from Vault if using `batchInput`
	BatchResults  []map[string]string `pulumi:"batchResults"`
	Cmac          *string             `pulumi:"cmac"`
	Context       *string             `pulumi:"context"`
	HashAlgorithm *string             `pulumi:"hashAlgorithm"`
	Hmac          *string             `pulumi:"hmac"`
	// The provider-assigned unique ID for this managed resource.
	Id                  string  `pulumi:"id"`
	Input               *string `pulumi:"input"`
	MarshalingAlgorithm *string `pulumi:"marshalingAlgorithm"`
	Name                string  `pulumi:"name"`
	Namespace           *string `pulumi:"namespace"`
	Path                string  `pulumi:"path"`
	Prehashed           *bool   `pulumi:"prehashed"`
	Reference           *string `pulumi:"reference"`
	SaltLength          *string `pulumi:"saltLength"`
	Signature           *string `pulumi:"signature"`
	SignatureAlgorithm  *string `pulumi:"signatureAlgorithm"`
	SignatureContext    *string `pulumi:"signatureContext"`
	// Returns `true` if the signature verification succeeded and `false` otherwise
	Valid bool `pulumi:"valid"`
}

func GetVerifyOutput(ctx *pulumi.Context, args GetVerifyOutputArgs, opts ...pulumi.InvokeOption) GetVerifyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVerifyResultOutput, error) {
			args := v.(GetVerifyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vault:transit/getVerify:getVerify", args, GetVerifyResultOutput{}, options).(GetVerifyResultOutput), nil
		}).(GetVerifyResultOutput)
}

// A collection of arguments for invoking getVerify.
type GetVerifyOutputArgs struct {
	BatchInputs pulumi.StringMapArrayInput `pulumi:"batchInputs"`
	// The results returned from Vault if using `batchInput`
	BatchResults        pulumi.StringMapArrayInput `pulumi:"batchResults"`
	Cmac                pulumi.StringPtrInput      `pulumi:"cmac"`
	Context             pulumi.StringPtrInput      `pulumi:"context"`
	HashAlgorithm       pulumi.StringPtrInput      `pulumi:"hashAlgorithm"`
	Hmac                pulumi.StringPtrInput      `pulumi:"hmac"`
	Input               pulumi.StringPtrInput      `pulumi:"input"`
	MarshalingAlgorithm pulumi.StringPtrInput      `pulumi:"marshalingAlgorithm"`
	Name                pulumi.StringInput         `pulumi:"name"`
	Namespace           pulumi.StringPtrInput      `pulumi:"namespace"`
	Path                pulumi.StringInput         `pulumi:"path"`
	Prehashed           pulumi.BoolPtrInput        `pulumi:"prehashed"`
	Reference           pulumi.StringPtrInput      `pulumi:"reference"`
	SaltLength          pulumi.StringPtrInput      `pulumi:"saltLength"`
	Signature           pulumi.StringPtrInput      `pulumi:"signature"`
	SignatureAlgorithm  pulumi.StringPtrInput      `pulumi:"signatureAlgorithm"`
	SignatureContext    pulumi.StringPtrInput      `pulumi:"signatureContext"`
	// Returns `true` if the signature verification succeeded and `false` otherwise
	Valid pulumi.BoolPtrInput `pulumi:"valid"`
}

func (GetVerifyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVerifyArgs)(nil)).Elem()
}

// A collection of values returned by getVerify.
type GetVerifyResultOutput struct{ *pulumi.OutputState }

func (GetVerifyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVerifyResult)(nil)).Elem()
}

func (o GetVerifyResultOutput) ToGetVerifyResultOutput() GetVerifyResultOutput {
	return o
}

func (o GetVerifyResultOutput) ToGetVerifyResultOutputWithContext(ctx context.Context) GetVerifyResultOutput {
	return o
}

func (o GetVerifyResultOutput) BatchInputs() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetVerifyResult) []map[string]string { return v.BatchInputs }).(pulumi.StringMapArrayOutput)
}

// The results returned from Vault if using `batchInput`
func (o GetVerifyResultOutput) BatchResults() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetVerifyResult) []map[string]string { return v.BatchResults }).(pulumi.StringMapArrayOutput)
}

func (o GetVerifyResultOutput) Cmac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.Cmac }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.Context }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) HashAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.HashAlgorithm }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) Hmac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.Hmac }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVerifyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVerifyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVerifyResultOutput) Input() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.Input }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) MarshalingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.MarshalingAlgorithm }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVerifyResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetVerifyResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetVerifyResult) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetVerifyResultOutput) Prehashed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *bool { return v.Prehashed }).(pulumi.BoolPtrOutput)
}

func (o GetVerifyResultOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) SaltLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.SaltLength }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) Signature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.Signature }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.SignatureAlgorithm }).(pulumi.StringPtrOutput)
}

func (o GetVerifyResultOutput) SignatureContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVerifyResult) *string { return v.SignatureContext }).(pulumi.StringPtrOutput)
}

// Returns `true` if the signature verification succeeded and `false` otherwise
func (o GetVerifyResultOutput) Valid() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVerifyResult) bool { return v.Valid }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVerifyResultOutput{})
}
