// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transit.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCmacArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCmacArgs Empty = new GetCmacArgs();

    @Import(name="batchInputs")
    private @Nullable Output<List<Map<String,String>>> batchInputs;

    public Optional<Output<List<Map<String,String>>>> batchInputs() {
        return Optional.ofNullable(this.batchInputs);
    }

    /**
     * The results returned from Vault if using `batch_input`
     * 
     */
    @Import(name="batchResults")
    private @Nullable Output<List<Map<String,String>>> batchResults;

    /**
     * @return The results returned from Vault if using `batch_input`
     * 
     */
    public Optional<Output<List<Map<String,String>>>> batchResults() {
        return Optional.ofNullable(this.batchResults);
    }

    /**
     * The CMAC returned from Vault if using `input`
     * 
     */
    @Import(name="cmac")
    private @Nullable Output<String> cmac;

    /**
     * @return The CMAC returned from Vault if using `input`
     * 
     */
    public Optional<Output<String>> cmac() {
        return Optional.ofNullable(this.cmac);
    }

    @Import(name="input")
    private @Nullable Output<String> input;

    public Optional<Output<String>> input() {
        return Optional.ofNullable(this.input);
    }

    @Import(name="keyVersion")
    private @Nullable Output<Integer> keyVersion;

    public Optional<Output<Integer>> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }

    @Import(name="macLength")
    private @Nullable Output<Integer> macLength;

    public Optional<Output<Integer>> macLength() {
        return Optional.ofNullable(this.macLength);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="path", required=true)
    private Output<String> path;

    public Output<String> path() {
        return this.path;
    }

    @Import(name="urlMacLength")
    private @Nullable Output<Integer> urlMacLength;

    public Optional<Output<Integer>> urlMacLength() {
        return Optional.ofNullable(this.urlMacLength);
    }

    private GetCmacArgs() {}

    private GetCmacArgs(GetCmacArgs $) {
        this.batchInputs = $.batchInputs;
        this.batchResults = $.batchResults;
        this.cmac = $.cmac;
        this.input = $.input;
        this.keyVersion = $.keyVersion;
        this.macLength = $.macLength;
        this.name = $.name;
        this.namespace = $.namespace;
        this.path = $.path;
        this.urlMacLength = $.urlMacLength;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCmacArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCmacArgs $;

        public Builder() {
            $ = new GetCmacArgs();
        }

        public Builder(GetCmacArgs defaults) {
            $ = new GetCmacArgs(Objects.requireNonNull(defaults));
        }

        public Builder batchInputs(@Nullable Output<List<Map<String,String>>> batchInputs) {
            $.batchInputs = batchInputs;
            return this;
        }

        public Builder batchInputs(List<Map<String,String>> batchInputs) {
            return batchInputs(Output.of(batchInputs));
        }

        public Builder batchInputs(Map<String,String>... batchInputs) {
            return batchInputs(List.of(batchInputs));
        }

        /**
         * @param batchResults The results returned from Vault if using `batch_input`
         * 
         * @return builder
         * 
         */
        public Builder batchResults(@Nullable Output<List<Map<String,String>>> batchResults) {
            $.batchResults = batchResults;
            return this;
        }

        /**
         * @param batchResults The results returned from Vault if using `batch_input`
         * 
         * @return builder
         * 
         */
        public Builder batchResults(List<Map<String,String>> batchResults) {
            return batchResults(Output.of(batchResults));
        }

        /**
         * @param batchResults The results returned from Vault if using `batch_input`
         * 
         * @return builder
         * 
         */
        public Builder batchResults(Map<String,String>... batchResults) {
            return batchResults(List.of(batchResults));
        }

        /**
         * @param cmac The CMAC returned from Vault if using `input`
         * 
         * @return builder
         * 
         */
        public Builder cmac(@Nullable Output<String> cmac) {
            $.cmac = cmac;
            return this;
        }

        /**
         * @param cmac The CMAC returned from Vault if using `input`
         * 
         * @return builder
         * 
         */
        public Builder cmac(String cmac) {
            return cmac(Output.of(cmac));
        }

        public Builder input(@Nullable Output<String> input) {
            $.input = input;
            return this;
        }

        public Builder input(String input) {
            return input(Output.of(input));
        }

        public Builder keyVersion(@Nullable Output<Integer> keyVersion) {
            $.keyVersion = keyVersion;
            return this;
        }

        public Builder keyVersion(Integer keyVersion) {
            return keyVersion(Output.of(keyVersion));
        }

        public Builder macLength(@Nullable Output<Integer> macLength) {
            $.macLength = macLength;
            return this;
        }

        public Builder macLength(Integer macLength) {
            return macLength(Output.of(macLength));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder urlMacLength(@Nullable Output<Integer> urlMacLength) {
            $.urlMacLength = urlMacLength;
            return this;
        }

        public Builder urlMacLength(Integer urlMacLength) {
            return urlMacLength(Output.of(urlMacLength));
        }

        public GetCmacArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetCmacArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetCmacArgs", "path");
            }
            return $;
        }
    }

}
