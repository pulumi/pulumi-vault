// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transit.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVerifyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVerifyPlainArgs Empty = new GetVerifyPlainArgs();

    @Import(name="batchInputs")
    private @Nullable List<Map<String,String>> batchInputs;

    public Optional<List<Map<String,String>>> batchInputs() {
        return Optional.ofNullable(this.batchInputs);
    }

    /**
     * The results returned from Vault if using `batchInput`
     * 
     */
    @Import(name="batchResults")
    private @Nullable List<Map<String,String>> batchResults;

    /**
     * @return The results returned from Vault if using `batchInput`
     * 
     */
    public Optional<List<Map<String,String>>> batchResults() {
        return Optional.ofNullable(this.batchResults);
    }

    @Import(name="cmac")
    private @Nullable String cmac;

    public Optional<String> cmac() {
        return Optional.ofNullable(this.cmac);
    }

    @Import(name="context")
    private @Nullable String context;

    public Optional<String> context() {
        return Optional.ofNullable(this.context);
    }

    @Import(name="hashAlgorithm")
    private @Nullable String hashAlgorithm;

    public Optional<String> hashAlgorithm() {
        return Optional.ofNullable(this.hashAlgorithm);
    }

    @Import(name="hmac")
    private @Nullable String hmac;

    public Optional<String> hmac() {
        return Optional.ofNullable(this.hmac);
    }

    @Import(name="input")
    private @Nullable String input;

    public Optional<String> input() {
        return Optional.ofNullable(this.input);
    }

    @Import(name="macLength")
    private @Nullable Integer macLength;

    public Optional<Integer> macLength() {
        return Optional.ofNullable(this.macLength);
    }

    @Import(name="marshalingAlgorithm")
    private @Nullable String marshalingAlgorithm;

    public Optional<String> marshalingAlgorithm() {
        return Optional.ofNullable(this.marshalingAlgorithm);
    }

    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    @Import(name="namespace")
    private @Nullable String namespace;

    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="path", required=true)
    private String path;

    public String path() {
        return this.path;
    }

    @Import(name="prehashed")
    private @Nullable Boolean prehashed;

    public Optional<Boolean> prehashed() {
        return Optional.ofNullable(this.prehashed);
    }

    @Import(name="reference")
    private @Nullable String reference;

    public Optional<String> reference() {
        return Optional.ofNullable(this.reference);
    }

    @Import(name="saltLength")
    private @Nullable String saltLength;

    public Optional<String> saltLength() {
        return Optional.ofNullable(this.saltLength);
    }

    @Import(name="signature")
    private @Nullable String signature;

    public Optional<String> signature() {
        return Optional.ofNullable(this.signature);
    }

    @Import(name="signatureAlgorithm")
    private @Nullable String signatureAlgorithm;

    public Optional<String> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    @Import(name="signatureContext")
    private @Nullable String signatureContext;

    public Optional<String> signatureContext() {
        return Optional.ofNullable(this.signatureContext);
    }

    /**
     * Returns `true` if the signature verification succeeded and `false` otherwise
     * 
     */
    @Import(name="valid")
    private @Nullable Boolean valid;

    /**
     * @return Returns `true` if the signature verification succeeded and `false` otherwise
     * 
     */
    public Optional<Boolean> valid() {
        return Optional.ofNullable(this.valid);
    }

    private GetVerifyPlainArgs() {}

    private GetVerifyPlainArgs(GetVerifyPlainArgs $) {
        this.batchInputs = $.batchInputs;
        this.batchResults = $.batchResults;
        this.cmac = $.cmac;
        this.context = $.context;
        this.hashAlgorithm = $.hashAlgorithm;
        this.hmac = $.hmac;
        this.input = $.input;
        this.macLength = $.macLength;
        this.marshalingAlgorithm = $.marshalingAlgorithm;
        this.name = $.name;
        this.namespace = $.namespace;
        this.path = $.path;
        this.prehashed = $.prehashed;
        this.reference = $.reference;
        this.saltLength = $.saltLength;
        this.signature = $.signature;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.signatureContext = $.signatureContext;
        this.valid = $.valid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVerifyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVerifyPlainArgs $;

        public Builder() {
            $ = new GetVerifyPlainArgs();
        }

        public Builder(GetVerifyPlainArgs defaults) {
            $ = new GetVerifyPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder batchInputs(@Nullable List<Map<String,String>> batchInputs) {
            $.batchInputs = batchInputs;
            return this;
        }

        public Builder batchInputs(Map<String,String>... batchInputs) {
            return batchInputs(List.of(batchInputs));
        }

        /**
         * @param batchResults The results returned from Vault if using `batchInput`
         * 
         * @return builder
         * 
         */
        public Builder batchResults(@Nullable List<Map<String,String>> batchResults) {
            $.batchResults = batchResults;
            return this;
        }

        /**
         * @param batchResults The results returned from Vault if using `batchInput`
         * 
         * @return builder
         * 
         */
        public Builder batchResults(Map<String,String>... batchResults) {
            return batchResults(List.of(batchResults));
        }

        public Builder cmac(@Nullable String cmac) {
            $.cmac = cmac;
            return this;
        }

        public Builder context(@Nullable String context) {
            $.context = context;
            return this;
        }

        public Builder hashAlgorithm(@Nullable String hashAlgorithm) {
            $.hashAlgorithm = hashAlgorithm;
            return this;
        }

        public Builder hmac(@Nullable String hmac) {
            $.hmac = hmac;
            return this;
        }

        public Builder input(@Nullable String input) {
            $.input = input;
            return this;
        }

        public Builder macLength(@Nullable Integer macLength) {
            $.macLength = macLength;
            return this;
        }

        public Builder marshalingAlgorithm(@Nullable String marshalingAlgorithm) {
            $.marshalingAlgorithm = marshalingAlgorithm;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder namespace(@Nullable String namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public Builder prehashed(@Nullable Boolean prehashed) {
            $.prehashed = prehashed;
            return this;
        }

        public Builder reference(@Nullable String reference) {
            $.reference = reference;
            return this;
        }

        public Builder saltLength(@Nullable String saltLength) {
            $.saltLength = saltLength;
            return this;
        }

        public Builder signature(@Nullable String signature) {
            $.signature = signature;
            return this;
        }

        public Builder signatureAlgorithm(@Nullable String signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        public Builder signatureContext(@Nullable String signatureContext) {
            $.signatureContext = signatureContext;
            return this;
        }

        /**
         * @param valid Returns `true` if the signature verification succeeded and `false` otherwise
         * 
         * @return builder
         * 
         */
        public Builder valid(@Nullable Boolean valid) {
            $.valid = valid;
            return this;
        }

        public GetVerifyPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetVerifyPlainArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetVerifyPlainArgs", "path");
            }
            return $;
        }
    }

}
