// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transit.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCmacPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCmacPlainArgs Empty = new GetCmacPlainArgs();

    @Import(name="batchInputs")
    private @Nullable List<Map<String,String>> batchInputs;

    public Optional<List<Map<String,String>>> batchInputs() {
        return Optional.ofNullable(this.batchInputs);
    }

    /**
     * The results returned from Vault if using `batch_input`
     * 
     */
    @Import(name="batchResults")
    private @Nullable List<Map<String,String>> batchResults;

    /**
     * @return The results returned from Vault if using `batch_input`
     * 
     */
    public Optional<List<Map<String,String>>> batchResults() {
        return Optional.ofNullable(this.batchResults);
    }

    /**
     * The CMAC returned from Vault if using `input`
     * 
     */
    @Import(name="cmac")
    private @Nullable String cmac;

    /**
     * @return The CMAC returned from Vault if using `input`
     * 
     */
    public Optional<String> cmac() {
        return Optional.ofNullable(this.cmac);
    }

    @Import(name="input")
    private @Nullable String input;

    public Optional<String> input() {
        return Optional.ofNullable(this.input);
    }

    @Import(name="keyVersion")
    private @Nullable Integer keyVersion;

    public Optional<Integer> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }

    @Import(name="macLength")
    private @Nullable Integer macLength;

    public Optional<Integer> macLength() {
        return Optional.ofNullable(this.macLength);
    }

    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    @Import(name="namespace")
    private @Nullable String namespace;

    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="path", required=true)
    private String path;

    public String path() {
        return this.path;
    }

    @Import(name="urlMacLength")
    private @Nullable Integer urlMacLength;

    public Optional<Integer> urlMacLength() {
        return Optional.ofNullable(this.urlMacLength);
    }

    private GetCmacPlainArgs() {}

    private GetCmacPlainArgs(GetCmacPlainArgs $) {
        this.batchInputs = $.batchInputs;
        this.batchResults = $.batchResults;
        this.cmac = $.cmac;
        this.input = $.input;
        this.keyVersion = $.keyVersion;
        this.macLength = $.macLength;
        this.name = $.name;
        this.namespace = $.namespace;
        this.path = $.path;
        this.urlMacLength = $.urlMacLength;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCmacPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCmacPlainArgs $;

        public Builder() {
            $ = new GetCmacPlainArgs();
        }

        public Builder(GetCmacPlainArgs defaults) {
            $ = new GetCmacPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder batchInputs(@Nullable List<Map<String,String>> batchInputs) {
            $.batchInputs = batchInputs;
            return this;
        }

        public Builder batchInputs(Map<String,String>... batchInputs) {
            return batchInputs(List.of(batchInputs));
        }

        /**
         * @param batchResults The results returned from Vault if using `batch_input`
         * 
         * @return builder
         * 
         */
        public Builder batchResults(@Nullable List<Map<String,String>> batchResults) {
            $.batchResults = batchResults;
            return this;
        }

        /**
         * @param batchResults The results returned from Vault if using `batch_input`
         * 
         * @return builder
         * 
         */
        public Builder batchResults(Map<String,String>... batchResults) {
            return batchResults(List.of(batchResults));
        }

        /**
         * @param cmac The CMAC returned from Vault if using `input`
         * 
         * @return builder
         * 
         */
        public Builder cmac(@Nullable String cmac) {
            $.cmac = cmac;
            return this;
        }

        public Builder input(@Nullable String input) {
            $.input = input;
            return this;
        }

        public Builder keyVersion(@Nullable Integer keyVersion) {
            $.keyVersion = keyVersion;
            return this;
        }

        public Builder macLength(@Nullable Integer macLength) {
            $.macLength = macLength;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder namespace(@Nullable String namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public Builder urlMacLength(@Nullable Integer urlMacLength) {
            $.urlMacLength = urlMacLength;
            return this;
        }

        public GetCmacPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetCmacPlainArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetCmacPlainArgs", "path");
            }
            return $;
        }
    }

}
