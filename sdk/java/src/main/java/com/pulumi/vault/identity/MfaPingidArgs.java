// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MfaPingidArgs extends com.pulumi.resources.ResourceArgs {

    public static final MfaPingidArgs Empty = new MfaPingidArgs();

    /**
     * Target namespace. (requires Enterprise)
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Target namespace. (requires Enterprise)
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * A base64-encoded third-party settings contents as retrieved from PingID&#39;s configuration page.
     * 
     */
    @Import(name="settingsFileBase64", required=true)
    private Output<String> settingsFileBase64;

    /**
     * @return A base64-encoded third-party settings contents as retrieved from PingID&#39;s configuration page.
     * 
     */
    public Output<String> settingsFileBase64() {
        return this.settingsFileBase64;
    }

    /**
     * A template string for mapping Identity names to MFA methods.
     * 
     */
    @Import(name="usernameFormat")
    private @Nullable Output<String> usernameFormat;

    /**
     * @return A template string for mapping Identity names to MFA methods.
     * 
     */
    public Optional<Output<String>> usernameFormat() {
        return Optional.ofNullable(this.usernameFormat);
    }

    private MfaPingidArgs() {}

    private MfaPingidArgs(MfaPingidArgs $) {
        this.namespace = $.namespace;
        this.settingsFileBase64 = $.settingsFileBase64;
        this.usernameFormat = $.usernameFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MfaPingidArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MfaPingidArgs $;

        public Builder() {
            $ = new MfaPingidArgs();
        }

        public Builder(MfaPingidArgs defaults) {
            $ = new MfaPingidArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param settingsFileBase64 A base64-encoded third-party settings contents as retrieved from PingID&#39;s configuration page.
         * 
         * @return builder
         * 
         */
        public Builder settingsFileBase64(Output<String> settingsFileBase64) {
            $.settingsFileBase64 = settingsFileBase64;
            return this;
        }

        /**
         * @param settingsFileBase64 A base64-encoded third-party settings contents as retrieved from PingID&#39;s configuration page.
         * 
         * @return builder
         * 
         */
        public Builder settingsFileBase64(String settingsFileBase64) {
            return settingsFileBase64(Output.of(settingsFileBase64));
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(@Nullable Output<String> usernameFormat) {
            $.usernameFormat = usernameFormat;
            return this;
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(String usernameFormat) {
            return usernameFormat(Output.of(usernameFormat));
        }

        public MfaPingidArgs build() {
            if ($.settingsFileBase64 == null) {
                throw new MissingRequiredPropertyException("MfaPingidArgs", "settingsFileBase64");
            }
            return $;
        }
    }

}
