// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBackendCertMetadataArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBackendCertMetadataArgs Empty = new GetBackendCertMetadataArgs();

    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The path to the PKI secret backend to
     * read the cert metadata from, with no leading or trailing `/`s.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path to the PKI secret backend to
     * read the cert metadata from, with no leading or trailing `/`s.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Specifies the serial of the certificate whose metadata to read.
     * 
     */
    @Import(name="serial", required=true)
    private Output<String> serial;

    /**
     * @return Specifies the serial of the certificate whose metadata to read.
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }

    private GetBackendCertMetadataArgs() {}

    private GetBackendCertMetadataArgs(GetBackendCertMetadataArgs $) {
        this.namespace = $.namespace;
        this.path = $.path;
        this.serial = $.serial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBackendCertMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBackendCertMetadataArgs $;

        public Builder() {
            $ = new GetBackendCertMetadataArgs();
        }

        public Builder(GetBackendCertMetadataArgs defaults) {
            $ = new GetBackendCertMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path The path to the PKI secret backend to
         * read the cert metadata from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the PKI secret backend to
         * read the cert metadata from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param serial Specifies the serial of the certificate whose metadata to read.
         * 
         * @return builder
         * 
         */
        public Builder serial(Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial Specifies the serial of the certificate whose metadata to read.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        public GetBackendCertMetadataArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetBackendCertMetadataArgs", "path");
            }
            if ($.serial == null) {
                throw new MissingRequiredPropertyException("GetBackendCertMetadataArgs", "serial");
            }
            return $;
        }
    }

}
