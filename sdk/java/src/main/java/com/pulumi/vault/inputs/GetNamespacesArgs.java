// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNamespacesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNamespacesArgs Empty = new GetNamespacesArgs();

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * If `true`, it will returns all child namespaces of the given namespace. Defaults to `false`, which returns only direct child namespaces.
     * 
     */
    @Import(name="recursive")
    private @Nullable Output<Boolean> recursive;

    /**
     * @return If `true`, it will returns all child namespaces of the given namespace. Defaults to `false`, which returns only direct child namespaces.
     * 
     */
    public Optional<Output<Boolean>> recursive() {
        return Optional.ofNullable(this.recursive);
    }

    private GetNamespacesArgs() {}

    private GetNamespacesArgs(GetNamespacesArgs $) {
        this.namespace = $.namespace;
        this.recursive = $.recursive;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNamespacesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNamespacesArgs $;

        public Builder() {
            $ = new GetNamespacesArgs();
        }

        public Builder(GetNamespacesArgs defaults) {
            $ = new GetNamespacesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param recursive If `true`, it will returns all child namespaces of the given namespace. Defaults to `false`, which returns only direct child namespaces.
         * 
         * @return builder
         * 
         */
        public Builder recursive(@Nullable Output<Boolean> recursive) {
            $.recursive = recursive;
            return this;
        }

        /**
         * @param recursive If `true`, it will returns all child namespaces of the given namespace. Defaults to `false`, which returns only direct child namespaces.
         * 
         * @return builder
         * 
         */
        public Builder recursive(Boolean recursive) {
            return recursive(Output.of(recursive));
        }

        public GetNamespacesArgs build() {
            return $;
        }
    }

}
