// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.aws;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendClientArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendClientArgs Empty = new AuthBackendClientArgs();

    /**
     * The AWS access key that Vault should use for the
     * auth backend.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The AWS access key that Vault should use for the
     * auth backend.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The path the AWS auth backend being configured was
     * mounted at.  Defaults to `aws`.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The path the AWS auth backend being configured was
     * mounted at.  Defaults to `aws`.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * Override the URL Vault uses when making EC2 API
     * calls.
     * 
     */
    @Import(name="ec2Endpoint")
    private @Nullable Output<String> ec2Endpoint;

    /**
     * @return Override the URL Vault uses when making EC2 API
     * calls.
     * 
     */
    public Optional<Output<String>> ec2Endpoint() {
        return Optional.ofNullable(this.ec2Endpoint);
    }

    /**
     * Override the URL Vault uses when making IAM API
     * calls.
     * 
     */
    @Import(name="iamEndpoint")
    private @Nullable Output<String> iamEndpoint;

    /**
     * @return Override the URL Vault uses when making IAM API
     * calls.
     * 
     */
    public Optional<Output<String>> iamEndpoint() {
        return Optional.ofNullable(this.iamEndpoint);
    }

    /**
     * The value to require in the
     * `X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests
     * that are used in the IAM auth method.
     * 
     */
    @Import(name="iamServerIdHeaderValue")
    private @Nullable Output<String> iamServerIdHeaderValue;

    /**
     * @return The value to require in the
     * `X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests
     * that are used in the IAM auth method.
     * 
     */
    public Optional<Output<String>> iamServerIdHeaderValue() {
        return Optional.ofNullable(this.iamServerIdHeaderValue);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The AWS secret key that Vault should use for the
     * auth backend.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return The AWS secret key that Vault should use for the
     * auth backend.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Override the URL Vault uses when making STS API
     * calls.
     * 
     */
    @Import(name="stsEndpoint")
    private @Nullable Output<String> stsEndpoint;

    /**
     * @return Override the URL Vault uses when making STS API
     * calls.
     * 
     */
    public Optional<Output<String>> stsEndpoint() {
        return Optional.ofNullable(this.stsEndpoint);
    }

    /**
     * Override the default region when making STS API
     * calls. The `sts_endpoint` argument must be set when using `sts_region`.
     * 
     */
    @Import(name="stsRegion")
    private @Nullable Output<String> stsRegion;

    /**
     * @return Override the default region when making STS API
     * calls. The `sts_endpoint` argument must be set when using `sts_region`.
     * 
     */
    public Optional<Output<String>> stsRegion() {
        return Optional.ofNullable(this.stsRegion);
    }

    /**
     * Available in Vault v1.15+. If set,
     * overrides both `sts_endpoint` and `sts_region` to instead use the region
     * specified in the client request headers for IAM-based authentication.
     * This can be useful when you have client requests coming from different
     * regions and want flexibility in which regional STS API is used.
     * 
     */
    @Import(name="useStsRegionFromClient")
    private @Nullable Output<Boolean> useStsRegionFromClient;

    /**
     * @return Available in Vault v1.15+. If set,
     * overrides both `sts_endpoint` and `sts_region` to instead use the region
     * specified in the client request headers for IAM-based authentication.
     * This can be useful when you have client requests coming from different
     * regions and want flexibility in which regional STS API is used.
     * 
     */
    public Optional<Output<Boolean>> useStsRegionFromClient() {
        return Optional.ofNullable(this.useStsRegionFromClient);
    }

    private AuthBackendClientArgs() {}

    private AuthBackendClientArgs(AuthBackendClientArgs $) {
        this.accessKey = $.accessKey;
        this.backend = $.backend;
        this.ec2Endpoint = $.ec2Endpoint;
        this.iamEndpoint = $.iamEndpoint;
        this.iamServerIdHeaderValue = $.iamServerIdHeaderValue;
        this.namespace = $.namespace;
        this.secretKey = $.secretKey;
        this.stsEndpoint = $.stsEndpoint;
        this.stsRegion = $.stsRegion;
        this.useStsRegionFromClient = $.useStsRegionFromClient;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendClientArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendClientArgs $;

        public Builder() {
            $ = new AuthBackendClientArgs();
        }

        public Builder(AuthBackendClientArgs defaults) {
            $ = new AuthBackendClientArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The AWS access key that Vault should use for the
         * auth backend.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The AWS access key that Vault should use for the
         * auth backend.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param backend The path the AWS auth backend being configured was
         * mounted at.  Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path the AWS auth backend being configured was
         * mounted at.  Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param ec2Endpoint Override the URL Vault uses when making EC2 API
         * calls.
         * 
         * @return builder
         * 
         */
        public Builder ec2Endpoint(@Nullable Output<String> ec2Endpoint) {
            $.ec2Endpoint = ec2Endpoint;
            return this;
        }

        /**
         * @param ec2Endpoint Override the URL Vault uses when making EC2 API
         * calls.
         * 
         * @return builder
         * 
         */
        public Builder ec2Endpoint(String ec2Endpoint) {
            return ec2Endpoint(Output.of(ec2Endpoint));
        }

        /**
         * @param iamEndpoint Override the URL Vault uses when making IAM API
         * calls.
         * 
         * @return builder
         * 
         */
        public Builder iamEndpoint(@Nullable Output<String> iamEndpoint) {
            $.iamEndpoint = iamEndpoint;
            return this;
        }

        /**
         * @param iamEndpoint Override the URL Vault uses when making IAM API
         * calls.
         * 
         * @return builder
         * 
         */
        public Builder iamEndpoint(String iamEndpoint) {
            return iamEndpoint(Output.of(iamEndpoint));
        }

        /**
         * @param iamServerIdHeaderValue The value to require in the
         * `X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests
         * that are used in the IAM auth method.
         * 
         * @return builder
         * 
         */
        public Builder iamServerIdHeaderValue(@Nullable Output<String> iamServerIdHeaderValue) {
            $.iamServerIdHeaderValue = iamServerIdHeaderValue;
            return this;
        }

        /**
         * @param iamServerIdHeaderValue The value to require in the
         * `X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests
         * that are used in the IAM auth method.
         * 
         * @return builder
         * 
         */
        public Builder iamServerIdHeaderValue(String iamServerIdHeaderValue) {
            return iamServerIdHeaderValue(Output.of(iamServerIdHeaderValue));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param secretKey The AWS secret key that Vault should use for the
         * auth backend.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The AWS secret key that Vault should use for the
         * auth backend.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param stsEndpoint Override the URL Vault uses when making STS API
         * calls.
         * 
         * @return builder
         * 
         */
        public Builder stsEndpoint(@Nullable Output<String> stsEndpoint) {
            $.stsEndpoint = stsEndpoint;
            return this;
        }

        /**
         * @param stsEndpoint Override the URL Vault uses when making STS API
         * calls.
         * 
         * @return builder
         * 
         */
        public Builder stsEndpoint(String stsEndpoint) {
            return stsEndpoint(Output.of(stsEndpoint));
        }

        /**
         * @param stsRegion Override the default region when making STS API
         * calls. The `sts_endpoint` argument must be set when using `sts_region`.
         * 
         * @return builder
         * 
         */
        public Builder stsRegion(@Nullable Output<String> stsRegion) {
            $.stsRegion = stsRegion;
            return this;
        }

        /**
         * @param stsRegion Override the default region when making STS API
         * calls. The `sts_endpoint` argument must be set when using `sts_region`.
         * 
         * @return builder
         * 
         */
        public Builder stsRegion(String stsRegion) {
            return stsRegion(Output.of(stsRegion));
        }

        /**
         * @param useStsRegionFromClient Available in Vault v1.15+. If set,
         * overrides both `sts_endpoint` and `sts_region` to instead use the region
         * specified in the client request headers for IAM-based authentication.
         * This can be useful when you have client requests coming from different
         * regions and want flexibility in which regional STS API is used.
         * 
         * @return builder
         * 
         */
        public Builder useStsRegionFromClient(@Nullable Output<Boolean> useStsRegionFromClient) {
            $.useStsRegionFromClient = useStsRegionFromClient;
            return this;
        }

        /**
         * @param useStsRegionFromClient Available in Vault v1.15+. If set,
         * overrides both `sts_endpoint` and `sts_region` to instead use the region
         * specified in the client request headers for IAM-based authentication.
         * This can be useful when you have client requests coming from different
         * regions and want flexibility in which regional STS API is used.
         * 
         * @return builder
         * 
         */
        public Builder useStsRegionFromClient(Boolean useStsRegionFromClient) {
            return useStsRegionFromClient(Output.of(useStsRegionFromClient));
        }

        public AuthBackendClientArgs build() {
            return $;
        }
    }

}
