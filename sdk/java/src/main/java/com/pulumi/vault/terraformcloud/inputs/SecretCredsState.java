// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.terraformcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretCredsState extends com.pulumi.resources.ResourceArgs {

    public static final SecretCredsState Empty = new SecretCredsState();

    /**
     * Terraform Cloud secret backend to generate tokens from
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Terraform Cloud secret backend to generate tokens from
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The lease associated with the token. Only user tokens will have a
     * Vault lease associated with them.
     * 
     */
    @Import(name="leaseId")
    private @Nullable Output<String> leaseId;

    /**
     * @return The lease associated with the token. Only user tokens will have a
     * Vault lease associated with them.
     * 
     */
    public Optional<Output<String>> leaseId() {
        return Optional.ofNullable(this.leaseId);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The organization associated with the token provided.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return The organization associated with the token provided.
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * Name of the role.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Name of the role.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The team id associated with the token provided.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return The team id associated with the token provided.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * The actual token that was generated and can be used with API calls
     * to identify the user of the call.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The actual token that was generated and can be used with API calls
     * to identify the user of the call.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The public identifier for a specific token. It can be used
     * to look up information about a token or to revoke a token.
     * 
     */
    @Import(name="tokenId")
    private @Nullable Output<String> tokenId;

    /**
     * @return The public identifier for a specific token. It can be used
     * to look up information about a token or to revoke a token.
     * 
     */
    public Optional<Output<String>> tokenId() {
        return Optional.ofNullable(this.tokenId);
    }

    private SecretCredsState() {}

    private SecretCredsState(SecretCredsState $) {
        this.backend = $.backend;
        this.leaseId = $.leaseId;
        this.namespace = $.namespace;
        this.organization = $.organization;
        this.role = $.role;
        this.teamId = $.teamId;
        this.token = $.token;
        this.tokenId = $.tokenId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretCredsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretCredsState $;

        public Builder() {
            $ = new SecretCredsState();
        }

        public Builder(SecretCredsState defaults) {
            $ = new SecretCredsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend Terraform Cloud secret backend to generate tokens from
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Terraform Cloud secret backend to generate tokens from
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param leaseId The lease associated with the token. Only user tokens will have a
         * Vault lease associated with them.
         * 
         * @return builder
         * 
         */
        public Builder leaseId(@Nullable Output<String> leaseId) {
            $.leaseId = leaseId;
            return this;
        }

        /**
         * @param leaseId The lease associated with the token. Only user tokens will have a
         * Vault lease associated with them.
         * 
         * @return builder
         * 
         */
        public Builder leaseId(String leaseId) {
            return leaseId(Output.of(leaseId));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param organization The organization associated with the token provided.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization The organization associated with the token provided.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param role Name of the role.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Name of the role.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param teamId The team id associated with the token provided.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The team id associated with the token provided.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param token The actual token that was generated and can be used with API calls
         * to identify the user of the call.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The actual token that was generated and can be used with API calls
         * to identify the user of the call.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param tokenId The public identifier for a specific token. It can be used
         * to look up information about a token or to revoke a token.
         * 
         * @return builder
         * 
         */
        public Builder tokenId(@Nullable Output<String> tokenId) {
            $.tokenId = tokenId;
            return this;
        }

        /**
         * @param tokenId The public identifier for a specific token. It can be used
         * to look up information about a token or to revoke a token.
         * 
         * @return builder
         * 
         */
        public Builder tokenId(String tokenId) {
            return tokenId(Output.of(tokenId));
        }

        public SecretCredsState build() {
            return $;
        }
    }

}
