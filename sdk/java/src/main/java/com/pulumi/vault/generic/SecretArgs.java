// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.generic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretArgs Empty = new SecretArgs();

    /**
     * String containing a JSON-encoded object that will be
     * written as the secret data at the given path.
     * 
     */
    @Import(name="dataJson", required=true)
    private Output<String> dataJson;

    /**
     * @return String containing a JSON-encoded object that will be
     * written as the secret data at the given path.
     * 
     */
    public Output<String> dataJson() {
        return this.dataJson;
    }

    /**
     * true/false.  Only applicable for kv-v2 stores.
     * If set to `true`, permanently deletes all versions for
     * the specified key. The default behavior is to only delete the latest version of the
     * secret.
     * 
     */
    @Import(name="deleteAllVersions")
    private @Nullable Output<Boolean> deleteAllVersions;

    /**
     * @return true/false.  Only applicable for kv-v2 stores.
     * If set to `true`, permanently deletes all versions for
     * the specified key. The default behavior is to only delete the latest version of the
     * secret.
     * 
     */
    public Optional<Output<Boolean>> deleteAllVersions() {
        return Optional.ofNullable(this.deleteAllVersions);
    }

    /**
     * true/false. Set this to true if your vault
     * authentication is not able to read the data. Setting this to `true` will
     * break drift detection. Defaults to false.
     * 
     */
    @Import(name="disableRead")
    private @Nullable Output<Boolean> disableRead;

    /**
     * @return true/false. Set this to true if your vault
     * authentication is not able to read the data. Setting this to `true` will
     * break drift detection. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableRead() {
        return Optional.ofNullable(this.disableRead);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The full logical path at which to write the given data.
     * To write data into the &#34;generic&#34; secret backend mounted in Vault by default,
     * this should be prefixed with `secret/`. Writing to other backends with this
     * resource is possible; consult each backend&#39;s documentation to see which
     * endpoints support the `PUT` and `DELETE` methods.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The full logical path at which to write the given data.
     * To write data into the &#34;generic&#34; secret backend mounted in Vault by default,
     * this should be prefixed with `secret/`. Writing to other backends with this
     * resource is possible; consult each backend&#39;s documentation to see which
     * endpoints support the `PUT` and `DELETE` methods.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private SecretArgs() {}

    private SecretArgs(SecretArgs $) {
        this.dataJson = $.dataJson;
        this.deleteAllVersions = $.deleteAllVersions;
        this.disableRead = $.disableRead;
        this.namespace = $.namespace;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretArgs $;

        public Builder() {
            $ = new SecretArgs();
        }

        public Builder(SecretArgs defaults) {
            $ = new SecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataJson String containing a JSON-encoded object that will be
         * written as the secret data at the given path.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(Output<String> dataJson) {
            $.dataJson = dataJson;
            return this;
        }

        /**
         * @param dataJson String containing a JSON-encoded object that will be
         * written as the secret data at the given path.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(String dataJson) {
            return dataJson(Output.of(dataJson));
        }

        /**
         * @param deleteAllVersions true/false.  Only applicable for kv-v2 stores.
         * If set to `true`, permanently deletes all versions for
         * the specified key. The default behavior is to only delete the latest version of the
         * secret.
         * 
         * @return builder
         * 
         */
        public Builder deleteAllVersions(@Nullable Output<Boolean> deleteAllVersions) {
            $.deleteAllVersions = deleteAllVersions;
            return this;
        }

        /**
         * @param deleteAllVersions true/false.  Only applicable for kv-v2 stores.
         * If set to `true`, permanently deletes all versions for
         * the specified key. The default behavior is to only delete the latest version of the
         * secret.
         * 
         * @return builder
         * 
         */
        public Builder deleteAllVersions(Boolean deleteAllVersions) {
            return deleteAllVersions(Output.of(deleteAllVersions));
        }

        /**
         * @param disableRead true/false. Set this to true if your vault
         * authentication is not able to read the data. Setting this to `true` will
         * break drift detection. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRead(@Nullable Output<Boolean> disableRead) {
            $.disableRead = disableRead;
            return this;
        }

        /**
         * @param disableRead true/false. Set this to true if your vault
         * authentication is not able to read the data. Setting this to `true` will
         * break drift detection. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRead(Boolean disableRead) {
            return disableRead(Output.of(disableRead));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path The full logical path at which to write the given data.
         * To write data into the &#34;generic&#34; secret backend mounted in Vault by default,
         * this should be prefixed with `secret/`. Writing to other backends with this
         * resource is possible; consult each backend&#39;s documentation to see which
         * endpoints support the `PUT` and `DELETE` methods.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The full logical path at which to write the given data.
         * To write data into the &#34;generic&#34; secret backend mounted in Vault by default,
         * this should be prefixed with `secret/`. Writing to other backends with this
         * resource is possible; consult each backend&#39;s documentation to see which
         * endpoints support the `PUT` and `DELETE` methods.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public SecretArgs build() {
            if ($.dataJson == null) {
                throw new MissingRequiredPropertyException("SecretArgs", "dataJson");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("SecretArgs", "path");
            }
            return $;
        }
    }

}
