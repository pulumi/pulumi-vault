// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.secrets.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyncVercelDestinationState extends com.pulumi.resources.ResourceArgs {

    public static final SyncVercelDestinationState Empty = new SyncVercelDestinationState();

    /**
     * Vercel API access token with the permissions to manage environment
     * variables.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    /**
     * @return Vercel API access token with the permissions to manage environment
     * variables.
     * 
     */
    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * Deployment environments where the environment variables
     * are available. Accepts `development`, `preview` and `production`.
     * 
     */
    @Import(name="deploymentEnvironments")
    private @Nullable Output<List<String>> deploymentEnvironments;

    /**
     * @return Deployment environments where the environment variables
     * are available. Accepts `development`, `preview` and `production`.
     * 
     */
    public Optional<Output<List<String>>> deploymentEnvironments() {
        return Optional.ofNullable(this.deploymentEnvironments);
    }

    /**
     * Unique name of the GitHub destination.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique name of the GitHub destination.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Project ID where to manage environment variables.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project ID where to manage environment variables.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Template describing how to generate external secret names.
     * Supports a subset of the Go Template syntax.
     * 
     */
    @Import(name="secretNameTemplate")
    private @Nullable Output<String> secretNameTemplate;

    /**
     * @return Template describing how to generate external secret names.
     * Supports a subset of the Go Template syntax.
     * 
     */
    public Optional<Output<String>> secretNameTemplate() {
        return Optional.ofNullable(this.secretNameTemplate);
    }

    /**
     * Team ID where to manage environment variables.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return Team ID where to manage environment variables.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * The type of the secrets destination (`vercel-project`).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the secrets destination (`vercel-project`).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private SyncVercelDestinationState() {}

    private SyncVercelDestinationState(SyncVercelDestinationState $) {
        this.accessToken = $.accessToken;
        this.deploymentEnvironments = $.deploymentEnvironments;
        this.name = $.name;
        this.namespace = $.namespace;
        this.projectId = $.projectId;
        this.secretNameTemplate = $.secretNameTemplate;
        this.teamId = $.teamId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyncVercelDestinationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyncVercelDestinationState $;

        public Builder() {
            $ = new SyncVercelDestinationState();
        }

        public Builder(SyncVercelDestinationState defaults) {
            $ = new SyncVercelDestinationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Vercel API access token with the permissions to manage environment
         * variables.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Vercel API access token with the permissions to manage environment
         * variables.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param deploymentEnvironments Deployment environments where the environment variables
         * are available. Accepts `development`, `preview` and `production`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentEnvironments(@Nullable Output<List<String>> deploymentEnvironments) {
            $.deploymentEnvironments = deploymentEnvironments;
            return this;
        }

        /**
         * @param deploymentEnvironments Deployment environments where the environment variables
         * are available. Accepts `development`, `preview` and `production`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentEnvironments(List<String> deploymentEnvironments) {
            return deploymentEnvironments(Output.of(deploymentEnvironments));
        }

        /**
         * @param deploymentEnvironments Deployment environments where the environment variables
         * are available. Accepts `development`, `preview` and `production`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentEnvironments(String... deploymentEnvironments) {
            return deploymentEnvironments(List.of(deploymentEnvironments));
        }

        /**
         * @param name Unique name of the GitHub destination.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name of the GitHub destination.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param projectId Project ID where to manage environment variables.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID where to manage environment variables.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param secretNameTemplate Template describing how to generate external secret names.
         * Supports a subset of the Go Template syntax.
         * 
         * @return builder
         * 
         */
        public Builder secretNameTemplate(@Nullable Output<String> secretNameTemplate) {
            $.secretNameTemplate = secretNameTemplate;
            return this;
        }

        /**
         * @param secretNameTemplate Template describing how to generate external secret names.
         * Supports a subset of the Go Template syntax.
         * 
         * @return builder
         * 
         */
        public Builder secretNameTemplate(String secretNameTemplate) {
            return secretNameTemplate(Output.of(secretNameTemplate));
        }

        /**
         * @param teamId Team ID where to manage environment variables.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId Team ID where to manage environment variables.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param type The type of the secrets destination (`vercel-project`).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the secrets destination (`vercel-project`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SyncVercelDestinationState build() {
            return $;
        }
    }

}
