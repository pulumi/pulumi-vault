// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MfaOktaState extends com.pulumi.resources.ResourceArgs {

    public static final MfaOktaState Empty = new MfaOktaState();

    /**
     * `(string: &lt;required&gt;)` - Okta API key.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return `(string: &lt;required&gt;)` - Okta API key.
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * `(string)` - If set, will be used as the base domain for API requests. Examples are `okta.com`,
     * `oktapreview.com`, and `okta-emea.com`.
     * 
     */
    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    /**
     * @return `(string)` - If set, will be used as the base domain for API requests. Examples are `okta.com`,
     * `oktapreview.com`, and `okta-emea.com`.
     * 
     */
    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    /**
     * `(string: &lt;required&gt;)` - The mount to tie this method to for use in automatic mappings.
     * The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
     * 
     */
    @Import(name="mountAccessor")
    private @Nullable Output<String> mountAccessor;

    /**
     * @return `(string: &lt;required&gt;)` - The mount to tie this method to for use in automatic mappings.
     * The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
     * 
     */
    public Optional<Output<String>> mountAccessor() {
        return Optional.ofNullable(this.mountAccessor);
    }

    /**
     * `(string: &lt;required&gt;)` – Name of the MFA method.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return `(string: &lt;required&gt;)` – Name of the MFA method.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * `(string: &lt;required&gt;)` - Name of the organization to be used in the Okta API.
     * 
     */
    @Import(name="orgName")
    private @Nullable Output<String> orgName;

    /**
     * @return `(string: &lt;required&gt;)` - Name of the organization to be used in the Okta API.
     * 
     */
    public Optional<Output<String>> orgName() {
        return Optional.ofNullable(this.orgName);
    }

    /**
     * `(string: &lt;required&gt;)` - If set to true, the username will only match the
     * primary email for the account.
     * 
     */
    @Import(name="primaryEmail")
    private @Nullable Output<Boolean> primaryEmail;

    /**
     * @return `(string: &lt;required&gt;)` - If set to true, the username will only match the
     * primary email for the account.
     * 
     */
    public Optional<Output<Boolean>> primaryEmail() {
        return Optional.ofNullable(this.primaryEmail);
    }

    /**
     * `(string)` - A format string for mapping Identity names to MFA method names.
     * Values to substitute should be placed in `{{}}`. For example, `&#34;{{alias.name}}@example.com&#34;`.
     * If blank, the Alias&#39;s Name field will be used as-is. Currently-supported mappings:
     * - alias.name: The name returned by the mount configured via the `mount_accessor` parameter
     * - entity.name: The name configured for the Entity
     * - alias.metadata.`&lt;key&gt;`: The value of the Alias&#39;s metadata parameter
     * - entity.metadata.`&lt;key&gt;`: The value of the Entity&#39;s metadata parameter
     * 
     */
    @Import(name="usernameFormat")
    private @Nullable Output<String> usernameFormat;

    /**
     * @return `(string)` - A format string for mapping Identity names to MFA method names.
     * Values to substitute should be placed in `{{}}`. For example, `&#34;{{alias.name}}@example.com&#34;`.
     * If blank, the Alias&#39;s Name field will be used as-is. Currently-supported mappings:
     * - alias.name: The name returned by the mount configured via the `mount_accessor` parameter
     * - entity.name: The name configured for the Entity
     * - alias.metadata.`&lt;key&gt;`: The value of the Alias&#39;s metadata parameter
     * - entity.metadata.`&lt;key&gt;`: The value of the Entity&#39;s metadata parameter
     * 
     */
    public Optional<Output<String>> usernameFormat() {
        return Optional.ofNullable(this.usernameFormat);
    }

    private MfaOktaState() {}

    private MfaOktaState(MfaOktaState $) {
        this.apiToken = $.apiToken;
        this.baseUrl = $.baseUrl;
        this.mountAccessor = $.mountAccessor;
        this.name = $.name;
        this.namespace = $.namespace;
        this.orgName = $.orgName;
        this.primaryEmail = $.primaryEmail;
        this.usernameFormat = $.usernameFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MfaOktaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MfaOktaState $;

        public Builder() {
            $ = new MfaOktaState();
        }

        public Builder(MfaOktaState defaults) {
            $ = new MfaOktaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken `(string: &lt;required&gt;)` - Okta API key.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken `(string: &lt;required&gt;)` - Okta API key.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param baseUrl `(string)` - If set, will be used as the base domain for API requests. Examples are `okta.com`,
         * `oktapreview.com`, and `okta-emea.com`.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl `(string)` - If set, will be used as the base domain for API requests. Examples are `okta.com`,
         * `oktapreview.com`, and `okta-emea.com`.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param mountAccessor `(string: &lt;required&gt;)` - The mount to tie this method to for use in automatic mappings.
         * The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(@Nullable Output<String> mountAccessor) {
            $.mountAccessor = mountAccessor;
            return this;
        }

        /**
         * @param mountAccessor `(string: &lt;required&gt;)` - The mount to tie this method to for use in automatic mappings.
         * The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(String mountAccessor) {
            return mountAccessor(Output.of(mountAccessor));
        }

        /**
         * @param name `(string: &lt;required&gt;)` – Name of the MFA method.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name `(string: &lt;required&gt;)` – Name of the MFA method.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param orgName `(string: &lt;required&gt;)` - Name of the organization to be used in the Okta API.
         * 
         * @return builder
         * 
         */
        public Builder orgName(@Nullable Output<String> orgName) {
            $.orgName = orgName;
            return this;
        }

        /**
         * @param orgName `(string: &lt;required&gt;)` - Name of the organization to be used in the Okta API.
         * 
         * @return builder
         * 
         */
        public Builder orgName(String orgName) {
            return orgName(Output.of(orgName));
        }

        /**
         * @param primaryEmail `(string: &lt;required&gt;)` - If set to true, the username will only match the
         * primary email for the account.
         * 
         * @return builder
         * 
         */
        public Builder primaryEmail(@Nullable Output<Boolean> primaryEmail) {
            $.primaryEmail = primaryEmail;
            return this;
        }

        /**
         * @param primaryEmail `(string: &lt;required&gt;)` - If set to true, the username will only match the
         * primary email for the account.
         * 
         * @return builder
         * 
         */
        public Builder primaryEmail(Boolean primaryEmail) {
            return primaryEmail(Output.of(primaryEmail));
        }

        /**
         * @param usernameFormat `(string)` - A format string for mapping Identity names to MFA method names.
         * Values to substitute should be placed in `{{}}`. For example, `&#34;{{alias.name}}@example.com&#34;`.
         * If blank, the Alias&#39;s Name field will be used as-is. Currently-supported mappings:
         * - alias.name: The name returned by the mount configured via the `mount_accessor` parameter
         * - entity.name: The name configured for the Entity
         * - alias.metadata.`&lt;key&gt;`: The value of the Alias&#39;s metadata parameter
         * - entity.metadata.`&lt;key&gt;`: The value of the Entity&#39;s metadata parameter
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(@Nullable Output<String> usernameFormat) {
            $.usernameFormat = usernameFormat;
            return this;
        }

        /**
         * @param usernameFormat `(string)` - A format string for mapping Identity names to MFA method names.
         * Values to substitute should be placed in `{{}}`. For example, `&#34;{{alias.name}}@example.com&#34;`.
         * If blank, the Alias&#39;s Name field will be used as-is. Currently-supported mappings:
         * - alias.name: The name returned by the mount configured via the `mount_accessor` parameter
         * - entity.name: The name configured for the Entity
         * - alias.metadata.`&lt;key&gt;`: The value of the Alias&#39;s metadata parameter
         * - entity.metadata.`&lt;key&gt;`: The value of the Entity&#39;s metadata parameter
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(String usernameFormat) {
            return usernameFormat(Output.of(usernameFormat));
        }

        public MfaOktaState build() {
            return $;
        }
    }

}
