// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MfaDuoArgs extends com.pulumi.resources.ResourceArgs {

    public static final MfaDuoArgs Empty = new MfaDuoArgs();

    /**
     * API hostname for Duo
     * 
     */
    @Import(name="apiHostname", required=true)
    private Output<String> apiHostname;

    /**
     * @return API hostname for Duo
     * 
     */
    public Output<String> apiHostname() {
        return this.apiHostname;
    }

    /**
     * Integration key for Duo
     * 
     */
    @Import(name="integrationKey", required=true)
    private Output<String> integrationKey;

    /**
     * @return Integration key for Duo
     * 
     */
    public Output<String> integrationKey() {
        return this.integrationKey;
    }

    /**
     * Target namespace. (requires Enterprise)
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Target namespace. (requires Enterprise)
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Push information for Duo.
     * 
     */
    @Import(name="pushInfo")
    private @Nullable Output<String> pushInfo;

    /**
     * @return Push information for Duo.
     * 
     */
    public Optional<Output<String>> pushInfo() {
        return Optional.ofNullable(this.pushInfo);
    }

    /**
     * Secret key for Duo
     * 
     */
    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    /**
     * @return Secret key for Duo
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }

    /**
     * Require passcode upon MFA validation.
     * 
     */
    @Import(name="usePasscode")
    private @Nullable Output<Boolean> usePasscode;

    /**
     * @return Require passcode upon MFA validation.
     * 
     */
    public Optional<Output<Boolean>> usePasscode() {
        return Optional.ofNullable(this.usePasscode);
    }

    /**
     * A template string for mapping Identity names to MFA methods.
     * 
     */
    @Import(name="usernameFormat")
    private @Nullable Output<String> usernameFormat;

    /**
     * @return A template string for mapping Identity names to MFA methods.
     * 
     */
    public Optional<Output<String>> usernameFormat() {
        return Optional.ofNullable(this.usernameFormat);
    }

    private MfaDuoArgs() {}

    private MfaDuoArgs(MfaDuoArgs $) {
        this.apiHostname = $.apiHostname;
        this.integrationKey = $.integrationKey;
        this.namespace = $.namespace;
        this.pushInfo = $.pushInfo;
        this.secretKey = $.secretKey;
        this.usePasscode = $.usePasscode;
        this.usernameFormat = $.usernameFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MfaDuoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MfaDuoArgs $;

        public Builder() {
            $ = new MfaDuoArgs();
        }

        public Builder(MfaDuoArgs defaults) {
            $ = new MfaDuoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiHostname API hostname for Duo
         * 
         * @return builder
         * 
         */
        public Builder apiHostname(Output<String> apiHostname) {
            $.apiHostname = apiHostname;
            return this;
        }

        /**
         * @param apiHostname API hostname for Duo
         * 
         * @return builder
         * 
         */
        public Builder apiHostname(String apiHostname) {
            return apiHostname(Output.of(apiHostname));
        }

        /**
         * @param integrationKey Integration key for Duo
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        /**
         * @param integrationKey Integration key for Duo
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param pushInfo Push information for Duo.
         * 
         * @return builder
         * 
         */
        public Builder pushInfo(@Nullable Output<String> pushInfo) {
            $.pushInfo = pushInfo;
            return this;
        }

        /**
         * @param pushInfo Push information for Duo.
         * 
         * @return builder
         * 
         */
        public Builder pushInfo(String pushInfo) {
            return pushInfo(Output.of(pushInfo));
        }

        /**
         * @param secretKey Secret key for Duo
         * 
         * @return builder
         * 
         */
        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Secret key for Duo
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param usePasscode Require passcode upon MFA validation.
         * 
         * @return builder
         * 
         */
        public Builder usePasscode(@Nullable Output<Boolean> usePasscode) {
            $.usePasscode = usePasscode;
            return this;
        }

        /**
         * @param usePasscode Require passcode upon MFA validation.
         * 
         * @return builder
         * 
         */
        public Builder usePasscode(Boolean usePasscode) {
            return usePasscode(Output.of(usePasscode));
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(@Nullable Output<String> usernameFormat) {
            $.usernameFormat = usernameFormat;
            return this;
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(String usernameFormat) {
            return usernameFormat(Output.of(usernameFormat));
        }

        public MfaDuoArgs build() {
            if ($.apiHostname == null) {
                throw new MissingRequiredPropertyException("MfaDuoArgs", "apiHostname");
            }
            if ($.integrationKey == null) {
                throw new MissingRequiredPropertyException("MfaDuoArgs", "integrationKey");
            }
            if ($.secretKey == null) {
                throw new MissingRequiredPropertyException("MfaDuoArgs", "secretKey");
            }
            return $;
        }
    }

}
