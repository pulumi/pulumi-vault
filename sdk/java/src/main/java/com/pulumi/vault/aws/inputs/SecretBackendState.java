// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendState extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendState Empty = new SecretBackendState();

    /**
     * The AWS Access Key ID this backend should use to
     * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The AWS Access Key ID this backend should use to
     * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The default TTL for credentials
     * issued by this backend.
     * 
     */
    @Import(name="defaultLeaseTtlSeconds")
    private @Nullable Output<Integer> defaultLeaseTtlSeconds;

    /**
     * @return The default TTL for credentials
     * issued by this backend.
     * 
     */
    public Optional<Output<Integer>> defaultLeaseTtlSeconds() {
        return Optional.ofNullable(this.defaultLeaseTtlSeconds);
    }

    /**
     * A human-friendly description for this backend.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-friendly description for this backend.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     * 
     */
    @Import(name="disableRemount")
    private @Nullable Output<Boolean> disableRemount;

    /**
     * @return If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     * 
     */
    public Optional<Output<Boolean>> disableRemount() {
        return Optional.ofNullable(this.disableRemount);
    }

    /**
     * Specifies a custom HTTP IAM endpoint to use.
     * 
     */
    @Import(name="iamEndpoint")
    private @Nullable Output<String> iamEndpoint;

    /**
     * @return Specifies a custom HTTP IAM endpoint to use.
     * 
     */
    public Optional<Output<String>> iamEndpoint() {
        return Optional.ofNullable(this.iamEndpoint);
    }

    /**
     * The audience claim value. Requires Vault 1.16+.
     * 
     */
    @Import(name="identityTokenAudience")
    private @Nullable Output<String> identityTokenAudience;

    /**
     * @return The audience claim value. Requires Vault 1.16+.
     * 
     */
    public Optional<Output<String>> identityTokenAudience() {
        return Optional.ofNullable(this.identityTokenAudience);
    }

    /**
     * The key to use for signing identity tokens. Requires Vault 1.16+.
     * 
     */
    @Import(name="identityTokenKey")
    private @Nullable Output<String> identityTokenKey;

    /**
     * @return The key to use for signing identity tokens. Requires Vault 1.16+.
     * 
     */
    public Optional<Output<String>> identityTokenKey() {
        return Optional.ofNullable(this.identityTokenKey);
    }

    /**
     * The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
     * 
     */
    @Import(name="identityTokenTtl")
    private @Nullable Output<Integer> identityTokenTtl;

    /**
     * @return The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
     * 
     */
    public Optional<Output<Integer>> identityTokenTtl() {
        return Optional.ofNullable(this.identityTokenTtl);
    }

    /**
     * Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas.
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas.
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * The maximum TTL that can be requested
     * for credentials issued by this backend.
     * 
     */
    @Import(name="maxLeaseTtlSeconds")
    private @Nullable Output<Integer> maxLeaseTtlSeconds;

    /**
     * @return The maximum TTL that can be requested
     * for credentials issued by this backend.
     * 
     */
    public Optional<Output<Integer>> maxLeaseTtlSeconds() {
        return Optional.ofNullable(this.maxLeaseTtlSeconds);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The AWS region to make API calls against. Defaults to us-east-1.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The AWS region to make API calls against. Defaults to us-east-1.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * The AWS Secret Access Key to use when generating new credentials.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return The AWS Secret Access Key to use when generating new credentials.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Specifies a custom HTTP STS endpoint to use.
     * 
     */
    @Import(name="stsEndpoint")
    private @Nullable Output<String> stsEndpoint;

    /**
     * @return Specifies a custom HTTP STS endpoint to use.
     * 
     */
    public Optional<Output<String>> stsEndpoint() {
        return Optional.ofNullable(this.stsEndpoint);
    }

    /**
     * Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
     * 
     */
    @Import(name="usernameTemplate")
    private @Nullable Output<String> usernameTemplate;

    /**
     * @return Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
     * 
     */
    public Optional<Output<String>> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    private SecretBackendState() {}

    private SecretBackendState(SecretBackendState $) {
        this.accessKey = $.accessKey;
        this.defaultLeaseTtlSeconds = $.defaultLeaseTtlSeconds;
        this.description = $.description;
        this.disableRemount = $.disableRemount;
        this.iamEndpoint = $.iamEndpoint;
        this.identityTokenAudience = $.identityTokenAudience;
        this.identityTokenKey = $.identityTokenKey;
        this.identityTokenTtl = $.identityTokenTtl;
        this.local = $.local;
        this.maxLeaseTtlSeconds = $.maxLeaseTtlSeconds;
        this.namespace = $.namespace;
        this.path = $.path;
        this.region = $.region;
        this.roleArn = $.roleArn;
        this.secretKey = $.secretKey;
        this.stsEndpoint = $.stsEndpoint;
        this.usernameTemplate = $.usernameTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendState $;

        public Builder() {
            $ = new SecretBackendState();
        }

        public Builder(SecretBackendState defaults) {
            $ = new SecretBackendState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The AWS Access Key ID this backend should use to
         * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The AWS Access Key ID this backend should use to
         * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param defaultLeaseTtlSeconds The default TTL for credentials
         * issued by this backend.
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(@Nullable Output<Integer> defaultLeaseTtlSeconds) {
            $.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            return this;
        }

        /**
         * @param defaultLeaseTtlSeconds The default TTL for credentials
         * issued by this backend.
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(Integer defaultLeaseTtlSeconds) {
            return defaultLeaseTtlSeconds(Output.of(defaultLeaseTtlSeconds));
        }

        /**
         * @param description A human-friendly description for this backend.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-friendly description for this backend.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(@Nullable Output<Boolean> disableRemount) {
            $.disableRemount = disableRemount;
            return this;
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(Boolean disableRemount) {
            return disableRemount(Output.of(disableRemount));
        }

        /**
         * @param iamEndpoint Specifies a custom HTTP IAM endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder iamEndpoint(@Nullable Output<String> iamEndpoint) {
            $.iamEndpoint = iamEndpoint;
            return this;
        }

        /**
         * @param iamEndpoint Specifies a custom HTTP IAM endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder iamEndpoint(String iamEndpoint) {
            return iamEndpoint(Output.of(iamEndpoint));
        }

        /**
         * @param identityTokenAudience The audience claim value. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenAudience(@Nullable Output<String> identityTokenAudience) {
            $.identityTokenAudience = identityTokenAudience;
            return this;
        }

        /**
         * @param identityTokenAudience The audience claim value. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenAudience(String identityTokenAudience) {
            return identityTokenAudience(Output.of(identityTokenAudience));
        }

        /**
         * @param identityTokenKey The key to use for signing identity tokens. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenKey(@Nullable Output<String> identityTokenKey) {
            $.identityTokenKey = identityTokenKey;
            return this;
        }

        /**
         * @param identityTokenKey The key to use for signing identity tokens. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenKey(String identityTokenKey) {
            return identityTokenKey(Output.of(identityTokenKey));
        }

        /**
         * @param identityTokenTtl The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenTtl(@Nullable Output<Integer> identityTokenTtl) {
            $.identityTokenTtl = identityTokenTtl;
            return this;
        }

        /**
         * @param identityTokenTtl The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenTtl(Integer identityTokenTtl) {
            return identityTokenTtl(Output.of(identityTokenTtl));
        }

        /**
         * @param local Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas.
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas.
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param maxLeaseTtlSeconds The maximum TTL that can be requested
         * for credentials issued by this backend.
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(@Nullable Output<Integer> maxLeaseTtlSeconds) {
            $.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            return this;
        }

        /**
         * @param maxLeaseTtlSeconds The maximum TTL that can be requested
         * for credentials issued by this backend.
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(Integer maxLeaseTtlSeconds) {
            return maxLeaseTtlSeconds(Output.of(maxLeaseTtlSeconds));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param region The AWS region to make API calls against. Defaults to us-east-1.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS region to make API calls against. Defaults to us-east-1.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param roleArn Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param secretKey The AWS Secret Access Key to use when generating new credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The AWS Secret Access Key to use when generating new credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param stsEndpoint Specifies a custom HTTP STS endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder stsEndpoint(@Nullable Output<String> stsEndpoint) {
            $.stsEndpoint = stsEndpoint;
            return this;
        }

        /**
         * @param stsEndpoint Specifies a custom HTTP STS endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder stsEndpoint(String stsEndpoint) {
            return stsEndpoint(Output.of(stsEndpoint));
        }

        /**
         * @param usernameTemplate Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(@Nullable Output<String> usernameTemplate) {
            $.usernameTemplate = usernameTemplate;
            return this;
        }

        /**
         * @param usernameTemplate Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(String usernameTemplate) {
            return usernameTemplate(Output.of(usernameTemplate));
        }

        public SecretBackendState build() {
            return $;
        }
    }

}
