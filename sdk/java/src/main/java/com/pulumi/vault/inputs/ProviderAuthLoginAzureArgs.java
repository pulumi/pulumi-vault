// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderAuthLoginAzureArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderAuthLoginAzureArgs Empty = new ProviderAuthLoginAzureArgs();

    /**
     * The identity&#39;s client ID.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The identity&#39;s client ID.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * A signed JSON Web Token. If not specified on will be created automatically
     * 
     */
    @Import(name="jwt")
    private @Nullable Output<String> jwt;

    /**
     * @return A signed JSON Web Token. If not specified on will be created automatically
     * 
     */
    public Optional<Output<String>> jwt() {
        return Optional.ofNullable(this.jwt);
    }

    /**
     * The path where the authentication engine is mounted.
     * 
     */
    @Import(name="mount")
    private @Nullable Output<String> mount;

    /**
     * @return The path where the authentication engine is mounted.
     * 
     */
    public Optional<Output<String>> mount() {
        return Optional.ofNullable(this.mount);
    }

    /**
     * The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the login role.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return Name of the login role.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * The scopes to include in the token request.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scopes to include in the token request.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Provides the tenant ID to use in a multi-tenant authentication scenario.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Provides the tenant ID to use in a multi-tenant authentication scenario.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    @Import(name="useRootNamespace")
    private @Nullable Output<Boolean> useRootNamespace;

    /**
     * @return Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    public Optional<Output<Boolean>> useRootNamespace() {
        return Optional.ofNullable(this.useRootNamespace);
    }

    /**
     * The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    @Import(name="vmName")
    private @Nullable Output<String> vmName;

    /**
     * @return The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public Optional<Output<String>> vmName() {
        return Optional.ofNullable(this.vmName);
    }

    /**
     * The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    @Import(name="vmssName")
    private @Nullable Output<String> vmssName;

    /**
     * @return The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public Optional<Output<String>> vmssName() {
        return Optional.ofNullable(this.vmssName);
    }

    private ProviderAuthLoginAzureArgs() {}

    private ProviderAuthLoginAzureArgs(ProviderAuthLoginAzureArgs $) {
        this.clientId = $.clientId;
        this.jwt = $.jwt;
        this.mount = $.mount;
        this.namespace = $.namespace;
        this.resourceGroupName = $.resourceGroupName;
        this.role = $.role;
        this.scope = $.scope;
        this.subscriptionId = $.subscriptionId;
        this.tenantId = $.tenantId;
        this.useRootNamespace = $.useRootNamespace;
        this.vmName = $.vmName;
        this.vmssName = $.vmssName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderAuthLoginAzureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderAuthLoginAzureArgs $;

        public Builder() {
            $ = new ProviderAuthLoginAzureArgs();
        }

        public Builder(ProviderAuthLoginAzureArgs defaults) {
            $ = new ProviderAuthLoginAzureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The identity&#39;s client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The identity&#39;s client ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param jwt A signed JSON Web Token. If not specified on will be created automatically
         * 
         * @return builder
         * 
         */
        public Builder jwt(@Nullable Output<String> jwt) {
            $.jwt = jwt;
            return this;
        }

        /**
         * @param jwt A signed JSON Web Token. If not specified on will be created automatically
         * 
         * @return builder
         * 
         */
        public Builder jwt(String jwt) {
            return jwt(Output.of(jwt));
        }

        /**
         * @param mount The path where the authentication engine is mounted.
         * 
         * @return builder
         * 
         */
        public Builder mount(@Nullable Output<String> mount) {
            $.mount = mount;
            return this;
        }

        /**
         * @param mount The path where the authentication engine is mounted.
         * 
         * @return builder
         * 
         */
        public Builder mount(String mount) {
            return mount(Output.of(mount));
        }

        /**
         * @param namespace The authentication engine&#39;s namespace. Conflicts with use_root_namespace
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The authentication engine&#39;s namespace. Conflicts with use_root_namespace
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resourceGroupName The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param role Name of the login role.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Name of the login role.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param scope The scopes to include in the token request.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scopes to include in the token request.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param subscriptionId The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tenantId Provides the tenant ID to use in a multi-tenant authentication scenario.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Provides the tenant ID to use in a multi-tenant authentication scenario.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param useRootNamespace Authenticate to the root Vault namespace. Conflicts with namespace
         * 
         * @return builder
         * 
         */
        public Builder useRootNamespace(@Nullable Output<Boolean> useRootNamespace) {
            $.useRootNamespace = useRootNamespace;
            return this;
        }

        /**
         * @param useRootNamespace Authenticate to the root Vault namespace. Conflicts with namespace
         * 
         * @return builder
         * 
         */
        public Builder useRootNamespace(Boolean useRootNamespace) {
            return useRootNamespace(Output.of(useRootNamespace));
        }

        /**
         * @param vmName The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder vmName(@Nullable Output<String> vmName) {
            $.vmName = vmName;
            return this;
        }

        /**
         * @param vmName The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder vmName(String vmName) {
            return vmName(Output.of(vmName));
        }

        /**
         * @param vmssName The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder vmssName(@Nullable Output<String> vmssName) {
            $.vmssName = vmssName;
            return this;
        }

        /**
         * @param vmssName The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
         * 
         * @return builder
         * 
         */
        public Builder vmssName(String vmssName) {
            return vmssName(Output.of(vmssName));
        }

        public ProviderAuthLoginAzureArgs build() {
            if ($.resourceGroupName == null) {
                throw new MissingRequiredPropertyException("ProviderAuthLoginAzureArgs", "resourceGroupName");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("ProviderAuthLoginAzureArgs", "role");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("ProviderAuthLoginAzureArgs", "subscriptionId");
            }
            return $;
        }
    }

}
