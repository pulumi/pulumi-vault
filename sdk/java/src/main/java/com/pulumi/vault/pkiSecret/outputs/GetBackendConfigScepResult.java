// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vault.pkiSecret.outputs.GetBackendConfigScepAuthenticator;
import com.pulumi.vault.pkiSecret.outputs.GetBackendConfigScepExternalValidation;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackendConfigScepResult {
    /**
     * @return List of allowed digest algorithms for SCEP requests.
     * 
     */
    private List<String> allowedDigestAlgorithms;
    /**
     * @return List of allowed encryption algorithms for SCEP requests.
     * 
     */
    private List<String> allowedEncryptionAlgorithms;
    /**
     * @return Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     * 
     */
    private List<GetBackendConfigScepAuthenticator> authenticators;
    private String backend;
    /**
     * @return Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
     * 
     */
    private String defaultPathPolicy;
    /**
     * @return Specifies whether SCEP is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return Lists the 3rd party validation of SCEP requests (see below for nested schema).
     * 
     */
    private List<GetBackendConfigScepExternalValidation> externalValidations;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A read-only timestamp representing the last time the configuration was updated.
     * 
     */
    private String lastUpdated;
    /**
     * @return The level of logging verbosity, affects only SCEP logs on this mount.
     * 
     */
    private @Nullable String logLevel;
    private @Nullable String namespace;
    /**
     * @return If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     * 
     */
    private Boolean restrictCaChainToIssuer;

    private GetBackendConfigScepResult() {}
    /**
     * @return List of allowed digest algorithms for SCEP requests.
     * 
     */
    public List<String> allowedDigestAlgorithms() {
        return this.allowedDigestAlgorithms;
    }
    /**
     * @return List of allowed encryption algorithms for SCEP requests.
     * 
     */
    public List<String> allowedEncryptionAlgorithms() {
        return this.allowedEncryptionAlgorithms;
    }
    /**
     * @return Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     * 
     */
    public List<GetBackendConfigScepAuthenticator> authenticators() {
        return this.authenticators;
    }
    public String backend() {
        return this.backend;
    }
    /**
     * @return Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
     * 
     */
    public String defaultPathPolicy() {
        return this.defaultPathPolicy;
    }
    /**
     * @return Specifies whether SCEP is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Lists the 3rd party validation of SCEP requests (see below for nested schema).
     * 
     */
    public List<GetBackendConfigScepExternalValidation> externalValidations() {
        return this.externalValidations;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A read-only timestamp representing the last time the configuration was updated.
     * 
     */
    public String lastUpdated() {
        return this.lastUpdated;
    }
    /**
     * @return The level of logging verbosity, affects only SCEP logs on this mount.
     * 
     */
    public Optional<String> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     * 
     */
    public Boolean restrictCaChainToIssuer() {
        return this.restrictCaChainToIssuer;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendConfigScepResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedDigestAlgorithms;
        private List<String> allowedEncryptionAlgorithms;
        private List<GetBackendConfigScepAuthenticator> authenticators;
        private String backend;
        private String defaultPathPolicy;
        private Boolean enabled;
        private List<GetBackendConfigScepExternalValidation> externalValidations;
        private String id;
        private String lastUpdated;
        private @Nullable String logLevel;
        private @Nullable String namespace;
        private Boolean restrictCaChainToIssuer;
        public Builder() {}
        public Builder(GetBackendConfigScepResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedDigestAlgorithms = defaults.allowedDigestAlgorithms;
    	      this.allowedEncryptionAlgorithms = defaults.allowedEncryptionAlgorithms;
    	      this.authenticators = defaults.authenticators;
    	      this.backend = defaults.backend;
    	      this.defaultPathPolicy = defaults.defaultPathPolicy;
    	      this.enabled = defaults.enabled;
    	      this.externalValidations = defaults.externalValidations;
    	      this.id = defaults.id;
    	      this.lastUpdated = defaults.lastUpdated;
    	      this.logLevel = defaults.logLevel;
    	      this.namespace = defaults.namespace;
    	      this.restrictCaChainToIssuer = defaults.restrictCaChainToIssuer;
        }

        @CustomType.Setter
        public Builder allowedDigestAlgorithms(List<String> allowedDigestAlgorithms) {
            if (allowedDigestAlgorithms == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "allowedDigestAlgorithms");
            }
            this.allowedDigestAlgorithms = allowedDigestAlgorithms;
            return this;
        }
        public Builder allowedDigestAlgorithms(String... allowedDigestAlgorithms) {
            return allowedDigestAlgorithms(List.of(allowedDigestAlgorithms));
        }
        @CustomType.Setter
        public Builder allowedEncryptionAlgorithms(List<String> allowedEncryptionAlgorithms) {
            if (allowedEncryptionAlgorithms == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "allowedEncryptionAlgorithms");
            }
            this.allowedEncryptionAlgorithms = allowedEncryptionAlgorithms;
            return this;
        }
        public Builder allowedEncryptionAlgorithms(String... allowedEncryptionAlgorithms) {
            return allowedEncryptionAlgorithms(List.of(allowedEncryptionAlgorithms));
        }
        @CustomType.Setter
        public Builder authenticators(List<GetBackendConfigScepAuthenticator> authenticators) {
            if (authenticators == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "authenticators");
            }
            this.authenticators = authenticators;
            return this;
        }
        public Builder authenticators(GetBackendConfigScepAuthenticator... authenticators) {
            return authenticators(List.of(authenticators));
        }
        @CustomType.Setter
        public Builder backend(String backend) {
            if (backend == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "backend");
            }
            this.backend = backend;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPathPolicy(String defaultPathPolicy) {
            if (defaultPathPolicy == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "defaultPathPolicy");
            }
            this.defaultPathPolicy = defaultPathPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder externalValidations(List<GetBackendConfigScepExternalValidation> externalValidations) {
            if (externalValidations == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "externalValidations");
            }
            this.externalValidations = externalValidations;
            return this;
        }
        public Builder externalValidations(GetBackendConfigScepExternalValidation... externalValidations) {
            return externalValidations(List.of(externalValidations));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdated(String lastUpdated) {
            if (lastUpdated == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "lastUpdated");
            }
            this.lastUpdated = lastUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder logLevel(@Nullable String logLevel) {

            this.logLevel = logLevel;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder restrictCaChainToIssuer(Boolean restrictCaChainToIssuer) {
            if (restrictCaChainToIssuer == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigScepResult", "restrictCaChainToIssuer");
            }
            this.restrictCaChainToIssuer = restrictCaChainToIssuer;
            return this;
        }
        public GetBackendConfigScepResult build() {
            final var _resultValue = new GetBackendConfigScepResult();
            _resultValue.allowedDigestAlgorithms = allowedDigestAlgorithms;
            _resultValue.allowedEncryptionAlgorithms = allowedEncryptionAlgorithms;
            _resultValue.authenticators = authenticators;
            _resultValue.backend = backend;
            _resultValue.defaultPathPolicy = defaultPathPolicy;
            _resultValue.enabled = enabled;
            _resultValue.externalValidations = externalValidations;
            _resultValue.id = id;
            _resultValue.lastUpdated = lastUpdated;
            _resultValue.logLevel = logLevel;
            _resultValue.namespace = namespace;
            _resultValue.restrictCaChainToIssuer = restrictCaChainToIssuer;
            return _resultValue;
        }
    }
}
