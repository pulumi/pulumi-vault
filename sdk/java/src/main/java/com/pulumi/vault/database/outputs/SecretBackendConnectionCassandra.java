// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretBackendConnectionCassandra {
    /**
     * @return The number of seconds to use as a connection
     * timeout.
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return The hosts to connect to.
     * 
     */
    private @Nullable List<String> hosts;
    /**
     * @return Whether to skip verification of the server
     * certificate when using TLS.
     * 
     */
    private @Nullable Boolean insecureTls;
    /**
     * @return The password to authenticate with.
     * 
     */
    private @Nullable String password;
    /**
     * @return Concatenated PEM blocks configuring the certificate
     * chain.
     * 
     */
    private @Nullable String pemBundle;
    /**
     * @return A JSON structure configuring the certificate chain.
     * 
     */
    private @Nullable String pemJson;
    /**
     * @return The default port to connect to if no port is specified as
     * part of the host.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return The CQL protocol version to use.
     * 
     */
    private @Nullable Integer protocolVersion;
    /**
     * @return Whether to use TLS when connecting to Cassandra.
     * 
     */
    private @Nullable Boolean tls;
    /**
     * @return The username to authenticate with.
     * 
     */
    private @Nullable String username;

    private SecretBackendConnectionCassandra() {}
    /**
     * @return The number of seconds to use as a connection
     * timeout.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return The hosts to connect to.
     * 
     */
    public List<String> hosts() {
        return this.hosts == null ? List.of() : this.hosts;
    }
    /**
     * @return Whether to skip verification of the server
     * certificate when using TLS.
     * 
     */
    public Optional<Boolean> insecureTls() {
        return Optional.ofNullable(this.insecureTls);
    }
    /**
     * @return The password to authenticate with.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Concatenated PEM blocks configuring the certificate
     * chain.
     * 
     */
    public Optional<String> pemBundle() {
        return Optional.ofNullable(this.pemBundle);
    }
    /**
     * @return A JSON structure configuring the certificate chain.
     * 
     */
    public Optional<String> pemJson() {
        return Optional.ofNullable(this.pemJson);
    }
    /**
     * @return The default port to connect to if no port is specified as
     * part of the host.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The CQL protocol version to use.
     * 
     */
    public Optional<Integer> protocolVersion() {
        return Optional.ofNullable(this.protocolVersion);
    }
    /**
     * @return Whether to use TLS when connecting to Cassandra.
     * 
     */
    public Optional<Boolean> tls() {
        return Optional.ofNullable(this.tls);
    }
    /**
     * @return The username to authenticate with.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretBackendConnectionCassandra defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer connectTimeout;
        private @Nullable List<String> hosts;
        private @Nullable Boolean insecureTls;
        private @Nullable String password;
        private @Nullable String pemBundle;
        private @Nullable String pemJson;
        private @Nullable Integer port;
        private @Nullable Integer protocolVersion;
        private @Nullable Boolean tls;
        private @Nullable String username;
        public Builder() {}
        public Builder(SecretBackendConnectionCassandra defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.hosts = defaults.hosts;
    	      this.insecureTls = defaults.insecureTls;
    	      this.password = defaults.password;
    	      this.pemBundle = defaults.pemBundle;
    	      this.pemJson = defaults.pemJson;
    	      this.port = defaults.port;
    	      this.protocolVersion = defaults.protocolVersion;
    	      this.tls = defaults.tls;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(@Nullable List<String> hosts) {

            this.hosts = hosts;
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder insecureTls(@Nullable Boolean insecureTls) {

            this.insecureTls = insecureTls;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder pemBundle(@Nullable String pemBundle) {

            this.pemBundle = pemBundle;
            return this;
        }
        @CustomType.Setter
        public Builder pemJson(@Nullable String pemJson) {

            this.pemJson = pemJson;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocolVersion(@Nullable Integer protocolVersion) {

            this.protocolVersion = protocolVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tls(@Nullable Boolean tls) {

            this.tls = tls;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public SecretBackendConnectionCassandra build() {
            final var _resultValue = new SecretBackendConnectionCassandra();
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.hosts = hosts;
            _resultValue.insecureTls = insecureTls;
            _resultValue.password = password;
            _resultValue.pemBundle = pemBundle;
            _resultValue.pemJson = pemJson;
            _resultValue.port = port;
            _resultValue.protocolVersion = protocolVersion;
            _resultValue.tls = tls;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
