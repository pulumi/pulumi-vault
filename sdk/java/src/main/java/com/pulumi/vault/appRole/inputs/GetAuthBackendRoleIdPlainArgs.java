// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.appRole.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAuthBackendRoleIdPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAuthBackendRoleIdPlainArgs Empty = new GetAuthBackendRoleIdPlainArgs();

    /**
     * The unique name for the AppRole backend the role to
     * retrieve a RoleID for resides in. Defaults to &#34;approle&#34;.
     * 
     */
    @Import(name="backend")
    private @Nullable String backend;

    /**
     * @return The unique name for the AppRole backend the role to
     * retrieve a RoleID for resides in. Defaults to &#34;approle&#34;.
     * 
     */
    public Optional<String> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable String namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The name of the role to retrieve the Role ID for.
     * 
     */
    @Import(name="roleName", required=true)
    private String roleName;

    /**
     * @return The name of the role to retrieve the Role ID for.
     * 
     */
    public String roleName() {
        return this.roleName;
    }

    private GetAuthBackendRoleIdPlainArgs() {}

    private GetAuthBackendRoleIdPlainArgs(GetAuthBackendRoleIdPlainArgs $) {
        this.backend = $.backend;
        this.namespace = $.namespace;
        this.roleName = $.roleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAuthBackendRoleIdPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAuthBackendRoleIdPlainArgs $;

        public Builder() {
            $ = new GetAuthBackendRoleIdPlainArgs();
        }

        public Builder(GetAuthBackendRoleIdPlainArgs defaults) {
            $ = new GetAuthBackendRoleIdPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The unique name for the AppRole backend the role to
         * retrieve a RoleID for resides in. Defaults to &#34;approle&#34;.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable String backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured namespace.
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param roleName The name of the role to retrieve the Role ID for.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            $.roleName = roleName;
            return this;
        }

        public GetAuthBackendRoleIdPlainArgs build() {
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("GetAuthBackendRoleIdPlainArgs", "roleName");
            }
            return $;
        }
    }

}
