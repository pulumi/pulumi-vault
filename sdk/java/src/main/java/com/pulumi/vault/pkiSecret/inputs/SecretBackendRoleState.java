// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendRoleState extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendRoleState Empty = new SecretBackendRoleState();

    /**
     * Flag to allow any name
     * 
     */
    @Import(name="allowAnyName")
    private @Nullable Output<Boolean> allowAnyName;

    /**
     * @return Flag to allow any name
     * 
     */
    public Optional<Output<Boolean>> allowAnyName() {
        return Optional.ofNullable(this.allowAnyName);
    }

    /**
     * Flag to allow certificates matching the actual domain
     * 
     */
    @Import(name="allowBareDomains")
    private @Nullable Output<Boolean> allowBareDomains;

    /**
     * @return Flag to allow certificates matching the actual domain
     * 
     */
    public Optional<Output<Boolean>> allowBareDomains() {
        return Optional.ofNullable(this.allowBareDomains);
    }

    /**
     * Flag to allow names containing glob patterns.
     * 
     */
    @Import(name="allowGlobDomains")
    private @Nullable Output<Boolean> allowGlobDomains;

    /**
     * @return Flag to allow names containing glob patterns.
     * 
     */
    public Optional<Output<Boolean>> allowGlobDomains() {
        return Optional.ofNullable(this.allowGlobDomains);
    }

    /**
     * Flag to allow IP SANs
     * 
     */
    @Import(name="allowIpSans")
    private @Nullable Output<Boolean> allowIpSans;

    /**
     * @return Flag to allow IP SANs
     * 
     */
    public Optional<Output<Boolean>> allowIpSans() {
        return Optional.ofNullable(this.allowIpSans);
    }

    /**
     * Flag to allow certificates for localhost
     * 
     */
    @Import(name="allowLocalhost")
    private @Nullable Output<Boolean> allowLocalhost;

    /**
     * @return Flag to allow certificates for localhost
     * 
     */
    public Optional<Output<Boolean>> allowLocalhost() {
        return Optional.ofNullable(this.allowLocalhost);
    }

    /**
     * Flag to allow certificates matching subdomains
     * 
     */
    @Import(name="allowSubdomains")
    private @Nullable Output<Boolean> allowSubdomains;

    /**
     * @return Flag to allow certificates matching subdomains
     * 
     */
    public Optional<Output<Boolean>> allowSubdomains() {
        return Optional.ofNullable(this.allowSubdomains);
    }

    /**
     * Flag to allow wildcard certificates.
     * 
     */
    @Import(name="allowWildcardCertificates")
    private @Nullable Output<Boolean> allowWildcardCertificates;

    /**
     * @return Flag to allow wildcard certificates.
     * 
     */
    public Optional<Output<Boolean>> allowWildcardCertificates() {
        return Optional.ofNullable(this.allowWildcardCertificates);
    }

    /**
     * List of allowed domains for certificates
     * 
     */
    @Import(name="allowedDomains")
    private @Nullable Output<List<String>> allowedDomains;

    /**
     * @return List of allowed domains for certificates
     * 
     */
    public Optional<Output<List<String>>> allowedDomains() {
        return Optional.ofNullable(this.allowedDomains);
    }

    /**
     * Flag, if set, `allowed_domains` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
     * 
     */
    @Import(name="allowedDomainsTemplate")
    private @Nullable Output<Boolean> allowedDomainsTemplate;

    /**
     * @return Flag, if set, `allowed_domains` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
     * 
     */
    public Optional<Output<Boolean>> allowedDomainsTemplate() {
        return Optional.ofNullable(this.allowedDomainsTemplate);
    }

    /**
     * Defines allowed custom SANs
     * 
     */
    @Import(name="allowedOtherSans")
    private @Nullable Output<List<String>> allowedOtherSans;

    /**
     * @return Defines allowed custom SANs
     * 
     */
    public Optional<Output<List<String>>> allowedOtherSans() {
        return Optional.ofNullable(this.allowedOtherSans);
    }

    /**
     * An array of allowed serial numbers to put in Subject
     * 
     */
    @Import(name="allowedSerialNumbers")
    private @Nullable Output<List<String>> allowedSerialNumbers;

    /**
     * @return An array of allowed serial numbers to put in Subject
     * 
     */
    public Optional<Output<List<String>>> allowedSerialNumbers() {
        return Optional.ofNullable(this.allowedSerialNumbers);
    }

    /**
     * Defines allowed URI SANs
     * 
     */
    @Import(name="allowedUriSans")
    private @Nullable Output<List<String>> allowedUriSans;

    /**
     * @return Defines allowed URI SANs
     * 
     */
    public Optional<Output<List<String>>> allowedUriSans() {
        return Optional.ofNullable(this.allowedUriSans);
    }

    /**
     * Flag, if set, `allowed_uri_sans` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
     * 
     */
    @Import(name="allowedUriSansTemplate")
    private @Nullable Output<Boolean> allowedUriSansTemplate;

    /**
     * @return Flag, if set, `allowed_uri_sans` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
     * 
     */
    public Optional<Output<Boolean>> allowedUriSansTemplate() {
        return Optional.ofNullable(this.allowedUriSansTemplate);
    }

    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * Flag to mark basic constraints valid when issuing non-CA certificates
     * 
     */
    @Import(name="basicConstraintsValidForNonCa")
    private @Nullable Output<Boolean> basicConstraintsValidForNonCa;

    /**
     * @return Flag to mark basic constraints valid when issuing non-CA certificates
     * 
     */
    public Optional<Output<Boolean>> basicConstraintsValidForNonCa() {
        return Optional.ofNullable(this.basicConstraintsValidForNonCa);
    }

    /**
     * Flag to specify certificates for client use
     * 
     */
    @Import(name="clientFlag")
    private @Nullable Output<Boolean> clientFlag;

    /**
     * @return Flag to specify certificates for client use
     * 
     */
    public Optional<Output<Boolean>> clientFlag() {
        return Optional.ofNullable(this.clientFlag);
    }

    /**
     * Flag to specify certificates for code signing use
     * 
     */
    @Import(name="codeSigningFlag")
    private @Nullable Output<Boolean> codeSigningFlag;

    /**
     * @return Flag to specify certificates for code signing use
     * 
     */
    public Optional<Output<Boolean>> codeSigningFlag() {
        return Optional.ofNullable(this.codeSigningFlag);
    }

    /**
     * The country of generated certificates
     * 
     */
    @Import(name="countries")
    private @Nullable Output<List<String>> countries;

    /**
     * @return The country of generated certificates
     * 
     */
    public Optional<Output<List<String>>> countries() {
        return Optional.ofNullable(this.countries);
    }

    /**
     * Flag to specify certificates for email protection use
     * 
     */
    @Import(name="emailProtectionFlag")
    private @Nullable Output<Boolean> emailProtectionFlag;

    /**
     * @return Flag to specify certificates for email protection use
     * 
     */
    public Optional<Output<Boolean>> emailProtectionFlag() {
        return Optional.ofNullable(this.emailProtectionFlag);
    }

    /**
     * Flag to allow only valid host names
     * 
     */
    @Import(name="enforceHostnames")
    private @Nullable Output<Boolean> enforceHostnames;

    /**
     * @return Flag to allow only valid host names
     * 
     */
    public Optional<Output<Boolean>> enforceHostnames() {
        return Optional.ofNullable(this.enforceHostnames);
    }

    /**
     * Specify the allowed extended key usage constraint on issued certificates
     * 
     */
    @Import(name="extKeyUsages")
    private @Nullable Output<List<String>> extKeyUsages;

    /**
     * @return Specify the allowed extended key usage constraint on issued certificates
     * 
     */
    public Optional<Output<List<String>>> extKeyUsages() {
        return Optional.ofNullable(this.extKeyUsages);
    }

    /**
     * Flag to generate leases with certificates
     * 
     */
    @Import(name="generateLease")
    private @Nullable Output<Boolean> generateLease;

    /**
     * @return Flag to generate leases with certificates
     * 
     */
    public Optional<Output<Boolean>> generateLease() {
        return Optional.ofNullable(this.generateLease);
    }

    /**
     * Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role&#39;s `issuer_ref` value.
     * 
     */
    @Import(name="issuerRef")
    private @Nullable Output<String> issuerRef;

    /**
     * @return Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role&#39;s `issuer_ref` value.
     * 
     */
    public Optional<Output<String>> issuerRef() {
        return Optional.ofNullable(this.issuerRef);
    }

    /**
     * The number of bits of generated keys
     * 
     */
    @Import(name="keyBits")
    private @Nullable Output<Integer> keyBits;

    /**
     * @return The number of bits of generated keys
     * 
     */
    public Optional<Output<Integer>> keyBits() {
        return Optional.ofNullable(this.keyBits);
    }

    /**
     * The generated key type, choices: `rsa`, `ec`, `ed25519`, `any`
     * Defaults to `rsa`
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<String> keyType;

    /**
     * @return The generated key type, choices: `rsa`, `ec`, `ed25519`, `any`
     * Defaults to `rsa`
     * 
     */
    public Optional<Output<String>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * Specify the allowed key usage constraint on issued certificates
     * 
     */
    @Import(name="keyUsages")
    private @Nullable Output<List<String>> keyUsages;

    /**
     * @return Specify the allowed key usage constraint on issued certificates
     * 
     */
    public Optional<Output<List<String>>> keyUsages() {
        return Optional.ofNullable(this.keyUsages);
    }

    /**
     * The locality of generated certificates
     * 
     */
    @Import(name="localities")
    private @Nullable Output<List<String>> localities;

    /**
     * @return The locality of generated certificates
     * 
     */
    public Optional<Output<List<String>>> localities() {
        return Optional.ofNullable(this.localities);
    }

    /**
     * The maximum lease TTL, in seconds, for the role.
     * 
     */
    @Import(name="maxTtl")
    private @Nullable Output<String> maxTtl;

    /**
     * @return The maximum lease TTL, in seconds, for the role.
     * 
     */
    public Optional<Output<String>> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }

    /**
     * The name to identify this role within the backend. Must be unique within the backend.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name to identify this role within the backend. Must be unique within the backend.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Flag to not store certificates in the storage backend
     * 
     */
    @Import(name="noStore")
    private @Nullable Output<Boolean> noStore;

    /**
     * @return Flag to not store certificates in the storage backend
     * 
     */
    public Optional<Output<Boolean>> noStore() {
        return Optional.ofNullable(this.noStore);
    }

    /**
     * Specifies the duration by which to backdate the NotBefore property.
     * 
     */
    @Import(name="notBeforeDuration")
    private @Nullable Output<String> notBeforeDuration;

    /**
     * @return Specifies the duration by which to backdate the NotBefore property.
     * 
     */
    public Optional<Output<String>> notBeforeDuration() {
        return Optional.ofNullable(this.notBeforeDuration);
    }

    /**
     * The organization unit of generated certificates
     * 
     */
    @Import(name="organizationUnit")
    private @Nullable Output<List<String>> organizationUnit;

    /**
     * @return The organization unit of generated certificates
     * 
     */
    public Optional<Output<List<String>>> organizationUnit() {
        return Optional.ofNullable(this.organizationUnit);
    }

    /**
     * The organization of generated certificates
     * 
     */
    @Import(name="organizations")
    private @Nullable Output<List<String>> organizations;

    /**
     * @return The organization of generated certificates
     * 
     */
    public Optional<Output<List<String>>> organizations() {
        return Optional.ofNullable(this.organizations);
    }

    /**
     * Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policy_identifier` blocks instead
     * 
     */
    @Import(name="policyIdentifiers")
    private @Nullable Output<List<String>> policyIdentifiers;

    /**
     * @return Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policy_identifier` blocks instead
     * 
     */
    public Optional<Output<List<String>>> policyIdentifiers() {
        return Optional.ofNullable(this.policyIdentifiers);
    }

    /**
     * The postal code of generated certificates
     * 
     */
    @Import(name="postalCodes")
    private @Nullable Output<List<String>> postalCodes;

    /**
     * @return The postal code of generated certificates
     * 
     */
    public Optional<Output<List<String>>> postalCodes() {
        return Optional.ofNullable(this.postalCodes);
    }

    /**
     * The province of generated certificates
     * 
     */
    @Import(name="provinces")
    private @Nullable Output<List<String>> provinces;

    /**
     * @return The province of generated certificates
     * 
     */
    public Optional<Output<List<String>>> provinces() {
        return Optional.ofNullable(this.provinces);
    }

    /**
     * Flag to force CN usage
     * 
     */
    @Import(name="requireCn")
    private @Nullable Output<Boolean> requireCn;

    /**
     * @return Flag to force CN usage
     * 
     */
    public Optional<Output<Boolean>> requireCn() {
        return Optional.ofNullable(this.requireCn);
    }

    /**
     * Flag to specify certificates for server use
     * 
     */
    @Import(name="serverFlag")
    private @Nullable Output<Boolean> serverFlag;

    /**
     * @return Flag to specify certificates for server use
     * 
     */
    public Optional<Output<Boolean>> serverFlag() {
        return Optional.ofNullable(this.serverFlag);
    }

    /**
     * The street address of generated certificates
     * 
     */
    @Import(name="streetAddresses")
    private @Nullable Output<List<String>> streetAddresses;

    /**
     * @return The street address of generated certificates
     * 
     */
    public Optional<Output<List<String>>> streetAddresses() {
        return Optional.ofNullable(this.streetAddresses);
    }

    /**
     * The TTL, in seconds, for any certificate issued against this role.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return The TTL, in seconds, for any certificate issued against this role.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * Flag to use the CN in the CSR
     * 
     */
    @Import(name="useCsrCommonName")
    private @Nullable Output<Boolean> useCsrCommonName;

    /**
     * @return Flag to use the CN in the CSR
     * 
     */
    public Optional<Output<Boolean>> useCsrCommonName() {
        return Optional.ofNullable(this.useCsrCommonName);
    }

    /**
     * Flag to use the SANs in the CSR
     * 
     */
    @Import(name="useCsrSans")
    private @Nullable Output<Boolean> useCsrSans;

    /**
     * @return Flag to use the SANs in the CSR
     * 
     */
    public Optional<Output<Boolean>> useCsrSans() {
        return Optional.ofNullable(this.useCsrSans);
    }

    private SecretBackendRoleState() {}

    private SecretBackendRoleState(SecretBackendRoleState $) {
        this.allowAnyName = $.allowAnyName;
        this.allowBareDomains = $.allowBareDomains;
        this.allowGlobDomains = $.allowGlobDomains;
        this.allowIpSans = $.allowIpSans;
        this.allowLocalhost = $.allowLocalhost;
        this.allowSubdomains = $.allowSubdomains;
        this.allowWildcardCertificates = $.allowWildcardCertificates;
        this.allowedDomains = $.allowedDomains;
        this.allowedDomainsTemplate = $.allowedDomainsTemplate;
        this.allowedOtherSans = $.allowedOtherSans;
        this.allowedSerialNumbers = $.allowedSerialNumbers;
        this.allowedUriSans = $.allowedUriSans;
        this.allowedUriSansTemplate = $.allowedUriSansTemplate;
        this.backend = $.backend;
        this.basicConstraintsValidForNonCa = $.basicConstraintsValidForNonCa;
        this.clientFlag = $.clientFlag;
        this.codeSigningFlag = $.codeSigningFlag;
        this.countries = $.countries;
        this.emailProtectionFlag = $.emailProtectionFlag;
        this.enforceHostnames = $.enforceHostnames;
        this.extKeyUsages = $.extKeyUsages;
        this.generateLease = $.generateLease;
        this.issuerRef = $.issuerRef;
        this.keyBits = $.keyBits;
        this.keyType = $.keyType;
        this.keyUsages = $.keyUsages;
        this.localities = $.localities;
        this.maxTtl = $.maxTtl;
        this.name = $.name;
        this.namespace = $.namespace;
        this.noStore = $.noStore;
        this.notBeforeDuration = $.notBeforeDuration;
        this.organizationUnit = $.organizationUnit;
        this.organizations = $.organizations;
        this.policyIdentifiers = $.policyIdentifiers;
        this.postalCodes = $.postalCodes;
        this.provinces = $.provinces;
        this.requireCn = $.requireCn;
        this.serverFlag = $.serverFlag;
        this.streetAddresses = $.streetAddresses;
        this.ttl = $.ttl;
        this.useCsrCommonName = $.useCsrCommonName;
        this.useCsrSans = $.useCsrSans;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendRoleState $;

        public Builder() {
            $ = new SecretBackendRoleState();
        }

        public Builder(SecretBackendRoleState defaults) {
            $ = new SecretBackendRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAnyName Flag to allow any name
         * 
         * @return builder
         * 
         */
        public Builder allowAnyName(@Nullable Output<Boolean> allowAnyName) {
            $.allowAnyName = allowAnyName;
            return this;
        }

        /**
         * @param allowAnyName Flag to allow any name
         * 
         * @return builder
         * 
         */
        public Builder allowAnyName(Boolean allowAnyName) {
            return allowAnyName(Output.of(allowAnyName));
        }

        /**
         * @param allowBareDomains Flag to allow certificates matching the actual domain
         * 
         * @return builder
         * 
         */
        public Builder allowBareDomains(@Nullable Output<Boolean> allowBareDomains) {
            $.allowBareDomains = allowBareDomains;
            return this;
        }

        /**
         * @param allowBareDomains Flag to allow certificates matching the actual domain
         * 
         * @return builder
         * 
         */
        public Builder allowBareDomains(Boolean allowBareDomains) {
            return allowBareDomains(Output.of(allowBareDomains));
        }

        /**
         * @param allowGlobDomains Flag to allow names containing glob patterns.
         * 
         * @return builder
         * 
         */
        public Builder allowGlobDomains(@Nullable Output<Boolean> allowGlobDomains) {
            $.allowGlobDomains = allowGlobDomains;
            return this;
        }

        /**
         * @param allowGlobDomains Flag to allow names containing glob patterns.
         * 
         * @return builder
         * 
         */
        public Builder allowGlobDomains(Boolean allowGlobDomains) {
            return allowGlobDomains(Output.of(allowGlobDomains));
        }

        /**
         * @param allowIpSans Flag to allow IP SANs
         * 
         * @return builder
         * 
         */
        public Builder allowIpSans(@Nullable Output<Boolean> allowIpSans) {
            $.allowIpSans = allowIpSans;
            return this;
        }

        /**
         * @param allowIpSans Flag to allow IP SANs
         * 
         * @return builder
         * 
         */
        public Builder allowIpSans(Boolean allowIpSans) {
            return allowIpSans(Output.of(allowIpSans));
        }

        /**
         * @param allowLocalhost Flag to allow certificates for localhost
         * 
         * @return builder
         * 
         */
        public Builder allowLocalhost(@Nullable Output<Boolean> allowLocalhost) {
            $.allowLocalhost = allowLocalhost;
            return this;
        }

        /**
         * @param allowLocalhost Flag to allow certificates for localhost
         * 
         * @return builder
         * 
         */
        public Builder allowLocalhost(Boolean allowLocalhost) {
            return allowLocalhost(Output.of(allowLocalhost));
        }

        /**
         * @param allowSubdomains Flag to allow certificates matching subdomains
         * 
         * @return builder
         * 
         */
        public Builder allowSubdomains(@Nullable Output<Boolean> allowSubdomains) {
            $.allowSubdomains = allowSubdomains;
            return this;
        }

        /**
         * @param allowSubdomains Flag to allow certificates matching subdomains
         * 
         * @return builder
         * 
         */
        public Builder allowSubdomains(Boolean allowSubdomains) {
            return allowSubdomains(Output.of(allowSubdomains));
        }

        /**
         * @param allowWildcardCertificates Flag to allow wildcard certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowWildcardCertificates(@Nullable Output<Boolean> allowWildcardCertificates) {
            $.allowWildcardCertificates = allowWildcardCertificates;
            return this;
        }

        /**
         * @param allowWildcardCertificates Flag to allow wildcard certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowWildcardCertificates(Boolean allowWildcardCertificates) {
            return allowWildcardCertificates(Output.of(allowWildcardCertificates));
        }

        /**
         * @param allowedDomains List of allowed domains for certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedDomains(@Nullable Output<List<String>> allowedDomains) {
            $.allowedDomains = allowedDomains;
            return this;
        }

        /**
         * @param allowedDomains List of allowed domains for certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedDomains(List<String> allowedDomains) {
            return allowedDomains(Output.of(allowedDomains));
        }

        /**
         * @param allowedDomains List of allowed domains for certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedDomains(String... allowedDomains) {
            return allowedDomains(List.of(allowedDomains));
        }

        /**
         * @param allowedDomainsTemplate Flag, if set, `allowed_domains` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
         * 
         * @return builder
         * 
         */
        public Builder allowedDomainsTemplate(@Nullable Output<Boolean> allowedDomainsTemplate) {
            $.allowedDomainsTemplate = allowedDomainsTemplate;
            return this;
        }

        /**
         * @param allowedDomainsTemplate Flag, if set, `allowed_domains` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
         * 
         * @return builder
         * 
         */
        public Builder allowedDomainsTemplate(Boolean allowedDomainsTemplate) {
            return allowedDomainsTemplate(Output.of(allowedDomainsTemplate));
        }

        /**
         * @param allowedOtherSans Defines allowed custom SANs
         * 
         * @return builder
         * 
         */
        public Builder allowedOtherSans(@Nullable Output<List<String>> allowedOtherSans) {
            $.allowedOtherSans = allowedOtherSans;
            return this;
        }

        /**
         * @param allowedOtherSans Defines allowed custom SANs
         * 
         * @return builder
         * 
         */
        public Builder allowedOtherSans(List<String> allowedOtherSans) {
            return allowedOtherSans(Output.of(allowedOtherSans));
        }

        /**
         * @param allowedOtherSans Defines allowed custom SANs
         * 
         * @return builder
         * 
         */
        public Builder allowedOtherSans(String... allowedOtherSans) {
            return allowedOtherSans(List.of(allowedOtherSans));
        }

        /**
         * @param allowedSerialNumbers An array of allowed serial numbers to put in Subject
         * 
         * @return builder
         * 
         */
        public Builder allowedSerialNumbers(@Nullable Output<List<String>> allowedSerialNumbers) {
            $.allowedSerialNumbers = allowedSerialNumbers;
            return this;
        }

        /**
         * @param allowedSerialNumbers An array of allowed serial numbers to put in Subject
         * 
         * @return builder
         * 
         */
        public Builder allowedSerialNumbers(List<String> allowedSerialNumbers) {
            return allowedSerialNumbers(Output.of(allowedSerialNumbers));
        }

        /**
         * @param allowedSerialNumbers An array of allowed serial numbers to put in Subject
         * 
         * @return builder
         * 
         */
        public Builder allowedSerialNumbers(String... allowedSerialNumbers) {
            return allowedSerialNumbers(List.of(allowedSerialNumbers));
        }

        /**
         * @param allowedUriSans Defines allowed URI SANs
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSans(@Nullable Output<List<String>> allowedUriSans) {
            $.allowedUriSans = allowedUriSans;
            return this;
        }

        /**
         * @param allowedUriSans Defines allowed URI SANs
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSans(List<String> allowedUriSans) {
            return allowedUriSans(Output.of(allowedUriSans));
        }

        /**
         * @param allowedUriSans Defines allowed URI SANs
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSans(String... allowedUriSans) {
            return allowedUriSans(List.of(allowedUriSans));
        }

        /**
         * @param allowedUriSansTemplate Flag, if set, `allowed_uri_sans` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSansTemplate(@Nullable Output<Boolean> allowedUriSansTemplate) {
            $.allowedUriSansTemplate = allowedUriSansTemplate;
            return this;
        }

        /**
         * @param allowedUriSansTemplate Flag, if set, `allowed_uri_sans` can be specified using identity template expressions such as `{{identity.entity.aliases.&lt;mount accessor&gt;.name}}`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSansTemplate(Boolean allowedUriSansTemplate) {
            return allowedUriSansTemplate(Output.of(allowedUriSansTemplate));
        }

        /**
         * @param backend The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param basicConstraintsValidForNonCa Flag to mark basic constraints valid when issuing non-CA certificates
         * 
         * @return builder
         * 
         */
        public Builder basicConstraintsValidForNonCa(@Nullable Output<Boolean> basicConstraintsValidForNonCa) {
            $.basicConstraintsValidForNonCa = basicConstraintsValidForNonCa;
            return this;
        }

        /**
         * @param basicConstraintsValidForNonCa Flag to mark basic constraints valid when issuing non-CA certificates
         * 
         * @return builder
         * 
         */
        public Builder basicConstraintsValidForNonCa(Boolean basicConstraintsValidForNonCa) {
            return basicConstraintsValidForNonCa(Output.of(basicConstraintsValidForNonCa));
        }

        /**
         * @param clientFlag Flag to specify certificates for client use
         * 
         * @return builder
         * 
         */
        public Builder clientFlag(@Nullable Output<Boolean> clientFlag) {
            $.clientFlag = clientFlag;
            return this;
        }

        /**
         * @param clientFlag Flag to specify certificates for client use
         * 
         * @return builder
         * 
         */
        public Builder clientFlag(Boolean clientFlag) {
            return clientFlag(Output.of(clientFlag));
        }

        /**
         * @param codeSigningFlag Flag to specify certificates for code signing use
         * 
         * @return builder
         * 
         */
        public Builder codeSigningFlag(@Nullable Output<Boolean> codeSigningFlag) {
            $.codeSigningFlag = codeSigningFlag;
            return this;
        }

        /**
         * @param codeSigningFlag Flag to specify certificates for code signing use
         * 
         * @return builder
         * 
         */
        public Builder codeSigningFlag(Boolean codeSigningFlag) {
            return codeSigningFlag(Output.of(codeSigningFlag));
        }

        /**
         * @param countries The country of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder countries(@Nullable Output<List<String>> countries) {
            $.countries = countries;
            return this;
        }

        /**
         * @param countries The country of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder countries(List<String> countries) {
            return countries(Output.of(countries));
        }

        /**
         * @param countries The country of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder countries(String... countries) {
            return countries(List.of(countries));
        }

        /**
         * @param emailProtectionFlag Flag to specify certificates for email protection use
         * 
         * @return builder
         * 
         */
        public Builder emailProtectionFlag(@Nullable Output<Boolean> emailProtectionFlag) {
            $.emailProtectionFlag = emailProtectionFlag;
            return this;
        }

        /**
         * @param emailProtectionFlag Flag to specify certificates for email protection use
         * 
         * @return builder
         * 
         */
        public Builder emailProtectionFlag(Boolean emailProtectionFlag) {
            return emailProtectionFlag(Output.of(emailProtectionFlag));
        }

        /**
         * @param enforceHostnames Flag to allow only valid host names
         * 
         * @return builder
         * 
         */
        public Builder enforceHostnames(@Nullable Output<Boolean> enforceHostnames) {
            $.enforceHostnames = enforceHostnames;
            return this;
        }

        /**
         * @param enforceHostnames Flag to allow only valid host names
         * 
         * @return builder
         * 
         */
        public Builder enforceHostnames(Boolean enforceHostnames) {
            return enforceHostnames(Output.of(enforceHostnames));
        }

        /**
         * @param extKeyUsages Specify the allowed extended key usage constraint on issued certificates
         * 
         * @return builder
         * 
         */
        public Builder extKeyUsages(@Nullable Output<List<String>> extKeyUsages) {
            $.extKeyUsages = extKeyUsages;
            return this;
        }

        /**
         * @param extKeyUsages Specify the allowed extended key usage constraint on issued certificates
         * 
         * @return builder
         * 
         */
        public Builder extKeyUsages(List<String> extKeyUsages) {
            return extKeyUsages(Output.of(extKeyUsages));
        }

        /**
         * @param extKeyUsages Specify the allowed extended key usage constraint on issued certificates
         * 
         * @return builder
         * 
         */
        public Builder extKeyUsages(String... extKeyUsages) {
            return extKeyUsages(List.of(extKeyUsages));
        }

        /**
         * @param generateLease Flag to generate leases with certificates
         * 
         * @return builder
         * 
         */
        public Builder generateLease(@Nullable Output<Boolean> generateLease) {
            $.generateLease = generateLease;
            return this;
        }

        /**
         * @param generateLease Flag to generate leases with certificates
         * 
         * @return builder
         * 
         */
        public Builder generateLease(Boolean generateLease) {
            return generateLease(Output.of(generateLease));
        }

        /**
         * @param issuerRef Specifies the default issuer of this request. May
         * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
         * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
         * overriding the role&#39;s `issuer_ref` value.
         * 
         * @return builder
         * 
         */
        public Builder issuerRef(@Nullable Output<String> issuerRef) {
            $.issuerRef = issuerRef;
            return this;
        }

        /**
         * @param issuerRef Specifies the default issuer of this request. May
         * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
         * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
         * overriding the role&#39;s `issuer_ref` value.
         * 
         * @return builder
         * 
         */
        public Builder issuerRef(String issuerRef) {
            return issuerRef(Output.of(issuerRef));
        }

        /**
         * @param keyBits The number of bits of generated keys
         * 
         * @return builder
         * 
         */
        public Builder keyBits(@Nullable Output<Integer> keyBits) {
            $.keyBits = keyBits;
            return this;
        }

        /**
         * @param keyBits The number of bits of generated keys
         * 
         * @return builder
         * 
         */
        public Builder keyBits(Integer keyBits) {
            return keyBits(Output.of(keyBits));
        }

        /**
         * @param keyType The generated key type, choices: `rsa`, `ec`, `ed25519`, `any`
         * Defaults to `rsa`
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType The generated key type, choices: `rsa`, `ec`, `ed25519`, `any`
         * Defaults to `rsa`
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param keyUsages Specify the allowed key usage constraint on issued certificates
         * 
         * @return builder
         * 
         */
        public Builder keyUsages(@Nullable Output<List<String>> keyUsages) {
            $.keyUsages = keyUsages;
            return this;
        }

        /**
         * @param keyUsages Specify the allowed key usage constraint on issued certificates
         * 
         * @return builder
         * 
         */
        public Builder keyUsages(List<String> keyUsages) {
            return keyUsages(Output.of(keyUsages));
        }

        /**
         * @param keyUsages Specify the allowed key usage constraint on issued certificates
         * 
         * @return builder
         * 
         */
        public Builder keyUsages(String... keyUsages) {
            return keyUsages(List.of(keyUsages));
        }

        /**
         * @param localities The locality of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder localities(@Nullable Output<List<String>> localities) {
            $.localities = localities;
            return this;
        }

        /**
         * @param localities The locality of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder localities(List<String> localities) {
            return localities(Output.of(localities));
        }

        /**
         * @param localities The locality of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder localities(String... localities) {
            return localities(List.of(localities));
        }

        /**
         * @param maxTtl The maximum lease TTL, in seconds, for the role.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(@Nullable Output<String> maxTtl) {
            $.maxTtl = maxTtl;
            return this;
        }

        /**
         * @param maxTtl The maximum lease TTL, in seconds, for the role.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(String maxTtl) {
            return maxTtl(Output.of(maxTtl));
        }

        /**
         * @param name The name to identify this role within the backend. Must be unique within the backend.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name to identify this role within the backend. Must be unique within the backend.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param noStore Flag to not store certificates in the storage backend
         * 
         * @return builder
         * 
         */
        public Builder noStore(@Nullable Output<Boolean> noStore) {
            $.noStore = noStore;
            return this;
        }

        /**
         * @param noStore Flag to not store certificates in the storage backend
         * 
         * @return builder
         * 
         */
        public Builder noStore(Boolean noStore) {
            return noStore(Output.of(noStore));
        }

        /**
         * @param notBeforeDuration Specifies the duration by which to backdate the NotBefore property.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDuration(@Nullable Output<String> notBeforeDuration) {
            $.notBeforeDuration = notBeforeDuration;
            return this;
        }

        /**
         * @param notBeforeDuration Specifies the duration by which to backdate the NotBefore property.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDuration(String notBeforeDuration) {
            return notBeforeDuration(Output.of(notBeforeDuration));
        }

        /**
         * @param organizationUnit The organization unit of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder organizationUnit(@Nullable Output<List<String>> organizationUnit) {
            $.organizationUnit = organizationUnit;
            return this;
        }

        /**
         * @param organizationUnit The organization unit of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder organizationUnit(List<String> organizationUnit) {
            return organizationUnit(Output.of(organizationUnit));
        }

        /**
         * @param organizationUnit The organization unit of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder organizationUnit(String... organizationUnit) {
            return organizationUnit(List.of(organizationUnit));
        }

        /**
         * @param organizations The organization of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder organizations(@Nullable Output<List<String>> organizations) {
            $.organizations = organizations;
            return this;
        }

        /**
         * @param organizations The organization of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder organizations(List<String> organizations) {
            return organizations(Output.of(organizations));
        }

        /**
         * @param organizations The organization of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder organizations(String... organizations) {
            return organizations(List.of(organizations));
        }

        /**
         * @param policyIdentifiers Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policy_identifier` blocks instead
         * 
         * @return builder
         * 
         */
        public Builder policyIdentifiers(@Nullable Output<List<String>> policyIdentifiers) {
            $.policyIdentifiers = policyIdentifiers;
            return this;
        }

        /**
         * @param policyIdentifiers Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policy_identifier` blocks instead
         * 
         * @return builder
         * 
         */
        public Builder policyIdentifiers(List<String> policyIdentifiers) {
            return policyIdentifiers(Output.of(policyIdentifiers));
        }

        /**
         * @param policyIdentifiers Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policy_identifier` blocks instead
         * 
         * @return builder
         * 
         */
        public Builder policyIdentifiers(String... policyIdentifiers) {
            return policyIdentifiers(List.of(policyIdentifiers));
        }

        /**
         * @param postalCodes The postal code of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder postalCodes(@Nullable Output<List<String>> postalCodes) {
            $.postalCodes = postalCodes;
            return this;
        }

        /**
         * @param postalCodes The postal code of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder postalCodes(List<String> postalCodes) {
            return postalCodes(Output.of(postalCodes));
        }

        /**
         * @param postalCodes The postal code of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder postalCodes(String... postalCodes) {
            return postalCodes(List.of(postalCodes));
        }

        /**
         * @param provinces The province of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder provinces(@Nullable Output<List<String>> provinces) {
            $.provinces = provinces;
            return this;
        }

        /**
         * @param provinces The province of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder provinces(List<String> provinces) {
            return provinces(Output.of(provinces));
        }

        /**
         * @param provinces The province of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder provinces(String... provinces) {
            return provinces(List.of(provinces));
        }

        /**
         * @param requireCn Flag to force CN usage
         * 
         * @return builder
         * 
         */
        public Builder requireCn(@Nullable Output<Boolean> requireCn) {
            $.requireCn = requireCn;
            return this;
        }

        /**
         * @param requireCn Flag to force CN usage
         * 
         * @return builder
         * 
         */
        public Builder requireCn(Boolean requireCn) {
            return requireCn(Output.of(requireCn));
        }

        /**
         * @param serverFlag Flag to specify certificates for server use
         * 
         * @return builder
         * 
         */
        public Builder serverFlag(@Nullable Output<Boolean> serverFlag) {
            $.serverFlag = serverFlag;
            return this;
        }

        /**
         * @param serverFlag Flag to specify certificates for server use
         * 
         * @return builder
         * 
         */
        public Builder serverFlag(Boolean serverFlag) {
            return serverFlag(Output.of(serverFlag));
        }

        /**
         * @param streetAddresses The street address of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder streetAddresses(@Nullable Output<List<String>> streetAddresses) {
            $.streetAddresses = streetAddresses;
            return this;
        }

        /**
         * @param streetAddresses The street address of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder streetAddresses(List<String> streetAddresses) {
            return streetAddresses(Output.of(streetAddresses));
        }

        /**
         * @param streetAddresses The street address of generated certificates
         * 
         * @return builder
         * 
         */
        public Builder streetAddresses(String... streetAddresses) {
            return streetAddresses(List.of(streetAddresses));
        }

        /**
         * @param ttl The TTL, in seconds, for any certificate issued against this role.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The TTL, in seconds, for any certificate issued against this role.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param useCsrCommonName Flag to use the CN in the CSR
         * 
         * @return builder
         * 
         */
        public Builder useCsrCommonName(@Nullable Output<Boolean> useCsrCommonName) {
            $.useCsrCommonName = useCsrCommonName;
            return this;
        }

        /**
         * @param useCsrCommonName Flag to use the CN in the CSR
         * 
         * @return builder
         * 
         */
        public Builder useCsrCommonName(Boolean useCsrCommonName) {
            return useCsrCommonName(Output.of(useCsrCommonName));
        }

        /**
         * @param useCsrSans Flag to use the SANs in the CSR
         * 
         * @return builder
         * 
         */
        public Builder useCsrSans(@Nullable Output<Boolean> useCsrSans) {
            $.useCsrSans = useCsrSans;
            return this;
        }

        /**
         * @param useCsrSans Flag to use the SANs in the CSR
         * 
         * @return builder
         * 
         */
        public Builder useCsrSans(Boolean useCsrSans) {
            return useCsrSans(Output.of(useCsrSans));
        }

        public SecretBackendRoleState build() {
            return $;
        }
    }

}
