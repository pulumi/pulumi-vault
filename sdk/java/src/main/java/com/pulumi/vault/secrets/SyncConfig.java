// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.secrets;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.secrets.SyncConfigArgs;
import com.pulumi.vault.secrets.inputs.SyncConfigState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Configures the secret sync global config.
 * The config is global and can only be managed in the root namespace.
 * 
 * &gt; **Important** The config is global so the vault.secrets.SyncConfig resource must not be defined
 * multiple times for the same Vault server. If multiple definition exists, the last one applied will be
 * effective.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.secrets.SyncConfig;
 * import com.pulumi.vault.secrets.SyncConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var globalConfig = new SyncConfig(&#34;globalConfig&#34;, SyncConfigArgs.builder()        
 *             .disabled(true)
 *             .queueCapacity(500000)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import vault:secrets/syncConfig:SyncConfig config global_config
 * ```
 * 
 */
@ResourceType(type="vault:secrets/syncConfig:SyncConfig")
public class SyncConfig extends com.pulumi.resources.CustomResource {
    /**
     * Disables the syncing process between Vault and external destinations. Defaults to `false`.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Disables the syncing process between Vault and external destinations. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * The namespace to provision the resource in.
     * This resource can only be configured in the root namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * This resource can only be configured in the root namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
     * 
     */
    @Export(name="queueCapacity", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> queueCapacity;

    /**
     * @return Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
     * 
     */
    public Output<Optional<Integer>> queueCapacity() {
        return Codegen.optional(this.queueCapacity);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SyncConfig(String name) {
        this(name, SyncConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SyncConfig(String name, @Nullable SyncConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SyncConfig(String name, @Nullable SyncConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:secrets/syncConfig:SyncConfig", name, args == null ? SyncConfigArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SyncConfig(String name, Output<String> id, @Nullable SyncConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:secrets/syncConfig:SyncConfig", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SyncConfig get(String name, Output<String> id, @Nullable SyncConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SyncConfig(name, id, state, options);
    }
}
