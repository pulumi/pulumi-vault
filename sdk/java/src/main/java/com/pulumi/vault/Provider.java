// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.ProviderArgs;
import com.pulumi.vault.Utilities;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The provider type for the vault package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 * 
 */
@ResourceType(type="pulumi:providers:vault")
public class Provider extends com.pulumi.resources.ProviderResource {
    /**
     * If true, adds the value of the `address` argument to the Terraform process environment.
     * 
     */
    @Export(name="addAddressToEnv", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> addAddressToEnv;

    /**
     * @return If true, adds the value of the `address` argument to the Terraform process environment.
     * 
     */
    public Output<Optional<String>> addAddressToEnv() {
        return Codegen.optional(this.addAddressToEnv);
    }
    /**
     * URL of the root of the target Vault server.
     * 
     */
    @Export(name="address", refs={String.class}, tree="[0]")
    private Output<String> address;

    /**
     * @return URL of the root of the target Vault server.
     * 
     */
    public Output<String> address() {
        return this.address;
    }
    /**
     * Path to directory containing CA certificate files to validate the server&#39;s certificate.
     * 
     */
    @Export(name="caCertDir", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> caCertDir;

    /**
     * @return Path to directory containing CA certificate files to validate the server&#39;s certificate.
     * 
     */
    public Output<Optional<String>> caCertDir() {
        return Codegen.optional(this.caCertDir);
    }
    /**
     * Path to a CA certificate file to validate the server&#39;s certificate.
     * 
     */
    @Export(name="caCertFile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> caCertFile;

    /**
     * @return Path to a CA certificate file to validate the server&#39;s certificate.
     * 
     */
    public Output<Optional<String>> caCertFile() {
        return Codegen.optional(this.caCertFile);
    }
    /**
     * The namespace to use. Available only for Vault Enterprise.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to use. Available only for Vault Enterprise.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Name to use as the SNI host when connecting via TLS.
     * 
     */
    @Export(name="tlsServerName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlsServerName;

    /**
     * @return Name to use as the SNI host when connecting via TLS.
     * 
     */
    public Output<Optional<String>> tlsServerName() {
        return Codegen.optional(this.tlsServerName);
    }
    /**
     * Token to use to authenticate to Vault.
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return Token to use to authenticate to Vault.
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * Token name to use for creating the Vault child token.
     * 
     */
    @Export(name="tokenName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tokenName;

    /**
     * @return Token name to use for creating the Vault child token.
     * 
     */
    public Output<Optional<String>> tokenName() {
        return Codegen.optional(this.tokenName);
    }
    /**
     * Override the Vault server version, which is normally determined dynamically from the target Vault server
     * 
     */
    @Export(name="vaultVersionOverride", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vaultVersionOverride;

    /**
     * @return Override the Vault server version, which is normally determined dynamically from the target Vault server
     * 
     */
    public Output<Optional<String>> vaultVersionOverride() {
        return Codegen.optional(this.vaultVersionOverride);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Provider(String name) {
        this(name, ProviderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Provider(String name, ProviderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Provider(String name, ProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault", name, args == null ? ProviderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

}
