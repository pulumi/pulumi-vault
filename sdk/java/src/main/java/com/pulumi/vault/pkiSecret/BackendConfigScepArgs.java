// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vault.pkiSecret.inputs.BackendConfigScepAuthenticatorsArgs;
import com.pulumi.vault.pkiSecret.inputs.BackendConfigScepExternalValidationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendConfigScepArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendConfigScepArgs Empty = new BackendConfigScepArgs();

    /**
     * List of allowed digest algorithms for SCEP requests.
     * 
     */
    @Import(name="allowedDigestAlgorithms")
    private @Nullable Output<List<String>> allowedDigestAlgorithms;

    /**
     * @return List of allowed digest algorithms for SCEP requests.
     * 
     */
    public Optional<Output<List<String>>> allowedDigestAlgorithms() {
        return Optional.ofNullable(this.allowedDigestAlgorithms);
    }

    /**
     * List of allowed encryption algorithms for SCEP requests.
     * 
     */
    @Import(name="allowedEncryptionAlgorithms")
    private @Nullable Output<List<String>> allowedEncryptionAlgorithms;

    /**
     * @return List of allowed encryption algorithms for SCEP requests.
     * 
     */
    public Optional<Output<List<String>>> allowedEncryptionAlgorithms() {
        return Optional.ofNullable(this.allowedEncryptionAlgorithms);
    }

    /**
     * Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     * 
     */
    @Import(name="authenticators")
    private @Nullable Output<BackendConfigScepAuthenticatorsArgs> authenticators;

    /**
     * @return Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     * 
     */
    public Optional<Output<BackendConfigScepAuthenticatorsArgs>> authenticators() {
        return Optional.ofNullable(this.authenticators);
    }

    /**
     * The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
     * 
     */
    @Import(name="defaultPathPolicy")
    private @Nullable Output<String> defaultPathPolicy;

    /**
     * @return Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
     * 
     */
    public Optional<Output<String>> defaultPathPolicy() {
        return Optional.ofNullable(this.defaultPathPolicy);
    }

    /**
     * Specifies whether SCEP is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Specifies whether SCEP is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Lists the 3rd party validation of SCEP requests (see below for nested schema).
     * 
     */
    @Import(name="externalValidations")
    private @Nullable Output<List<BackendConfigScepExternalValidationArgs>> externalValidations;

    /**
     * @return Lists the 3rd party validation of SCEP requests (see below for nested schema).
     * 
     */
    public Optional<Output<List<BackendConfigScepExternalValidationArgs>>> externalValidations() {
        return Optional.ofNullable(this.externalValidations);
    }

    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     * 
     * &lt;a id=&#34;nestedatt--authenticators&#34;&gt;&lt;/a&gt;
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    /**
     * @return The level of logging verbosity, affects only SCEP logs on this mount.
     * 
     * &lt;a id=&#34;nestedatt--authenticators&#34;&gt;&lt;/a&gt;
     * 
     */
    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     * 
     */
    @Import(name="restrictCaChainToIssuer")
    private @Nullable Output<Boolean> restrictCaChainToIssuer;

    /**
     * @return If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     * 
     */
    public Optional<Output<Boolean>> restrictCaChainToIssuer() {
        return Optional.ofNullable(this.restrictCaChainToIssuer);
    }

    private BackendConfigScepArgs() {}

    private BackendConfigScepArgs(BackendConfigScepArgs $) {
        this.allowedDigestAlgorithms = $.allowedDigestAlgorithms;
        this.allowedEncryptionAlgorithms = $.allowedEncryptionAlgorithms;
        this.authenticators = $.authenticators;
        this.backend = $.backend;
        this.defaultPathPolicy = $.defaultPathPolicy;
        this.enabled = $.enabled;
        this.externalValidations = $.externalValidations;
        this.logLevel = $.logLevel;
        this.namespace = $.namespace;
        this.restrictCaChainToIssuer = $.restrictCaChainToIssuer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendConfigScepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendConfigScepArgs $;

        public Builder() {
            $ = new BackendConfigScepArgs();
        }

        public Builder(BackendConfigScepArgs defaults) {
            $ = new BackendConfigScepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedDigestAlgorithms List of allowed digest algorithms for SCEP requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedDigestAlgorithms(@Nullable Output<List<String>> allowedDigestAlgorithms) {
            $.allowedDigestAlgorithms = allowedDigestAlgorithms;
            return this;
        }

        /**
         * @param allowedDigestAlgorithms List of allowed digest algorithms for SCEP requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedDigestAlgorithms(List<String> allowedDigestAlgorithms) {
            return allowedDigestAlgorithms(Output.of(allowedDigestAlgorithms));
        }

        /**
         * @param allowedDigestAlgorithms List of allowed digest algorithms for SCEP requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedDigestAlgorithms(String... allowedDigestAlgorithms) {
            return allowedDigestAlgorithms(List.of(allowedDigestAlgorithms));
        }

        /**
         * @param allowedEncryptionAlgorithms List of allowed encryption algorithms for SCEP requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedEncryptionAlgorithms(@Nullable Output<List<String>> allowedEncryptionAlgorithms) {
            $.allowedEncryptionAlgorithms = allowedEncryptionAlgorithms;
            return this;
        }

        /**
         * @param allowedEncryptionAlgorithms List of allowed encryption algorithms for SCEP requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedEncryptionAlgorithms(List<String> allowedEncryptionAlgorithms) {
            return allowedEncryptionAlgorithms(Output.of(allowedEncryptionAlgorithms));
        }

        /**
         * @param allowedEncryptionAlgorithms List of allowed encryption algorithms for SCEP requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedEncryptionAlgorithms(String... allowedEncryptionAlgorithms) {
            return allowedEncryptionAlgorithms(List.of(allowedEncryptionAlgorithms));
        }

        /**
         * @param authenticators Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
         * 
         * @return builder
         * 
         */
        public Builder authenticators(@Nullable Output<BackendConfigScepAuthenticatorsArgs> authenticators) {
            $.authenticators = authenticators;
            return this;
        }

        /**
         * @param authenticators Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
         * 
         * @return builder
         * 
         */
        public Builder authenticators(BackendConfigScepAuthenticatorsArgs authenticators) {
            return authenticators(Output.of(authenticators));
        }

        /**
         * @param backend The path to the PKI secret backend to
         * read the SCEP configuration from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path to the PKI secret backend to
         * read the SCEP configuration from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param defaultPathPolicy Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
         * 
         * @return builder
         * 
         */
        public Builder defaultPathPolicy(@Nullable Output<String> defaultPathPolicy) {
            $.defaultPathPolicy = defaultPathPolicy;
            return this;
        }

        /**
         * @param defaultPathPolicy Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
         * 
         * @return builder
         * 
         */
        public Builder defaultPathPolicy(String defaultPathPolicy) {
            return defaultPathPolicy(Output.of(defaultPathPolicy));
        }

        /**
         * @param enabled Specifies whether SCEP is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies whether SCEP is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param externalValidations Lists the 3rd party validation of SCEP requests (see below for nested schema).
         * 
         * @return builder
         * 
         */
        public Builder externalValidations(@Nullable Output<List<BackendConfigScepExternalValidationArgs>> externalValidations) {
            $.externalValidations = externalValidations;
            return this;
        }

        /**
         * @param externalValidations Lists the 3rd party validation of SCEP requests (see below for nested schema).
         * 
         * @return builder
         * 
         */
        public Builder externalValidations(List<BackendConfigScepExternalValidationArgs> externalValidations) {
            return externalValidations(Output.of(externalValidations));
        }

        /**
         * @param externalValidations Lists the 3rd party validation of SCEP requests (see below for nested schema).
         * 
         * @return builder
         * 
         */
        public Builder externalValidations(BackendConfigScepExternalValidationArgs... externalValidations) {
            return externalValidations(List.of(externalValidations));
        }

        /**
         * @param logLevel The level of logging verbosity, affects only SCEP logs on this mount.
         * 
         * &lt;a id=&#34;nestedatt--authenticators&#34;&gt;&lt;/a&gt;
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel The level of logging verbosity, affects only SCEP logs on this mount.
         * 
         * &lt;a id=&#34;nestedatt--authenticators&#34;&gt;&lt;/a&gt;
         * 
         * @return builder
         * 
         */
        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param restrictCaChainToIssuer If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
         * 
         * @return builder
         * 
         */
        public Builder restrictCaChainToIssuer(@Nullable Output<Boolean> restrictCaChainToIssuer) {
            $.restrictCaChainToIssuer = restrictCaChainToIssuer;
            return this;
        }

        /**
         * @param restrictCaChainToIssuer If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
         * 
         * @return builder
         * 
         */
        public Builder restrictCaChainToIssuer(Boolean restrictCaChainToIssuer) {
            return restrictCaChainToIssuer(Output.of(restrictCaChainToIssuer));
        }

        public BackendConfigScepArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("BackendConfigScepArgs", "backend");
            }
            return $;
        }
    }

}
