// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendConnectionPostgresqlArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendConnectionPostgresqlArgs Empty = new SecretBackendConnectionPostgresqlArgs();

    /**
     * Specify alternative authorization type. (Only &#39;gcp_iam&#39; is valid currently)
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return Specify alternative authorization type. (Only &#39;gcp_iam&#39; is valid currently)
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * Connection string to use to connect to the database.
     * 
     */
    @Import(name="connectionUrl")
    private @Nullable Output<String> connectionUrl;

    /**
     * @return Connection string to use to connect to the database.
     * 
     */
    public Optional<Output<String>> connectionUrl() {
        return Optional.ofNullable(this.connectionUrl);
    }

    /**
     * Disable special character escaping in username and password
     * 
     */
    @Import(name="disableEscaping")
    private @Nullable Output<Boolean> disableEscaping;

    /**
     * @return Disable special character escaping in username and password
     * 
     */
    public Optional<Output<Boolean>> disableEscaping() {
        return Optional.ofNullable(this.disableEscaping);
    }

    /**
     * Maximum number of seconds a connection may be reused.
     * 
     */
    @Import(name="maxConnectionLifetime")
    private @Nullable Output<Integer> maxConnectionLifetime;

    /**
     * @return Maximum number of seconds a connection may be reused.
     * 
     */
    public Optional<Output<Integer>> maxConnectionLifetime() {
        return Optional.ofNullable(this.maxConnectionLifetime);
    }

    /**
     * Maximum number of idle connections to the database.
     * 
     */
    @Import(name="maxIdleConnections")
    private @Nullable Output<Integer> maxIdleConnections;

    /**
     * @return Maximum number of idle connections to the database.
     * 
     */
    public Optional<Output<Integer>> maxIdleConnections() {
        return Optional.ofNullable(this.maxIdleConnections);
    }

    /**
     * Maximum number of open connections to the database.
     * 
     */
    @Import(name="maxOpenConnections")
    private @Nullable Output<Integer> maxOpenConnections;

    /**
     * @return Maximum number of open connections to the database.
     * 
     */
    public Optional<Output<Integer>> maxOpenConnections() {
        return Optional.ofNullable(this.maxOpenConnections);
    }

    /**
     * The root credential password used in the connection URL
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The root credential password used in the connection URL
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * When set to `scram-sha-256`, passwords will be hashed by Vault before being sent to PostgreSQL.
     * 
     */
    @Import(name="passwordAuthentication")
    private @Nullable Output<String> passwordAuthentication;

    /**
     * @return When set to `scram-sha-256`, passwords will be hashed by Vault before being sent to PostgreSQL.
     * 
     */
    public Optional<Output<String>> passwordAuthentication() {
        return Optional.ofNullable(this.passwordAuthentication);
    }

    /**
     * **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Write-only field for the root credential password used in the connection URL
     * 
     */
    @Import(name="passwordWo")
    private @Nullable Output<String> passwordWo;

    /**
     * @return **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Write-only field for the root credential password used in the connection URL
     * 
     */
    public Optional<Output<String>> passwordWo() {
        return Optional.ofNullable(this.passwordWo);
    }

    /**
     * Version counter for root credential password write-only field
     * 
     */
    @Import(name="passwordWoVersion")
    private @Nullable Output<Integer> passwordWoVersion;

    /**
     * @return Version counter for root credential password write-only field
     * 
     */
    public Optional<Output<Integer>> passwordWoVersion() {
        return Optional.ofNullable(this.passwordWoVersion);
    }

    /**
     * The secret key used for the x509 client certificate. Must be PEM encoded.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The secret key used for the x509 client certificate. Must be PEM encoded.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * If set, allows onboarding static roles with a rootless connection configuration.
     * 
     */
    @Import(name="selfManaged")
    private @Nullable Output<Boolean> selfManaged;

    /**
     * @return If set, allows onboarding static roles with a rootless connection configuration.
     * 
     */
    public Optional<Output<Boolean>> selfManaged() {
        return Optional.ofNullable(this.selfManaged);
    }

    /**
     * A JSON encoded credential for use with IAM authorization
     * 
     */
    @Import(name="serviceAccountJson")
    private @Nullable Output<String> serviceAccountJson;

    /**
     * @return A JSON encoded credential for use with IAM authorization
     * 
     */
    public Optional<Output<String>> serviceAccountJson() {
        return Optional.ofNullable(this.serviceAccountJson);
    }

    /**
     * The x509 CA file for validating the certificate presented by the PostgreSQL server. Must be PEM encoded.
     * 
     */
    @Import(name="tlsCa")
    private @Nullable Output<String> tlsCa;

    /**
     * @return The x509 CA file for validating the certificate presented by the PostgreSQL server. Must be PEM encoded.
     * 
     */
    public Optional<Output<String>> tlsCa() {
        return Optional.ofNullable(this.tlsCa);
    }

    /**
     * The x509 client certificate for connecting to the database. Must be PEM encoded.
     * 
     */
    @Import(name="tlsCertificate")
    private @Nullable Output<String> tlsCertificate;

    /**
     * @return The x509 client certificate for connecting to the database. Must be PEM encoded.
     * 
     */
    public Optional<Output<String>> tlsCertificate() {
        return Optional.ofNullable(this.tlsCertificate);
    }

    /**
     * The root credential username used in the connection URL
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The root credential username used in the connection URL
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Username generation template.
     * 
     */
    @Import(name="usernameTemplate")
    private @Nullable Output<String> usernameTemplate;

    /**
     * @return Username generation template.
     * 
     */
    public Optional<Output<String>> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    private SecretBackendConnectionPostgresqlArgs() {}

    private SecretBackendConnectionPostgresqlArgs(SecretBackendConnectionPostgresqlArgs $) {
        this.authType = $.authType;
        this.connectionUrl = $.connectionUrl;
        this.disableEscaping = $.disableEscaping;
        this.maxConnectionLifetime = $.maxConnectionLifetime;
        this.maxIdleConnections = $.maxIdleConnections;
        this.maxOpenConnections = $.maxOpenConnections;
        this.password = $.password;
        this.passwordAuthentication = $.passwordAuthentication;
        this.passwordWo = $.passwordWo;
        this.passwordWoVersion = $.passwordWoVersion;
        this.privateKey = $.privateKey;
        this.selfManaged = $.selfManaged;
        this.serviceAccountJson = $.serviceAccountJson;
        this.tlsCa = $.tlsCa;
        this.tlsCertificate = $.tlsCertificate;
        this.username = $.username;
        this.usernameTemplate = $.usernameTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendConnectionPostgresqlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendConnectionPostgresqlArgs $;

        public Builder() {
            $ = new SecretBackendConnectionPostgresqlArgs();
        }

        public Builder(SecretBackendConnectionPostgresqlArgs defaults) {
            $ = new SecretBackendConnectionPostgresqlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType Specify alternative authorization type. (Only &#39;gcp_iam&#39; is valid currently)
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType Specify alternative authorization type. (Only &#39;gcp_iam&#39; is valid currently)
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param connectionUrl Connection string to use to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(@Nullable Output<String> connectionUrl) {
            $.connectionUrl = connectionUrl;
            return this;
        }

        /**
         * @param connectionUrl Connection string to use to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(String connectionUrl) {
            return connectionUrl(Output.of(connectionUrl));
        }

        /**
         * @param disableEscaping Disable special character escaping in username and password
         * 
         * @return builder
         * 
         */
        public Builder disableEscaping(@Nullable Output<Boolean> disableEscaping) {
            $.disableEscaping = disableEscaping;
            return this;
        }

        /**
         * @param disableEscaping Disable special character escaping in username and password
         * 
         * @return builder
         * 
         */
        public Builder disableEscaping(Boolean disableEscaping) {
            return disableEscaping(Output.of(disableEscaping));
        }

        /**
         * @param maxConnectionLifetime Maximum number of seconds a connection may be reused.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionLifetime(@Nullable Output<Integer> maxConnectionLifetime) {
            $.maxConnectionLifetime = maxConnectionLifetime;
            return this;
        }

        /**
         * @param maxConnectionLifetime Maximum number of seconds a connection may be reused.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionLifetime(Integer maxConnectionLifetime) {
            return maxConnectionLifetime(Output.of(maxConnectionLifetime));
        }

        /**
         * @param maxIdleConnections Maximum number of idle connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxIdleConnections(@Nullable Output<Integer> maxIdleConnections) {
            $.maxIdleConnections = maxIdleConnections;
            return this;
        }

        /**
         * @param maxIdleConnections Maximum number of idle connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxIdleConnections(Integer maxIdleConnections) {
            return maxIdleConnections(Output.of(maxIdleConnections));
        }

        /**
         * @param maxOpenConnections Maximum number of open connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxOpenConnections(@Nullable Output<Integer> maxOpenConnections) {
            $.maxOpenConnections = maxOpenConnections;
            return this;
        }

        /**
         * @param maxOpenConnections Maximum number of open connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxOpenConnections(Integer maxOpenConnections) {
            return maxOpenConnections(Output.of(maxOpenConnections));
        }

        /**
         * @param password The root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordAuthentication When set to `scram-sha-256`, passwords will be hashed by Vault before being sent to PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder passwordAuthentication(@Nullable Output<String> passwordAuthentication) {
            $.passwordAuthentication = passwordAuthentication;
            return this;
        }

        /**
         * @param passwordAuthentication When set to `scram-sha-256`, passwords will be hashed by Vault before being sent to PostgreSQL.
         * 
         * @return builder
         * 
         */
        public Builder passwordAuthentication(String passwordAuthentication) {
            return passwordAuthentication(Output.of(passwordAuthentication));
        }

        /**
         * @param passwordWo **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
         * Write-only field for the root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder passwordWo(@Nullable Output<String> passwordWo) {
            $.passwordWo = passwordWo;
            return this;
        }

        /**
         * @param passwordWo **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
         * Write-only field for the root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder passwordWo(String passwordWo) {
            return passwordWo(Output.of(passwordWo));
        }

        /**
         * @param passwordWoVersion Version counter for root credential password write-only field
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(@Nullable Output<Integer> passwordWoVersion) {
            $.passwordWoVersion = passwordWoVersion;
            return this;
        }

        /**
         * @param passwordWoVersion Version counter for root credential password write-only field
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(Integer passwordWoVersion) {
            return passwordWoVersion(Output.of(passwordWoVersion));
        }

        /**
         * @param privateKey The secret key used for the x509 client certificate. Must be PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The secret key used for the x509 client certificate. Must be PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param selfManaged If set, allows onboarding static roles with a rootless connection configuration.
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(@Nullable Output<Boolean> selfManaged) {
            $.selfManaged = selfManaged;
            return this;
        }

        /**
         * @param selfManaged If set, allows onboarding static roles with a rootless connection configuration.
         * 
         * @return builder
         * 
         */
        public Builder selfManaged(Boolean selfManaged) {
            return selfManaged(Output.of(selfManaged));
        }

        /**
         * @param serviceAccountJson A JSON encoded credential for use with IAM authorization
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountJson(@Nullable Output<String> serviceAccountJson) {
            $.serviceAccountJson = serviceAccountJson;
            return this;
        }

        /**
         * @param serviceAccountJson A JSON encoded credential for use with IAM authorization
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountJson(String serviceAccountJson) {
            return serviceAccountJson(Output.of(serviceAccountJson));
        }

        /**
         * @param tlsCa The x509 CA file for validating the certificate presented by the PostgreSQL server. Must be PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder tlsCa(@Nullable Output<String> tlsCa) {
            $.tlsCa = tlsCa;
            return this;
        }

        /**
         * @param tlsCa The x509 CA file for validating the certificate presented by the PostgreSQL server. Must be PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder tlsCa(String tlsCa) {
            return tlsCa(Output.of(tlsCa));
        }

        /**
         * @param tlsCertificate The x509 client certificate for connecting to the database. Must be PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificate(@Nullable Output<String> tlsCertificate) {
            $.tlsCertificate = tlsCertificate;
            return this;
        }

        /**
         * @param tlsCertificate The x509 client certificate for connecting to the database. Must be PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertificate(String tlsCertificate) {
            return tlsCertificate(Output.of(tlsCertificate));
        }

        /**
         * @param username The root credential username used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The root credential username used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param usernameTemplate Username generation template.
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(@Nullable Output<String> usernameTemplate) {
            $.usernameTemplate = usernameTemplate;
            return this;
        }

        /**
         * @param usernameTemplate Username generation template.
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(String usernameTemplate) {
            return usernameTemplate(Output.of(usernameTemplate));
        }

        public SecretBackendConnectionPostgresqlArgs build() {
            return $;
        }
    }

}
