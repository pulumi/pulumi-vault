// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.config.inputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthLoginKerberos {
    /**
     * @return Disable the Kerberos FAST negotiation.
     * 
     */
    private @Nullable Boolean disableFastNegotiation;
    /**
     * @return The Kerberos keytab file containing the entry of the login entity.
     * 
     */
    private @Nullable String keytabPath;
    /**
     * @return A valid Kerberos configuration file e.g. /etc/krb5.conf.
     * 
     */
    private @Nullable String krb5confPath;
    /**
     * @return The path where the authentication engine is mounted.
     * 
     */
    private @Nullable String mount;
    /**
     * @return The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    private @Nullable String namespace;
    /**
     * @return The Kerberos server&#39;s authoritative authentication domain
     * 
     */
    private @Nullable String realm;
    /**
     * @return Strip the host from the username found in the keytab.
     * 
     */
    private @Nullable Boolean removeInstanceName;
    /**
     * @return The service principle name.
     * 
     */
    private @Nullable String service;
    /**
     * @return Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
     * 
     */
    private @Nullable String token;
    /**
     * @return Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    private @Nullable Boolean useRootNamespace;
    /**
     * @return The username to login into Kerberos with.
     * 
     */
    private @Nullable String username;

    private AuthLoginKerberos() {}
    /**
     * @return Disable the Kerberos FAST negotiation.
     * 
     */
    public Optional<Boolean> disableFastNegotiation() {
        return Optional.ofNullable(this.disableFastNegotiation);
    }
    /**
     * @return The Kerberos keytab file containing the entry of the login entity.
     * 
     */
    public Optional<String> keytabPath() {
        return Optional.ofNullable(this.keytabPath);
    }
    /**
     * @return A valid Kerberos configuration file e.g. /etc/krb5.conf.
     * 
     */
    public Optional<String> krb5confPath() {
        return Optional.ofNullable(this.krb5confPath);
    }
    /**
     * @return The path where the authentication engine is mounted.
     * 
     */
    public Optional<String> mount() {
        return Optional.ofNullable(this.mount);
    }
    /**
     * @return The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The Kerberos server&#39;s authoritative authentication domain
     * 
     */
    public Optional<String> realm() {
        return Optional.ofNullable(this.realm);
    }
    /**
     * @return Strip the host from the username found in the keytab.
     * 
     */
    public Optional<Boolean> removeInstanceName() {
        return Optional.ofNullable(this.removeInstanceName);
    }
    /**
     * @return The service principle name.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }
    /**
     * @return Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    public Optional<Boolean> useRootNamespace() {
        return Optional.ofNullable(this.useRootNamespace);
    }
    /**
     * @return The username to login into Kerberos with.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthLoginKerberos defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean disableFastNegotiation;
        private @Nullable String keytabPath;
        private @Nullable String krb5confPath;
        private @Nullable String mount;
        private @Nullable String namespace;
        private @Nullable String realm;
        private @Nullable Boolean removeInstanceName;
        private @Nullable String service;
        private @Nullable String token;
        private @Nullable Boolean useRootNamespace;
        private @Nullable String username;
        public Builder() {}
        public Builder(AuthLoginKerberos defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disableFastNegotiation = defaults.disableFastNegotiation;
    	      this.keytabPath = defaults.keytabPath;
    	      this.krb5confPath = defaults.krb5confPath;
    	      this.mount = defaults.mount;
    	      this.namespace = defaults.namespace;
    	      this.realm = defaults.realm;
    	      this.removeInstanceName = defaults.removeInstanceName;
    	      this.service = defaults.service;
    	      this.token = defaults.token;
    	      this.useRootNamespace = defaults.useRootNamespace;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder disableFastNegotiation(@Nullable Boolean disableFastNegotiation) {

            this.disableFastNegotiation = disableFastNegotiation;
            return this;
        }
        @CustomType.Setter
        public Builder keytabPath(@Nullable String keytabPath) {

            this.keytabPath = keytabPath;
            return this;
        }
        @CustomType.Setter
        public Builder krb5confPath(@Nullable String krb5confPath) {

            this.krb5confPath = krb5confPath;
            return this;
        }
        @CustomType.Setter
        public Builder mount(@Nullable String mount) {

            this.mount = mount;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder realm(@Nullable String realm) {

            this.realm = realm;
            return this;
        }
        @CustomType.Setter
        public Builder removeInstanceName(@Nullable Boolean removeInstanceName) {

            this.removeInstanceName = removeInstanceName;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {

            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder useRootNamespace(@Nullable Boolean useRootNamespace) {

            this.useRootNamespace = useRootNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public AuthLoginKerberos build() {
            final var _resultValue = new AuthLoginKerberos();
            _resultValue.disableFastNegotiation = disableFastNegotiation;
            _resultValue.keytabPath = keytabPath;
            _resultValue.krb5confPath = krb5confPath;
            _resultValue.mount = mount;
            _resultValue.namespace = namespace;
            _resultValue.realm = realm;
            _resultValue.removeInstanceName = removeInstanceName;
            _resultValue.service = service;
            _resultValue.token = token;
            _resultValue.useRootNamespace = useRootNamespace;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
