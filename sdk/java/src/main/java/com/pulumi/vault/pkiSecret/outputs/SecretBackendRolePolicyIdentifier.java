// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretBackendRolePolicyIdentifier {
    /**
     * @return The URL of the CPS for the policy identifier
     * 
     * Example usage:
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.Mount;
     * import com.pulumi.vault.MountArgs;
     * import com.pulumi.vault.pkiSecret.SecretBackendRole;
     * import com.pulumi.vault.pkiSecret.SecretBackendRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pki = new Mount("pki", MountArgs.builder()
     *             .path("pki")
     *             .type("pki")
     *             .defaultLeaseTtlSeconds(3600)
     *             .maxLeaseTtlSeconds(86400)
     *             .build());
     * 
     *         var role = new SecretBackendRole("role", SecretBackendRoleArgs.builder()
     *             .backend(pki.path())
     *             .name("my_role")
     *             .ttl(3600)
     *             .allowIpSans(true)
     *             .keyType("rsa")
     *             .keyBits(4096)
     *             .allowedDomains(            
     *                 "example.com",
     *                 "my.domain")
     *             .allowSubdomains(true)
     *             .policyIdentifiers(            
     *                 Map.ofEntries(
     *                     Map.entry("oid", "1.3.6.1.4.1.7.8"),
     *                     Map.entry("notice", "I am a user Notice")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("oid", "1.3.6.1.4.1.44947.1.2.4"),
     *                     Map.entry("cps", "https://example.com")
     *                 ))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    private @Nullable String cps;
    /**
     * @return A notice for the policy identifier
     * 
     */
    private @Nullable String notice;
    /**
     * @return The OID for the policy identifier
     * 
     */
    private String oid;

    private SecretBackendRolePolicyIdentifier() {}
    /**
     * @return The URL of the CPS for the policy identifier
     * 
     * Example usage:
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.Mount;
     * import com.pulumi.vault.MountArgs;
     * import com.pulumi.vault.pkiSecret.SecretBackendRole;
     * import com.pulumi.vault.pkiSecret.SecretBackendRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pki = new Mount("pki", MountArgs.builder()
     *             .path("pki")
     *             .type("pki")
     *             .defaultLeaseTtlSeconds(3600)
     *             .maxLeaseTtlSeconds(86400)
     *             .build());
     * 
     *         var role = new SecretBackendRole("role", SecretBackendRoleArgs.builder()
     *             .backend(pki.path())
     *             .name("my_role")
     *             .ttl(3600)
     *             .allowIpSans(true)
     *             .keyType("rsa")
     *             .keyBits(4096)
     *             .allowedDomains(            
     *                 "example.com",
     *                 "my.domain")
     *             .allowSubdomains(true)
     *             .policyIdentifiers(            
     *                 Map.ofEntries(
     *                     Map.entry("oid", "1.3.6.1.4.1.7.8"),
     *                     Map.entry("notice", "I am a user Notice")
     *                 ),
     *                 Map.ofEntries(
     *                     Map.entry("oid", "1.3.6.1.4.1.44947.1.2.4"),
     *                     Map.entry("cps", "https://example.com")
     *                 ))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public Optional<String> cps() {
        return Optional.ofNullable(this.cps);
    }
    /**
     * @return A notice for the policy identifier
     * 
     */
    public Optional<String> notice() {
        return Optional.ofNullable(this.notice);
    }
    /**
     * @return The OID for the policy identifier
     * 
     */
    public String oid() {
        return this.oid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretBackendRolePolicyIdentifier defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cps;
        private @Nullable String notice;
        private String oid;
        public Builder() {}
        public Builder(SecretBackendRolePolicyIdentifier defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cps = defaults.cps;
    	      this.notice = defaults.notice;
    	      this.oid = defaults.oid;
        }

        @CustomType.Setter
        public Builder cps(@Nullable String cps) {

            this.cps = cps;
            return this;
        }
        @CustomType.Setter
        public Builder notice(@Nullable String notice) {

            this.notice = notice;
            return this;
        }
        @CustomType.Setter
        public Builder oid(String oid) {
            if (oid == null) {
              throw new MissingRequiredPropertyException("SecretBackendRolePolicyIdentifier", "oid");
            }
            this.oid = oid;
            return this;
        }
        public SecretBackendRolePolicyIdentifier build() {
            final var _resultValue = new SecretBackendRolePolicyIdentifier();
            _resultValue.cps = cps;
            _resultValue.notice = notice;
            _resultValue.oid = oid;
            return _resultValue;
        }
    }
}
