// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendConnectionOracleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendConnectionOracleArgs Empty = new SecretBackendConnectionOracleArgs();

    /**
     * Connection string to use to connect to the database.
     * 
     */
    @Import(name="connectionUrl")
    private @Nullable Output<String> connectionUrl;

    /**
     * @return Connection string to use to connect to the database.
     * 
     */
    public Optional<Output<String>> connectionUrl() {
        return Optional.ofNullable(this.connectionUrl);
    }

    /**
     * Set to true to disconnect any open sessions prior to running the revocation statements.
     * 
     */
    @Import(name="disconnectSessions")
    private @Nullable Output<Boolean> disconnectSessions;

    /**
     * @return Set to true to disconnect any open sessions prior to running the revocation statements.
     * 
     */
    public Optional<Output<Boolean>> disconnectSessions() {
        return Optional.ofNullable(this.disconnectSessions);
    }

    /**
     * Maximum number of seconds a connection may be reused.
     * 
     */
    @Import(name="maxConnectionLifetime")
    private @Nullable Output<Integer> maxConnectionLifetime;

    /**
     * @return Maximum number of seconds a connection may be reused.
     * 
     */
    public Optional<Output<Integer>> maxConnectionLifetime() {
        return Optional.ofNullable(this.maxConnectionLifetime);
    }

    /**
     * Maximum number of idle connections to the database.
     * 
     */
    @Import(name="maxIdleConnections")
    private @Nullable Output<Integer> maxIdleConnections;

    /**
     * @return Maximum number of idle connections to the database.
     * 
     */
    public Optional<Output<Integer>> maxIdleConnections() {
        return Optional.ofNullable(this.maxIdleConnections);
    }

    /**
     * Maximum number of open connections to the database.
     * 
     */
    @Import(name="maxOpenConnections")
    private @Nullable Output<Integer> maxOpenConnections;

    /**
     * @return Maximum number of open connections to the database.
     * 
     */
    public Optional<Output<Integer>> maxOpenConnections() {
        return Optional.ofNullable(this.maxOpenConnections);
    }

    /**
     * The root credential password used in the connection URL
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The root credential password used in the connection URL
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Write-only field for the root credential password used in the connection URL
     * 
     */
    @Import(name="passwordWo")
    private @Nullable Output<String> passwordWo;

    /**
     * @return **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Write-only field for the root credential password used in the connection URL
     * 
     */
    public Optional<Output<String>> passwordWo() {
        return Optional.ofNullable(this.passwordWo);
    }

    /**
     * Version counter for root credential password write-only field
     * 
     */
    @Import(name="passwordWoVersion")
    private @Nullable Output<Integer> passwordWoVersion;

    /**
     * @return Version counter for root credential password write-only field
     * 
     */
    public Optional<Output<Integer>> passwordWoVersion() {
        return Optional.ofNullable(this.passwordWoVersion);
    }

    /**
     * Set to true in order to split statements after semi-colons.
     * 
     */
    @Import(name="splitStatements")
    private @Nullable Output<Boolean> splitStatements;

    /**
     * @return Set to true in order to split statements after semi-colons.
     * 
     */
    public Optional<Output<Boolean>> splitStatements() {
        return Optional.ofNullable(this.splitStatements);
    }

    /**
     * The root credential username used in the connection URL
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The root credential username used in the connection URL
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Username generation template.
     * 
     */
    @Import(name="usernameTemplate")
    private @Nullable Output<String> usernameTemplate;

    /**
     * @return Username generation template.
     * 
     */
    public Optional<Output<String>> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    private SecretBackendConnectionOracleArgs() {}

    private SecretBackendConnectionOracleArgs(SecretBackendConnectionOracleArgs $) {
        this.connectionUrl = $.connectionUrl;
        this.disconnectSessions = $.disconnectSessions;
        this.maxConnectionLifetime = $.maxConnectionLifetime;
        this.maxIdleConnections = $.maxIdleConnections;
        this.maxOpenConnections = $.maxOpenConnections;
        this.password = $.password;
        this.passwordWo = $.passwordWo;
        this.passwordWoVersion = $.passwordWoVersion;
        this.splitStatements = $.splitStatements;
        this.username = $.username;
        this.usernameTemplate = $.usernameTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendConnectionOracleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendConnectionOracleArgs $;

        public Builder() {
            $ = new SecretBackendConnectionOracleArgs();
        }

        public Builder(SecretBackendConnectionOracleArgs defaults) {
            $ = new SecretBackendConnectionOracleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionUrl Connection string to use to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(@Nullable Output<String> connectionUrl) {
            $.connectionUrl = connectionUrl;
            return this;
        }

        /**
         * @param connectionUrl Connection string to use to connect to the database.
         * 
         * @return builder
         * 
         */
        public Builder connectionUrl(String connectionUrl) {
            return connectionUrl(Output.of(connectionUrl));
        }

        /**
         * @param disconnectSessions Set to true to disconnect any open sessions prior to running the revocation statements.
         * 
         * @return builder
         * 
         */
        public Builder disconnectSessions(@Nullable Output<Boolean> disconnectSessions) {
            $.disconnectSessions = disconnectSessions;
            return this;
        }

        /**
         * @param disconnectSessions Set to true to disconnect any open sessions prior to running the revocation statements.
         * 
         * @return builder
         * 
         */
        public Builder disconnectSessions(Boolean disconnectSessions) {
            return disconnectSessions(Output.of(disconnectSessions));
        }

        /**
         * @param maxConnectionLifetime Maximum number of seconds a connection may be reused.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionLifetime(@Nullable Output<Integer> maxConnectionLifetime) {
            $.maxConnectionLifetime = maxConnectionLifetime;
            return this;
        }

        /**
         * @param maxConnectionLifetime Maximum number of seconds a connection may be reused.
         * 
         * @return builder
         * 
         */
        public Builder maxConnectionLifetime(Integer maxConnectionLifetime) {
            return maxConnectionLifetime(Output.of(maxConnectionLifetime));
        }

        /**
         * @param maxIdleConnections Maximum number of idle connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxIdleConnections(@Nullable Output<Integer> maxIdleConnections) {
            $.maxIdleConnections = maxIdleConnections;
            return this;
        }

        /**
         * @param maxIdleConnections Maximum number of idle connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxIdleConnections(Integer maxIdleConnections) {
            return maxIdleConnections(Output.of(maxIdleConnections));
        }

        /**
         * @param maxOpenConnections Maximum number of open connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxOpenConnections(@Nullable Output<Integer> maxOpenConnections) {
            $.maxOpenConnections = maxOpenConnections;
            return this;
        }

        /**
         * @param maxOpenConnections Maximum number of open connections to the database.
         * 
         * @return builder
         * 
         */
        public Builder maxOpenConnections(Integer maxOpenConnections) {
            return maxOpenConnections(Output.of(maxOpenConnections));
        }

        /**
         * @param password The root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordWo **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
         * Write-only field for the root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder passwordWo(@Nullable Output<String> passwordWo) {
            $.passwordWo = passwordWo;
            return this;
        }

        /**
         * @param passwordWo **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
         * Write-only field for the root credential password used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder passwordWo(String passwordWo) {
            return passwordWo(Output.of(passwordWo));
        }

        /**
         * @param passwordWoVersion Version counter for root credential password write-only field
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(@Nullable Output<Integer> passwordWoVersion) {
            $.passwordWoVersion = passwordWoVersion;
            return this;
        }

        /**
         * @param passwordWoVersion Version counter for root credential password write-only field
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(Integer passwordWoVersion) {
            return passwordWoVersion(Output.of(passwordWoVersion));
        }

        /**
         * @param splitStatements Set to true in order to split statements after semi-colons.
         * 
         * @return builder
         * 
         */
        public Builder splitStatements(@Nullable Output<Boolean> splitStatements) {
            $.splitStatements = splitStatements;
            return this;
        }

        /**
         * @param splitStatements Set to true in order to split statements after semi-colons.
         * 
         * @return builder
         * 
         */
        public Builder splitStatements(Boolean splitStatements) {
            return splitStatements(Output.of(splitStatements));
        }

        /**
         * @param username The root credential username used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The root credential username used in the connection URL
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param usernameTemplate Username generation template.
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(@Nullable Output<String> usernameTemplate) {
            $.usernameTemplate = usernameTemplate;
            return this;
        }

        /**
         * @param usernameTemplate Username generation template.
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(String usernameTemplate) {
            return usernameTemplate(Output.of(usernameTemplate));
        }

        public SecretBackendConnectionOracleArgs build() {
            return $;
        }
    }

}
