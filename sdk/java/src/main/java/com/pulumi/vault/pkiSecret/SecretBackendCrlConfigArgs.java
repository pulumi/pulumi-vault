// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendCrlConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendCrlConfigArgs Empty = new SecretBackendCrlConfigArgs();

    /**
     * Enables periodic rebuilding of the CRL upon expiry. **Vault 1.12+**
     * 
     */
    @Import(name="autoRebuild")
    private @Nullable Output<Boolean> autoRebuild;

    /**
     * @return Enables periodic rebuilding of the CRL upon expiry. **Vault 1.12+**
     * 
     */
    public Optional<Output<Boolean>> autoRebuild() {
        return Optional.ofNullable(this.autoRebuild);
    }

    /**
     * Grace period before CRL expiry to attempt rebuild of CRL. **Vault 1.12+**
     * 
     */
    @Import(name="autoRebuildGracePeriod")
    private @Nullable Output<String> autoRebuildGracePeriod;

    /**
     * @return Grace period before CRL expiry to attempt rebuild of CRL. **Vault 1.12+**
     * 
     */
    public Optional<Output<String>> autoRebuildGracePeriod() {
        return Optional.ofNullable(this.autoRebuildGracePeriod);
    }

    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * Enable cross-cluster revocation request queues. **Vault 1.13+**
     * 
     */
    @Import(name="crossClusterRevocation")
    private @Nullable Output<Boolean> crossClusterRevocation;

    /**
     * @return Enable cross-cluster revocation request queues. **Vault 1.13+**
     * 
     */
    public Optional<Output<Boolean>> crossClusterRevocation() {
        return Optional.ofNullable(this.crossClusterRevocation);
    }

    /**
     * Interval to check for new revocations on, to regenerate the delta CRL.
     * 
     */
    @Import(name="deltaRebuildInterval")
    private @Nullable Output<String> deltaRebuildInterval;

    /**
     * @return Interval to check for new revocations on, to regenerate the delta CRL.
     * 
     */
    public Optional<Output<String>> deltaRebuildInterval() {
        return Optional.ofNullable(this.deltaRebuildInterval);
    }

    /**
     * Disables or enables CRL building.
     * 
     */
    @Import(name="disable")
    private @Nullable Output<Boolean> disable;

    /**
     * @return Disables or enables CRL building.
     * 
     */
    public Optional<Output<Boolean>> disable() {
        return Optional.ofNullable(this.disable);
    }

    /**
     * Enables building of delta CRLs with up-to-date revocation information,
     * augmenting the last complete CRL.  **Vault 1.12+**
     * 
     */
    @Import(name="enableDelta")
    private @Nullable Output<Boolean> enableDelta;

    /**
     * @return Enables building of delta CRLs with up-to-date revocation information,
     * augmenting the last complete CRL.  **Vault 1.12+**
     * 
     */
    public Optional<Output<Boolean>> enableDelta() {
        return Optional.ofNullable(this.enableDelta);
    }

    /**
     * Specifies the time until expiration.
     * 
     */
    @Import(name="expiry")
    private @Nullable Output<String> expiry;

    /**
     * @return Specifies the time until expiration.
     * 
     */
    public Optional<Output<String>> expiry() {
        return Optional.ofNullable(this.expiry);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Disables the OCSP responder in Vault. **Vault 1.12+**
     * 
     */
    @Import(name="ocspDisable")
    private @Nullable Output<Boolean> ocspDisable;

    /**
     * @return Disables the OCSP responder in Vault. **Vault 1.12+**
     * 
     */
    public Optional<Output<Boolean>> ocspDisable() {
        return Optional.ofNullable(this.ocspDisable);
    }

    /**
     * The amount of time an OCSP response can be cached for, useful for OCSP stapling
     * refresh durations. **Vault 1.12+**
     * 
     */
    @Import(name="ocspExpiry")
    private @Nullable Output<String> ocspExpiry;

    /**
     * @return The amount of time an OCSP response can be cached for, useful for OCSP stapling
     * refresh durations. **Vault 1.12+**
     * 
     */
    public Optional<Output<String>> ocspExpiry() {
        return Optional.ofNullable(this.ocspExpiry);
    }

    /**
     * Enables unified CRL and OCSP building. **Vault 1.13+**
     * 
     */
    @Import(name="unifiedCrl")
    private @Nullable Output<Boolean> unifiedCrl;

    /**
     * @return Enables unified CRL and OCSP building. **Vault 1.13+**
     * 
     */
    public Optional<Output<Boolean>> unifiedCrl() {
        return Optional.ofNullable(this.unifiedCrl);
    }

    /**
     * Enables serving the unified CRL and OCSP on the existing, previously
     * cluster-local paths. **Vault 1.13+**
     * 
     */
    @Import(name="unifiedCrlOnExistingPaths")
    private @Nullable Output<Boolean> unifiedCrlOnExistingPaths;

    /**
     * @return Enables serving the unified CRL and OCSP on the existing, previously
     * cluster-local paths. **Vault 1.13+**
     * 
     */
    public Optional<Output<Boolean>> unifiedCrlOnExistingPaths() {
        return Optional.ofNullable(this.unifiedCrlOnExistingPaths);
    }

    private SecretBackendCrlConfigArgs() {}

    private SecretBackendCrlConfigArgs(SecretBackendCrlConfigArgs $) {
        this.autoRebuild = $.autoRebuild;
        this.autoRebuildGracePeriod = $.autoRebuildGracePeriod;
        this.backend = $.backend;
        this.crossClusterRevocation = $.crossClusterRevocation;
        this.deltaRebuildInterval = $.deltaRebuildInterval;
        this.disable = $.disable;
        this.enableDelta = $.enableDelta;
        this.expiry = $.expiry;
        this.namespace = $.namespace;
        this.ocspDisable = $.ocspDisable;
        this.ocspExpiry = $.ocspExpiry;
        this.unifiedCrl = $.unifiedCrl;
        this.unifiedCrlOnExistingPaths = $.unifiedCrlOnExistingPaths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendCrlConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendCrlConfigArgs $;

        public Builder() {
            $ = new SecretBackendCrlConfigArgs();
        }

        public Builder(SecretBackendCrlConfigArgs defaults) {
            $ = new SecretBackendCrlConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRebuild Enables periodic rebuilding of the CRL upon expiry. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder autoRebuild(@Nullable Output<Boolean> autoRebuild) {
            $.autoRebuild = autoRebuild;
            return this;
        }

        /**
         * @param autoRebuild Enables periodic rebuilding of the CRL upon expiry. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder autoRebuild(Boolean autoRebuild) {
            return autoRebuild(Output.of(autoRebuild));
        }

        /**
         * @param autoRebuildGracePeriod Grace period before CRL expiry to attempt rebuild of CRL. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder autoRebuildGracePeriod(@Nullable Output<String> autoRebuildGracePeriod) {
            $.autoRebuildGracePeriod = autoRebuildGracePeriod;
            return this;
        }

        /**
         * @param autoRebuildGracePeriod Grace period before CRL expiry to attempt rebuild of CRL. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder autoRebuildGracePeriod(String autoRebuildGracePeriod) {
            return autoRebuildGracePeriod(Output.of(autoRebuildGracePeriod));
        }

        /**
         * @param backend The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param crossClusterRevocation Enable cross-cluster revocation request queues. **Vault 1.13+**
         * 
         * @return builder
         * 
         */
        public Builder crossClusterRevocation(@Nullable Output<Boolean> crossClusterRevocation) {
            $.crossClusterRevocation = crossClusterRevocation;
            return this;
        }

        /**
         * @param crossClusterRevocation Enable cross-cluster revocation request queues. **Vault 1.13+**
         * 
         * @return builder
         * 
         */
        public Builder crossClusterRevocation(Boolean crossClusterRevocation) {
            return crossClusterRevocation(Output.of(crossClusterRevocation));
        }

        /**
         * @param deltaRebuildInterval Interval to check for new revocations on, to regenerate the delta CRL.
         * 
         * @return builder
         * 
         */
        public Builder deltaRebuildInterval(@Nullable Output<String> deltaRebuildInterval) {
            $.deltaRebuildInterval = deltaRebuildInterval;
            return this;
        }

        /**
         * @param deltaRebuildInterval Interval to check for new revocations on, to regenerate the delta CRL.
         * 
         * @return builder
         * 
         */
        public Builder deltaRebuildInterval(String deltaRebuildInterval) {
            return deltaRebuildInterval(Output.of(deltaRebuildInterval));
        }

        /**
         * @param disable Disables or enables CRL building.
         * 
         * @return builder
         * 
         */
        public Builder disable(@Nullable Output<Boolean> disable) {
            $.disable = disable;
            return this;
        }

        /**
         * @param disable Disables or enables CRL building.
         * 
         * @return builder
         * 
         */
        public Builder disable(Boolean disable) {
            return disable(Output.of(disable));
        }

        /**
         * @param enableDelta Enables building of delta CRLs with up-to-date revocation information,
         * augmenting the last complete CRL.  **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder enableDelta(@Nullable Output<Boolean> enableDelta) {
            $.enableDelta = enableDelta;
            return this;
        }

        /**
         * @param enableDelta Enables building of delta CRLs with up-to-date revocation information,
         * augmenting the last complete CRL.  **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder enableDelta(Boolean enableDelta) {
            return enableDelta(Output.of(enableDelta));
        }

        /**
         * @param expiry Specifies the time until expiration.
         * 
         * @return builder
         * 
         */
        public Builder expiry(@Nullable Output<String> expiry) {
            $.expiry = expiry;
            return this;
        }

        /**
         * @param expiry Specifies the time until expiration.
         * 
         * @return builder
         * 
         */
        public Builder expiry(String expiry) {
            return expiry(Output.of(expiry));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param ocspDisable Disables the OCSP responder in Vault. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder ocspDisable(@Nullable Output<Boolean> ocspDisable) {
            $.ocspDisable = ocspDisable;
            return this;
        }

        /**
         * @param ocspDisable Disables the OCSP responder in Vault. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder ocspDisable(Boolean ocspDisable) {
            return ocspDisable(Output.of(ocspDisable));
        }

        /**
         * @param ocspExpiry The amount of time an OCSP response can be cached for, useful for OCSP stapling
         * refresh durations. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder ocspExpiry(@Nullable Output<String> ocspExpiry) {
            $.ocspExpiry = ocspExpiry;
            return this;
        }

        /**
         * @param ocspExpiry The amount of time an OCSP response can be cached for, useful for OCSP stapling
         * refresh durations. **Vault 1.12+**
         * 
         * @return builder
         * 
         */
        public Builder ocspExpiry(String ocspExpiry) {
            return ocspExpiry(Output.of(ocspExpiry));
        }

        /**
         * @param unifiedCrl Enables unified CRL and OCSP building. **Vault 1.13+**
         * 
         * @return builder
         * 
         */
        public Builder unifiedCrl(@Nullable Output<Boolean> unifiedCrl) {
            $.unifiedCrl = unifiedCrl;
            return this;
        }

        /**
         * @param unifiedCrl Enables unified CRL and OCSP building. **Vault 1.13+**
         * 
         * @return builder
         * 
         */
        public Builder unifiedCrl(Boolean unifiedCrl) {
            return unifiedCrl(Output.of(unifiedCrl));
        }

        /**
         * @param unifiedCrlOnExistingPaths Enables serving the unified CRL and OCSP on the existing, previously
         * cluster-local paths. **Vault 1.13+**
         * 
         * @return builder
         * 
         */
        public Builder unifiedCrlOnExistingPaths(@Nullable Output<Boolean> unifiedCrlOnExistingPaths) {
            $.unifiedCrlOnExistingPaths = unifiedCrlOnExistingPaths;
            return this;
        }

        /**
         * @param unifiedCrlOnExistingPaths Enables serving the unified CRL and OCSP on the existing, previously
         * cluster-local paths. **Vault 1.13+**
         * 
         * @return builder
         * 
         */
        public Builder unifiedCrlOnExistingPaths(Boolean unifiedCrlOnExistingPaths) {
            return unifiedCrlOnExistingPaths(Output.of(unifiedCrlOnExistingPaths));
        }

        public SecretBackendCrlConfigArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("SecretBackendCrlConfigArgs", "backend");
            }
            return $;
        }
    }

}
