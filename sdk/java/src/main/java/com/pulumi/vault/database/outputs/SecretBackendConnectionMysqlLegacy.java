// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretBackendConnectionMysqlLegacy {
    /**
     * @return Enable IAM authentication to a Google Cloud instance when set to `gcp_iam`
     * 
     */
    private @Nullable String authType;
    /**
     * @return A URL containing connection information. See
     * the [Vault
     * docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
     * for an example.
     * 
     */
    private @Nullable String connectionUrl;
    /**
     * @return The maximum number of seconds to keep
     * a connection alive for.
     * 
     */
    private @Nullable Integer maxConnectionLifetime;
    /**
     * @return The maximum number of idle connections to
     * maintain.
     * 
     */
    private @Nullable Integer maxIdleConnections;
    /**
     * @return The maximum number of open connections to
     * use.
     * 
     */
    private @Nullable Integer maxOpenConnections;
    /**
     * @return The password to authenticate with.
     * 
     */
    private @Nullable String password;
    /**
     * @return JSON encoding of an IAM access key. Requires `auth_type` to be `gcp_iam`.
     * 
     */
    private @Nullable String serviceAccountJson;
    /**
     * @return x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
     * 
     */
    private @Nullable String tlsCa;
    /**
     * @return x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
     * 
     */
    private @Nullable String tlsCertificateKey;
    /**
     * @return The username to authenticate with.
     * 
     */
    private @Nullable String username;
    /**
     * @return Template describing how dynamic usernames are generated.
     * 
     */
    private @Nullable String usernameTemplate;

    private SecretBackendConnectionMysqlLegacy() {}
    /**
     * @return Enable IAM authentication to a Google Cloud instance when set to `gcp_iam`
     * 
     */
    public Optional<String> authType() {
        return Optional.ofNullable(this.authType);
    }
    /**
     * @return A URL containing connection information. See
     * the [Vault
     * docs](https://www.vaultproject.io/api-docs/secret/databases/mongodb.html#sample-payload)
     * for an example.
     * 
     */
    public Optional<String> connectionUrl() {
        return Optional.ofNullable(this.connectionUrl);
    }
    /**
     * @return The maximum number of seconds to keep
     * a connection alive for.
     * 
     */
    public Optional<Integer> maxConnectionLifetime() {
        return Optional.ofNullable(this.maxConnectionLifetime);
    }
    /**
     * @return The maximum number of idle connections to
     * maintain.
     * 
     */
    public Optional<Integer> maxIdleConnections() {
        return Optional.ofNullable(this.maxIdleConnections);
    }
    /**
     * @return The maximum number of open connections to
     * use.
     * 
     */
    public Optional<Integer> maxOpenConnections() {
        return Optional.ofNullable(this.maxOpenConnections);
    }
    /**
     * @return The password to authenticate with.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return JSON encoding of an IAM access key. Requires `auth_type` to be `gcp_iam`.
     * 
     */
    public Optional<String> serviceAccountJson() {
        return Optional.ofNullable(this.serviceAccountJson);
    }
    /**
     * @return x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
     * 
     */
    public Optional<String> tlsCa() {
        return Optional.ofNullable(this.tlsCa);
    }
    /**
     * @return x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
     * 
     */
    public Optional<String> tlsCertificateKey() {
        return Optional.ofNullable(this.tlsCertificateKey);
    }
    /**
     * @return The username to authenticate with.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return Template describing how dynamic usernames are generated.
     * 
     */
    public Optional<String> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretBackendConnectionMysqlLegacy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authType;
        private @Nullable String connectionUrl;
        private @Nullable Integer maxConnectionLifetime;
        private @Nullable Integer maxIdleConnections;
        private @Nullable Integer maxOpenConnections;
        private @Nullable String password;
        private @Nullable String serviceAccountJson;
        private @Nullable String tlsCa;
        private @Nullable String tlsCertificateKey;
        private @Nullable String username;
        private @Nullable String usernameTemplate;
        public Builder() {}
        public Builder(SecretBackendConnectionMysqlLegacy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authType = defaults.authType;
    	      this.connectionUrl = defaults.connectionUrl;
    	      this.maxConnectionLifetime = defaults.maxConnectionLifetime;
    	      this.maxIdleConnections = defaults.maxIdleConnections;
    	      this.maxOpenConnections = defaults.maxOpenConnections;
    	      this.password = defaults.password;
    	      this.serviceAccountJson = defaults.serviceAccountJson;
    	      this.tlsCa = defaults.tlsCa;
    	      this.tlsCertificateKey = defaults.tlsCertificateKey;
    	      this.username = defaults.username;
    	      this.usernameTemplate = defaults.usernameTemplate;
        }

        @CustomType.Setter
        public Builder authType(@Nullable String authType) {

            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder connectionUrl(@Nullable String connectionUrl) {

            this.connectionUrl = connectionUrl;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionLifetime(@Nullable Integer maxConnectionLifetime) {

            this.maxConnectionLifetime = maxConnectionLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder maxIdleConnections(@Nullable Integer maxIdleConnections) {

            this.maxIdleConnections = maxIdleConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxOpenConnections(@Nullable Integer maxOpenConnections) {

            this.maxOpenConnections = maxOpenConnections;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountJson(@Nullable String serviceAccountJson) {

            this.serviceAccountJson = serviceAccountJson;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCa(@Nullable String tlsCa) {

            this.tlsCa = tlsCa;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCertificateKey(@Nullable String tlsCertificateKey) {

            this.tlsCertificateKey = tlsCertificateKey;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder usernameTemplate(@Nullable String usernameTemplate) {

            this.usernameTemplate = usernameTemplate;
            return this;
        }
        public SecretBackendConnectionMysqlLegacy build() {
            final var _resultValue = new SecretBackendConnectionMysqlLegacy();
            _resultValue.authType = authType;
            _resultValue.connectionUrl = connectionUrl;
            _resultValue.maxConnectionLifetime = maxConnectionLifetime;
            _resultValue.maxIdleConnections = maxIdleConnections;
            _resultValue.maxOpenConnections = maxOpenConnections;
            _resultValue.password = password;
            _resultValue.serviceAccountJson = serviceAccountJson;
            _resultValue.tlsCa = tlsCa;
            _resultValue.tlsCertificateKey = tlsCertificateKey;
            _resultValue.username = username;
            _resultValue.usernameTemplate = usernameTemplate;
            return _resultValue;
        }
    }
}
