// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformationArgs Empty = new TransformationArgs();

    /**
     * The set of roles allowed to perform this transformation.
     * 
     */
    @Import(name="allowedRoles")
    private @Nullable Output<List<String>> allowedRoles;

    /**
     * @return The set of roles allowed to perform this transformation.
     * 
     */
    public Optional<Output<List<String>>> allowedRoles() {
        return Optional.ofNullable(this.allowedRoles);
    }

    /**
     * If true, this transform can be deleted.
     * Otherwise, deletion is blocked while this value remains false. Default: `false`
     * *Only supported on vault-1.12+*
     * 
     */
    @Import(name="deletionAllowed")
    private @Nullable Output<Boolean> deletionAllowed;

    /**
     * @return If true, this transform can be deleted.
     * Otherwise, deletion is blocked while this value remains false. Default: `false`
     * *Only supported on vault-1.12+*
     * 
     */
    public Optional<Output<Boolean>> deletionAllowed() {
        return Optional.ofNullable(this.deletionAllowed);
    }

    /**
     * The character used to replace data when in masking mode
     * 
     */
    @Import(name="maskingCharacter")
    private @Nullable Output<String> maskingCharacter;

    /**
     * @return The character used to replace data when in masking mode
     * 
     */
    public Optional<Output<String>> maskingCharacter() {
        return Optional.ofNullable(this.maskingCharacter);
    }

    /**
     * The name of the transformation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the transformation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Path to where the back-end is mounted within Vault.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Path to where the back-end is mounted within Vault.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The name of the template to use.
     * 
     */
    @Import(name="template")
    private @Nullable Output<String> template;

    /**
     * @return The name of the template to use.
     * 
     */
    public Optional<Output<String>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * Templates configured for transformation.
     * 
     */
    @Import(name="templates")
    private @Nullable Output<List<String>> templates;

    /**
     * @return Templates configured for transformation.
     * 
     */
    public Optional<Output<List<String>>> templates() {
        return Optional.ofNullable(this.templates);
    }

    /**
     * The source of where the tweak value comes from. Only valid when in FPE mode.
     * 
     */
    @Import(name="tweakSource")
    private @Nullable Output<String> tweakSource;

    /**
     * @return The source of where the tweak value comes from. Only valid when in FPE mode.
     * 
     */
    public Optional<Output<String>> tweakSource() {
        return Optional.ofNullable(this.tweakSource);
    }

    /**
     * The type of transformation to perform.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of transformation to perform.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TransformationArgs() {}

    private TransformationArgs(TransformationArgs $) {
        this.allowedRoles = $.allowedRoles;
        this.deletionAllowed = $.deletionAllowed;
        this.maskingCharacter = $.maskingCharacter;
        this.name = $.name;
        this.namespace = $.namespace;
        this.path = $.path;
        this.template = $.template;
        this.templates = $.templates;
        this.tweakSource = $.tweakSource;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformationArgs $;

        public Builder() {
            $ = new TransformationArgs();
        }

        public Builder(TransformationArgs defaults) {
            $ = new TransformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedRoles The set of roles allowed to perform this transformation.
         * 
         * @return builder
         * 
         */
        public Builder allowedRoles(@Nullable Output<List<String>> allowedRoles) {
            $.allowedRoles = allowedRoles;
            return this;
        }

        /**
         * @param allowedRoles The set of roles allowed to perform this transformation.
         * 
         * @return builder
         * 
         */
        public Builder allowedRoles(List<String> allowedRoles) {
            return allowedRoles(Output.of(allowedRoles));
        }

        /**
         * @param allowedRoles The set of roles allowed to perform this transformation.
         * 
         * @return builder
         * 
         */
        public Builder allowedRoles(String... allowedRoles) {
            return allowedRoles(List.of(allowedRoles));
        }

        /**
         * @param deletionAllowed If true, this transform can be deleted.
         * Otherwise, deletion is blocked while this value remains false. Default: `false`
         * *Only supported on vault-1.12+*
         * 
         * @return builder
         * 
         */
        public Builder deletionAllowed(@Nullable Output<Boolean> deletionAllowed) {
            $.deletionAllowed = deletionAllowed;
            return this;
        }

        /**
         * @param deletionAllowed If true, this transform can be deleted.
         * Otherwise, deletion is blocked while this value remains false. Default: `false`
         * *Only supported on vault-1.12+*
         * 
         * @return builder
         * 
         */
        public Builder deletionAllowed(Boolean deletionAllowed) {
            return deletionAllowed(Output.of(deletionAllowed));
        }

        /**
         * @param maskingCharacter The character used to replace data when in masking mode
         * 
         * @return builder
         * 
         */
        public Builder maskingCharacter(@Nullable Output<String> maskingCharacter) {
            $.maskingCharacter = maskingCharacter;
            return this;
        }

        /**
         * @param maskingCharacter The character used to replace data when in masking mode
         * 
         * @return builder
         * 
         */
        public Builder maskingCharacter(String maskingCharacter) {
            return maskingCharacter(Output.of(maskingCharacter));
        }

        /**
         * @param name The name of the transformation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the transformation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path Path to where the back-end is mounted within Vault.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path to where the back-end is mounted within Vault.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param template The name of the template to use.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template The name of the template to use.
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        /**
         * @param templates Templates configured for transformation.
         * 
         * @return builder
         * 
         */
        public Builder templates(@Nullable Output<List<String>> templates) {
            $.templates = templates;
            return this;
        }

        /**
         * @param templates Templates configured for transformation.
         * 
         * @return builder
         * 
         */
        public Builder templates(List<String> templates) {
            return templates(Output.of(templates));
        }

        /**
         * @param templates Templates configured for transformation.
         * 
         * @return builder
         * 
         */
        public Builder templates(String... templates) {
            return templates(List.of(templates));
        }

        /**
         * @param tweakSource The source of where the tweak value comes from. Only valid when in FPE mode.
         * 
         * @return builder
         * 
         */
        public Builder tweakSource(@Nullable Output<String> tweakSource) {
            $.tweakSource = tweakSource;
            return this;
        }

        /**
         * @param tweakSource The source of where the tweak value comes from. Only valid when in FPE mode.
         * 
         * @return builder
         * 
         */
        public Builder tweakSource(String tweakSource) {
            return tweakSource(Output.of(tweakSource));
        }

        /**
         * @param type The type of transformation to perform.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of transformation to perform.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TransformationArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
