// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.gcp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendRoleState extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendRoleState Empty = new AuthBackendRoleState();

    @Import(name="addGroupAliases")
    private @Nullable Output<Boolean> addGroupAliases;

    public Optional<Output<Boolean>> addGroupAliases() {
        return Optional.ofNullable(this.addGroupAliases);
    }

    /**
     * A flag to determine if this role should allow GCE instances to authenticate by inferring service accounts from the GCE identity metadata token.
     * 
     */
    @Import(name="allowGceInference")
    private @Nullable Output<Boolean> allowGceInference;

    /**
     * @return A flag to determine if this role should allow GCE instances to authenticate by inferring service accounts from the GCE identity metadata token.
     * 
     */
    public Optional<Output<Boolean>> allowGceInference() {
        return Optional.ofNullable(this.allowGceInference);
    }

    /**
     * Path to the mounted GCP auth backend
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Path to the mounted GCP auth backend
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The instance groups that an authorized instance must belong to in order to be authenticated. If specified, either `bound_zones` or `bound_regions` must be set too.
     * 
     */
    @Import(name="boundInstanceGroups")
    private @Nullable Output<List<String>> boundInstanceGroups;

    /**
     * @return The instance groups that an authorized instance must belong to in order to be authenticated. If specified, either `bound_zones` or `bound_regions` must be set too.
     * 
     */
    public Optional<Output<List<String>>> boundInstanceGroups() {
        return Optional.ofNullable(this.boundInstanceGroups);
    }

    /**
     * A comma-separated list of GCP labels formatted as `&#34;key:value&#34;` strings that must be set on authorized GCE instances. Because GCP labels are not currently ACL&#39;d, we recommend that this be used in conjunction with other restrictions.
     * 
     */
    @Import(name="boundLabels")
    private @Nullable Output<List<String>> boundLabels;

    /**
     * @return A comma-separated list of GCP labels formatted as `&#34;key:value&#34;` strings that must be set on authorized GCE instances. Because GCP labels are not currently ACL&#39;d, we recommend that this be used in conjunction with other restrictions.
     * 
     */
    public Optional<Output<List<String>>> boundLabels() {
        return Optional.ofNullable(this.boundLabels);
    }

    /**
     * An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
     * 
     */
    @Import(name="boundProjects")
    private @Nullable Output<List<String>> boundProjects;

    /**
     * @return An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
     * 
     */
    public Optional<Output<List<String>>> boundProjects() {
        return Optional.ofNullable(this.boundProjects);
    }

    /**
     * The list of regions that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
     * 
     */
    @Import(name="boundRegions")
    private @Nullable Output<List<String>> boundRegions;

    /**
     * @return The list of regions that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
     * 
     */
    public Optional<Output<List<String>>> boundRegions() {
        return Optional.ofNullable(this.boundRegions);
    }

    /**
     * GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
     * 
     */
    @Import(name="boundServiceAccounts")
    private @Nullable Output<List<String>> boundServiceAccounts;

    /**
     * @return GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
     * 
     */
    public Optional<Output<List<String>>> boundServiceAccounts() {
        return Optional.ofNullable(this.boundServiceAccounts);
    }

    /**
     * The list of zones that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
     * 
     */
    @Import(name="boundZones")
    private @Nullable Output<List<String>> boundZones;

    /**
     * @return The list of zones that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
     * 
     */
    public Optional<Output<List<String>>> boundZones() {
        return Optional.ofNullable(this.boundZones);
    }

    /**
     * The number of seconds past the time of authentication that the login param JWT must expire within. For example, if a user attempts to login with a token that expires within an hour and this is set to 15 minutes, Vault will return an error prompting the user to create a new signed JWT with a shorter `exp`. The GCE metadata tokens currently do not allow the `exp` claim to be customized.
     * 
     */
    @Import(name="maxJwtExp")
    private @Nullable Output<String> maxJwtExp;

    /**
     * @return The number of seconds past the time of authentication that the login param JWT must expire within. For example, if a user attempts to login with a token that expires within an hour and this is set to 15 minutes, Vault will return an error prompting the user to create a new signed JWT with a shorter `exp`. The GCE metadata tokens currently do not allow the `exp` claim to be customized.
     * 
     */
    public Optional<Output<String>> maxJwtExp() {
        return Optional.ofNullable(this.maxJwtExp);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Name of the GCP role
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Name of the GCP role
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * List of CIDR blocks; if set, specifies blocks of IP
     * addresses which can authenticate successfully, and ties the resulting token to these blocks
     * as well.
     * 
     */
    @Import(name="tokenBoundCidrs")
    private @Nullable Output<List<String>> tokenBoundCidrs;

    /**
     * @return List of CIDR blocks; if set, specifies blocks of IP
     * addresses which can authenticate successfully, and ties the resulting token to these blocks
     * as well.
     * 
     */
    public Optional<Output<List<String>>> tokenBoundCidrs() {
        return Optional.ofNullable(this.tokenBoundCidrs);
    }

    /**
     * If set, will encode an
     * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
     * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
     * `token_max_ttl` would otherwise allow a renewal.
     * 
     */
    @Import(name="tokenExplicitMaxTtl")
    private @Nullable Output<Integer> tokenExplicitMaxTtl;

    /**
     * @return If set, will encode an
     * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
     * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
     * `token_max_ttl` would otherwise allow a renewal.
     * 
     */
    public Optional<Output<Integer>> tokenExplicitMaxTtl() {
        return Optional.ofNullable(this.tokenExplicitMaxTtl);
    }

    /**
     * The maximum lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    @Import(name="tokenMaxTtl")
    private @Nullable Output<Integer> tokenMaxTtl;

    /**
     * @return The maximum lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    public Optional<Output<Integer>> tokenMaxTtl() {
        return Optional.ofNullable(this.tokenMaxTtl);
    }

    /**
     * If set, the default policy will not be set on
     * generated tokens; otherwise it will be added to the policies set in token_policies.
     * 
     */
    @Import(name="tokenNoDefaultPolicy")
    private @Nullable Output<Boolean> tokenNoDefaultPolicy;

    /**
     * @return If set, the default policy will not be set on
     * generated tokens; otherwise it will be added to the policies set in token_policies.
     * 
     */
    public Optional<Output<Boolean>> tokenNoDefaultPolicy() {
        return Optional.ofNullable(this.tokenNoDefaultPolicy);
    }

    /**
     * The [maximum number](https://www.vaultproject.io/api-docs/gcp#token_num_uses)
     * of times a generated token may be used (within its lifetime); 0 means unlimited.
     * 
     */
    @Import(name="tokenNumUses")
    private @Nullable Output<Integer> tokenNumUses;

    /**
     * @return The [maximum number](https://www.vaultproject.io/api-docs/gcp#token_num_uses)
     * of times a generated token may be used (within its lifetime); 0 means unlimited.
     * 
     */
    public Optional<Output<Integer>> tokenNumUses() {
        return Optional.ofNullable(this.tokenNumUses);
    }

    /**
     * If set, indicates that the
     * token generated using this role should never expire. The token should be renewed within the
     * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
     * value of this field. Specified in seconds.
     * 
     */
    @Import(name="tokenPeriod")
    private @Nullable Output<Integer> tokenPeriod;

    /**
     * @return If set, indicates that the
     * token generated using this role should never expire. The token should be renewed within the
     * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
     * value of this field. Specified in seconds.
     * 
     */
    public Optional<Output<Integer>> tokenPeriod() {
        return Optional.ofNullable(this.tokenPeriod);
    }

    /**
     * List of policies to encode onto generated tokens. Depending
     * on the auth method, this list may be supplemented by user/group/other values.
     * 
     */
    @Import(name="tokenPolicies")
    private @Nullable Output<List<String>> tokenPolicies;

    /**
     * @return List of policies to encode onto generated tokens. Depending
     * on the auth method, this list may be supplemented by user/group/other values.
     * 
     */
    public Optional<Output<List<String>>> tokenPolicies() {
        return Optional.ofNullable(this.tokenPolicies);
    }

    /**
     * The incremental lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<Integer> tokenTtl;

    /**
     * @return The incremental lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    public Optional<Output<Integer>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    /**
     * The type of token that should be generated. Can be `service`,
     * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
     * `service` tokens). For token store roles, there are two additional possibilities:
     * `default-service` and `default-batch` which specify the type to return unless the client
     * requests a different type at generation time.
     * 
     */
    @Import(name="tokenType")
    private @Nullable Output<String> tokenType;

    /**
     * @return The type of token that should be generated. Can be `service`,
     * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
     * `service` tokens). For token store roles, there are two additional possibilities:
     * `default-service` and `default-batch` which specify the type to return unless the client
     * requests a different type at generation time.
     * 
     */
    public Optional<Output<String>> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    /**
     * Type of GCP authentication role (either `gce` or `iam`)
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of GCP authentication role (either `gce` or `iam`)
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private AuthBackendRoleState() {}

    private AuthBackendRoleState(AuthBackendRoleState $) {
        this.addGroupAliases = $.addGroupAliases;
        this.allowGceInference = $.allowGceInference;
        this.backend = $.backend;
        this.boundInstanceGroups = $.boundInstanceGroups;
        this.boundLabels = $.boundLabels;
        this.boundProjects = $.boundProjects;
        this.boundRegions = $.boundRegions;
        this.boundServiceAccounts = $.boundServiceAccounts;
        this.boundZones = $.boundZones;
        this.maxJwtExp = $.maxJwtExp;
        this.namespace = $.namespace;
        this.role = $.role;
        this.tokenBoundCidrs = $.tokenBoundCidrs;
        this.tokenExplicitMaxTtl = $.tokenExplicitMaxTtl;
        this.tokenMaxTtl = $.tokenMaxTtl;
        this.tokenNoDefaultPolicy = $.tokenNoDefaultPolicy;
        this.tokenNumUses = $.tokenNumUses;
        this.tokenPeriod = $.tokenPeriod;
        this.tokenPolicies = $.tokenPolicies;
        this.tokenTtl = $.tokenTtl;
        this.tokenType = $.tokenType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendRoleState $;

        public Builder() {
            $ = new AuthBackendRoleState();
        }

        public Builder(AuthBackendRoleState defaults) {
            $ = new AuthBackendRoleState(Objects.requireNonNull(defaults));
        }

        public Builder addGroupAliases(@Nullable Output<Boolean> addGroupAliases) {
            $.addGroupAliases = addGroupAliases;
            return this;
        }

        public Builder addGroupAliases(Boolean addGroupAliases) {
            return addGroupAliases(Output.of(addGroupAliases));
        }

        /**
         * @param allowGceInference A flag to determine if this role should allow GCE instances to authenticate by inferring service accounts from the GCE identity metadata token.
         * 
         * @return builder
         * 
         */
        public Builder allowGceInference(@Nullable Output<Boolean> allowGceInference) {
            $.allowGceInference = allowGceInference;
            return this;
        }

        /**
         * @param allowGceInference A flag to determine if this role should allow GCE instances to authenticate by inferring service accounts from the GCE identity metadata token.
         * 
         * @return builder
         * 
         */
        public Builder allowGceInference(Boolean allowGceInference) {
            return allowGceInference(Output.of(allowGceInference));
        }

        /**
         * @param backend Path to the mounted GCP auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Path to the mounted GCP auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param boundInstanceGroups The instance groups that an authorized instance must belong to in order to be authenticated. If specified, either `bound_zones` or `bound_regions` must be set too.
         * 
         * @return builder
         * 
         */
        public Builder boundInstanceGroups(@Nullable Output<List<String>> boundInstanceGroups) {
            $.boundInstanceGroups = boundInstanceGroups;
            return this;
        }

        /**
         * @param boundInstanceGroups The instance groups that an authorized instance must belong to in order to be authenticated. If specified, either `bound_zones` or `bound_regions` must be set too.
         * 
         * @return builder
         * 
         */
        public Builder boundInstanceGroups(List<String> boundInstanceGroups) {
            return boundInstanceGroups(Output.of(boundInstanceGroups));
        }

        /**
         * @param boundInstanceGroups The instance groups that an authorized instance must belong to in order to be authenticated. If specified, either `bound_zones` or `bound_regions` must be set too.
         * 
         * @return builder
         * 
         */
        public Builder boundInstanceGroups(String... boundInstanceGroups) {
            return boundInstanceGroups(List.of(boundInstanceGroups));
        }

        /**
         * @param boundLabels A comma-separated list of GCP labels formatted as `&#34;key:value&#34;` strings that must be set on authorized GCE instances. Because GCP labels are not currently ACL&#39;d, we recommend that this be used in conjunction with other restrictions.
         * 
         * @return builder
         * 
         */
        public Builder boundLabels(@Nullable Output<List<String>> boundLabels) {
            $.boundLabels = boundLabels;
            return this;
        }

        /**
         * @param boundLabels A comma-separated list of GCP labels formatted as `&#34;key:value&#34;` strings that must be set on authorized GCE instances. Because GCP labels are not currently ACL&#39;d, we recommend that this be used in conjunction with other restrictions.
         * 
         * @return builder
         * 
         */
        public Builder boundLabels(List<String> boundLabels) {
            return boundLabels(Output.of(boundLabels));
        }

        /**
         * @param boundLabels A comma-separated list of GCP labels formatted as `&#34;key:value&#34;` strings that must be set on authorized GCE instances. Because GCP labels are not currently ACL&#39;d, we recommend that this be used in conjunction with other restrictions.
         * 
         * @return builder
         * 
         */
        public Builder boundLabels(String... boundLabels) {
            return boundLabels(List.of(boundLabels));
        }

        /**
         * @param boundProjects An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
         * 
         * @return builder
         * 
         */
        public Builder boundProjects(@Nullable Output<List<String>> boundProjects) {
            $.boundProjects = boundProjects;
            return this;
        }

        /**
         * @param boundProjects An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
         * 
         * @return builder
         * 
         */
        public Builder boundProjects(List<String> boundProjects) {
            return boundProjects(Output.of(boundProjects));
        }

        /**
         * @param boundProjects An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
         * 
         * @return builder
         * 
         */
        public Builder boundProjects(String... boundProjects) {
            return boundProjects(List.of(boundProjects));
        }

        /**
         * @param boundRegions The list of regions that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
         * 
         * @return builder
         * 
         */
        public Builder boundRegions(@Nullable Output<List<String>> boundRegions) {
            $.boundRegions = boundRegions;
            return this;
        }

        /**
         * @param boundRegions The list of regions that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
         * 
         * @return builder
         * 
         */
        public Builder boundRegions(List<String> boundRegions) {
            return boundRegions(Output.of(boundRegions));
        }

        /**
         * @param boundRegions The list of regions that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
         * 
         * @return builder
         * 
         */
        public Builder boundRegions(String... boundRegions) {
            return boundRegions(List.of(boundRegions));
        }

        /**
         * @param boundServiceAccounts GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
         * 
         * @return builder
         * 
         */
        public Builder boundServiceAccounts(@Nullable Output<List<String>> boundServiceAccounts) {
            $.boundServiceAccounts = boundServiceAccounts;
            return this;
        }

        /**
         * @param boundServiceAccounts GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
         * 
         * @return builder
         * 
         */
        public Builder boundServiceAccounts(List<String> boundServiceAccounts) {
            return boundServiceAccounts(Output.of(boundServiceAccounts));
        }

        /**
         * @param boundServiceAccounts GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
         * 
         * @return builder
         * 
         */
        public Builder boundServiceAccounts(String... boundServiceAccounts) {
            return boundServiceAccounts(List.of(boundServiceAccounts));
        }

        /**
         * @param boundZones The list of zones that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
         * 
         * @return builder
         * 
         */
        public Builder boundZones(@Nullable Output<List<String>> boundZones) {
            $.boundZones = boundZones;
            return this;
        }

        /**
         * @param boundZones The list of zones that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
         * 
         * @return builder
         * 
         */
        public Builder boundZones(List<String> boundZones) {
            return boundZones(Output.of(boundZones));
        }

        /**
         * @param boundZones The list of zones that a GCE instance must belong to in order to be authenticated. If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
         * 
         * @return builder
         * 
         */
        public Builder boundZones(String... boundZones) {
            return boundZones(List.of(boundZones));
        }

        /**
         * @param maxJwtExp The number of seconds past the time of authentication that the login param JWT must expire within. For example, if a user attempts to login with a token that expires within an hour and this is set to 15 minutes, Vault will return an error prompting the user to create a new signed JWT with a shorter `exp`. The GCE metadata tokens currently do not allow the `exp` claim to be customized.
         * 
         * @return builder
         * 
         */
        public Builder maxJwtExp(@Nullable Output<String> maxJwtExp) {
            $.maxJwtExp = maxJwtExp;
            return this;
        }

        /**
         * @param maxJwtExp The number of seconds past the time of authentication that the login param JWT must expire within. For example, if a user attempts to login with a token that expires within an hour and this is set to 15 minutes, Vault will return an error prompting the user to create a new signed JWT with a shorter `exp`. The GCE metadata tokens currently do not allow the `exp` claim to be customized.
         * 
         * @return builder
         * 
         */
        public Builder maxJwtExp(String maxJwtExp) {
            return maxJwtExp(Output.of(maxJwtExp));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param role Name of the GCP role
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Name of the GCP role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(@Nullable Output<List<String>> tokenBoundCidrs) {
            $.tokenBoundCidrs = tokenBoundCidrs;
            return this;
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(List<String> tokenBoundCidrs) {
            return tokenBoundCidrs(Output.of(tokenBoundCidrs));
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(String... tokenBoundCidrs) {
            return tokenBoundCidrs(List.of(tokenBoundCidrs));
        }

        /**
         * @param tokenExplicitMaxTtl If set, will encode an
         * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
         * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
         * `token_max_ttl` would otherwise allow a renewal.
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(@Nullable Output<Integer> tokenExplicitMaxTtl) {
            $.tokenExplicitMaxTtl = tokenExplicitMaxTtl;
            return this;
        }

        /**
         * @param tokenExplicitMaxTtl If set, will encode an
         * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
         * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
         * `token_max_ttl` would otherwise allow a renewal.
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(Integer tokenExplicitMaxTtl) {
            return tokenExplicitMaxTtl(Output.of(tokenExplicitMaxTtl));
        }

        /**
         * @param tokenMaxTtl The maximum lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(@Nullable Output<Integer> tokenMaxTtl) {
            $.tokenMaxTtl = tokenMaxTtl;
            return this;
        }

        /**
         * @param tokenMaxTtl The maximum lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(Integer tokenMaxTtl) {
            return tokenMaxTtl(Output.of(tokenMaxTtl));
        }

        /**
         * @param tokenNoDefaultPolicy If set, the default policy will not be set on
         * generated tokens; otherwise it will be added to the policies set in token_policies.
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(@Nullable Output<Boolean> tokenNoDefaultPolicy) {
            $.tokenNoDefaultPolicy = tokenNoDefaultPolicy;
            return this;
        }

        /**
         * @param tokenNoDefaultPolicy If set, the default policy will not be set on
         * generated tokens; otherwise it will be added to the policies set in token_policies.
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(Boolean tokenNoDefaultPolicy) {
            return tokenNoDefaultPolicy(Output.of(tokenNoDefaultPolicy));
        }

        /**
         * @param tokenNumUses The [maximum number](https://www.vaultproject.io/api-docs/gcp#token_num_uses)
         * of times a generated token may be used (within its lifetime); 0 means unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(@Nullable Output<Integer> tokenNumUses) {
            $.tokenNumUses = tokenNumUses;
            return this;
        }

        /**
         * @param tokenNumUses The [maximum number](https://www.vaultproject.io/api-docs/gcp#token_num_uses)
         * of times a generated token may be used (within its lifetime); 0 means unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(Integer tokenNumUses) {
            return tokenNumUses(Output.of(tokenNumUses));
        }

        /**
         * @param tokenPeriod If set, indicates that the
         * token generated using this role should never expire. The token should be renewed within the
         * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
         * value of this field. Specified in seconds.
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(@Nullable Output<Integer> tokenPeriod) {
            $.tokenPeriod = tokenPeriod;
            return this;
        }

        /**
         * @param tokenPeriod If set, indicates that the
         * token generated using this role should never expire. The token should be renewed within the
         * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
         * value of this field. Specified in seconds.
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(Integer tokenPeriod) {
            return tokenPeriod(Output.of(tokenPeriod));
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(@Nullable Output<List<String>> tokenPolicies) {
            $.tokenPolicies = tokenPolicies;
            return this;
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(List<String> tokenPolicies) {
            return tokenPolicies(Output.of(tokenPolicies));
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(String... tokenPolicies) {
            return tokenPolicies(List.of(tokenPolicies));
        }

        /**
         * @param tokenTtl The incremental lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<Integer> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl The incremental lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(Integer tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        /**
         * @param tokenType The type of token that should be generated. Can be `service`,
         * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
         * `service` tokens). For token store roles, there are two additional possibilities:
         * `default-service` and `default-batch` which specify the type to return unless the client
         * requests a different type at generation time.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(@Nullable Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType The type of token that should be generated. Can be `service`,
         * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
         * `service` tokens). For token store roles, there are two additional possibilities:
         * `default-service` and `default-batch` which specify the type to return unless the client
         * requests a different type at generation time.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        /**
         * @param type Type of GCP authentication role (either `gce` or `iam`)
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of GCP authentication role (either `gce` or `iam`)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AuthBackendRoleState build() {
            return $;
        }
    }

}
