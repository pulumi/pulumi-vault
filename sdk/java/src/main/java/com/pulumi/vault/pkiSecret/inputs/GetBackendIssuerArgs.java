// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBackendIssuerArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBackendIssuerArgs Empty = new GetBackendIssuerArgs();

    /**
     * The path to the PKI secret backend to
     * read the issuer from, with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return The path to the PKI secret backend to
     * read the issuer from, with no leading or trailing `/`s.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * issued certificate) contain critical extensions not processed by Vault.
     * 
     */
    @Import(name="disableCriticalExtensionChecks")
    private @Nullable Output<Boolean> disableCriticalExtensionChecks;

    /**
     * @return This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * issued certificate) contain critical extensions not processed by Vault.
     * 
     */
    public Optional<Output<Boolean>> disableCriticalExtensionChecks() {
        return Optional.ofNullable(this.disableCriticalExtensionChecks);
    }

    /**
     * This determines whether this issuer is able
     * to issue certificates where the chain of trust (including the final issued
     * certificate) contains a link in which the subject of the issuing certificate
     * does not match the named issuer of the certificate it signed.
     * 
     */
    @Import(name="disableNameChecks")
    private @Nullable Output<Boolean> disableNameChecks;

    /**
     * @return This determines whether this issuer is able
     * to issue certificates where the chain of trust (including the final issued
     * certificate) contains a link in which the subject of the issuing certificate
     * does not match the named issuer of the certificate it signed.
     * 
     */
    public Optional<Output<Boolean>> disableNameChecks() {
        return Optional.ofNullable(this.disableNameChecks);
    }

    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * final issued certificate) violates the name constraints critical extension of
     * one of the issuer certificates in the chain.
     * 
     */
    @Import(name="disableNameConstraintChecks")
    private @Nullable Output<Boolean> disableNameConstraintChecks;

    /**
     * @return This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * final issued certificate) violates the name constraints critical extension of
     * one of the issuer certificates in the chain.
     * 
     */
    public Optional<Output<Boolean>> disableNameConstraintChecks() {
        return Optional.ofNullable(this.disableNameConstraintChecks);
    }

    /**
     * This determines whether this issuer
     * is able to issue certificates where the chain of trust (including the final
     * issued certificate) is longer than allowed by a certificate authority in that
     * chain.
     * 
     */
    @Import(name="disablePathLengthChecks")
    private @Nullable Output<Boolean> disablePathLengthChecks;

    /**
     * @return This determines whether this issuer
     * is able to issue certificates where the chain of trust (including the final
     * issued certificate) is longer than allowed by a certificate authority in that
     * chain.
     * 
     */
    public Optional<Output<Boolean>> disablePathLengthChecks() {
        return Optional.ofNullable(this.disablePathLengthChecks);
    }

    /**
     * Reference to an existing issuer.
     * 
     */
    @Import(name="issuerRef", required=true)
    private Output<String> issuerRef;

    /**
     * @return Reference to an existing issuer.
     * 
     */
    public Output<String> issuerRef() {
        return this.issuerRef;
    }

    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    private GetBackendIssuerArgs() {}

    private GetBackendIssuerArgs(GetBackendIssuerArgs $) {
        this.backend = $.backend;
        this.disableCriticalExtensionChecks = $.disableCriticalExtensionChecks;
        this.disableNameChecks = $.disableNameChecks;
        this.disableNameConstraintChecks = $.disableNameConstraintChecks;
        this.disablePathLengthChecks = $.disablePathLengthChecks;
        this.issuerRef = $.issuerRef;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBackendIssuerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBackendIssuerArgs $;

        public Builder() {
            $ = new GetBackendIssuerArgs();
        }

        public Builder(GetBackendIssuerArgs defaults) {
            $ = new GetBackendIssuerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The path to the PKI secret backend to
         * read the issuer from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path to the PKI secret backend to
         * read the issuer from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param disableCriticalExtensionChecks This determines whether this
         * issuer is able to issue certificates where the chain of trust (including the
         * issued certificate) contain critical extensions not processed by Vault.
         * 
         * @return builder
         * 
         */
        public Builder disableCriticalExtensionChecks(@Nullable Output<Boolean> disableCriticalExtensionChecks) {
            $.disableCriticalExtensionChecks = disableCriticalExtensionChecks;
            return this;
        }

        /**
         * @param disableCriticalExtensionChecks This determines whether this
         * issuer is able to issue certificates where the chain of trust (including the
         * issued certificate) contain critical extensions not processed by Vault.
         * 
         * @return builder
         * 
         */
        public Builder disableCriticalExtensionChecks(Boolean disableCriticalExtensionChecks) {
            return disableCriticalExtensionChecks(Output.of(disableCriticalExtensionChecks));
        }

        /**
         * @param disableNameChecks This determines whether this issuer is able
         * to issue certificates where the chain of trust (including the final issued
         * certificate) contains a link in which the subject of the issuing certificate
         * does not match the named issuer of the certificate it signed.
         * 
         * @return builder
         * 
         */
        public Builder disableNameChecks(@Nullable Output<Boolean> disableNameChecks) {
            $.disableNameChecks = disableNameChecks;
            return this;
        }

        /**
         * @param disableNameChecks This determines whether this issuer is able
         * to issue certificates where the chain of trust (including the final issued
         * certificate) contains a link in which the subject of the issuing certificate
         * does not match the named issuer of the certificate it signed.
         * 
         * @return builder
         * 
         */
        public Builder disableNameChecks(Boolean disableNameChecks) {
            return disableNameChecks(Output.of(disableNameChecks));
        }

        /**
         * @param disableNameConstraintChecks This determines whether this
         * issuer is able to issue certificates where the chain of trust (including the
         * final issued certificate) violates the name constraints critical extension of
         * one of the issuer certificates in the chain.
         * 
         * @return builder
         * 
         */
        public Builder disableNameConstraintChecks(@Nullable Output<Boolean> disableNameConstraintChecks) {
            $.disableNameConstraintChecks = disableNameConstraintChecks;
            return this;
        }

        /**
         * @param disableNameConstraintChecks This determines whether this
         * issuer is able to issue certificates where the chain of trust (including the
         * final issued certificate) violates the name constraints critical extension of
         * one of the issuer certificates in the chain.
         * 
         * @return builder
         * 
         */
        public Builder disableNameConstraintChecks(Boolean disableNameConstraintChecks) {
            return disableNameConstraintChecks(Output.of(disableNameConstraintChecks));
        }

        /**
         * @param disablePathLengthChecks This determines whether this issuer
         * is able to issue certificates where the chain of trust (including the final
         * issued certificate) is longer than allowed by a certificate authority in that
         * chain.
         * 
         * @return builder
         * 
         */
        public Builder disablePathLengthChecks(@Nullable Output<Boolean> disablePathLengthChecks) {
            $.disablePathLengthChecks = disablePathLengthChecks;
            return this;
        }

        /**
         * @param disablePathLengthChecks This determines whether this issuer
         * is able to issue certificates where the chain of trust (including the final
         * issued certificate) is longer than allowed by a certificate authority in that
         * chain.
         * 
         * @return builder
         * 
         */
        public Builder disablePathLengthChecks(Boolean disablePathLengthChecks) {
            return disablePathLengthChecks(Output.of(disablePathLengthChecks));
        }

        /**
         * @param issuerRef Reference to an existing issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuerRef(Output<String> issuerRef) {
            $.issuerRef = issuerRef;
            return this;
        }

        /**
         * @param issuerRef Reference to an existing issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuerRef(String issuerRef) {
            return issuerRef(Output.of(issuerRef));
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public GetBackendIssuerArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("GetBackendIssuerArgs", "backend");
            }
            if ($.issuerRef == null) {
                throw new MissingRequiredPropertyException("GetBackendIssuerArgs", "issuerRef");
            }
            return $;
        }
    }

}
