// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.gcp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendRoleArgs Empty = new AuthBackendRoleArgs();

    @Import(name="addGroupAliases")
    private @Nullable Output<Boolean> addGroupAliases;

    public Optional<Output<Boolean>> addGroupAliases() {
        return Optional.ofNullable(this.addGroupAliases);
    }

    @Import(name="allowGceInference")
    private @Nullable Output<Boolean> allowGceInference;

    public Optional<Output<Boolean>> allowGceInference() {
        return Optional.ofNullable(this.allowGceInference);
    }

    /**
     * Path to the mounted GCP auth backend
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Path to the mounted GCP auth backend
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    @Import(name="boundInstanceGroups")
    private @Nullable Output<List<String>> boundInstanceGroups;

    public Optional<Output<List<String>>> boundInstanceGroups() {
        return Optional.ofNullable(this.boundInstanceGroups);
    }

    @Import(name="boundLabels")
    private @Nullable Output<List<String>> boundLabels;

    public Optional<Output<List<String>>> boundLabels() {
        return Optional.ofNullable(this.boundLabels);
    }

    /**
     * An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
     * 
     */
    @Import(name="boundProjects")
    private @Nullable Output<List<String>> boundProjects;

    /**
     * @return An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
     * 
     */
    public Optional<Output<List<String>>> boundProjects() {
        return Optional.ofNullable(this.boundProjects);
    }

    @Import(name="boundRegions")
    private @Nullable Output<List<String>> boundRegions;

    public Optional<Output<List<String>>> boundRegions() {
        return Optional.ofNullable(this.boundRegions);
    }

    /**
     * GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
     * 
     */
    @Import(name="boundServiceAccounts")
    private @Nullable Output<List<String>> boundServiceAccounts;

    /**
     * @return GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
     * 
     */
    public Optional<Output<List<String>>> boundServiceAccounts() {
        return Optional.ofNullable(this.boundServiceAccounts);
    }

    @Import(name="boundZones")
    private @Nullable Output<List<String>> boundZones;

    public Optional<Output<List<String>>> boundZones() {
        return Optional.ofNullable(this.boundZones);
    }

    @Import(name="maxJwtExp")
    private @Nullable Output<String> maxJwtExp;

    public Optional<Output<String>> maxJwtExp() {
        return Optional.ofNullable(this.maxJwtExp);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Name of the GCP role
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return Name of the GCP role
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     * 
     */
    @Import(name="tokenBoundCidrs")
    private @Nullable Output<List<String>> tokenBoundCidrs;

    /**
     * @return Specifies the blocks of IP addresses which are allowed to use the generated token
     * 
     */
    public Optional<Output<List<String>>> tokenBoundCidrs() {
        return Optional.ofNullable(this.tokenBoundCidrs);
    }

    /**
     * Generated Token&#39;s Explicit Maximum TTL in seconds
     * 
     */
    @Import(name="tokenExplicitMaxTtl")
    private @Nullable Output<Integer> tokenExplicitMaxTtl;

    /**
     * @return Generated Token&#39;s Explicit Maximum TTL in seconds
     * 
     */
    public Optional<Output<Integer>> tokenExplicitMaxTtl() {
        return Optional.ofNullable(this.tokenExplicitMaxTtl);
    }

    /**
     * The maximum lifetime of the generated token
     * 
     */
    @Import(name="tokenMaxTtl")
    private @Nullable Output<Integer> tokenMaxTtl;

    /**
     * @return The maximum lifetime of the generated token
     * 
     */
    public Optional<Output<Integer>> tokenMaxTtl() {
        return Optional.ofNullable(this.tokenMaxTtl);
    }

    /**
     * If true, the &#39;default&#39; policy will not automatically be added to generated tokens
     * 
     */
    @Import(name="tokenNoDefaultPolicy")
    private @Nullable Output<Boolean> tokenNoDefaultPolicy;

    /**
     * @return If true, the &#39;default&#39; policy will not automatically be added to generated tokens
     * 
     */
    public Optional<Output<Boolean>> tokenNoDefaultPolicy() {
        return Optional.ofNullable(this.tokenNoDefaultPolicy);
    }

    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     * 
     */
    @Import(name="tokenNumUses")
    private @Nullable Output<Integer> tokenNumUses;

    /**
     * @return The maximum number of times a token may be used, a value of zero means unlimited
     * 
     */
    public Optional<Output<Integer>> tokenNumUses() {
        return Optional.ofNullable(this.tokenNumUses);
    }

    /**
     * Generated Token&#39;s Period
     * 
     */
    @Import(name="tokenPeriod")
    private @Nullable Output<Integer> tokenPeriod;

    /**
     * @return Generated Token&#39;s Period
     * 
     */
    public Optional<Output<Integer>> tokenPeriod() {
        return Optional.ofNullable(this.tokenPeriod);
    }

    /**
     * Generated Token&#39;s Policies
     * 
     */
    @Import(name="tokenPolicies")
    private @Nullable Output<List<String>> tokenPolicies;

    /**
     * @return Generated Token&#39;s Policies
     * 
     */
    public Optional<Output<List<String>>> tokenPolicies() {
        return Optional.ofNullable(this.tokenPolicies);
    }

    /**
     * The initial ttl of the token to generate in seconds
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<Integer> tokenTtl;

    /**
     * @return The initial ttl of the token to generate in seconds
     * 
     */
    public Optional<Output<Integer>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    /**
     * The type of token to generate, service or batch
     * 
     */
    @Import(name="tokenType")
    private @Nullable Output<String> tokenType;

    /**
     * @return The type of token to generate, service or batch
     * 
     */
    public Optional<Output<String>> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    /**
     * Type of GCP authentication role (either `gce` or `iam`)
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of GCP authentication role (either `gce` or `iam`)
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private AuthBackendRoleArgs() {}

    private AuthBackendRoleArgs(AuthBackendRoleArgs $) {
        this.addGroupAliases = $.addGroupAliases;
        this.allowGceInference = $.allowGceInference;
        this.backend = $.backend;
        this.boundInstanceGroups = $.boundInstanceGroups;
        this.boundLabels = $.boundLabels;
        this.boundProjects = $.boundProjects;
        this.boundRegions = $.boundRegions;
        this.boundServiceAccounts = $.boundServiceAccounts;
        this.boundZones = $.boundZones;
        this.maxJwtExp = $.maxJwtExp;
        this.namespace = $.namespace;
        this.role = $.role;
        this.tokenBoundCidrs = $.tokenBoundCidrs;
        this.tokenExplicitMaxTtl = $.tokenExplicitMaxTtl;
        this.tokenMaxTtl = $.tokenMaxTtl;
        this.tokenNoDefaultPolicy = $.tokenNoDefaultPolicy;
        this.tokenNumUses = $.tokenNumUses;
        this.tokenPeriod = $.tokenPeriod;
        this.tokenPolicies = $.tokenPolicies;
        this.tokenTtl = $.tokenTtl;
        this.tokenType = $.tokenType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendRoleArgs $;

        public Builder() {
            $ = new AuthBackendRoleArgs();
        }

        public Builder(AuthBackendRoleArgs defaults) {
            $ = new AuthBackendRoleArgs(Objects.requireNonNull(defaults));
        }

        public Builder addGroupAliases(@Nullable Output<Boolean> addGroupAliases) {
            $.addGroupAliases = addGroupAliases;
            return this;
        }

        public Builder addGroupAliases(Boolean addGroupAliases) {
            return addGroupAliases(Output.of(addGroupAliases));
        }

        public Builder allowGceInference(@Nullable Output<Boolean> allowGceInference) {
            $.allowGceInference = allowGceInference;
            return this;
        }

        public Builder allowGceInference(Boolean allowGceInference) {
            return allowGceInference(Output.of(allowGceInference));
        }

        /**
         * @param backend Path to the mounted GCP auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Path to the mounted GCP auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        public Builder boundInstanceGroups(@Nullable Output<List<String>> boundInstanceGroups) {
            $.boundInstanceGroups = boundInstanceGroups;
            return this;
        }

        public Builder boundInstanceGroups(List<String> boundInstanceGroups) {
            return boundInstanceGroups(Output.of(boundInstanceGroups));
        }

        public Builder boundInstanceGroups(String... boundInstanceGroups) {
            return boundInstanceGroups(List.of(boundInstanceGroups));
        }

        public Builder boundLabels(@Nullable Output<List<String>> boundLabels) {
            $.boundLabels = boundLabels;
            return this;
        }

        public Builder boundLabels(List<String> boundLabels) {
            return boundLabels(Output.of(boundLabels));
        }

        public Builder boundLabels(String... boundLabels) {
            return boundLabels(List.of(boundLabels));
        }

        /**
         * @param boundProjects An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
         * 
         * @return builder
         * 
         */
        public Builder boundProjects(@Nullable Output<List<String>> boundProjects) {
            $.boundProjects = boundProjects;
            return this;
        }

        /**
         * @param boundProjects An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
         * 
         * @return builder
         * 
         */
        public Builder boundProjects(List<String> boundProjects) {
            return boundProjects(Output.of(boundProjects));
        }

        /**
         * @param boundProjects An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
         * 
         * @return builder
         * 
         */
        public Builder boundProjects(String... boundProjects) {
            return boundProjects(List.of(boundProjects));
        }

        public Builder boundRegions(@Nullable Output<List<String>> boundRegions) {
            $.boundRegions = boundRegions;
            return this;
        }

        public Builder boundRegions(List<String> boundRegions) {
            return boundRegions(Output.of(boundRegions));
        }

        public Builder boundRegions(String... boundRegions) {
            return boundRegions(List.of(boundRegions));
        }

        /**
         * @param boundServiceAccounts GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
         * 
         * @return builder
         * 
         */
        public Builder boundServiceAccounts(@Nullable Output<List<String>> boundServiceAccounts) {
            $.boundServiceAccounts = boundServiceAccounts;
            return this;
        }

        /**
         * @param boundServiceAccounts GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
         * 
         * @return builder
         * 
         */
        public Builder boundServiceAccounts(List<String> boundServiceAccounts) {
            return boundServiceAccounts(Output.of(boundServiceAccounts));
        }

        /**
         * @param boundServiceAccounts GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
         * 
         * @return builder
         * 
         */
        public Builder boundServiceAccounts(String... boundServiceAccounts) {
            return boundServiceAccounts(List.of(boundServiceAccounts));
        }

        public Builder boundZones(@Nullable Output<List<String>> boundZones) {
            $.boundZones = boundZones;
            return this;
        }

        public Builder boundZones(List<String> boundZones) {
            return boundZones(Output.of(boundZones));
        }

        public Builder boundZones(String... boundZones) {
            return boundZones(List.of(boundZones));
        }

        public Builder maxJwtExp(@Nullable Output<String> maxJwtExp) {
            $.maxJwtExp = maxJwtExp;
            return this;
        }

        public Builder maxJwtExp(String maxJwtExp) {
            return maxJwtExp(Output.of(maxJwtExp));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param role Name of the GCP role
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Name of the GCP role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param tokenBoundCidrs Specifies the blocks of IP addresses which are allowed to use the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(@Nullable Output<List<String>> tokenBoundCidrs) {
            $.tokenBoundCidrs = tokenBoundCidrs;
            return this;
        }

        /**
         * @param tokenBoundCidrs Specifies the blocks of IP addresses which are allowed to use the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(List<String> tokenBoundCidrs) {
            return tokenBoundCidrs(Output.of(tokenBoundCidrs));
        }

        /**
         * @param tokenBoundCidrs Specifies the blocks of IP addresses which are allowed to use the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(String... tokenBoundCidrs) {
            return tokenBoundCidrs(List.of(tokenBoundCidrs));
        }

        /**
         * @param tokenExplicitMaxTtl Generated Token&#39;s Explicit Maximum TTL in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(@Nullable Output<Integer> tokenExplicitMaxTtl) {
            $.tokenExplicitMaxTtl = tokenExplicitMaxTtl;
            return this;
        }

        /**
         * @param tokenExplicitMaxTtl Generated Token&#39;s Explicit Maximum TTL in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(Integer tokenExplicitMaxTtl) {
            return tokenExplicitMaxTtl(Output.of(tokenExplicitMaxTtl));
        }

        /**
         * @param tokenMaxTtl The maximum lifetime of the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(@Nullable Output<Integer> tokenMaxTtl) {
            $.tokenMaxTtl = tokenMaxTtl;
            return this;
        }

        /**
         * @param tokenMaxTtl The maximum lifetime of the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(Integer tokenMaxTtl) {
            return tokenMaxTtl(Output.of(tokenMaxTtl));
        }

        /**
         * @param tokenNoDefaultPolicy If true, the &#39;default&#39; policy will not automatically be added to generated tokens
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(@Nullable Output<Boolean> tokenNoDefaultPolicy) {
            $.tokenNoDefaultPolicy = tokenNoDefaultPolicy;
            return this;
        }

        /**
         * @param tokenNoDefaultPolicy If true, the &#39;default&#39; policy will not automatically be added to generated tokens
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(Boolean tokenNoDefaultPolicy) {
            return tokenNoDefaultPolicy(Output.of(tokenNoDefaultPolicy));
        }

        /**
         * @param tokenNumUses The maximum number of times a token may be used, a value of zero means unlimited
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(@Nullable Output<Integer> tokenNumUses) {
            $.tokenNumUses = tokenNumUses;
            return this;
        }

        /**
         * @param tokenNumUses The maximum number of times a token may be used, a value of zero means unlimited
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(Integer tokenNumUses) {
            return tokenNumUses(Output.of(tokenNumUses));
        }

        /**
         * @param tokenPeriod Generated Token&#39;s Period
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(@Nullable Output<Integer> tokenPeriod) {
            $.tokenPeriod = tokenPeriod;
            return this;
        }

        /**
         * @param tokenPeriod Generated Token&#39;s Period
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(Integer tokenPeriod) {
            return tokenPeriod(Output.of(tokenPeriod));
        }

        /**
         * @param tokenPolicies Generated Token&#39;s Policies
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(@Nullable Output<List<String>> tokenPolicies) {
            $.tokenPolicies = tokenPolicies;
            return this;
        }

        /**
         * @param tokenPolicies Generated Token&#39;s Policies
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(List<String> tokenPolicies) {
            return tokenPolicies(Output.of(tokenPolicies));
        }

        /**
         * @param tokenPolicies Generated Token&#39;s Policies
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(String... tokenPolicies) {
            return tokenPolicies(List.of(tokenPolicies));
        }

        /**
         * @param tokenTtl The initial ttl of the token to generate in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<Integer> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl The initial ttl of the token to generate in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(Integer tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        /**
         * @param tokenType The type of token to generate, service or batch
         * 
         * @return builder
         * 
         */
        public Builder tokenType(@Nullable Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType The type of token to generate, service or batch
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        /**
         * @param type Type of GCP authentication role (either `gce` or `iam`)
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of GCP authentication role (either `gce` or `iam`)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public AuthBackendRoleArgs build() {
            if ($.role == null) {
                throw new MissingRequiredPropertyException("AuthBackendRoleArgs", "role");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AuthBackendRoleArgs", "type");
            }
            return $;
        }
    }

}
