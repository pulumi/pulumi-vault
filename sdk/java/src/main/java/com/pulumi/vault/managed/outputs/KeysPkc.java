// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.managed.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KeysPkc {
    /**
     * @return If no existing key can be found in
     * the referenced backend, instructs Vault to generate a key within the backend.
     * 
     */
    private @Nullable Boolean allowGenerateKey;
    /**
     * @return Controls the ability for Vault to replace through
     * generation or importing a key into the configured backend even
     * if a key is present, if set to `false` those operations are forbidden
     * if a key exists.
     * 
     */
    private @Nullable Boolean allowReplaceKey;
    /**
     * @return Controls the ability for Vault to import a key to the
     * configured backend, if `false`, those operations will be forbidden.
     * 
     */
    private @Nullable Boolean allowStoreKey;
    /**
     * @return If `true`, allows usage from any mount point within the
     * namespace.
     * 
     */
    private @Nullable Boolean anyMount;
    /**
     * @return The curve to use for an ECDSA key. Used when `key_type`
     * is `ECDSA`. Required if `allow_generate_key` is `true`.
     * 
     */
    private @Nullable String curve;
    /**
     * @return Force all operations to open up a read-write session to
     * the HSM.
     * 
     */
    private @Nullable String forceRwSession;
    /**
     * @return The size in bits for an RSA key.
     * 
     */
    private @Nullable String keyBits;
    /**
     * @return The id of a PKCS#11 key to use.
     * 
     */
    private String keyId;
    /**
     * @return The label of the key to use.
     * 
     */
    private String keyLabel;
    /**
     * @return The name of the kms_library stanza to use from Vault&#39;s config
     * to lookup the local library path.
     * 
     */
    private String library;
    /**
     * @return The encryption/decryption mechanism to use, specified as a
     * hexadecimal (prefixed by 0x) string.
     * 
     */
    private String mechanism;
    /**
     * @return A unique lowercase name that serves as identifying the key.
     * 
     */
    private String name;
    /**
     * @return The PIN for login.
     * 
     */
    private String pin;
    /**
     * @return The slot number to use, specified as a string in a decimal format
     * (e.g. `2305843009213693953`).
     * 
     */
    private @Nullable String slot;
    /**
     * @return The slot token label to use.
     * 
     */
    private @Nullable String tokenLabel;
    /**
     * @return ID of the managed key read from Vault
     * 
     */
    private @Nullable String uuid;

    private KeysPkc() {}
    /**
     * @return If no existing key can be found in
     * the referenced backend, instructs Vault to generate a key within the backend.
     * 
     */
    public Optional<Boolean> allowGenerateKey() {
        return Optional.ofNullable(this.allowGenerateKey);
    }
    /**
     * @return Controls the ability for Vault to replace through
     * generation or importing a key into the configured backend even
     * if a key is present, if set to `false` those operations are forbidden
     * if a key exists.
     * 
     */
    public Optional<Boolean> allowReplaceKey() {
        return Optional.ofNullable(this.allowReplaceKey);
    }
    /**
     * @return Controls the ability for Vault to import a key to the
     * configured backend, if `false`, those operations will be forbidden.
     * 
     */
    public Optional<Boolean> allowStoreKey() {
        return Optional.ofNullable(this.allowStoreKey);
    }
    /**
     * @return If `true`, allows usage from any mount point within the
     * namespace.
     * 
     */
    public Optional<Boolean> anyMount() {
        return Optional.ofNullable(this.anyMount);
    }
    /**
     * @return The curve to use for an ECDSA key. Used when `key_type`
     * is `ECDSA`. Required if `allow_generate_key` is `true`.
     * 
     */
    public Optional<String> curve() {
        return Optional.ofNullable(this.curve);
    }
    /**
     * @return Force all operations to open up a read-write session to
     * the HSM.
     * 
     */
    public Optional<String> forceRwSession() {
        return Optional.ofNullable(this.forceRwSession);
    }
    /**
     * @return The size in bits for an RSA key.
     * 
     */
    public Optional<String> keyBits() {
        return Optional.ofNullable(this.keyBits);
    }
    /**
     * @return The id of a PKCS#11 key to use.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return The label of the key to use.
     * 
     */
    public String keyLabel() {
        return this.keyLabel;
    }
    /**
     * @return The name of the kms_library stanza to use from Vault&#39;s config
     * to lookup the local library path.
     * 
     */
    public String library() {
        return this.library;
    }
    /**
     * @return The encryption/decryption mechanism to use, specified as a
     * hexadecimal (prefixed by 0x) string.
     * 
     */
    public String mechanism() {
        return this.mechanism;
    }
    /**
     * @return A unique lowercase name that serves as identifying the key.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The PIN for login.
     * 
     */
    public String pin() {
        return this.pin;
    }
    /**
     * @return The slot number to use, specified as a string in a decimal format
     * (e.g. `2305843009213693953`).
     * 
     */
    public Optional<String> slot() {
        return Optional.ofNullable(this.slot);
    }
    /**
     * @return The slot token label to use.
     * 
     */
    public Optional<String> tokenLabel() {
        return Optional.ofNullable(this.tokenLabel);
    }
    /**
     * @return ID of the managed key read from Vault
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeysPkc defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowGenerateKey;
        private @Nullable Boolean allowReplaceKey;
        private @Nullable Boolean allowStoreKey;
        private @Nullable Boolean anyMount;
        private @Nullable String curve;
        private @Nullable String forceRwSession;
        private @Nullable String keyBits;
        private String keyId;
        private String keyLabel;
        private String library;
        private String mechanism;
        private String name;
        private String pin;
        private @Nullable String slot;
        private @Nullable String tokenLabel;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(KeysPkc defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowGenerateKey = defaults.allowGenerateKey;
    	      this.allowReplaceKey = defaults.allowReplaceKey;
    	      this.allowStoreKey = defaults.allowStoreKey;
    	      this.anyMount = defaults.anyMount;
    	      this.curve = defaults.curve;
    	      this.forceRwSession = defaults.forceRwSession;
    	      this.keyBits = defaults.keyBits;
    	      this.keyId = defaults.keyId;
    	      this.keyLabel = defaults.keyLabel;
    	      this.library = defaults.library;
    	      this.mechanism = defaults.mechanism;
    	      this.name = defaults.name;
    	      this.pin = defaults.pin;
    	      this.slot = defaults.slot;
    	      this.tokenLabel = defaults.tokenLabel;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder allowGenerateKey(@Nullable Boolean allowGenerateKey) {

            this.allowGenerateKey = allowGenerateKey;
            return this;
        }
        @CustomType.Setter
        public Builder allowReplaceKey(@Nullable Boolean allowReplaceKey) {

            this.allowReplaceKey = allowReplaceKey;
            return this;
        }
        @CustomType.Setter
        public Builder allowStoreKey(@Nullable Boolean allowStoreKey) {

            this.allowStoreKey = allowStoreKey;
            return this;
        }
        @CustomType.Setter
        public Builder anyMount(@Nullable Boolean anyMount) {

            this.anyMount = anyMount;
            return this;
        }
        @CustomType.Setter
        public Builder curve(@Nullable String curve) {

            this.curve = curve;
            return this;
        }
        @CustomType.Setter
        public Builder forceRwSession(@Nullable String forceRwSession) {

            this.forceRwSession = forceRwSession;
            return this;
        }
        @CustomType.Setter
        public Builder keyBits(@Nullable String keyBits) {

            this.keyBits = keyBits;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("KeysPkc", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder keyLabel(String keyLabel) {
            if (keyLabel == null) {
              throw new MissingRequiredPropertyException("KeysPkc", "keyLabel");
            }
            this.keyLabel = keyLabel;
            return this;
        }
        @CustomType.Setter
        public Builder library(String library) {
            if (library == null) {
              throw new MissingRequiredPropertyException("KeysPkc", "library");
            }
            this.library = library;
            return this;
        }
        @CustomType.Setter
        public Builder mechanism(String mechanism) {
            if (mechanism == null) {
              throw new MissingRequiredPropertyException("KeysPkc", "mechanism");
            }
            this.mechanism = mechanism;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("KeysPkc", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pin(String pin) {
            if (pin == null) {
              throw new MissingRequiredPropertyException("KeysPkc", "pin");
            }
            this.pin = pin;
            return this;
        }
        @CustomType.Setter
        public Builder slot(@Nullable String slot) {

            this.slot = slot;
            return this;
        }
        @CustomType.Setter
        public Builder tokenLabel(@Nullable String tokenLabel) {

            this.tokenLabel = tokenLabel;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public KeysPkc build() {
            final var _resultValue = new KeysPkc();
            _resultValue.allowGenerateKey = allowGenerateKey;
            _resultValue.allowReplaceKey = allowReplaceKey;
            _resultValue.allowStoreKey = allowStoreKey;
            _resultValue.anyMount = anyMount;
            _resultValue.curve = curve;
            _resultValue.forceRwSession = forceRwSession;
            _resultValue.keyBits = keyBits;
            _resultValue.keyId = keyId;
            _resultValue.keyLabel = keyLabel;
            _resultValue.library = library;
            _resultValue.mechanism = mechanism;
            _resultValue.name = name;
            _resultValue.pin = pin;
            _resultValue.slot = slot;
            _resultValue.tokenLabel = tokenLabel;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
