// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.pkiSecret.BackendConfigAutoTidyArgs;
import com.pulumi.vault.pkiSecret.inputs.BackendConfigAutoTidyState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows setting the Auto Tidy configuration on a PKI Secret Backend
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.Mount;
 * import com.pulumi.vault.MountArgs;
 * import com.pulumi.vault.pkiSecret.BackendConfigAutoTidy;
 * import com.pulumi.vault.pkiSecret.BackendConfigAutoTidyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var pki = new Mount("pki", MountArgs.builder()
 *             .path("pki")
 *             .type("pki")
 *             .defaultLeaseTtlSeconds(3600)
 *             .maxLeaseTtlSeconds(86400)
 *             .build());
 * 
 *         var test = new BackendConfigAutoTidy("test", BackendConfigAutoTidyArgs.builder()
 *             .backend(pki.path())
 *             .enabled(true)
 *             .tidyCertStore(true)
 *             .intervalDuration("1h")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy")
public class BackendConfigAutoTidy extends com.pulumi.resources.CustomResource {
    /**
     * The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
     * 
     */
    @Export(name="acmeAccountSafetyBuffer", refs={String.class}, tree="[0]")
    private Output<String> acmeAccountSafetyBuffer;

    /**
     * @return The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of time after being marked revoked or deactivated.
     * 
     */
    public Output<String> acmeAccountSafetyBuffer() {
        return this.acmeAccountSafetyBuffer;
    }
    /**
     * The path to the PKI secret backend to
     * read the configuration from, with no leading or trailing `/`s.
     * 
     */
    @Export(name="backend", refs={String.class}, tree="[0]")
    private Output<String> backend;

    /**
     * @return The path to the PKI secret backend to
     * read the configuration from, with no leading or trailing `/`s.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }
    /**
     * Specifies whether automatic tidy is enabled or not.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Specifies whether automatic tidy is enabled or not.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Interval at which to run an auto-tidy operation. This is the time
     * between tidy invocations (after one finishes to the start of the next).
     * 
     */
    @Export(name="intervalDuration", refs={String.class}, tree="[0]")
    private Output<String> intervalDuration;

    /**
     * @return Interval at which to run an auto-tidy operation. This is the time
     * between tidy invocations (after one finishes to the start of the next).
     * 
     */
    public Output<String> intervalDuration() {
        return this.intervalDuration;
    }
    /**
     * The amount of extra time that must have passed beyond issuer&#39;s
     * expiration before it is removed from the backend storage.
     * 
     */
    @Export(name="issuerSafetyBuffer", refs={String.class}, tree="[0]")
    private Output<String> issuerSafetyBuffer;

    /**
     * @return The amount of extra time that must have passed beyond issuer&#39;s
     * expiration before it is removed from the backend storage.
     * 
     */
    public Output<String> issuerSafetyBuffer() {
        return this.issuerSafetyBuffer;
    }
    /**
     * This configures whether stored certificate are
     * counted upon initialization of the backend, and whether during normal operation, a running count
     * of certificates stored is maintained.
     * 
     */
    @Export(name="maintainStoredCertificateCounts", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> maintainStoredCertificateCounts;

    /**
     * @return This configures whether stored certificate are
     * counted upon initialization of the backend, and whether during normal operation, a running count
     * of certificates stored is maintained.
     * 
     */
    public Output<Optional<Boolean>> maintainStoredCertificateCounts() {
        return Codegen.optional(this.maintainStoredCertificateCounts);
    }
    /**
     * The maximum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    @Export(name="maxStartupBackoffDuration", refs={String.class}, tree="[0]")
    private Output<String> maxStartupBackoffDuration;

    /**
     * @return The maximum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    public Output<String> maxStartupBackoffDuration() {
        return this.maxStartupBackoffDuration;
    }
    /**
     * The minimum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    @Export(name="minStartupBackoffDuration", refs={String.class}, tree="[0]")
    private Output<String> minStartupBackoffDuration;

    /**
     * @return The minimum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    public Output<String> minStartupBackoffDuration() {
        return this.minStartupBackoffDuration;
    }
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * The amount of time to wait between processing certificates.
     * 
     */
    @Export(name="pauseDuration", refs={String.class}, tree="[0]")
    private Output<String> pauseDuration;

    /**
     * @return The amount of time to wait between processing certificates.
     * 
     */
    public Output<String> pauseDuration() {
        return this.pauseDuration;
    }
    /**
     * This configures whether the stored
     * certificate count is published to the metrics consumer.
     * 
     */
    @Export(name="publishStoredCertificateCountMetrics", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> publishStoredCertificateCountMetrics;

    /**
     * @return This configures whether the stored
     * certificate count is published to the metrics consumer.
     * 
     */
    public Output<Optional<Boolean>> publishStoredCertificateCountMetrics() {
        return Codegen.optional(this.publishStoredCertificateCountMetrics);
    }
    /**
     * The amount of time that must pass from the
     * cross-cluster revocation request being initiated to when it will be slated for removal.
     * 
     */
    @Export(name="revocationQueueSafetyBuffer", refs={String.class}, tree="[0]")
    private Output<String> revocationQueueSafetyBuffer;

    /**
     * @return The amount of time that must pass from the
     * cross-cluster revocation request being initiated to when it will be slated for removal.
     * 
     */
    public Output<String> revocationQueueSafetyBuffer() {
        return this.revocationQueueSafetyBuffer;
    }
    /**
     * The amount of extra time that must have passed beyond certificate
     * expiration before it is removed from the backend storage and/or revocation list.
     * 
     */
    @Export(name="safetyBuffer", refs={String.class}, tree="[0]")
    private Output<String> safetyBuffer;

    /**
     * @return The amount of extra time that must have passed beyond certificate
     * expiration before it is removed from the backend storage and/or revocation list.
     * 
     */
    public Output<String> safetyBuffer() {
        return this.safetyBuffer;
    }
    /**
     * Set to true to enable tidying ACME accounts, orders and authorizations.
     * 
     */
    @Export(name="tidyAcme", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyAcme;

    /**
     * @return Set to true to enable tidying ACME accounts, orders and authorizations.
     * 
     */
    public Output<Optional<Boolean>> tidyAcme() {
        return Codegen.optional(this.tidyAcme);
    }
    /**
     * Set to true to enable tidying up certificate metadata.
     * 
     */
    @Export(name="tidyCertMetadata", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyCertMetadata;

    /**
     * @return Set to true to enable tidying up certificate metadata.
     * 
     */
    public Output<Optional<Boolean>> tidyCertMetadata() {
        return Codegen.optional(this.tidyCertMetadata);
    }
    /**
     * Set to true to enable tidying up the certificate store
     * 
     */
    @Export(name="tidyCertStore", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyCertStore;

    /**
     * @return Set to true to enable tidying up the certificate store
     * 
     */
    public Output<Optional<Boolean>> tidyCertStore() {
        return Codegen.optional(this.tidyCertStore);
    }
    /**
     * Set to true to enable tidying up the CMPv2 nonce store.
     * 
     */
    @Export(name="tidyCmpv2NonceStore", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyCmpv2NonceStore;

    /**
     * @return Set to true to enable tidying up the CMPv2 nonce store.
     * 
     */
    public Output<Optional<Boolean>> tidyCmpv2NonceStore() {
        return Codegen.optional(this.tidyCmpv2NonceStore);
    }
    /**
     * Set to true to enable tidying up the cross-cluster
     * revoked certificate store.
     * 
     */
    @Export(name="tidyCrossClusterRevokedCerts", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyCrossClusterRevokedCerts;

    /**
     * @return Set to true to enable tidying up the cross-cluster
     * revoked certificate store.
     * 
     */
    public Output<Optional<Boolean>> tidyCrossClusterRevokedCerts() {
        return Codegen.optional(this.tidyCrossClusterRevokedCerts);
    }
    /**
     * Set to true to automatically remove expired issuers past the
     * `issuerSafetyBuffer`. No keys will be removed as part of this operation.
     * 
     */
    @Export(name="tidyExpiredIssuers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyExpiredIssuers;

    /**
     * @return Set to true to automatically remove expired issuers past the
     * `issuerSafetyBuffer`. No keys will be removed as part of this operation.
     * 
     */
    public Output<Optional<Boolean>> tidyExpiredIssuers() {
        return Codegen.optional(this.tidyExpiredIssuers);
    }
    /**
     * Set to true to move the legacy `caBundle` from
     * `/config/ca_bundle` to `/config/ca_bundle.bak`.
     * 
     */
    @Export(name="tidyMoveLegacyCaBundle", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyMoveLegacyCaBundle;

    /**
     * @return Set to true to move the legacy `caBundle` from
     * `/config/ca_bundle` to `/config/ca_bundle.bak`.
     * 
     */
    public Output<Optional<Boolean>> tidyMoveLegacyCaBundle() {
        return Codegen.optional(this.tidyMoveLegacyCaBundle);
    }
    /**
     * Set to true to remove stale revocation queue entries that
     * haven&#39;t been confirmed by any active cluster.
     * 
     */
    @Export(name="tidyRevocationQueue", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyRevocationQueue;

    /**
     * @return Set to true to remove stale revocation queue entries that
     * haven&#39;t been confirmed by any active cluster.
     * 
     */
    public Output<Optional<Boolean>> tidyRevocationQueue() {
        return Codegen.optional(this.tidyRevocationQueue);
    }
    /**
     * Set to true to validate issuer associations
     * on revocation entries. This helps increase the performance of CRL building and OCSP responses.
     * 
     */
    @Export(name="tidyRevokedCertIssuerAssociations", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyRevokedCertIssuerAssociations;

    /**
     * @return Set to true to validate issuer associations
     * on revocation entries. This helps increase the performance of CRL building and OCSP responses.
     * 
     */
    public Output<Optional<Boolean>> tidyRevokedCertIssuerAssociations() {
        return Codegen.optional(this.tidyRevokedCertIssuerAssociations);
    }
    /**
     * Set to true to remove all invalid and expired certificates from
     * storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
     * the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
     * the CRL, and the CRL will be rotated.
     * 
     */
    @Export(name="tidyRevokedCerts", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tidyRevokedCerts;

    /**
     * @return Set to true to remove all invalid and expired certificates from
     * storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
     * the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
     * the CRL, and the CRL will be rotated.
     * 
     */
    public Output<Optional<Boolean>> tidyRevokedCerts() {
        return Codegen.optional(this.tidyRevokedCerts);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendConfigAutoTidy(java.lang.String name) {
        this(name, BackendConfigAutoTidyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendConfigAutoTidy(java.lang.String name, BackendConfigAutoTidyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendConfigAutoTidy(java.lang.String name, BackendConfigAutoTidyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackendConfigAutoTidy(java.lang.String name, Output<java.lang.String> id, @Nullable BackendConfigAutoTidyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy", name, state, makeResourceOptions(options, id), false);
    }

    private static BackendConfigAutoTidyArgs makeArgs(BackendConfigAutoTidyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackendConfigAutoTidyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendConfigAutoTidy get(java.lang.String name, Output<java.lang.String> id, @Nullable BackendConfigAutoTidyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendConfigAutoTidy(name, id, state, options);
    }
}
