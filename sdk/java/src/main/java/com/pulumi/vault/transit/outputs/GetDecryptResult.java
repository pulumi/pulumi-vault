// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transit.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDecryptResult {
    private String backend;
    private String ciphertext;
    private @Nullable String context;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String key;
    private @Nullable String namespace;
    /**
     * @return Decrypted plaintext returned from Vault
     * 
     */
    private String plaintext;

    private GetDecryptResult() {}
    public String backend() {
        return this.backend;
    }
    public String ciphertext() {
        return this.ciphertext;
    }
    public Optional<String> context() {
        return Optional.ofNullable(this.context);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String key() {
        return this.key;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Decrypted plaintext returned from Vault
     * 
     */
    public String plaintext() {
        return this.plaintext;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDecryptResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backend;
        private String ciphertext;
        private @Nullable String context;
        private String id;
        private String key;
        private @Nullable String namespace;
        private String plaintext;
        public Builder() {}
        public Builder(GetDecryptResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backend = defaults.backend;
    	      this.ciphertext = defaults.ciphertext;
    	      this.context = defaults.context;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.namespace = defaults.namespace;
    	      this.plaintext = defaults.plaintext;
        }

        @CustomType.Setter
        public Builder backend(String backend) {
            if (backend == null) {
              throw new MissingRequiredPropertyException("GetDecryptResult", "backend");
            }
            this.backend = backend;
            return this;
        }
        @CustomType.Setter
        public Builder ciphertext(String ciphertext) {
            if (ciphertext == null) {
              throw new MissingRequiredPropertyException("GetDecryptResult", "ciphertext");
            }
            this.ciphertext = ciphertext;
            return this;
        }
        @CustomType.Setter
        public Builder context(@Nullable String context) {

            this.context = context;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDecryptResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetDecryptResult", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder plaintext(String plaintext) {
            if (plaintext == null) {
              throw new MissingRequiredPropertyException("GetDecryptResult", "plaintext");
            }
            this.plaintext = plaintext;
            return this;
        }
        public GetDecryptResult build() {
            final var _resultValue = new GetDecryptResult();
            _resultValue.backend = backend;
            _resultValue.ciphertext = ciphertext;
            _resultValue.context = context;
            _resultValue.id = id;
            _resultValue.key = key;
            _resultValue.namespace = namespace;
            _resultValue.plaintext = plaintext;
            return _resultValue;
        }
    }
}
