// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ssh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.ssh.SecretBackendRoleArgs;
import com.pulumi.vault.ssh.inputs.SecretBackendRoleState;
import com.pulumi.vault.ssh.outputs.SecretBackendRoleAllowedUserKeyConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource to manage roles in an SSH secret backend
 * [SSH secret backend within Vault](https://www.vaultproject.io/docs/secrets/ssh/index.html).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.Mount;
 * import com.pulumi.vault.MountArgs;
 * import com.pulumi.vault.ssh.SecretBackendRole;
 * import com.pulumi.vault.ssh.SecretBackendRoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Mount(&#34;example&#34;, MountArgs.builder()        
 *             .type(&#34;ssh&#34;)
 *             .build());
 * 
 *         var foo = new SecretBackendRole(&#34;foo&#34;, SecretBackendRoleArgs.builder()        
 *             .backend(example.path())
 *             .keyType(&#34;ca&#34;)
 *             .allowUserCertificates(true)
 *             .build());
 * 
 *         var bar = new SecretBackendRole(&#34;bar&#34;, SecretBackendRoleArgs.builder()        
 *             .backend(example.path())
 *             .keyType(&#34;otp&#34;)
 *             .defaultUser(&#34;default&#34;)
 *             .allowedUsers(&#34;default,baz&#34;)
 *             .cidrList(&#34;0.0.0.0/0&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * SSH secret backend roles can be imported using the `path`, e.g.
 * 
 * ```sh
 *  $ pulumi import vault:ssh/secretBackendRole:SecretBackendRole foo ssh/roles/my-role
 * ```
 * 
 */
@ResourceType(type="vault:ssh/secretBackendRole:SecretBackendRole")
public class SecretBackendRole extends com.pulumi.resources.CustomResource {
    /**
     * When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
     * 
     */
    @Export(name="algorithmSigner", type=String.class, parameters={})
    private Output<String> algorithmSigner;

    /**
     * @return When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
     * 
     */
    public Output<String> algorithmSigner() {
        return this.algorithmSigner;
    }
    /**
     * Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
     * 
     */
    @Export(name="allowBareDomains", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowBareDomains;

    /**
     * @return Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
     * 
     */
    public Output<Optional<Boolean>> allowBareDomains() {
        return Codegen.optional(this.allowBareDomains);
    }
    /**
     * Specifies if certificates are allowed to be signed for use as a &#39;host&#39;.
     * 
     */
    @Export(name="allowHostCertificates", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowHostCertificates;

    /**
     * @return Specifies if certificates are allowed to be signed for use as a &#39;host&#39;.
     * 
     */
    public Output<Optional<Boolean>> allowHostCertificates() {
        return Codegen.optional(this.allowHostCertificates);
    }
    /**
     * Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
     * 
     */
    @Export(name="allowSubdomains", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowSubdomains;

    /**
     * @return Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
     * 
     */
    public Output<Optional<Boolean>> allowSubdomains() {
        return Codegen.optional(this.allowSubdomains);
    }
    /**
     * Specifies if certificates are allowed to be signed for use as a &#39;user&#39;.
     * 
     */
    @Export(name="allowUserCertificates", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowUserCertificates;

    /**
     * @return Specifies if certificates are allowed to be signed for use as a &#39;user&#39;.
     * 
     */
    public Output<Optional<Boolean>> allowUserCertificates() {
        return Codegen.optional(this.allowUserCertificates);
    }
    /**
     * Specifies if users can override the key ID for a signed certificate with the `key_id` field.
     * 
     */
    @Export(name="allowUserKeyIds", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowUserKeyIds;

    /**
     * @return Specifies if users can override the key ID for a signed certificate with the `key_id` field.
     * 
     */
    public Output<Optional<Boolean>> allowUserKeyIds() {
        return Codegen.optional(this.allowUserKeyIds);
    }
    /**
     * Specifies a comma-separated list of critical options that certificates can have when signed.
     * 
     */
    @Export(name="allowedCriticalOptions", type=String.class, parameters={})
    private Output</* @Nullable */ String> allowedCriticalOptions;

    /**
     * @return Specifies a comma-separated list of critical options that certificates can have when signed.
     * 
     */
    public Output<Optional<String>> allowedCriticalOptions() {
        return Codegen.optional(this.allowedCriticalOptions);
    }
    /**
     * The list of domains for which a client can request a host certificate.
     * 
     */
    @Export(name="allowedDomains", type=String.class, parameters={})
    private Output</* @Nullable */ String> allowedDomains;

    /**
     * @return The list of domains for which a client can request a host certificate.
     * 
     */
    public Output<Optional<String>> allowedDomains() {
        return Codegen.optional(this.allowedDomains);
    }
    /**
     * Specifies if `allowed_domains` can be declared using
     * identity template policies. Non-templated domains are also permitted.
     * 
     */
    @Export(name="allowedDomainsTemplate", type=Boolean.class, parameters={})
    private Output<Boolean> allowedDomainsTemplate;

    /**
     * @return Specifies if `allowed_domains` can be declared using
     * identity template policies. Non-templated domains are also permitted.
     * 
     */
    public Output<Boolean> allowedDomainsTemplate() {
        return this.allowedDomainsTemplate;
    }
    /**
     * Specifies a comma-separated list of extensions that certificates can have when signed.
     * 
     */
    @Export(name="allowedExtensions", type=String.class, parameters={})
    private Output</* @Nullable */ String> allowedExtensions;

    /**
     * @return Specifies a comma-separated list of extensions that certificates can have when signed.
     * 
     */
    public Output<Optional<String>> allowedExtensions() {
        return Codegen.optional(this.allowedExtensions);
    }
    /**
     * Set of configuration blocks to define allowed\
     * user key configuration, like key type and their lengths. Can be specified multiple times.
     * *See Configuration-Options for more info*
     * 
     */
    @Export(name="allowedUserKeyConfigs", type=List.class, parameters={SecretBackendRoleAllowedUserKeyConfig.class})
    private Output</* @Nullable */ List<SecretBackendRoleAllowedUserKeyConfig>> allowedUserKeyConfigs;

    /**
     * @return Set of configuration blocks to define allowed\
     * user key configuration, like key type and their lengths. Can be specified multiple times.
     * *See Configuration-Options for more info*
     * 
     */
    public Output<Optional<List<SecretBackendRoleAllowedUserKeyConfig>>> allowedUserKeyConfigs() {
        return Codegen.optional(this.allowedUserKeyConfigs);
    }
    /**
     * Specifies a map of ssh key types and their expected sizes which
     * are allowed to be signed by the CA type.
     * *Deprecated: use* allowed_user_key_config *instead*
     * 
     * @deprecated
     * Set in allowed_user_key_config
     * 
     */
    @Deprecated /* Set in allowed_user_key_config */
    @Export(name="allowedUserKeyLengths", type=Map.class, parameters={String.class, Integer.class})
    private Output</* @Nullable */ Map<String,Integer>> allowedUserKeyLengths;

    /**
     * @return Specifies a map of ssh key types and their expected sizes which
     * are allowed to be signed by the CA type.
     * *Deprecated: use* allowed_user_key_config *instead*
     * 
     */
    public Output<Optional<Map<String,Integer>>> allowedUserKeyLengths() {
        return Codegen.optional(this.allowedUserKeyLengths);
    }
    /**
     * Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
     * 
     */
    @Export(name="allowedUsers", type=String.class, parameters={})
    private Output</* @Nullable */ String> allowedUsers;

    /**
     * @return Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
     * 
     */
    public Output<Optional<String>> allowedUsers() {
        return Codegen.optional(this.allowedUsers);
    }
    /**
     * Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
     * 
     */
    @Export(name="allowedUsersTemplate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowedUsersTemplate;

    /**
     * @return Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
     * 
     */
    public Output<Optional<Boolean>> allowedUsersTemplate() {
        return Codegen.optional(this.allowedUsersTemplate);
    }
    /**
     * The path where the SSH secret backend is mounted.
     * 
     */
    @Export(name="backend", type=String.class, parameters={})
    private Output<String> backend;

    /**
     * @return The path where the SSH secret backend is mounted.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }
    /**
     * The comma-separated string of CIDR blocks for which this role is applicable.
     * 
     */
    @Export(name="cidrList", type=String.class, parameters={})
    private Output</* @Nullable */ String> cidrList;

    /**
     * @return The comma-separated string of CIDR blocks for which this role is applicable.
     * 
     */
    public Output<Optional<String>> cidrList() {
        return Codegen.optional(this.cidrList);
    }
    /**
     * Specifies a map of critical options that certificates have when signed.
     * 
     */
    @Export(name="defaultCriticalOptions", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> defaultCriticalOptions;

    /**
     * @return Specifies a map of critical options that certificates have when signed.
     * 
     */
    public Output<Optional<Map<String,Object>>> defaultCriticalOptions() {
        return Codegen.optional(this.defaultCriticalOptions);
    }
    /**
     * Specifies a map of extensions that certificates have when signed.
     * 
     */
    @Export(name="defaultExtensions", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> defaultExtensions;

    /**
     * @return Specifies a map of extensions that certificates have when signed.
     * 
     */
    public Output<Optional<Map<String,Object>>> defaultExtensions() {
        return Codegen.optional(this.defaultExtensions);
    }
    /**
     * Specifies the default username for which a credential will be generated.
     * 
     */
    @Export(name="defaultUser", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultUser;

    /**
     * @return Specifies the default username for which a credential will be generated.
     * 
     */
    public Output<Optional<String>> defaultUser() {
        return Codegen.optional(this.defaultUser);
    }
    /**
     * If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
     * 
     */
    @Export(name="defaultUserTemplate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> defaultUserTemplate;

    /**
     * @return If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
     * 
     */
    public Output<Optional<Boolean>> defaultUserTemplate() {
        return Codegen.optional(this.defaultUserTemplate);
    }
    /**
     * Specifies a custom format for the key id of a signed certificate.
     * 
     */
    @Export(name="keyIdFormat", type=String.class, parameters={})
    private Output</* @Nullable */ String> keyIdFormat;

    /**
     * @return Specifies a custom format for the key id of a signed certificate.
     * 
     */
    public Output<Optional<String>> keyIdFormat() {
        return Codegen.optional(this.keyIdFormat);
    }
    /**
     * Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
     * 
     */
    @Export(name="keyType", type=String.class, parameters={})
    private Output<String> keyType;

    /**
     * @return Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }
    /**
     * Specifies the maximum Time To Live value.
     * 
     */
    @Export(name="maxTtl", type=String.class, parameters={})
    private Output<String> maxTtl;

    /**
     * @return Specifies the maximum Time To Live value.
     * 
     */
    public Output<String> maxTtl() {
        return this.maxTtl;
    }
    /**
     * Specifies the name of the role to create.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Specifies the name of the role to create.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Export(name="namespace", type=String.class, parameters={})
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Specifies the Time To Live value.
     * 
     */
    @Export(name="ttl", type=String.class, parameters={})
    private Output<String> ttl;

    /**
     * @return Specifies the Time To Live value.
     * 
     */
    public Output<String> ttl() {
        return this.ttl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SecretBackendRole(String name) {
        this(name, SecretBackendRoleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SecretBackendRole(String name, SecretBackendRoleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SecretBackendRole(String name, SecretBackendRoleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:ssh/secretBackendRole:SecretBackendRole", name, args == null ? SecretBackendRoleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SecretBackendRole(String name, Output<String> id, @Nullable SecretBackendRoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:ssh/secretBackendRole:SecretBackendRole", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SecretBackendRole get(String name, Output<String> id, @Nullable SecretBackendRoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SecretBackendRole(name, id, state, options);
    }
}
