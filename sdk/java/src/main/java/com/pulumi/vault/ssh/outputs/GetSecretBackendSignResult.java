// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ssh.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecretBackendSignResult {
    private @Nullable String certType;
    private @Nullable Map<String,String> criticalOptions;
    private @Nullable Map<String,String> extensions;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String keyId;
    private String name;
    private @Nullable String namespace;
    private String path;
    private String publicKey;
    /**
     * @return The serial number of the certificate returned from Vault
     * 
     */
    private String serialNumber;
    /**
     * @return The signed certificate returned from Vault
     * 
     */
    private String signedKey;
    private @Nullable String ttl;
    private @Nullable String validPrincipals;

    private GetSecretBackendSignResult() {}
    public Optional<String> certType() {
        return Optional.ofNullable(this.certType);
    }
    public Map<String,String> criticalOptions() {
        return this.criticalOptions == null ? Map.of() : this.criticalOptions;
    }
    public Map<String,String> extensions() {
        return this.extensions == null ? Map.of() : this.extensions;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    public String path() {
        return this.path;
    }
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The serial number of the certificate returned from Vault
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }
    /**
     * @return The signed certificate returned from Vault
     * 
     */
    public String signedKey() {
        return this.signedKey;
    }
    public Optional<String> ttl() {
        return Optional.ofNullable(this.ttl);
    }
    public Optional<String> validPrincipals() {
        return Optional.ofNullable(this.validPrincipals);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretBackendSignResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certType;
        private @Nullable Map<String,String> criticalOptions;
        private @Nullable Map<String,String> extensions;
        private String id;
        private @Nullable String keyId;
        private String name;
        private @Nullable String namespace;
        private String path;
        private String publicKey;
        private String serialNumber;
        private String signedKey;
        private @Nullable String ttl;
        private @Nullable String validPrincipals;
        public Builder() {}
        public Builder(GetSecretBackendSignResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certType = defaults.certType;
    	      this.criticalOptions = defaults.criticalOptions;
    	      this.extensions = defaults.extensions;
    	      this.id = defaults.id;
    	      this.keyId = defaults.keyId;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.path = defaults.path;
    	      this.publicKey = defaults.publicKey;
    	      this.serialNumber = defaults.serialNumber;
    	      this.signedKey = defaults.signedKey;
    	      this.ttl = defaults.ttl;
    	      this.validPrincipals = defaults.validPrincipals;
        }

        @CustomType.Setter
        public Builder certType(@Nullable String certType) {

            this.certType = certType;
            return this;
        }
        @CustomType.Setter
        public Builder criticalOptions(@Nullable Map<String,String> criticalOptions) {

            this.criticalOptions = criticalOptions;
            return this;
        }
        @CustomType.Setter
        public Builder extensions(@Nullable Map<String,String> extensions) {

            this.extensions = extensions;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecretBackendSignResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {

            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecretBackendSignResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetSecretBackendSignResult", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetSecretBackendSignResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(String serialNumber) {
            if (serialNumber == null) {
              throw new MissingRequiredPropertyException("GetSecretBackendSignResult", "serialNumber");
            }
            this.serialNumber = serialNumber;
            return this;
        }
        @CustomType.Setter
        public Builder signedKey(String signedKey) {
            if (signedKey == null) {
              throw new MissingRequiredPropertyException("GetSecretBackendSignResult", "signedKey");
            }
            this.signedKey = signedKey;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(@Nullable String ttl) {

            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder validPrincipals(@Nullable String validPrincipals) {

            this.validPrincipals = validPrincipals;
            return this;
        }
        public GetSecretBackendSignResult build() {
            final var _resultValue = new GetSecretBackendSignResult();
            _resultValue.certType = certType;
            _resultValue.criticalOptions = criticalOptions;
            _resultValue.extensions = extensions;
            _resultValue.id = id;
            _resultValue.keyId = keyId;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.path = path;
            _resultValue.publicKey = publicKey;
            _resultValue.serialNumber = serialNumber;
            _resultValue.signedKey = signedKey;
            _resultValue.ttl = ttl;
            _resultValue.validPrincipals = validPrincipals;
            return _resultValue;
        }
    }
}
