// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.kubernetes.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceAccountTokenResult {
    private String backend;
    private @Nullable Boolean clusterRoleBinding;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String kubernetesNamespace;
    /**
     * @return The duration of the lease in seconds.
     * 
     */
    private Integer leaseDuration;
    /**
     * @return The lease identifier assigned by Vault.
     * 
     */
    private String leaseId;
    /**
     * @return True if the duration of this lease can be extended through renewal.
     * 
     */
    private Boolean leaseRenewable;
    private @Nullable String namespace;
    private String role;
    /**
     * @return The name of the service account associated with the token.
     * 
     */
    private String serviceAccountName;
    /**
     * @return The Kubernetes namespace that the service account resides in.
     * 
     */
    private String serviceAccountNamespace;
    /**
     * @return The Kubernetes service account token.
     * 
     */
    private String serviceAccountToken;
    private @Nullable String ttl;

    private GetServiceAccountTokenResult() {}
    public String backend() {
        return this.backend;
    }
    public Optional<Boolean> clusterRoleBinding() {
        return Optional.ofNullable(this.clusterRoleBinding);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String kubernetesNamespace() {
        return this.kubernetesNamespace;
    }
    /**
     * @return The duration of the lease in seconds.
     * 
     */
    public Integer leaseDuration() {
        return this.leaseDuration;
    }
    /**
     * @return The lease identifier assigned by Vault.
     * 
     */
    public String leaseId() {
        return this.leaseId;
    }
    /**
     * @return True if the duration of this lease can be extended through renewal.
     * 
     */
    public Boolean leaseRenewable() {
        return this.leaseRenewable;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    public String role() {
        return this.role;
    }
    /**
     * @return The name of the service account associated with the token.
     * 
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }
    /**
     * @return The Kubernetes namespace that the service account resides in.
     * 
     */
    public String serviceAccountNamespace() {
        return this.serviceAccountNamespace;
    }
    /**
     * @return The Kubernetes service account token.
     * 
     */
    public String serviceAccountToken() {
        return this.serviceAccountToken;
    }
    public Optional<String> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceAccountTokenResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backend;
        private @Nullable Boolean clusterRoleBinding;
        private String id;
        private String kubernetesNamespace;
        private Integer leaseDuration;
        private String leaseId;
        private Boolean leaseRenewable;
        private @Nullable String namespace;
        private String role;
        private String serviceAccountName;
        private String serviceAccountNamespace;
        private String serviceAccountToken;
        private @Nullable String ttl;
        public Builder() {}
        public Builder(GetServiceAccountTokenResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backend = defaults.backend;
    	      this.clusterRoleBinding = defaults.clusterRoleBinding;
    	      this.id = defaults.id;
    	      this.kubernetesNamespace = defaults.kubernetesNamespace;
    	      this.leaseDuration = defaults.leaseDuration;
    	      this.leaseId = defaults.leaseId;
    	      this.leaseRenewable = defaults.leaseRenewable;
    	      this.namespace = defaults.namespace;
    	      this.role = defaults.role;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.serviceAccountNamespace = defaults.serviceAccountNamespace;
    	      this.serviceAccountToken = defaults.serviceAccountToken;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder backend(String backend) {
            this.backend = Objects.requireNonNull(backend);
            return this;
        }
        @CustomType.Setter
        public Builder clusterRoleBinding(@Nullable Boolean clusterRoleBinding) {
            this.clusterRoleBinding = clusterRoleBinding;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesNamespace(String kubernetesNamespace) {
            this.kubernetesNamespace = Objects.requireNonNull(kubernetesNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder leaseDuration(Integer leaseDuration) {
            this.leaseDuration = Objects.requireNonNull(leaseDuration);
            return this;
        }
        @CustomType.Setter
        public Builder leaseId(String leaseId) {
            this.leaseId = Objects.requireNonNull(leaseId);
            return this;
        }
        @CustomType.Setter
        public Builder leaseRenewable(Boolean leaseRenewable) {
            this.leaseRenewable = Objects.requireNonNull(leaseRenewable);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountName(String serviceAccountName) {
            this.serviceAccountName = Objects.requireNonNull(serviceAccountName);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountNamespace(String serviceAccountNamespace) {
            this.serviceAccountNamespace = Objects.requireNonNull(serviceAccountNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountToken(String serviceAccountToken) {
            this.serviceAccountToken = Objects.requireNonNull(serviceAccountToken);
            return this;
        }
        @CustomType.Setter
        public Builder ttl(@Nullable String ttl) {
            this.ttl = ttl;
            return this;
        }
        public GetServiceAccountTokenResult build() {
            final var o = new GetServiceAccountTokenResult();
            o.backend = backend;
            o.clusterRoleBinding = clusterRoleBinding;
            o.id = id;
            o.kubernetesNamespace = kubernetesNamespace;
            o.leaseDuration = leaseDuration;
            o.leaseId = leaseId;
            o.leaseRenewable = leaseRenewable;
            o.namespace = namespace;
            o.role = role;
            o.serviceAccountName = serviceAccountName;
            o.serviceAccountNamespace = serviceAccountNamespace;
            o.serviceAccountToken = serviceAccountToken;
            o.ttl = ttl;
            return o;
        }
    }
}
