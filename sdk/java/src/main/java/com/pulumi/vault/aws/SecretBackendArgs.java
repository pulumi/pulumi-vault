// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.aws;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendArgs Empty = new SecretBackendArgs();

    /**
     * The AWS Access Key ID this backend should use to
     * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The AWS Access Key ID this backend should use to
     * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     * 
     */
    @Import(name="allowedManagedKeys")
    private @Nullable Output<List<String>> allowedManagedKeys;

    /**
     * @return List of managed key registry entry names that the mount in question is allowed to access
     * 
     */
    public Optional<Output<List<String>>> allowedManagedKeys() {
        return Optional.ofNullable(this.allowedManagedKeys);
    }

    /**
     * List of headers to allow and pass from the request to the plugin
     * 
     */
    @Import(name="allowedResponseHeaders")
    private @Nullable Output<List<String>> allowedResponseHeaders;

    /**
     * @return List of headers to allow and pass from the request to the plugin
     * 
     */
    public Optional<Output<List<String>>> allowedResponseHeaders() {
        return Optional.ofNullable(this.allowedResponseHeaders);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    @Import(name="auditNonHmacRequestKeys")
    private @Nullable Output<List<String>> auditNonHmacRequestKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacRequestKeys() {
        return Optional.ofNullable(this.auditNonHmacRequestKeys);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    @Import(name="auditNonHmacResponseKeys")
    private @Nullable Output<List<String>> auditNonHmacResponseKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacResponseKeys() {
        return Optional.ofNullable(this.auditNonHmacResponseKeys);
    }

    /**
     * Default lease duration for secrets in seconds
     * 
     */
    @Import(name="defaultLeaseTtlSeconds")
    private @Nullable Output<Integer> defaultLeaseTtlSeconds;

    /**
     * @return Default lease duration for secrets in seconds
     * 
     */
    public Optional<Output<Integer>> defaultLeaseTtlSeconds() {
        return Optional.ofNullable(this.defaultLeaseTtlSeconds);
    }

    /**
     * List of headers to allow and pass from the request to the plugin
     * 
     */
    @Import(name="delegatedAuthAccessors")
    private @Nullable Output<List<String>> delegatedAuthAccessors;

    /**
     * @return List of headers to allow and pass from the request to the plugin
     * 
     */
    public Optional<Output<List<String>>> delegatedAuthAccessors() {
        return Optional.ofNullable(this.delegatedAuthAccessors);
    }

    /**
     * Human-friendly description of the mount for the backend.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-friendly description of the mount for the backend.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="disableAutomatedRotation")
    private @Nullable Output<Boolean> disableAutomatedRotation;

    /**
     * @return Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<Boolean>> disableAutomatedRotation() {
        return Optional.ofNullable(this.disableAutomatedRotation);
    }

    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     * 
     */
    @Import(name="disableRemount")
    private @Nullable Output<Boolean> disableRemount;

    /**
     * @return If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     * 
     */
    public Optional<Output<Boolean>> disableRemount() {
        return Optional.ofNullable(this.disableRemount);
    }

    /**
     * Enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    @Import(name="externalEntropyAccess")
    private @Nullable Output<Boolean> externalEntropyAccess;

    /**
     * @return Enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    public Optional<Output<Boolean>> externalEntropyAccess() {
        return Optional.ofNullable(this.externalEntropyAccess);
    }

    /**
     * If set to true, disables caching.
     * 
     */
    @Import(name="forceNoCache")
    private @Nullable Output<Boolean> forceNoCache;

    /**
     * @return If set to true, disables caching.
     * 
     */
    public Optional<Output<Boolean>> forceNoCache() {
        return Optional.ofNullable(this.forceNoCache);
    }

    /**
     * Specifies a custom HTTP IAM endpoint to use.
     * 
     */
    @Import(name="iamEndpoint")
    private @Nullable Output<String> iamEndpoint;

    /**
     * @return Specifies a custom HTTP IAM endpoint to use.
     * 
     */
    public Optional<Output<String>> iamEndpoint() {
        return Optional.ofNullable(this.iamEndpoint);
    }

    /**
     * The audience claim value. Requires Vault 1.16+.
     * 
     */
    @Import(name="identityTokenAudience")
    private @Nullable Output<String> identityTokenAudience;

    /**
     * @return The audience claim value. Requires Vault 1.16+.
     * 
     */
    public Optional<Output<String>> identityTokenAudience() {
        return Optional.ofNullable(this.identityTokenAudience);
    }

    /**
     * The key to use for signing identity tokens.
     * 
     */
    @Import(name="identityTokenKey")
    private @Nullable Output<String> identityTokenKey;

    /**
     * @return The key to use for signing identity tokens.
     * 
     */
    public Optional<Output<String>> identityTokenKey() {
        return Optional.ofNullable(this.identityTokenKey);
    }

    /**
     * The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
     * 
     */
    @Import(name="identityTokenTtl")
    private @Nullable Output<Integer> identityTokenTtl;

    /**
     * @return The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
     * 
     */
    public Optional<Output<Integer>> identityTokenTtl() {
        return Optional.ofNullable(this.identityTokenTtl);
    }

    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     * 
     */
    @Import(name="listingVisibility")
    private @Nullable Output<String> listingVisibility;

    /**
     * @return Specifies whether to show this mount in the UI-specific listing endpoint
     * 
     */
    public Optional<Output<String>> listingVisibility() {
        return Optional.ofNullable(this.listingVisibility);
    }

    /**
     * Specifies if the secret backend is local only
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return Specifies if the secret backend is local only
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * Maximum possible lease duration for secrets in seconds
     * 
     */
    @Import(name="maxLeaseTtlSeconds")
    private @Nullable Output<Integer> maxLeaseTtlSeconds;

    /**
     * @return Maximum possible lease duration for secrets in seconds
     * 
     */
    public Optional<Output<Integer>> maxLeaseTtlSeconds() {
        return Optional.ofNullable(this.maxLeaseTtlSeconds);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies mount type specific options that are passed to the backend
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    /**
     * @return Specifies mount type specific options that are passed to the backend
     * 
     */
    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * List of headers to allow and pass from the request to the plugin
     * 
     */
    @Import(name="passthroughRequestHeaders")
    private @Nullable Output<List<String>> passthroughRequestHeaders;

    /**
     * @return List of headers to allow and pass from the request to the plugin
     * 
     */
    public Optional<Output<List<String>>> passthroughRequestHeaders() {
        return Optional.ofNullable(this.passthroughRequestHeaders);
    }

    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
     * 
     */
    @Import(name="pluginVersion")
    private @Nullable Output<String> pluginVersion;

    /**
     * @return Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
     * 
     */
    public Optional<Output<String>> pluginVersion() {
        return Optional.ofNullable(this.pluginVersion);
    }

    /**
     * The AWS region to make API calls against. Defaults to us-east-1.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The AWS region to make API calls against. Defaults to us-east-1.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * The amount of time in seconds Vault should wait before rotating the root credential.
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="rotationPeriod")
    private @Nullable Output<Integer> rotationPeriod;

    /**
     * @return The amount of time in seconds Vault should wait before rotating the root credential.
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<Integer>> rotationPeriod() {
        return Optional.ofNullable(this.rotationPeriod);
    }

    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="rotationSchedule")
    private @Nullable Output<String> rotationSchedule;

    /**
     * @return The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<String>> rotationSchedule() {
        return Optional.ofNullable(this.rotationSchedule);
    }

    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="rotationWindow")
    private @Nullable Output<Integer> rotationWindow;

    /**
     * @return The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<Integer>> rotationWindow() {
        return Optional.ofNullable(this.rotationWindow);
    }

    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    @Import(name="sealWrap")
    private @Nullable Output<Boolean> sealWrap;

    /**
     * @return Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    public Optional<Output<Boolean>> sealWrap() {
        return Optional.ofNullable(this.sealWrap);
    }

    /**
     * The AWS Secret Access Key to use when generating new credentials.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return The AWS Secret Access Key to use when generating new credentials.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Specifies a custom HTTP STS endpoint to use.
     * 
     */
    @Import(name="stsEndpoint")
    private @Nullable Output<String> stsEndpoint;

    /**
     * @return Specifies a custom HTTP STS endpoint to use.
     * 
     */
    public Optional<Output<String>> stsEndpoint() {
        return Optional.ofNullable(this.stsEndpoint);
    }

    /**
     * Ordered list of `sts_endpoint`s to try if the defined one fails. Requires Vault 1.19+
     * 
     */
    @Import(name="stsFallbackEndpoints")
    private @Nullable Output<List<String>> stsFallbackEndpoints;

    /**
     * @return Ordered list of `sts_endpoint`s to try if the defined one fails. Requires Vault 1.19+
     * 
     */
    public Optional<Output<List<String>>> stsFallbackEndpoints() {
        return Optional.ofNullable(this.stsFallbackEndpoints);
    }

    /**
     * Ordered list of `sts_region`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
     * 
     */
    @Import(name="stsFallbackRegions")
    private @Nullable Output<List<String>> stsFallbackRegions;

    /**
     * @return Ordered list of `sts_region`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
     * 
     */
    public Optional<Output<List<String>>> stsFallbackRegions() {
        return Optional.ofNullable(this.stsFallbackRegions);
    }

    /**
     * Specifies the region of the STS endpoint. Should be included if `sts_endpoint` is supplied. Requires Vault 1.19+
     * 
     */
    @Import(name="stsRegion")
    private @Nullable Output<String> stsRegion;

    /**
     * @return Specifies the region of the STS endpoint. Should be included if `sts_endpoint` is supplied. Requires Vault 1.19+
     * 
     */
    public Optional<Output<String>> stsRegion() {
        return Optional.ofNullable(this.stsRegion);
    }

    /**
     * Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
     * 
     */
    @Import(name="usernameTemplate")
    private @Nullable Output<String> usernameTemplate;

    /**
     * @return Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
     * 
     */
    public Optional<Output<String>> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    private SecretBackendArgs() {}

    private SecretBackendArgs(SecretBackendArgs $) {
        this.accessKey = $.accessKey;
        this.allowedManagedKeys = $.allowedManagedKeys;
        this.allowedResponseHeaders = $.allowedResponseHeaders;
        this.auditNonHmacRequestKeys = $.auditNonHmacRequestKeys;
        this.auditNonHmacResponseKeys = $.auditNonHmacResponseKeys;
        this.defaultLeaseTtlSeconds = $.defaultLeaseTtlSeconds;
        this.delegatedAuthAccessors = $.delegatedAuthAccessors;
        this.description = $.description;
        this.disableAutomatedRotation = $.disableAutomatedRotation;
        this.disableRemount = $.disableRemount;
        this.externalEntropyAccess = $.externalEntropyAccess;
        this.forceNoCache = $.forceNoCache;
        this.iamEndpoint = $.iamEndpoint;
        this.identityTokenAudience = $.identityTokenAudience;
        this.identityTokenKey = $.identityTokenKey;
        this.identityTokenTtl = $.identityTokenTtl;
        this.listingVisibility = $.listingVisibility;
        this.local = $.local;
        this.maxLeaseTtlSeconds = $.maxLeaseTtlSeconds;
        this.namespace = $.namespace;
        this.options = $.options;
        this.passthroughRequestHeaders = $.passthroughRequestHeaders;
        this.path = $.path;
        this.pluginVersion = $.pluginVersion;
        this.region = $.region;
        this.roleArn = $.roleArn;
        this.rotationPeriod = $.rotationPeriod;
        this.rotationSchedule = $.rotationSchedule;
        this.rotationWindow = $.rotationWindow;
        this.sealWrap = $.sealWrap;
        this.secretKey = $.secretKey;
        this.stsEndpoint = $.stsEndpoint;
        this.stsFallbackEndpoints = $.stsFallbackEndpoints;
        this.stsFallbackRegions = $.stsFallbackRegions;
        this.stsRegion = $.stsRegion;
        this.usernameTemplate = $.usernameTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendArgs $;

        public Builder() {
            $ = new SecretBackendArgs();
        }

        public Builder(SecretBackendArgs defaults) {
            $ = new SecretBackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The AWS Access Key ID this backend should use to
         * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The AWS Access Key ID this backend should use to
         * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(@Nullable Output<List<String>> allowedManagedKeys) {
            $.allowedManagedKeys = allowedManagedKeys;
            return this;
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(List<String> allowedManagedKeys) {
            return allowedManagedKeys(Output.of(allowedManagedKeys));
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(String... allowedManagedKeys) {
            return allowedManagedKeys(List.of(allowedManagedKeys));
        }

        /**
         * @param allowedResponseHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder allowedResponseHeaders(@Nullable Output<List<String>> allowedResponseHeaders) {
            $.allowedResponseHeaders = allowedResponseHeaders;
            return this;
        }

        /**
         * @param allowedResponseHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder allowedResponseHeaders(List<String> allowedResponseHeaders) {
            return allowedResponseHeaders(Output.of(allowedResponseHeaders));
        }

        /**
         * @param allowedResponseHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder allowedResponseHeaders(String... allowedResponseHeaders) {
            return allowedResponseHeaders(List.of(allowedResponseHeaders));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(@Nullable Output<List<String>> auditNonHmacRequestKeys) {
            $.auditNonHmacRequestKeys = auditNonHmacRequestKeys;
            return this;
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(List<String> auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(Output.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(String... auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(List.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(@Nullable Output<List<String>> auditNonHmacResponseKeys) {
            $.auditNonHmacResponseKeys = auditNonHmacResponseKeys;
            return this;
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(List<String> auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(Output.of(auditNonHmacResponseKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(String... auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(List.of(auditNonHmacResponseKeys));
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(@Nullable Output<Integer> defaultLeaseTtlSeconds) {
            $.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            return this;
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(Integer defaultLeaseTtlSeconds) {
            return defaultLeaseTtlSeconds(Output.of(defaultLeaseTtlSeconds));
        }

        /**
         * @param delegatedAuthAccessors List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder delegatedAuthAccessors(@Nullable Output<List<String>> delegatedAuthAccessors) {
            $.delegatedAuthAccessors = delegatedAuthAccessors;
            return this;
        }

        /**
         * @param delegatedAuthAccessors List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder delegatedAuthAccessors(List<String> delegatedAuthAccessors) {
            return delegatedAuthAccessors(Output.of(delegatedAuthAccessors));
        }

        /**
         * @param delegatedAuthAccessors List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder delegatedAuthAccessors(String... delegatedAuthAccessors) {
            return delegatedAuthAccessors(List.of(delegatedAuthAccessors));
        }

        /**
         * @param description Human-friendly description of the mount for the backend.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-friendly description of the mount for the backend.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableAutomatedRotation Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder disableAutomatedRotation(@Nullable Output<Boolean> disableAutomatedRotation) {
            $.disableAutomatedRotation = disableAutomatedRotation;
            return this;
        }

        /**
         * @param disableAutomatedRotation Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder disableAutomatedRotation(Boolean disableAutomatedRotation) {
            return disableAutomatedRotation(Output.of(disableAutomatedRotation));
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(@Nullable Output<Boolean> disableRemount) {
            $.disableRemount = disableRemount;
            return this;
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(Boolean disableRemount) {
            return disableRemount(Output.of(disableRemount));
        }

        /**
         * @param externalEntropyAccess Enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(@Nullable Output<Boolean> externalEntropyAccess) {
            $.externalEntropyAccess = externalEntropyAccess;
            return this;
        }

        /**
         * @param externalEntropyAccess Enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(Boolean externalEntropyAccess) {
            return externalEntropyAccess(Output.of(externalEntropyAccess));
        }

        /**
         * @param forceNoCache If set to true, disables caching.
         * 
         * @return builder
         * 
         */
        public Builder forceNoCache(@Nullable Output<Boolean> forceNoCache) {
            $.forceNoCache = forceNoCache;
            return this;
        }

        /**
         * @param forceNoCache If set to true, disables caching.
         * 
         * @return builder
         * 
         */
        public Builder forceNoCache(Boolean forceNoCache) {
            return forceNoCache(Output.of(forceNoCache));
        }

        /**
         * @param iamEndpoint Specifies a custom HTTP IAM endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder iamEndpoint(@Nullable Output<String> iamEndpoint) {
            $.iamEndpoint = iamEndpoint;
            return this;
        }

        /**
         * @param iamEndpoint Specifies a custom HTTP IAM endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder iamEndpoint(String iamEndpoint) {
            return iamEndpoint(Output.of(iamEndpoint));
        }

        /**
         * @param identityTokenAudience The audience claim value. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenAudience(@Nullable Output<String> identityTokenAudience) {
            $.identityTokenAudience = identityTokenAudience;
            return this;
        }

        /**
         * @param identityTokenAudience The audience claim value. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenAudience(String identityTokenAudience) {
            return identityTokenAudience(Output.of(identityTokenAudience));
        }

        /**
         * @param identityTokenKey The key to use for signing identity tokens.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenKey(@Nullable Output<String> identityTokenKey) {
            $.identityTokenKey = identityTokenKey;
            return this;
        }

        /**
         * @param identityTokenKey The key to use for signing identity tokens.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenKey(String identityTokenKey) {
            return identityTokenKey(Output.of(identityTokenKey));
        }

        /**
         * @param identityTokenTtl The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenTtl(@Nullable Output<Integer> identityTokenTtl) {
            $.identityTokenTtl = identityTokenTtl;
            return this;
        }

        /**
         * @param identityTokenTtl The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder identityTokenTtl(Integer identityTokenTtl) {
            return identityTokenTtl(Output.of(identityTokenTtl));
        }

        /**
         * @param listingVisibility Specifies whether to show this mount in the UI-specific listing endpoint
         * 
         * @return builder
         * 
         */
        public Builder listingVisibility(@Nullable Output<String> listingVisibility) {
            $.listingVisibility = listingVisibility;
            return this;
        }

        /**
         * @param listingVisibility Specifies whether to show this mount in the UI-specific listing endpoint
         * 
         * @return builder
         * 
         */
        public Builder listingVisibility(String listingVisibility) {
            return listingVisibility(Output.of(listingVisibility));
        }

        /**
         * @param local Specifies if the secret backend is local only
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local Specifies if the secret backend is local only
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(@Nullable Output<Integer> maxLeaseTtlSeconds) {
            $.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            return this;
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(Integer maxLeaseTtlSeconds) {
            return maxLeaseTtlSeconds(Output.of(maxLeaseTtlSeconds));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        /**
         * @param passthroughRequestHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder passthroughRequestHeaders(@Nullable Output<List<String>> passthroughRequestHeaders) {
            $.passthroughRequestHeaders = passthroughRequestHeaders;
            return this;
        }

        /**
         * @param passthroughRequestHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder passthroughRequestHeaders(List<String> passthroughRequestHeaders) {
            return passthroughRequestHeaders(Output.of(passthroughRequestHeaders));
        }

        /**
         * @param passthroughRequestHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder passthroughRequestHeaders(String... passthroughRequestHeaders) {
            return passthroughRequestHeaders(List.of(passthroughRequestHeaders));
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `aws`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param pluginVersion Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
         * 
         * @return builder
         * 
         */
        public Builder pluginVersion(@Nullable Output<String> pluginVersion) {
            $.pluginVersion = pluginVersion;
            return this;
        }

        /**
         * @param pluginVersion Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
         * 
         * @return builder
         * 
         */
        public Builder pluginVersion(String pluginVersion) {
            return pluginVersion(Output.of(pluginVersion));
        }

        /**
         * @param region The AWS region to make API calls against. Defaults to us-east-1.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS region to make API calls against. Defaults to us-east-1.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param roleArn Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param rotationPeriod The amount of time in seconds Vault should wait before rotating the root credential.
         * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(@Nullable Output<Integer> rotationPeriod) {
            $.rotationPeriod = rotationPeriod;
            return this;
        }

        /**
         * @param rotationPeriod The amount of time in seconds Vault should wait before rotating the root credential.
         * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(Integer rotationPeriod) {
            return rotationPeriod(Output.of(rotationPeriod));
        }

        /**
         * @param rotationSchedule The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
         * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationSchedule(@Nullable Output<String> rotationSchedule) {
            $.rotationSchedule = rotationSchedule;
            return this;
        }

        /**
         * @param rotationSchedule The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
         * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationSchedule(String rotationSchedule) {
            return rotationSchedule(Output.of(rotationSchedule));
        }

        /**
         * @param rotationWindow The maximum amount of time in seconds allowed to complete
         * a rotation when a scheduled token rotation occurs. The default rotation window is
         * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindow(@Nullable Output<Integer> rotationWindow) {
            $.rotationWindow = rotationWindow;
            return this;
        }

        /**
         * @param rotationWindow The maximum amount of time in seconds allowed to complete
         * a rotation when a scheduled token rotation occurs. The default rotation window is
         * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindow(Integer rotationWindow) {
            return rotationWindow(Output.of(rotationWindow));
        }

        /**
         * @param sealWrap Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(@Nullable Output<Boolean> sealWrap) {
            $.sealWrap = sealWrap;
            return this;
        }

        /**
         * @param sealWrap Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(Boolean sealWrap) {
            return sealWrap(Output.of(sealWrap));
        }

        /**
         * @param secretKey The AWS Secret Access Key to use when generating new credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The AWS Secret Access Key to use when generating new credentials.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param stsEndpoint Specifies a custom HTTP STS endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder stsEndpoint(@Nullable Output<String> stsEndpoint) {
            $.stsEndpoint = stsEndpoint;
            return this;
        }

        /**
         * @param stsEndpoint Specifies a custom HTTP STS endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder stsEndpoint(String stsEndpoint) {
            return stsEndpoint(Output.of(stsEndpoint));
        }

        /**
         * @param stsFallbackEndpoints Ordered list of `sts_endpoint`s to try if the defined one fails. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsFallbackEndpoints(@Nullable Output<List<String>> stsFallbackEndpoints) {
            $.stsFallbackEndpoints = stsFallbackEndpoints;
            return this;
        }

        /**
         * @param stsFallbackEndpoints Ordered list of `sts_endpoint`s to try if the defined one fails. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsFallbackEndpoints(List<String> stsFallbackEndpoints) {
            return stsFallbackEndpoints(Output.of(stsFallbackEndpoints));
        }

        /**
         * @param stsFallbackEndpoints Ordered list of `sts_endpoint`s to try if the defined one fails. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsFallbackEndpoints(String... stsFallbackEndpoints) {
            return stsFallbackEndpoints(List.of(stsFallbackEndpoints));
        }

        /**
         * @param stsFallbackRegions Ordered list of `sts_region`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsFallbackRegions(@Nullable Output<List<String>> stsFallbackRegions) {
            $.stsFallbackRegions = stsFallbackRegions;
            return this;
        }

        /**
         * @param stsFallbackRegions Ordered list of `sts_region`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsFallbackRegions(List<String> stsFallbackRegions) {
            return stsFallbackRegions(Output.of(stsFallbackRegions));
        }

        /**
         * @param stsFallbackRegions Ordered list of `sts_region`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsFallbackRegions(String... stsFallbackRegions) {
            return stsFallbackRegions(List.of(stsFallbackRegions));
        }

        /**
         * @param stsRegion Specifies the region of the STS endpoint. Should be included if `sts_endpoint` is supplied. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsRegion(@Nullable Output<String> stsRegion) {
            $.stsRegion = stsRegion;
            return this;
        }

        /**
         * @param stsRegion Specifies the region of the STS endpoint. Should be included if `sts_endpoint` is supplied. Requires Vault 1.19+
         * 
         * @return builder
         * 
         */
        public Builder stsRegion(String stsRegion) {
            return stsRegion(Output.of(stsRegion));
        }

        /**
         * @param usernameTemplate Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(@Nullable Output<String> usernameTemplate) {
            $.usernameTemplate = usernameTemplate;
            return this;
        }

        /**
         * @param usernameTemplate Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
         * 
         * @return builder
         * 
         */
        public Builder usernameTemplate(String usernameTemplate) {
            return usernameTemplate(Output.of(usernameTemplate));
        }

        public SecretBackendArgs build() {
            return $;
        }
    }

}
