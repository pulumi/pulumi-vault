// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transit;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.transit.inputs.GetDecryptArgs;
import com.pulumi.vault.transit.inputs.GetDecryptPlainArgs;
import com.pulumi.vault.transit.inputs.GetEncryptArgs;
import com.pulumi.vault.transit.inputs.GetEncryptPlainArgs;
import com.pulumi.vault.transit.inputs.GetSignArgs;
import com.pulumi.vault.transit.inputs.GetSignPlainArgs;
import com.pulumi.vault.transit.inputs.GetVerifyArgs;
import com.pulumi.vault.transit.inputs.GetVerifyPlainArgs;
import com.pulumi.vault.transit.outputs.GetDecryptResult;
import com.pulumi.vault.transit.outputs.GetEncryptResult;
import com.pulumi.vault.transit.outputs.GetSignResult;
import com.pulumi.vault.transit.outputs.GetVerifyResult;
import java.util.concurrent.CompletableFuture;

public final class TransitFunctions {
    /**
     * This is a data source which can be used to decrypt ciphertext using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetDecryptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getDecrypt(GetDecryptArgs.builder()
     *             .backend("transit")
     *             .key("test")
     *             .ciphertext("vault:v1:S3GtnJ5GUNCWV+/pdL9+g1Feu/nzAv+RlmTmE91Tu0rBkeIU8MEb2nSspC/1IQ==")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDecryptResult> getDecrypt(GetDecryptArgs args) {
        return getDecrypt(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to decrypt ciphertext using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetDecryptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getDecrypt(GetDecryptArgs.builder()
     *             .backend("transit")
     *             .key("test")
     *             .ciphertext("vault:v1:S3GtnJ5GUNCWV+/pdL9+g1Feu/nzAv+RlmTmE91Tu0rBkeIU8MEb2nSspC/1IQ==")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDecryptResult> getDecryptPlain(GetDecryptPlainArgs args) {
        return getDecryptPlain(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to decrypt ciphertext using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetDecryptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getDecrypt(GetDecryptArgs.builder()
     *             .backend("transit")
     *             .key("test")
     *             .ciphertext("vault:v1:S3GtnJ5GUNCWV+/pdL9+g1Feu/nzAv+RlmTmE91Tu0rBkeIU8MEb2nSspC/1IQ==")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDecryptResult> getDecrypt(GetDecryptArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getDecrypt:getDecrypt", TypeShape.of(GetDecryptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to decrypt ciphertext using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetDecryptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getDecrypt(GetDecryptArgs.builder()
     *             .backend("transit")
     *             .key("test")
     *             .ciphertext("vault:v1:S3GtnJ5GUNCWV+/pdL9+g1Feu/nzAv+RlmTmE91Tu0rBkeIU8MEb2nSspC/1IQ==")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDecryptResult> getDecrypt(GetDecryptArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getDecrypt:getDecrypt", TypeShape.of(GetDecryptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to decrypt ciphertext using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetDecryptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getDecrypt(GetDecryptArgs.builder()
     *             .backend("transit")
     *             .key("test")
     *             .ciphertext("vault:v1:S3GtnJ5GUNCWV+/pdL9+g1Feu/nzAv+RlmTmE91Tu0rBkeIU8MEb2nSspC/1IQ==")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDecryptResult> getDecryptPlain(GetDecryptPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:transit/getDecrypt:getDecrypt", TypeShape.of(GetDecryptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to encrypt plaintext using a Vault Transit key.
     * 
     */
    public static Output<GetEncryptResult> getEncrypt(GetEncryptArgs args) {
        return getEncrypt(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to encrypt plaintext using a Vault Transit key.
     * 
     */
    public static CompletableFuture<GetEncryptResult> getEncryptPlain(GetEncryptPlainArgs args) {
        return getEncryptPlain(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to encrypt plaintext using a Vault Transit key.
     * 
     */
    public static Output<GetEncryptResult> getEncrypt(GetEncryptArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getEncrypt:getEncrypt", TypeShape.of(GetEncryptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to encrypt plaintext using a Vault Transit key.
     * 
     */
    public static Output<GetEncryptResult> getEncrypt(GetEncryptArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getEncrypt:getEncrypt", TypeShape.of(GetEncryptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to encrypt plaintext using a Vault Transit key.
     * 
     */
    public static CompletableFuture<GetEncryptResult> getEncryptPlain(GetEncryptPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:transit/getEncrypt:getEncrypt", TypeShape.of(GetEncryptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to generate a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetSignArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getSign(GetSignArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSignResult> getSign(GetSignArgs args) {
        return getSign(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to generate a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetSignArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getSign(GetSignArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSignResult> getSignPlain(GetSignPlainArgs args) {
        return getSignPlain(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to generate a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetSignArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getSign(GetSignArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSignResult> getSign(GetSignArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getSign:getSign", TypeShape.of(GetSignResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to generate a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetSignArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getSign(GetSignArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSignResult> getSign(GetSignArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getSign:getSign", TypeShape.of(GetSignResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to generate a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetSignArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getSign(GetSignArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSignResult> getSignPlain(GetSignPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:transit/getSign:getSign", TypeShape.of(GetSignResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to verify a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetVerifyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getVerify(GetVerifyArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .signature("vault:v1:4kYRAVY/Q/6jjA3CT7HPhxKO+ru/4PhyGKBLRpn9DSeT99McPXEk302NXtzCzsvbSOZPif7f32tlr58iYoxjCQ==")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVerifyResult> getVerify(GetVerifyArgs args) {
        return getVerify(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to verify a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetVerifyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getVerify(GetVerifyArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .signature("vault:v1:4kYRAVY/Q/6jjA3CT7HPhxKO+ru/4PhyGKBLRpn9DSeT99McPXEk302NXtzCzsvbSOZPif7f32tlr58iYoxjCQ==")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVerifyResult> getVerifyPlain(GetVerifyPlainArgs args) {
        return getVerifyPlain(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to verify a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetVerifyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getVerify(GetVerifyArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .signature("vault:v1:4kYRAVY/Q/6jjA3CT7HPhxKO+ru/4PhyGKBLRpn9DSeT99McPXEk302NXtzCzsvbSOZPif7f32tlr58iYoxjCQ==")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVerifyResult> getVerify(GetVerifyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getVerify:getVerify", TypeShape.of(GetVerifyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to verify a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetVerifyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getVerify(GetVerifyArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .signature("vault:v1:4kYRAVY/Q/6jjA3CT7HPhxKO+ru/4PhyGKBLRpn9DSeT99McPXEk302NXtzCzsvbSOZPif7f32tlr58iYoxjCQ==")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVerifyResult> getVerify(GetVerifyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:transit/getVerify:getVerify", TypeShape.of(GetVerifyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to verify a signature using a Vault Transit key.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.transit.TransitFunctions;
     * import com.pulumi.vault.transit.inputs.GetVerifyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = TransitFunctions.getVerify(GetVerifyArgs.builder()
     *             .path("transit")
     *             .key("test")
     *             .signature("vault:v1:4kYRAVY/Q/6jjA3CT7HPhxKO+ru/4PhyGKBLRpn9DSeT99McPXEk302NXtzCzsvbSOZPif7f32tlr58iYoxjCQ==")
     *             .input("aGVsbG8gd29ybGQ=")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVerifyResult> getVerifyPlain(GetVerifyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:transit/getVerify:getVerify", TypeShape.of(GetVerifyResult.class), args, Utilities.withVersion(options));
    }
}
