// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateArgs Empty = new TemplateArgs();

    /**
     * The alphabet to use for this template. This is only used during FPE transformations.
     * 
     */
    @Import(name="alphabet")
    private @Nullable Output<String> alphabet;

    /**
     * @return The alphabet to use for this template. This is only used during FPE transformations.
     * 
     */
    public Optional<Output<String>> alphabet() {
        return Optional.ofNullable(this.alphabet);
    }

    /**
     * Optional mapping of name to regular expression template, used to customize
     * the decoded output. (requires Vault Enterprise 1.9+)
     * 
     */
    @Import(name="decodeFormats")
    private @Nullable Output<Map<String,Object>> decodeFormats;

    /**
     * @return Optional mapping of name to regular expression template, used to customize
     * the decoded output. (requires Vault Enterprise 1.9+)
     * 
     */
    public Optional<Output<Map<String,Object>>> decodeFormats() {
        return Optional.ofNullable(this.decodeFormats);
    }

    /**
     * The regular expression template used to format encoded values.
     * (requires Vault Enterprise 1.9+)
     * 
     */
    @Import(name="encodeFormat")
    private @Nullable Output<String> encodeFormat;

    /**
     * @return The regular expression template used to format encoded values.
     * (requires Vault Enterprise 1.9+)
     * 
     */
    public Optional<Output<String>> encodeFormat() {
        return Optional.ofNullable(this.encodeFormat);
    }

    /**
     * The name of the template.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the template.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Path to where the back-end is mounted within Vault.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Path to where the back-end is mounted within Vault.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The pattern used for matching. Currently, only regular expression pattern is supported.
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    /**
     * @return The pattern used for matching. Currently, only regular expression pattern is supported.
     * 
     */
    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * The pattern type to use for match detection. Currently, only regex is supported.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The pattern type to use for match detection. Currently, only regex is supported.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TemplateArgs() {}

    private TemplateArgs(TemplateArgs $) {
        this.alphabet = $.alphabet;
        this.decodeFormats = $.decodeFormats;
        this.encodeFormat = $.encodeFormat;
        this.name = $.name;
        this.namespace = $.namespace;
        this.path = $.path;
        this.pattern = $.pattern;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateArgs $;

        public Builder() {
            $ = new TemplateArgs();
        }

        public Builder(TemplateArgs defaults) {
            $ = new TemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alphabet The alphabet to use for this template. This is only used during FPE transformations.
         * 
         * @return builder
         * 
         */
        public Builder alphabet(@Nullable Output<String> alphabet) {
            $.alphabet = alphabet;
            return this;
        }

        /**
         * @param alphabet The alphabet to use for this template. This is only used during FPE transformations.
         * 
         * @return builder
         * 
         */
        public Builder alphabet(String alphabet) {
            return alphabet(Output.of(alphabet));
        }

        /**
         * @param decodeFormats Optional mapping of name to regular expression template, used to customize
         * the decoded output. (requires Vault Enterprise 1.9+)
         * 
         * @return builder
         * 
         */
        public Builder decodeFormats(@Nullable Output<Map<String,Object>> decodeFormats) {
            $.decodeFormats = decodeFormats;
            return this;
        }

        /**
         * @param decodeFormats Optional mapping of name to regular expression template, used to customize
         * the decoded output. (requires Vault Enterprise 1.9+)
         * 
         * @return builder
         * 
         */
        public Builder decodeFormats(Map<String,Object> decodeFormats) {
            return decodeFormats(Output.of(decodeFormats));
        }

        /**
         * @param encodeFormat The regular expression template used to format encoded values.
         * (requires Vault Enterprise 1.9+)
         * 
         * @return builder
         * 
         */
        public Builder encodeFormat(@Nullable Output<String> encodeFormat) {
            $.encodeFormat = encodeFormat;
            return this;
        }

        /**
         * @param encodeFormat The regular expression template used to format encoded values.
         * (requires Vault Enterprise 1.9+)
         * 
         * @return builder
         * 
         */
        public Builder encodeFormat(String encodeFormat) {
            return encodeFormat(Output.of(encodeFormat));
        }

        /**
         * @param name The name of the template.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the template.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path Path to where the back-end is mounted within Vault.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path to where the back-end is mounted within Vault.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param pattern The pattern used for matching. Currently, only regular expression pattern is supported.
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern The pattern used for matching. Currently, only regular expression pattern is supported.
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param type The pattern type to use for match detection. Currently, only regex is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The pattern type to use for match detection. Currently, only regex is supported.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TemplateArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
