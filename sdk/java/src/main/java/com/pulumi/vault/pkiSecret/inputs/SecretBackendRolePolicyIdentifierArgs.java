// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendRolePolicyIdentifierArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendRolePolicyIdentifierArgs Empty = new SecretBackendRolePolicyIdentifierArgs();

    /**
     * The URL of the CPS for the policy identifier
     * 
     */
    @Import(name="cps")
    private @Nullable Output<String> cps;

    /**
     * @return The URL of the CPS for the policy identifier
     * 
     */
    public Optional<Output<String>> cps() {
        return Optional.ofNullable(this.cps);
    }

    /**
     * A notice for the policy identifier
     * 
     */
    @Import(name="notice")
    private @Nullable Output<String> notice;

    /**
     * @return A notice for the policy identifier
     * 
     */
    public Optional<Output<String>> notice() {
        return Optional.ofNullable(this.notice);
    }

    /**
     * The OID for the policy identifier
     * 
     */
    @Import(name="oid", required=true)
    private Output<String> oid;

    /**
     * @return The OID for the policy identifier
     * 
     */
    public Output<String> oid() {
        return this.oid;
    }

    private SecretBackendRolePolicyIdentifierArgs() {}

    private SecretBackendRolePolicyIdentifierArgs(SecretBackendRolePolicyIdentifierArgs $) {
        this.cps = $.cps;
        this.notice = $.notice;
        this.oid = $.oid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendRolePolicyIdentifierArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendRolePolicyIdentifierArgs $;

        public Builder() {
            $ = new SecretBackendRolePolicyIdentifierArgs();
        }

        public Builder(SecretBackendRolePolicyIdentifierArgs defaults) {
            $ = new SecretBackendRolePolicyIdentifierArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cps The URL of the CPS for the policy identifier
         * 
         * @return builder
         * 
         */
        public Builder cps(@Nullable Output<String> cps) {
            $.cps = cps;
            return this;
        }

        /**
         * @param cps The URL of the CPS for the policy identifier
         * 
         * @return builder
         * 
         */
        public Builder cps(String cps) {
            return cps(Output.of(cps));
        }

        /**
         * @param notice A notice for the policy identifier
         * 
         * @return builder
         * 
         */
        public Builder notice(@Nullable Output<String> notice) {
            $.notice = notice;
            return this;
        }

        /**
         * @param notice A notice for the policy identifier
         * 
         * @return builder
         * 
         */
        public Builder notice(String notice) {
            return notice(Output.of(notice));
        }

        /**
         * @param oid The OID for the policy identifier
         * 
         * @return builder
         * 
         */
        public Builder oid(Output<String> oid) {
            $.oid = oid;
            return this;
        }

        /**
         * @param oid The OID for the policy identifier
         * 
         * @return builder
         * 
         */
        public Builder oid(String oid) {
            return oid(Output.of(oid));
        }

        public SecretBackendRolePolicyIdentifierArgs build() {
            if ($.oid == null) {
                throw new MissingRequiredPropertyException("SecretBackendRolePolicyIdentifierArgs", "oid");
            }
            return $;
        }
    }

}
