// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MfaOktaState extends com.pulumi.resources.ResourceArgs {

    public static final MfaOktaState Empty = new MfaOktaState();

    /**
     * Okta API token.
     * 
     */
    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    /**
     * @return Okta API token.
     * 
     */
    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    /**
     * The base domain to use for API requests.
     * 
     */
    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    /**
     * @return The base domain to use for API requests.
     * 
     */
    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    /**
     * Method ID.
     * 
     */
    @Import(name="methodId")
    private @Nullable Output<String> methodId;

    /**
     * @return Method ID.
     * 
     */
    public Optional<Output<String>> methodId() {
        return Optional.ofNullable(this.methodId);
    }

    /**
     * Mount accessor.
     * 
     */
    @Import(name="mountAccessor")
    private @Nullable Output<String> mountAccessor;

    /**
     * @return Mount accessor.
     * 
     */
    public Optional<Output<String>> mountAccessor() {
        return Optional.ofNullable(this.mountAccessor);
    }

    /**
     * Method name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Method name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Target namespace. (requires Enterprise)
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Target namespace. (requires Enterprise)
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Method&#39;s namespace ID.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<String> namespaceId;

    /**
     * @return Method&#39;s namespace ID.
     * 
     */
    public Optional<Output<String>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * Method&#39;s namespace path.
     * 
     */
    @Import(name="namespacePath")
    private @Nullable Output<String> namespacePath;

    /**
     * @return Method&#39;s namespace path.
     * 
     */
    public Optional<Output<String>> namespacePath() {
        return Optional.ofNullable(this.namespacePath);
    }

    /**
     * Name of the organization to be used in the Okta API.
     * 
     */
    @Import(name="orgName")
    private @Nullable Output<String> orgName;

    /**
     * @return Name of the organization to be used in the Okta API.
     * 
     */
    public Optional<Output<String>> orgName() {
        return Optional.ofNullable(this.orgName);
    }

    /**
     * Only match the primary email for the account.
     * 
     */
    @Import(name="primaryEmail")
    private @Nullable Output<Boolean> primaryEmail;

    /**
     * @return Only match the primary email for the account.
     * 
     */
    public Optional<Output<Boolean>> primaryEmail() {
        return Optional.ofNullable(this.primaryEmail);
    }

    /**
     * MFA type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return MFA type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * A template string for mapping Identity names to MFA methods.
     * 
     */
    @Import(name="usernameFormat")
    private @Nullable Output<String> usernameFormat;

    /**
     * @return A template string for mapping Identity names to MFA methods.
     * 
     */
    public Optional<Output<String>> usernameFormat() {
        return Optional.ofNullable(this.usernameFormat);
    }

    /**
     * Resource UUID.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Resource UUID.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private MfaOktaState() {}

    private MfaOktaState(MfaOktaState $) {
        this.apiToken = $.apiToken;
        this.baseUrl = $.baseUrl;
        this.methodId = $.methodId;
        this.mountAccessor = $.mountAccessor;
        this.name = $.name;
        this.namespace = $.namespace;
        this.namespaceId = $.namespaceId;
        this.namespacePath = $.namespacePath;
        this.orgName = $.orgName;
        this.primaryEmail = $.primaryEmail;
        this.type = $.type;
        this.usernameFormat = $.usernameFormat;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MfaOktaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MfaOktaState $;

        public Builder() {
            $ = new MfaOktaState();
        }

        public Builder(MfaOktaState defaults) {
            $ = new MfaOktaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Okta API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Okta API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param baseUrl The base domain to use for API requests.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl The base domain to use for API requests.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param methodId Method ID.
         * 
         * @return builder
         * 
         */
        public Builder methodId(@Nullable Output<String> methodId) {
            $.methodId = methodId;
            return this;
        }

        /**
         * @param methodId Method ID.
         * 
         * @return builder
         * 
         */
        public Builder methodId(String methodId) {
            return methodId(Output.of(methodId));
        }

        /**
         * @param mountAccessor Mount accessor.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(@Nullable Output<String> mountAccessor) {
            $.mountAccessor = mountAccessor;
            return this;
        }

        /**
         * @param mountAccessor Mount accessor.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(String mountAccessor) {
            return mountAccessor(Output.of(mountAccessor));
        }

        /**
         * @param name Method name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Method name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param namespaceId Method&#39;s namespace ID.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId Method&#39;s namespace ID.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param namespacePath Method&#39;s namespace path.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(@Nullable Output<String> namespacePath) {
            $.namespacePath = namespacePath;
            return this;
        }

        /**
         * @param namespacePath Method&#39;s namespace path.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(String namespacePath) {
            return namespacePath(Output.of(namespacePath));
        }

        /**
         * @param orgName Name of the organization to be used in the Okta API.
         * 
         * @return builder
         * 
         */
        public Builder orgName(@Nullable Output<String> orgName) {
            $.orgName = orgName;
            return this;
        }

        /**
         * @param orgName Name of the organization to be used in the Okta API.
         * 
         * @return builder
         * 
         */
        public Builder orgName(String orgName) {
            return orgName(Output.of(orgName));
        }

        /**
         * @param primaryEmail Only match the primary email for the account.
         * 
         * @return builder
         * 
         */
        public Builder primaryEmail(@Nullable Output<Boolean> primaryEmail) {
            $.primaryEmail = primaryEmail;
            return this;
        }

        /**
         * @param primaryEmail Only match the primary email for the account.
         * 
         * @return builder
         * 
         */
        public Builder primaryEmail(Boolean primaryEmail) {
            return primaryEmail(Output.of(primaryEmail));
        }

        /**
         * @param type MFA type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type MFA type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(@Nullable Output<String> usernameFormat) {
            $.usernameFormat = usernameFormat;
            return this;
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(String usernameFormat) {
            return usernameFormat(Output.of(usernameFormat));
        }

        /**
         * @param uuid Resource UUID.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Resource UUID.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public MfaOktaState build() {
            return $;
        }
    }

}
