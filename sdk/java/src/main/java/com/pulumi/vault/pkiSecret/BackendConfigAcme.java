// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.pkiSecret.BackendConfigAcmeArgs;
import com.pulumi.vault.pkiSecret.inputs.BackendConfigAcmeState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows setting the ACME server configuration used by specified mount.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.Mount;
 * import com.pulumi.vault.MountArgs;
 * import com.pulumi.vault.pkiSecret.BackendConfigCluster;
 * import com.pulumi.vault.pkiSecret.BackendConfigClusterArgs;
 * import com.pulumi.vault.pkiSecret.BackendConfigAcme;
 * import com.pulumi.vault.pkiSecret.BackendConfigAcmeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var pki = new Mount("pki", MountArgs.builder()
 *             .path("pki")
 *             .type("pki")
 *             .defaultLeaseTtlSeconds(3600)
 *             .maxLeaseTtlSeconds(86400)
 *             .build());
 * 
 *         var pkiConfigCluster = new BackendConfigCluster("pkiConfigCluster", BackendConfigClusterArgs.builder()
 *             .backend(pki.path())
 *             .path("http://127.0.0.1:8200/v1/pki")
 *             .aiaPath("http://127.0.0.1:8200/v1/pki")
 *             .build());
 * 
 *         var example = new BackendConfigAcme("example", BackendConfigAcmeArgs.builder()
 *             .backend(pki.path())
 *             .enabled(true)
 *             .allowedIssuers("*")
 *             .allowedRoles("*")
 *             .allowRoleExtKeyUsage(false)
 *             .defaultDirectoryPolicy("sign-verbatim")
 *             .dnsResolver("")
 *             .eabPolicy("not-required")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The ACME configuration can be imported using the resource&#39;s `id`.
 * In the case of the example above the `id` would be `pki/config/acme`,
 * where the `pki` component is the resource&#39;s `backend`, e.g.
 * 
 * ```sh
 * $ pulumi import vault:pkiSecret/backendConfigAcme:BackendConfigAcme example pki/config/acme
 * ```
 * 
 */
@ResourceType(type="vault:pkiSecret/backendConfigAcme:BackendConfigAcme")
public class BackendConfigAcme extends com.pulumi.resources.CustomResource {
    /**
     * Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
     * 
     */
    @Export(name="allowRoleExtKeyUsage", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowRoleExtKeyUsage;

    /**
     * @return Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
     * 
     */
    public Output<Optional<Boolean>> allowRoleExtKeyUsage() {
        return Codegen.optional(this.allowRoleExtKeyUsage);
    }
    /**
     * Specifies which issuers are allowed for use with ACME.
     * 
     */
    @Export(name="allowedIssuers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedIssuers;

    /**
     * @return Specifies which issuers are allowed for use with ACME.
     * 
     */
    public Output<List<String>> allowedIssuers() {
        return this.allowedIssuers;
    }
    /**
     * Specifies which roles are allowed for use with ACME.
     * 
     */
    @Export(name="allowedRoles", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedRoles;

    /**
     * @return Specifies which roles are allowed for use with ACME.
     * 
     */
    public Output<List<String>> allowedRoles() {
        return this.allowedRoles;
    }
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     * 
     */
    @Export(name="backend", refs={String.class}, tree="[0]")
    private Output<String> backend;

    /**
     * @return The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }
    /**
     * Specifies the policy to be used for non-role-qualified ACME requests.
     * Allowed values are `forbid`, `sign-verbatim`, `role:&lt;role_name&gt;`, `external-policy` or `external-policy:&lt;policy&gt;`.
     * 
     */
    @Export(name="defaultDirectoryPolicy", refs={String.class}, tree="[0]")
    private Output<String> defaultDirectoryPolicy;

    /**
     * @return Specifies the policy to be used for non-role-qualified ACME requests.
     * Allowed values are `forbid`, `sign-verbatim`, `role:&lt;role_name&gt;`, `external-policy` or `external-policy:&lt;policy&gt;`.
     * 
     */
    public Output<String> defaultDirectoryPolicy() {
        return this.defaultDirectoryPolicy;
    }
    /**
     * DNS resolver to use for domain resolution on this mount.
     * Must be in the format `&lt;host&gt;:&lt;port&gt;`, with both parts mandatory.
     * 
     */
    @Export(name="dnsResolver", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsResolver;

    /**
     * @return DNS resolver to use for domain resolution on this mount.
     * Must be in the format `&lt;host&gt;:&lt;port&gt;`, with both parts mandatory.
     * 
     */
    public Output<Optional<String>> dnsResolver() {
        return Codegen.optional(this.dnsResolver);
    }
    /**
     * Specifies the policy to use for external account binding behaviour.
     * Allowed values are `not-required`, `new-account-required` or `always-required`.
     * 
     */
    @Export(name="eabPolicy", refs={String.class}, tree="[0]")
    private Output<String> eabPolicy;

    /**
     * @return Specifies the policy to use for external account binding behaviour.
     * Allowed values are `not-required`, `new-account-required` or `always-required`.
     * 
     */
    public Output<String> eabPolicy() {
        return this.eabPolicy;
    }
    /**
     * Specifies whether ACME is enabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Specifies whether ACME is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
     * 
     */
    @Export(name="maxTtl", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxTtl;

    /**
     * @return The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
     * 
     */
    public Output<Integer> maxTtl() {
        return this.maxTtl;
    }
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendConfigAcme(java.lang.String name) {
        this(name, BackendConfigAcmeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendConfigAcme(java.lang.String name, BackendConfigAcmeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendConfigAcme(java.lang.String name, BackendConfigAcmeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendConfigAcme:BackendConfigAcme", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackendConfigAcme(java.lang.String name, Output<java.lang.String> id, @Nullable BackendConfigAcmeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendConfigAcme:BackendConfigAcme", name, state, makeResourceOptions(options, id), false);
    }

    private static BackendConfigAcmeArgs makeArgs(BackendConfigAcmeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackendConfigAcmeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendConfigAcme get(java.lang.String name, Output<java.lang.String> id, @Nullable BackendConfigAcmeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendConfigAcme(name, id, state, options);
    }
}
