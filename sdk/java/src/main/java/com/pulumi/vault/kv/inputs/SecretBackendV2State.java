// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.kv.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendV2State extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendV2State Empty = new SecretBackendV2State();

    /**
     * If true, all keys will require the cas
     * parameter to be set on all write requests.
     * 
     */
    @Import(name="casRequired")
    private @Nullable Output<Boolean> casRequired;

    /**
     * @return If true, all keys will require the cas
     * parameter to be set on all write requests.
     * 
     */
    public Optional<Output<Boolean>> casRequired() {
        return Optional.ofNullable(this.casRequired);
    }

    /**
     * If set, specifies the length of time before
     * a version is deleted. Accepts duration in integer seconds.
     * 
     */
    @Import(name="deleteVersionAfter")
    private @Nullable Output<Integer> deleteVersionAfter;

    /**
     * @return If set, specifies the length of time before
     * a version is deleted. Accepts duration in integer seconds.
     * 
     */
    public Optional<Output<Integer>> deleteVersionAfter() {
        return Optional.ofNullable(this.deleteVersionAfter);
    }

    /**
     * The number of versions to keep per key.
     * 
     */
    @Import(name="maxVersions")
    private @Nullable Output<Integer> maxVersions;

    /**
     * @return The number of versions to keep per key.
     * 
     */
    public Optional<Output<Integer>> maxVersions() {
        return Optional.ofNullable(this.maxVersions);
    }

    /**
     * Path where KV-V2 engine is mounted.
     * 
     */
    @Import(name="mount")
    private @Nullable Output<String> mount;

    /**
     * @return Path where KV-V2 engine is mounted.
     * 
     */
    public Optional<Output<String>> mount() {
        return Optional.ofNullable(this.mount);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    private SecretBackendV2State() {}

    private SecretBackendV2State(SecretBackendV2State $) {
        this.casRequired = $.casRequired;
        this.deleteVersionAfter = $.deleteVersionAfter;
        this.maxVersions = $.maxVersions;
        this.mount = $.mount;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendV2State $;

        public Builder() {
            $ = new SecretBackendV2State();
        }

        public Builder(SecretBackendV2State defaults) {
            $ = new SecretBackendV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param casRequired If true, all keys will require the cas
         * parameter to be set on all write requests.
         * 
         * @return builder
         * 
         */
        public Builder casRequired(@Nullable Output<Boolean> casRequired) {
            $.casRequired = casRequired;
            return this;
        }

        /**
         * @param casRequired If true, all keys will require the cas
         * parameter to be set on all write requests.
         * 
         * @return builder
         * 
         */
        public Builder casRequired(Boolean casRequired) {
            return casRequired(Output.of(casRequired));
        }

        /**
         * @param deleteVersionAfter If set, specifies the length of time before
         * a version is deleted. Accepts duration in integer seconds.
         * 
         * @return builder
         * 
         */
        public Builder deleteVersionAfter(@Nullable Output<Integer> deleteVersionAfter) {
            $.deleteVersionAfter = deleteVersionAfter;
            return this;
        }

        /**
         * @param deleteVersionAfter If set, specifies the length of time before
         * a version is deleted. Accepts duration in integer seconds.
         * 
         * @return builder
         * 
         */
        public Builder deleteVersionAfter(Integer deleteVersionAfter) {
            return deleteVersionAfter(Output.of(deleteVersionAfter));
        }

        /**
         * @param maxVersions The number of versions to keep per key.
         * 
         * @return builder
         * 
         */
        public Builder maxVersions(@Nullable Output<Integer> maxVersions) {
            $.maxVersions = maxVersions;
            return this;
        }

        /**
         * @param maxVersions The number of versions to keep per key.
         * 
         * @return builder
         * 
         */
        public Builder maxVersions(Integer maxVersions) {
            return maxVersions(Output.of(maxVersions));
        }

        /**
         * @param mount Path where KV-V2 engine is mounted.
         * 
         * @return builder
         * 
         */
        public Builder mount(@Nullable Output<String> mount) {
            $.mount = mount;
            return this;
        }

        /**
         * @param mount Path where KV-V2 engine is mounted.
         * 
         * @return builder
         * 
         */
        public Builder mount(String mount) {
            return mount(Output.of(mount));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public SecretBackendV2State build() {
            return $;
        }
    }

}
