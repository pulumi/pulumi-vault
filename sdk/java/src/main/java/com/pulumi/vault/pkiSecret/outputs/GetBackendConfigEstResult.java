// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vault.pkiSecret.outputs.GetBackendConfigEstAuthenticator;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackendConfigEstResult {
    /**
     * @return Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
     * 
     */
    private List<String> auditFields;
    /**
     * @return Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
     * 
     */
    private List<GetBackendConfigEstAuthenticator> authenticators;
    private String backend;
    /**
     * @return If set, this mount is registered as the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
     * 
     */
    private Boolean defaultMount;
    /**
     * @return Required to be set if default_mount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:&lt;role_name&gt;.
     * 
     */
    private String defaultPathPolicy;
    /**
     * @return If set, parse out fields from the provided CSR making them available for Sentinel policies.
     * 
     */
    private Boolean enableSentinelParsing;
    /**
     * @return Specifies whether EST is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:&lt;role_name&gt;. Labels must be unique across Vault cluster, and will register .well-known/est/&lt;label&gt; URL paths.
     * 
     */
    private Map<String,String> labelToPathPolicy;
    /**
     * @return A read-only timestamp representing the last time the configuration was updated.
     * 
     */
    private String lastUpdated;
    private @Nullable String namespace;

    private GetBackendConfigEstResult() {}
    /**
     * @return Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
     * 
     */
    public List<String> auditFields() {
        return this.auditFields;
    }
    /**
     * @return Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
     * 
     */
    public List<GetBackendConfigEstAuthenticator> authenticators() {
        return this.authenticators;
    }
    public String backend() {
        return this.backend;
    }
    /**
     * @return If set, this mount is registered as the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
     * 
     */
    public Boolean defaultMount() {
        return this.defaultMount;
    }
    /**
     * @return Required to be set if default_mount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:&lt;role_name&gt;.
     * 
     */
    public String defaultPathPolicy() {
        return this.defaultPathPolicy;
    }
    /**
     * @return If set, parse out fields from the provided CSR making them available for Sentinel policies.
     * 
     */
    public Boolean enableSentinelParsing() {
        return this.enableSentinelParsing;
    }
    /**
     * @return Specifies whether EST is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:&lt;role_name&gt;. Labels must be unique across Vault cluster, and will register .well-known/est/&lt;label&gt; URL paths.
     * 
     */
    public Map<String,String> labelToPathPolicy() {
        return this.labelToPathPolicy;
    }
    /**
     * @return A read-only timestamp representing the last time the configuration was updated.
     * 
     */
    public String lastUpdated() {
        return this.lastUpdated;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendConfigEstResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> auditFields;
        private List<GetBackendConfigEstAuthenticator> authenticators;
        private String backend;
        private Boolean defaultMount;
        private String defaultPathPolicy;
        private Boolean enableSentinelParsing;
        private Boolean enabled;
        private String id;
        private Map<String,String> labelToPathPolicy;
        private String lastUpdated;
        private @Nullable String namespace;
        public Builder() {}
        public Builder(GetBackendConfigEstResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditFields = defaults.auditFields;
    	      this.authenticators = defaults.authenticators;
    	      this.backend = defaults.backend;
    	      this.defaultMount = defaults.defaultMount;
    	      this.defaultPathPolicy = defaults.defaultPathPolicy;
    	      this.enableSentinelParsing = defaults.enableSentinelParsing;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.labelToPathPolicy = defaults.labelToPathPolicy;
    	      this.lastUpdated = defaults.lastUpdated;
    	      this.namespace = defaults.namespace;
        }

        @CustomType.Setter
        public Builder auditFields(List<String> auditFields) {
            if (auditFields == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "auditFields");
            }
            this.auditFields = auditFields;
            return this;
        }
        public Builder auditFields(String... auditFields) {
            return auditFields(List.of(auditFields));
        }
        @CustomType.Setter
        public Builder authenticators(List<GetBackendConfigEstAuthenticator> authenticators) {
            if (authenticators == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "authenticators");
            }
            this.authenticators = authenticators;
            return this;
        }
        public Builder authenticators(GetBackendConfigEstAuthenticator... authenticators) {
            return authenticators(List.of(authenticators));
        }
        @CustomType.Setter
        public Builder backend(String backend) {
            if (backend == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "backend");
            }
            this.backend = backend;
            return this;
        }
        @CustomType.Setter
        public Builder defaultMount(Boolean defaultMount) {
            if (defaultMount == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "defaultMount");
            }
            this.defaultMount = defaultMount;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPathPolicy(String defaultPathPolicy) {
            if (defaultPathPolicy == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "defaultPathPolicy");
            }
            this.defaultPathPolicy = defaultPathPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder enableSentinelParsing(Boolean enableSentinelParsing) {
            if (enableSentinelParsing == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "enableSentinelParsing");
            }
            this.enableSentinelParsing = enableSentinelParsing;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labelToPathPolicy(Map<String,String> labelToPathPolicy) {
            if (labelToPathPolicy == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "labelToPathPolicy");
            }
            this.labelToPathPolicy = labelToPathPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdated(String lastUpdated) {
            if (lastUpdated == null) {
              throw new MissingRequiredPropertyException("GetBackendConfigEstResult", "lastUpdated");
            }
            this.lastUpdated = lastUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        public GetBackendConfigEstResult build() {
            final var _resultValue = new GetBackendConfigEstResult();
            _resultValue.auditFields = auditFields;
            _resultValue.authenticators = authenticators;
            _resultValue.backend = backend;
            _resultValue.defaultMount = defaultMount;
            _resultValue.defaultPathPolicy = defaultPathPolicy;
            _resultValue.enableSentinelParsing = enableSentinelParsing;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.labelToPathPolicy = labelToPathPolicy;
            _resultValue.lastUpdated = lastUpdated;
            _resultValue.namespace = namespace;
            return _resultValue;
        }
    }
}
