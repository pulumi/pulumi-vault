// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackendIssuerResult {
    private String backend;
    /**
     * @return The CA chain as a list of format specific certificates.
     * 
     */
    private List<String> caChains;
    /**
     * @return Certificate associated with this issuer.
     * 
     */
    private String certificate;
    /**
     * @return This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * issued certificate) contain critical extensions not processed by Vault.
     * 
     */
    private @Nullable Boolean disableCriticalExtensionChecks;
    /**
     * @return This determines whether this issuer is able
     * to issue certificates where the chain of trust (including the final issued
     * certificate) contains a link in which the subject of the issuing certificate
     * does not match the named issuer of the certificate it signed.
     * 
     */
    private @Nullable Boolean disableNameChecks;
    /**
     * @return This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * final issued certificate) violates the name constraints critical extension of
     * one of the issuer certificates in the chain.
     * 
     */
    private @Nullable Boolean disableNameConstraintChecks;
    /**
     * @return This determines whether this issuer
     * is able to issue certificates where the chain of trust (including the final
     * issued certificate) is longer than allowed by a certificate authority in that
     * chain.
     * 
     */
    private @Nullable Boolean disablePathLengthChecks;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ID of the issuer.
     * 
     */
    private String issuerId;
    /**
     * @return Name of the issuer.
     * 
     */
    private String issuerName;
    private String issuerRef;
    /**
     * @return ID of the key used by the issuer.
     * 
     */
    private String keyId;
    /**
     * @return Behavior of a leaf&#39;s NotAfter field during issuance.
     * 
     */
    private String leafNotAfterBehavior;
    /**
     * @return Chain of issuer references to build this issuer&#39;s computed
     * CAChain field from, when non-empty.
     * 
     */
    private List<String> manualChains;
    private @Nullable String namespace;
    /**
     * @return Allowed usages for this issuer.
     * 
     */
    private String usage;

    private GetBackendIssuerResult() {}
    public String backend() {
        return this.backend;
    }
    /**
     * @return The CA chain as a list of format specific certificates.
     * 
     */
    public List<String> caChains() {
        return this.caChains;
    }
    /**
     * @return Certificate associated with this issuer.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * issued certificate) contain critical extensions not processed by Vault.
     * 
     */
    public Optional<Boolean> disableCriticalExtensionChecks() {
        return Optional.ofNullable(this.disableCriticalExtensionChecks);
    }
    /**
     * @return This determines whether this issuer is able
     * to issue certificates where the chain of trust (including the final issued
     * certificate) contains a link in which the subject of the issuing certificate
     * does not match the named issuer of the certificate it signed.
     * 
     */
    public Optional<Boolean> disableNameChecks() {
        return Optional.ofNullable(this.disableNameChecks);
    }
    /**
     * @return This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * final issued certificate) violates the name constraints critical extension of
     * one of the issuer certificates in the chain.
     * 
     */
    public Optional<Boolean> disableNameConstraintChecks() {
        return Optional.ofNullable(this.disableNameConstraintChecks);
    }
    /**
     * @return This determines whether this issuer
     * is able to issue certificates where the chain of trust (including the final
     * issued certificate) is longer than allowed by a certificate authority in that
     * chain.
     * 
     */
    public Optional<Boolean> disablePathLengthChecks() {
        return Optional.ofNullable(this.disablePathLengthChecks);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the issuer.
     * 
     */
    public String issuerId() {
        return this.issuerId;
    }
    /**
     * @return Name of the issuer.
     * 
     */
    public String issuerName() {
        return this.issuerName;
    }
    public String issuerRef() {
        return this.issuerRef;
    }
    /**
     * @return ID of the key used by the issuer.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return Behavior of a leaf&#39;s NotAfter field during issuance.
     * 
     */
    public String leafNotAfterBehavior() {
        return this.leafNotAfterBehavior;
    }
    /**
     * @return Chain of issuer references to build this issuer&#39;s computed
     * CAChain field from, when non-empty.
     * 
     */
    public List<String> manualChains() {
        return this.manualChains;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Allowed usages for this issuer.
     * 
     */
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendIssuerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backend;
        private List<String> caChains;
        private String certificate;
        private @Nullable Boolean disableCriticalExtensionChecks;
        private @Nullable Boolean disableNameChecks;
        private @Nullable Boolean disableNameConstraintChecks;
        private @Nullable Boolean disablePathLengthChecks;
        private String id;
        private String issuerId;
        private String issuerName;
        private String issuerRef;
        private String keyId;
        private String leafNotAfterBehavior;
        private List<String> manualChains;
        private @Nullable String namespace;
        private String usage;
        public Builder() {}
        public Builder(GetBackendIssuerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backend = defaults.backend;
    	      this.caChains = defaults.caChains;
    	      this.certificate = defaults.certificate;
    	      this.disableCriticalExtensionChecks = defaults.disableCriticalExtensionChecks;
    	      this.disableNameChecks = defaults.disableNameChecks;
    	      this.disableNameConstraintChecks = defaults.disableNameConstraintChecks;
    	      this.disablePathLengthChecks = defaults.disablePathLengthChecks;
    	      this.id = defaults.id;
    	      this.issuerId = defaults.issuerId;
    	      this.issuerName = defaults.issuerName;
    	      this.issuerRef = defaults.issuerRef;
    	      this.keyId = defaults.keyId;
    	      this.leafNotAfterBehavior = defaults.leafNotAfterBehavior;
    	      this.manualChains = defaults.manualChains;
    	      this.namespace = defaults.namespace;
    	      this.usage = defaults.usage;
        }

        @CustomType.Setter
        public Builder backend(String backend) {
            if (backend == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "backend");
            }
            this.backend = backend;
            return this;
        }
        @CustomType.Setter
        public Builder caChains(List<String> caChains) {
            if (caChains == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "caChains");
            }
            this.caChains = caChains;
            return this;
        }
        public Builder caChains(String... caChains) {
            return caChains(List.of(caChains));
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder disableCriticalExtensionChecks(@Nullable Boolean disableCriticalExtensionChecks) {

            this.disableCriticalExtensionChecks = disableCriticalExtensionChecks;
            return this;
        }
        @CustomType.Setter
        public Builder disableNameChecks(@Nullable Boolean disableNameChecks) {

            this.disableNameChecks = disableNameChecks;
            return this;
        }
        @CustomType.Setter
        public Builder disableNameConstraintChecks(@Nullable Boolean disableNameConstraintChecks) {

            this.disableNameConstraintChecks = disableNameConstraintChecks;
            return this;
        }
        @CustomType.Setter
        public Builder disablePathLengthChecks(@Nullable Boolean disablePathLengthChecks) {

            this.disablePathLengthChecks = disablePathLengthChecks;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuerId(String issuerId) {
            if (issuerId == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "issuerId");
            }
            this.issuerId = issuerId;
            return this;
        }
        @CustomType.Setter
        public Builder issuerName(String issuerName) {
            if (issuerName == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "issuerName");
            }
            this.issuerName = issuerName;
            return this;
        }
        @CustomType.Setter
        public Builder issuerRef(String issuerRef) {
            if (issuerRef == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "issuerRef");
            }
            this.issuerRef = issuerRef;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder leafNotAfterBehavior(String leafNotAfterBehavior) {
            if (leafNotAfterBehavior == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "leafNotAfterBehavior");
            }
            this.leafNotAfterBehavior = leafNotAfterBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder manualChains(List<String> manualChains) {
            if (manualChains == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "manualChains");
            }
            this.manualChains = manualChains;
            return this;
        }
        public Builder manualChains(String... manualChains) {
            return manualChains(List.of(manualChains));
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            if (usage == null) {
              throw new MissingRequiredPropertyException("GetBackendIssuerResult", "usage");
            }
            this.usage = usage;
            return this;
        }
        public GetBackendIssuerResult build() {
            final var _resultValue = new GetBackendIssuerResult();
            _resultValue.backend = backend;
            _resultValue.caChains = caChains;
            _resultValue.certificate = certificate;
            _resultValue.disableCriticalExtensionChecks = disableCriticalExtensionChecks;
            _resultValue.disableNameChecks = disableNameChecks;
            _resultValue.disableNameConstraintChecks = disableNameConstraintChecks;
            _resultValue.disablePathLengthChecks = disablePathLengthChecks;
            _resultValue.id = id;
            _resultValue.issuerId = issuerId;
            _resultValue.issuerName = issuerName;
            _resultValue.issuerRef = issuerRef;
            _resultValue.keyId = keyId;
            _resultValue.leafNotAfterBehavior = leafNotAfterBehavior;
            _resultValue.manualChains = manualChains;
            _resultValue.namespace = namespace;
            _resultValue.usage = usage;
            return _resultValue;
        }
    }
}
