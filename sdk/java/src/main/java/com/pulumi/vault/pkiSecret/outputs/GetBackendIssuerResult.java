// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackendIssuerResult {
    private String backend;
    /**
     * @return The CA chain as a list of format specific certificates.
     * 
     */
    private List<String> caChains;
    /**
     * @return Certificate associated with this issuer.
     * 
     */
    private String certificate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ID of the issuer.
     * 
     */
    private String issuerId;
    /**
     * @return Name of the issuer.
     * 
     */
    private String issuerName;
    private String issuerRef;
    /**
     * @return ID of the key used by the issuer.
     * 
     */
    private String keyId;
    /**
     * @return Behavior of a leaf&#39;s NotAfter field during issuance.
     * 
     */
    private String leafNotAfterBehavior;
    /**
     * @return Chain of issuer references to build this issuer&#39;s computed
     * CAChain field from, when non-empty.
     * 
     */
    private List<String> manualChains;
    private @Nullable String namespace;
    /**
     * @return Allowed usages for this issuer.
     * 
     */
    private String usage;

    private GetBackendIssuerResult() {}
    public String backend() {
        return this.backend;
    }
    /**
     * @return The CA chain as a list of format specific certificates.
     * 
     */
    public List<String> caChains() {
        return this.caChains;
    }
    /**
     * @return Certificate associated with this issuer.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the issuer.
     * 
     */
    public String issuerId() {
        return this.issuerId;
    }
    /**
     * @return Name of the issuer.
     * 
     */
    public String issuerName() {
        return this.issuerName;
    }
    public String issuerRef() {
        return this.issuerRef;
    }
    /**
     * @return ID of the key used by the issuer.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return Behavior of a leaf&#39;s NotAfter field during issuance.
     * 
     */
    public String leafNotAfterBehavior() {
        return this.leafNotAfterBehavior;
    }
    /**
     * @return Chain of issuer references to build this issuer&#39;s computed
     * CAChain field from, when non-empty.
     * 
     */
    public List<String> manualChains() {
        return this.manualChains;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Allowed usages for this issuer.
     * 
     */
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendIssuerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backend;
        private List<String> caChains;
        private String certificate;
        private String id;
        private String issuerId;
        private String issuerName;
        private String issuerRef;
        private String keyId;
        private String leafNotAfterBehavior;
        private List<String> manualChains;
        private @Nullable String namespace;
        private String usage;
        public Builder() {}
        public Builder(GetBackendIssuerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backend = defaults.backend;
    	      this.caChains = defaults.caChains;
    	      this.certificate = defaults.certificate;
    	      this.id = defaults.id;
    	      this.issuerId = defaults.issuerId;
    	      this.issuerName = defaults.issuerName;
    	      this.issuerRef = defaults.issuerRef;
    	      this.keyId = defaults.keyId;
    	      this.leafNotAfterBehavior = defaults.leafNotAfterBehavior;
    	      this.manualChains = defaults.manualChains;
    	      this.namespace = defaults.namespace;
    	      this.usage = defaults.usage;
        }

        @CustomType.Setter
        public Builder backend(String backend) {
            this.backend = Objects.requireNonNull(backend);
            return this;
        }
        @CustomType.Setter
        public Builder caChains(List<String> caChains) {
            this.caChains = Objects.requireNonNull(caChains);
            return this;
        }
        public Builder caChains(String... caChains) {
            return caChains(List.of(caChains));
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            this.certificate = Objects.requireNonNull(certificate);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder issuerId(String issuerId) {
            this.issuerId = Objects.requireNonNull(issuerId);
            return this;
        }
        @CustomType.Setter
        public Builder issuerName(String issuerName) {
            this.issuerName = Objects.requireNonNull(issuerName);
            return this;
        }
        @CustomType.Setter
        public Builder issuerRef(String issuerRef) {
            this.issuerRef = Objects.requireNonNull(issuerRef);
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }
        @CustomType.Setter
        public Builder leafNotAfterBehavior(String leafNotAfterBehavior) {
            this.leafNotAfterBehavior = Objects.requireNonNull(leafNotAfterBehavior);
            return this;
        }
        @CustomType.Setter
        public Builder manualChains(List<String> manualChains) {
            this.manualChains = Objects.requireNonNull(manualChains);
            return this;
        }
        public Builder manualChains(String... manualChains) {
            return manualChains(List.of(manualChains));
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            this.usage = Objects.requireNonNull(usage);
            return this;
        }
        public GetBackendIssuerResult build() {
            final var o = new GetBackendIssuerResult();
            o.backend = backend;
            o.caChains = caChains;
            o.certificate = certificate;
            o.id = id;
            o.issuerId = issuerId;
            o.issuerName = issuerName;
            o.issuerRef = issuerRef;
            o.keyId = keyId;
            o.leafNotAfterBehavior = leafNotAfterBehavior;
            o.manualChains = manualChains;
            o.namespace = namespace;
            o.usage = usage;
            return o;
        }
    }
}
