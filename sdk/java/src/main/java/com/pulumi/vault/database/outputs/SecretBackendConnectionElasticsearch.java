// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretBackendConnectionElasticsearch {
    /**
     * @return The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server&#39;s identity.
     * 
     */
    private @Nullable String caCert;
    /**
     * @return The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server&#39;s identity.
     * 
     */
    private @Nullable String caPath;
    /**
     * @return The path to the certificate for the Elasticsearch client to present for communication.
     * 
     */
    private @Nullable String clientCert;
    /**
     * @return The path to the key for the Elasticsearch client to use for communication.
     * 
     */
    private @Nullable String clientKey;
    /**
     * @return Whether to disable certificate verification.
     * 
     */
    private @Nullable Boolean insecure;
    /**
     * @return The password to authenticate with.
     * 
     */
    private String password;
    /**
     * @return This, if set, is used to set the SNI host when connecting via TLS.
     * 
     */
    private @Nullable String tlsServerName;
    /**
     * @return The URL for Elasticsearch&#39;s API. https requires certificate
     * by trusted CA if used.
     * 
     */
    private String url;
    /**
     * @return The username to authenticate with.
     * 
     */
    private String username;
    /**
     * @return Template describing how dynamic usernames are generated.
     * 
     */
    private @Nullable String usernameTemplate;

    private SecretBackendConnectionElasticsearch() {}
    /**
     * @return The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server&#39;s identity.
     * 
     */
    public Optional<String> caCert() {
        return Optional.ofNullable(this.caCert);
    }
    /**
     * @return The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server&#39;s identity.
     * 
     */
    public Optional<String> caPath() {
        return Optional.ofNullable(this.caPath);
    }
    /**
     * @return The path to the certificate for the Elasticsearch client to present for communication.
     * 
     */
    public Optional<String> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }
    /**
     * @return The path to the key for the Elasticsearch client to use for communication.
     * 
     */
    public Optional<String> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }
    /**
     * @return Whether to disable certificate verification.
     * 
     */
    public Optional<Boolean> insecure() {
        return Optional.ofNullable(this.insecure);
    }
    /**
     * @return The password to authenticate with.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return This, if set, is used to set the SNI host when connecting via TLS.
     * 
     */
    public Optional<String> tlsServerName() {
        return Optional.ofNullable(this.tlsServerName);
    }
    /**
     * @return The URL for Elasticsearch&#39;s API. https requires certificate
     * by trusted CA if used.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The username to authenticate with.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return Template describing how dynamic usernames are generated.
     * 
     */
    public Optional<String> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretBackendConnectionElasticsearch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caCert;
        private @Nullable String caPath;
        private @Nullable String clientCert;
        private @Nullable String clientKey;
        private @Nullable Boolean insecure;
        private String password;
        private @Nullable String tlsServerName;
        private String url;
        private String username;
        private @Nullable String usernameTemplate;
        public Builder() {}
        public Builder(SecretBackendConnectionElasticsearch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCert = defaults.caCert;
    	      this.caPath = defaults.caPath;
    	      this.clientCert = defaults.clientCert;
    	      this.clientKey = defaults.clientKey;
    	      this.insecure = defaults.insecure;
    	      this.password = defaults.password;
    	      this.tlsServerName = defaults.tlsServerName;
    	      this.url = defaults.url;
    	      this.username = defaults.username;
    	      this.usernameTemplate = defaults.usernameTemplate;
        }

        @CustomType.Setter
        public Builder caCert(@Nullable String caCert) {

            this.caCert = caCert;
            return this;
        }
        @CustomType.Setter
        public Builder caPath(@Nullable String caPath) {

            this.caPath = caPath;
            return this;
        }
        @CustomType.Setter
        public Builder clientCert(@Nullable String clientCert) {

            this.clientCert = clientCert;
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(@Nullable String clientKey) {

            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder insecure(@Nullable Boolean insecure) {

            this.insecure = insecure;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("SecretBackendConnectionElasticsearch", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder tlsServerName(@Nullable String tlsServerName) {

            this.tlsServerName = tlsServerName;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("SecretBackendConnectionElasticsearch", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("SecretBackendConnectionElasticsearch", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder usernameTemplate(@Nullable String usernameTemplate) {

            this.usernameTemplate = usernameTemplate;
            return this;
        }
        public SecretBackendConnectionElasticsearch build() {
            final var _resultValue = new SecretBackendConnectionElasticsearch();
            _resultValue.caCert = caCert;
            _resultValue.caPath = caPath;
            _resultValue.clientCert = clientCert;
            _resultValue.clientKey = clientKey;
            _resultValue.insecure = insecure;
            _resultValue.password = password;
            _resultValue.tlsServerName = tlsServerName;
            _resultValue.url = url;
            _resultValue.username = username;
            _resultValue.usernameTemplate = usernameTemplate;
            return _resultValue;
        }
    }
}
