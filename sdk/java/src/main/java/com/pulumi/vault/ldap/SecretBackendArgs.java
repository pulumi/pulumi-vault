// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ldap;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendArgs Empty = new SecretBackendArgs();

    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     * 
     */
    @Import(name="allowedManagedKeys")
    private @Nullable Output<List<String>> allowedManagedKeys;

    /**
     * @return List of managed key registry entry names that the mount in question is allowed to access
     * 
     */
    public Optional<Output<List<String>>> allowedManagedKeys() {
        return Optional.ofNullable(this.allowedManagedKeys);
    }

    /**
     * List of headers to allow and pass from the request to the plugin
     * 
     */
    @Import(name="allowedResponseHeaders")
    private @Nullable Output<List<String>> allowedResponseHeaders;

    /**
     * @return List of headers to allow and pass from the request to the plugin
     * 
     */
    public Optional<Output<List<String>>> allowedResponseHeaders() {
        return Optional.ofNullable(this.allowedResponseHeaders);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    @Import(name="auditNonHmacRequestKeys")
    private @Nullable Output<List<String>> auditNonHmacRequestKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacRequestKeys() {
        return Optional.ofNullable(this.auditNonHmacRequestKeys);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    @Import(name="auditNonHmacResponseKeys")
    private @Nullable Output<List<String>> auditNonHmacResponseKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacResponseKeys() {
        return Optional.ofNullable(this.auditNonHmacResponseKeys);
    }

    /**
     * Distinguished name of object to bind when performing user and group search.
     * 
     */
    @Import(name="binddn", required=true)
    private Output<String> binddn;

    /**
     * @return Distinguished name of object to bind when performing user and group search.
     * 
     */
    public Output<String> binddn() {
        return this.binddn;
    }

    /**
     * Password to use along with binddn when performing user search.
     * 
     */
    @Import(name="bindpass", required=true)
    private Output<String> bindpass;

    /**
     * @return Password to use along with binddn when performing user search.
     * 
     */
    public Output<String> bindpass() {
        return this.bindpass;
    }

    /**
     * CA certificate to use when verifying LDAP server certificate, must be
     * x509 PEM encoded.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return CA certificate to use when verifying LDAP server certificate, must be
     * x509 PEM encoded.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Client certificate to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    @Import(name="clientTlsCert")
    private @Nullable Output<String> clientTlsCert;

    /**
     * @return Client certificate to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    public Optional<Output<String>> clientTlsCert() {
        return Optional.ofNullable(this.clientTlsCert);
    }

    /**
     * Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    @Import(name="clientTlsKey")
    private @Nullable Output<String> clientTlsKey;

    /**
     * @return Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    public Optional<Output<String>> clientTlsKey() {
        return Optional.ofNullable(this.clientTlsKey);
    }

    /**
     * Timeout, in seconds, when attempting to connect to the LDAP server before trying
     * the next URL in the configuration.
     * 
     */
    @Import(name="connectionTimeout")
    private @Nullable Output<Integer> connectionTimeout;

    /**
     * @return Timeout, in seconds, when attempting to connect to the LDAP server before trying
     * the next URL in the configuration.
     * 
     */
    public Optional<Output<Integer>> connectionTimeout() {
        return Optional.ofNullable(this.connectionTimeout);
    }

    /**
     * Default lease duration for tokens and secrets in seconds
     * 
     */
    @Import(name="defaultLeaseTtlSeconds")
    private @Nullable Output<Integer> defaultLeaseTtlSeconds;

    /**
     * @return Default lease duration for tokens and secrets in seconds
     * 
     */
    public Optional<Output<Integer>> defaultLeaseTtlSeconds() {
        return Optional.ofNullable(this.defaultLeaseTtlSeconds);
    }

    /**
     * List of headers to allow and pass from the request to the plugin
     * 
     */
    @Import(name="delegatedAuthAccessors")
    private @Nullable Output<List<String>> delegatedAuthAccessors;

    /**
     * @return List of headers to allow and pass from the request to the plugin
     * 
     */
    public Optional<Output<List<String>>> delegatedAuthAccessors() {
        return Optional.ofNullable(this.delegatedAuthAccessors);
    }

    /**
     * Human-friendly description of the mount
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-friendly description of the mount
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="disableAutomatedRotation")
    private @Nullable Output<Boolean> disableAutomatedRotation;

    /**
     * @return Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<Boolean>> disableAutomatedRotation() {
        return Optional.ofNullable(this.disableAutomatedRotation);
    }

    /**
     * If set, opts out of mount migration on path updates.
     * 
     */
    @Import(name="disableRemount")
    private @Nullable Output<Boolean> disableRemount;

    /**
     * @return If set, opts out of mount migration on path updates.
     * 
     */
    public Optional<Output<Boolean>> disableRemount() {
        return Optional.ofNullable(this.disableRemount);
    }

    /**
     * Enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    @Import(name="externalEntropyAccess")
    private @Nullable Output<Boolean> externalEntropyAccess;

    /**
     * @return Enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    public Optional<Output<Boolean>> externalEntropyAccess() {
        return Optional.ofNullable(this.externalEntropyAccess);
    }

    /**
     * If set to true, disables caching.
     * 
     */
    @Import(name="forceNoCache")
    private @Nullable Output<Boolean> forceNoCache;

    /**
     * @return If set to true, disables caching.
     * 
     */
    public Optional<Output<Boolean>> forceNoCache() {
        return Optional.ofNullable(this.forceNoCache);
    }

    /**
     * The key to use for signing plugin workload identity tokens
     * 
     */
    @Import(name="identityTokenKey")
    private @Nullable Output<String> identityTokenKey;

    /**
     * @return The key to use for signing plugin workload identity tokens
     * 
     */
    public Optional<Output<String>> identityTokenKey() {
        return Optional.ofNullable(this.identityTokenKey);
    }

    /**
     * Skip LDAP server SSL Certificate verification. This is not recommended for production.
     * Defaults to `false`.
     * 
     */
    @Import(name="insecureTls")
    private @Nullable Output<Boolean> insecureTls;

    /**
     * @return Skip LDAP server SSL Certificate verification. This is not recommended for production.
     * Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> insecureTls() {
        return Optional.ofNullable(this.insecureTls);
    }

    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     * 
     */
    @Import(name="listingVisibility")
    private @Nullable Output<String> listingVisibility;

    /**
     * @return Specifies whether to show this mount in the UI-specific listing endpoint
     * 
     */
    public Optional<Output<String>> listingVisibility() {
        return Optional.ofNullable(this.listingVisibility);
    }

    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     * 
     */
    @Import(name="maxLeaseTtlSeconds")
    private @Nullable Output<Integer> maxLeaseTtlSeconds;

    /**
     * @return Maximum possible lease duration for tokens and secrets in seconds
     * 
     */
    public Optional<Output<Integer>> maxLeaseTtlSeconds() {
        return Optional.ofNullable(this.maxLeaseTtlSeconds);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies mount type specific options that are passed to the backend
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    /**
     * @return Specifies mount type specific options that are passed to the backend
     * 
     */
    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * List of headers to allow and pass from the request to the plugin
     * 
     */
    @Import(name="passthroughRequestHeaders")
    private @Nullable Output<List<String>> passthroughRequestHeaders;

    /**
     * @return List of headers to allow and pass from the request to the plugin
     * 
     */
    public Optional<Output<List<String>>> passthroughRequestHeaders() {
        return Optional.ofNullable(this.passthroughRequestHeaders);
    }

    /**
     * Name of the password policy to use to generate passwords.
     * 
     */
    @Import(name="passwordPolicy")
    private @Nullable Output<String> passwordPolicy;

    /**
     * @return Name of the password policy to use to generate passwords.
     * 
     */
    public Optional<Output<String>> passwordPolicy() {
        return Optional.ofNullable(this.passwordPolicy);
    }

    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
     * 
     */
    @Import(name="pluginVersion")
    private @Nullable Output<String> pluginVersion;

    /**
     * @return Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
     * 
     */
    public Optional<Output<String>> pluginVersion() {
        return Optional.ofNullable(this.pluginVersion);
    }

    /**
     * Timeout, in seconds, for the connection when making requests against the server
     * before returning back an error.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<Integer> requestTimeout;

    /**
     * @return Timeout, in seconds, for the connection when making requests against the server
     * before returning back an error.
     * 
     */
    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * The amount of time in seconds Vault should wait before rotating the root credential.
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="rotationPeriod")
    private @Nullable Output<Integer> rotationPeriod;

    /**
     * @return The amount of time in seconds Vault should wait before rotating the root credential.
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<Integer>> rotationPeriod() {
        return Optional.ofNullable(this.rotationPeriod);
    }

    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="rotationSchedule")
    private @Nullable Output<String> rotationSchedule;

    /**
     * @return The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<String>> rotationSchedule() {
        return Optional.ofNullable(this.rotationSchedule);
    }

    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     * 
     */
    @Import(name="rotationWindow")
    private @Nullable Output<Integer> rotationWindow;

    /**
     * @return The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     * 
     */
    public Optional<Output<Integer>> rotationWindow() {
        return Optional.ofNullable(this.rotationWindow);
    }

    /**
     * The LDAP schema to use when storing entry passwords. Valid schemas include `openldap`, `ad`, and `racf`. Default is `openldap`.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The LDAP schema to use when storing entry passwords. Valid schemas include `openldap`, `ad`, and `racf`. Default is `openldap`.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    @Import(name="sealWrap")
    private @Nullable Output<Boolean> sealWrap;

    /**
     * @return Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    public Optional<Output<Boolean>> sealWrap() {
        return Optional.ofNullable(this.sealWrap);
    }

    /**
     * If set to true, static roles will not be rotated during import.
     * Defaults to false. Requires Vault 1.16 or above.
     * 
     */
    @Import(name="skipStaticRoleImportRotation")
    private @Nullable Output<Boolean> skipStaticRoleImportRotation;

    /**
     * @return If set to true, static roles will not be rotated during import.
     * Defaults to false. Requires Vault 1.16 or above.
     * 
     */
    public Optional<Output<Boolean>> skipStaticRoleImportRotation() {
        return Optional.ofNullable(this.skipStaticRoleImportRotation);
    }

    /**
     * Issue a StartTLS command after establishing unencrypted connection.
     * 
     */
    @Import(name="starttls")
    private @Nullable Output<Boolean> starttls;

    /**
     * @return Issue a StartTLS command after establishing unencrypted connection.
     * 
     */
    public Optional<Output<Boolean>> starttls() {
        return Optional.ofNullable(this.starttls);
    }

    /**
     * Enables userPrincipalDomain login with [username]{@literal @}UPNDomain.
     * 
     */
    @Import(name="upndomain")
    private @Nullable Output<String> upndomain;

    /**
     * @return Enables userPrincipalDomain login with [username]{@literal @}UPNDomain.
     * 
     */
    public Optional<Output<String>> upndomain() {
        return Optional.ofNullable(this.upndomain);
    }

    /**
     * LDAP URL to connect to. Multiple URLs can be specified by concatenating
     * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return LDAP URL to connect to. Multiple URLs can be specified by concatenating
     * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Attribute used when searching users. Defaults to `cn`.
     * 
     */
    @Import(name="userattr")
    private @Nullable Output<String> userattr;

    /**
     * @return Attribute used when searching users. Defaults to `cn`.
     * 
     */
    public Optional<Output<String>> userattr() {
        return Optional.ofNullable(this.userattr);
    }

    /**
     * LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
     * 
     */
    @Import(name="userdn")
    private @Nullable Output<String> userdn;

    /**
     * @return LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
     * 
     */
    public Optional<Output<String>> userdn() {
        return Optional.ofNullable(this.userdn);
    }

    private SecretBackendArgs() {}

    private SecretBackendArgs(SecretBackendArgs $) {
        this.allowedManagedKeys = $.allowedManagedKeys;
        this.allowedResponseHeaders = $.allowedResponseHeaders;
        this.auditNonHmacRequestKeys = $.auditNonHmacRequestKeys;
        this.auditNonHmacResponseKeys = $.auditNonHmacResponseKeys;
        this.binddn = $.binddn;
        this.bindpass = $.bindpass;
        this.certificate = $.certificate;
        this.clientTlsCert = $.clientTlsCert;
        this.clientTlsKey = $.clientTlsKey;
        this.connectionTimeout = $.connectionTimeout;
        this.defaultLeaseTtlSeconds = $.defaultLeaseTtlSeconds;
        this.delegatedAuthAccessors = $.delegatedAuthAccessors;
        this.description = $.description;
        this.disableAutomatedRotation = $.disableAutomatedRotation;
        this.disableRemount = $.disableRemount;
        this.externalEntropyAccess = $.externalEntropyAccess;
        this.forceNoCache = $.forceNoCache;
        this.identityTokenKey = $.identityTokenKey;
        this.insecureTls = $.insecureTls;
        this.listingVisibility = $.listingVisibility;
        this.local = $.local;
        this.maxLeaseTtlSeconds = $.maxLeaseTtlSeconds;
        this.namespace = $.namespace;
        this.options = $.options;
        this.passthroughRequestHeaders = $.passthroughRequestHeaders;
        this.passwordPolicy = $.passwordPolicy;
        this.path = $.path;
        this.pluginVersion = $.pluginVersion;
        this.requestTimeout = $.requestTimeout;
        this.rotationPeriod = $.rotationPeriod;
        this.rotationSchedule = $.rotationSchedule;
        this.rotationWindow = $.rotationWindow;
        this.schema = $.schema;
        this.sealWrap = $.sealWrap;
        this.skipStaticRoleImportRotation = $.skipStaticRoleImportRotation;
        this.starttls = $.starttls;
        this.upndomain = $.upndomain;
        this.url = $.url;
        this.userattr = $.userattr;
        this.userdn = $.userdn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendArgs $;

        public Builder() {
            $ = new SecretBackendArgs();
        }

        public Builder(SecretBackendArgs defaults) {
            $ = new SecretBackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(@Nullable Output<List<String>> allowedManagedKeys) {
            $.allowedManagedKeys = allowedManagedKeys;
            return this;
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(List<String> allowedManagedKeys) {
            return allowedManagedKeys(Output.of(allowedManagedKeys));
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(String... allowedManagedKeys) {
            return allowedManagedKeys(List.of(allowedManagedKeys));
        }

        /**
         * @param allowedResponseHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder allowedResponseHeaders(@Nullable Output<List<String>> allowedResponseHeaders) {
            $.allowedResponseHeaders = allowedResponseHeaders;
            return this;
        }

        /**
         * @param allowedResponseHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder allowedResponseHeaders(List<String> allowedResponseHeaders) {
            return allowedResponseHeaders(Output.of(allowedResponseHeaders));
        }

        /**
         * @param allowedResponseHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder allowedResponseHeaders(String... allowedResponseHeaders) {
            return allowedResponseHeaders(List.of(allowedResponseHeaders));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(@Nullable Output<List<String>> auditNonHmacRequestKeys) {
            $.auditNonHmacRequestKeys = auditNonHmacRequestKeys;
            return this;
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(List<String> auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(Output.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(String... auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(List.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(@Nullable Output<List<String>> auditNonHmacResponseKeys) {
            $.auditNonHmacResponseKeys = auditNonHmacResponseKeys;
            return this;
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(List<String> auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(Output.of(auditNonHmacResponseKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(String... auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(List.of(auditNonHmacResponseKeys));
        }

        /**
         * @param binddn Distinguished name of object to bind when performing user and group search.
         * 
         * @return builder
         * 
         */
        public Builder binddn(Output<String> binddn) {
            $.binddn = binddn;
            return this;
        }

        /**
         * @param binddn Distinguished name of object to bind when performing user and group search.
         * 
         * @return builder
         * 
         */
        public Builder binddn(String binddn) {
            return binddn(Output.of(binddn));
        }

        /**
         * @param bindpass Password to use along with binddn when performing user search.
         * 
         * @return builder
         * 
         */
        public Builder bindpass(Output<String> bindpass) {
            $.bindpass = bindpass;
            return this;
        }

        /**
         * @param bindpass Password to use along with binddn when performing user search.
         * 
         * @return builder
         * 
         */
        public Builder bindpass(String bindpass) {
            return bindpass(Output.of(bindpass));
        }

        /**
         * @param certificate CA certificate to use when verifying LDAP server certificate, must be
         * x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate CA certificate to use when verifying LDAP server certificate, must be
         * x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param clientTlsCert Client certificate to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsCert(@Nullable Output<String> clientTlsCert) {
            $.clientTlsCert = clientTlsCert;
            return this;
        }

        /**
         * @param clientTlsCert Client certificate to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsCert(String clientTlsCert) {
            return clientTlsCert(Output.of(clientTlsCert));
        }

        /**
         * @param clientTlsKey Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsKey(@Nullable Output<String> clientTlsKey) {
            $.clientTlsKey = clientTlsKey;
            return this;
        }

        /**
         * @param clientTlsKey Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsKey(String clientTlsKey) {
            return clientTlsKey(Output.of(clientTlsKey));
        }

        /**
         * @param connectionTimeout Timeout, in seconds, when attempting to connect to the LDAP server before trying
         * the next URL in the configuration.
         * 
         * @return builder
         * 
         */
        public Builder connectionTimeout(@Nullable Output<Integer> connectionTimeout) {
            $.connectionTimeout = connectionTimeout;
            return this;
        }

        /**
         * @param connectionTimeout Timeout, in seconds, when attempting to connect to the LDAP server before trying
         * the next URL in the configuration.
         * 
         * @return builder
         * 
         */
        public Builder connectionTimeout(Integer connectionTimeout) {
            return connectionTimeout(Output.of(connectionTimeout));
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(@Nullable Output<Integer> defaultLeaseTtlSeconds) {
            $.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            return this;
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(Integer defaultLeaseTtlSeconds) {
            return defaultLeaseTtlSeconds(Output.of(defaultLeaseTtlSeconds));
        }

        /**
         * @param delegatedAuthAccessors List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder delegatedAuthAccessors(@Nullable Output<List<String>> delegatedAuthAccessors) {
            $.delegatedAuthAccessors = delegatedAuthAccessors;
            return this;
        }

        /**
         * @param delegatedAuthAccessors List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder delegatedAuthAccessors(List<String> delegatedAuthAccessors) {
            return delegatedAuthAccessors(Output.of(delegatedAuthAccessors));
        }

        /**
         * @param delegatedAuthAccessors List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder delegatedAuthAccessors(String... delegatedAuthAccessors) {
            return delegatedAuthAccessors(List.of(delegatedAuthAccessors));
        }

        /**
         * @param description Human-friendly description of the mount
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-friendly description of the mount
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableAutomatedRotation Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder disableAutomatedRotation(@Nullable Output<Boolean> disableAutomatedRotation) {
            $.disableAutomatedRotation = disableAutomatedRotation;
            return this;
        }

        /**
         * @param disableAutomatedRotation Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder disableAutomatedRotation(Boolean disableAutomatedRotation) {
            return disableAutomatedRotation(Output.of(disableAutomatedRotation));
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(@Nullable Output<Boolean> disableRemount) {
            $.disableRemount = disableRemount;
            return this;
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(Boolean disableRemount) {
            return disableRemount(Output.of(disableRemount));
        }

        /**
         * @param externalEntropyAccess Enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(@Nullable Output<Boolean> externalEntropyAccess) {
            $.externalEntropyAccess = externalEntropyAccess;
            return this;
        }

        /**
         * @param externalEntropyAccess Enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(Boolean externalEntropyAccess) {
            return externalEntropyAccess(Output.of(externalEntropyAccess));
        }

        /**
         * @param forceNoCache If set to true, disables caching.
         * 
         * @return builder
         * 
         */
        public Builder forceNoCache(@Nullable Output<Boolean> forceNoCache) {
            $.forceNoCache = forceNoCache;
            return this;
        }

        /**
         * @param forceNoCache If set to true, disables caching.
         * 
         * @return builder
         * 
         */
        public Builder forceNoCache(Boolean forceNoCache) {
            return forceNoCache(Output.of(forceNoCache));
        }

        /**
         * @param identityTokenKey The key to use for signing plugin workload identity tokens
         * 
         * @return builder
         * 
         */
        public Builder identityTokenKey(@Nullable Output<String> identityTokenKey) {
            $.identityTokenKey = identityTokenKey;
            return this;
        }

        /**
         * @param identityTokenKey The key to use for signing plugin workload identity tokens
         * 
         * @return builder
         * 
         */
        public Builder identityTokenKey(String identityTokenKey) {
            return identityTokenKey(Output.of(identityTokenKey));
        }

        /**
         * @param insecureTls Skip LDAP server SSL Certificate verification. This is not recommended for production.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder insecureTls(@Nullable Output<Boolean> insecureTls) {
            $.insecureTls = insecureTls;
            return this;
        }

        /**
         * @param insecureTls Skip LDAP server SSL Certificate verification. This is not recommended for production.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder insecureTls(Boolean insecureTls) {
            return insecureTls(Output.of(insecureTls));
        }

        /**
         * @param listingVisibility Specifies whether to show this mount in the UI-specific listing endpoint
         * 
         * @return builder
         * 
         */
        public Builder listingVisibility(@Nullable Output<String> listingVisibility) {
            $.listingVisibility = listingVisibility;
            return this;
        }

        /**
         * @param listingVisibility Specifies whether to show this mount in the UI-specific listing endpoint
         * 
         * @return builder
         * 
         */
        public Builder listingVisibility(String listingVisibility) {
            return listingVisibility(Output.of(listingVisibility));
        }

        /**
         * @param local Local mount flag that can be explicitly set to true to enforce local mount in HA environment
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local Local mount flag that can be explicitly set to true to enforce local mount in HA environment
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(@Nullable Output<Integer> maxLeaseTtlSeconds) {
            $.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            return this;
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(Integer maxLeaseTtlSeconds) {
            return maxLeaseTtlSeconds(Output.of(maxLeaseTtlSeconds));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        /**
         * @param passthroughRequestHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder passthroughRequestHeaders(@Nullable Output<List<String>> passthroughRequestHeaders) {
            $.passthroughRequestHeaders = passthroughRequestHeaders;
            return this;
        }

        /**
         * @param passthroughRequestHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder passthroughRequestHeaders(List<String> passthroughRequestHeaders) {
            return passthroughRequestHeaders(Output.of(passthroughRequestHeaders));
        }

        /**
         * @param passthroughRequestHeaders List of headers to allow and pass from the request to the plugin
         * 
         * @return builder
         * 
         */
        public Builder passthroughRequestHeaders(String... passthroughRequestHeaders) {
            return passthroughRequestHeaders(List.of(passthroughRequestHeaders));
        }

        /**
         * @param passwordPolicy Name of the password policy to use to generate passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(@Nullable Output<String> passwordPolicy) {
            $.passwordPolicy = passwordPolicy;
            return this;
        }

        /**
         * @param passwordPolicy Name of the password policy to use to generate passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(String passwordPolicy) {
            return passwordPolicy(Output.of(passwordPolicy));
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `ldap`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `ldap`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param pluginVersion Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
         * 
         * @return builder
         * 
         */
        public Builder pluginVersion(@Nullable Output<String> pluginVersion) {
            $.pluginVersion = pluginVersion;
            return this;
        }

        /**
         * @param pluginVersion Specifies the semantic version of the plugin to use, e.g. &#39;v1.0.0&#39;
         * 
         * @return builder
         * 
         */
        public Builder pluginVersion(String pluginVersion) {
            return pluginVersion(Output.of(pluginVersion));
        }

        /**
         * @param requestTimeout Timeout, in seconds, for the connection when making requests against the server
         * before returning back an error.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout Timeout, in seconds, for the connection when making requests against the server
         * before returning back an error.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param rotationPeriod The amount of time in seconds Vault should wait before rotating the root credential.
         * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(@Nullable Output<Integer> rotationPeriod) {
            $.rotationPeriod = rotationPeriod;
            return this;
        }

        /**
         * @param rotationPeriod The amount of time in seconds Vault should wait before rotating the root credential.
         * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(Integer rotationPeriod) {
            return rotationPeriod(Output.of(rotationPeriod));
        }

        /**
         * @param rotationSchedule The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
         * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationSchedule(@Nullable Output<String> rotationSchedule) {
            $.rotationSchedule = rotationSchedule;
            return this;
        }

        /**
         * @param rotationSchedule The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
         * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationSchedule(String rotationSchedule) {
            return rotationSchedule(Output.of(rotationSchedule));
        }

        /**
         * @param rotationWindow The maximum amount of time in seconds allowed to complete
         * a rotation when a scheduled token rotation occurs. The default rotation window is
         * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindow(@Nullable Output<Integer> rotationWindow) {
            $.rotationWindow = rotationWindow;
            return this;
        }

        /**
         * @param rotationWindow The maximum amount of time in seconds allowed to complete
         * a rotation when a scheduled token rotation occurs. The default rotation window is
         * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
         * 
         * @return builder
         * 
         */
        public Builder rotationWindow(Integer rotationWindow) {
            return rotationWindow(Output.of(rotationWindow));
        }

        /**
         * @param schema The LDAP schema to use when storing entry passwords. Valid schemas include `openldap`, `ad`, and `racf`. Default is `openldap`.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The LDAP schema to use when storing entry passwords. Valid schemas include `openldap`, `ad`, and `racf`. Default is `openldap`.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param sealWrap Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(@Nullable Output<Boolean> sealWrap) {
            $.sealWrap = sealWrap;
            return this;
        }

        /**
         * @param sealWrap Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(Boolean sealWrap) {
            return sealWrap(Output.of(sealWrap));
        }

        /**
         * @param skipStaticRoleImportRotation If set to true, static roles will not be rotated during import.
         * Defaults to false. Requires Vault 1.16 or above.
         * 
         * @return builder
         * 
         */
        public Builder skipStaticRoleImportRotation(@Nullable Output<Boolean> skipStaticRoleImportRotation) {
            $.skipStaticRoleImportRotation = skipStaticRoleImportRotation;
            return this;
        }

        /**
         * @param skipStaticRoleImportRotation If set to true, static roles will not be rotated during import.
         * Defaults to false. Requires Vault 1.16 or above.
         * 
         * @return builder
         * 
         */
        public Builder skipStaticRoleImportRotation(Boolean skipStaticRoleImportRotation) {
            return skipStaticRoleImportRotation(Output.of(skipStaticRoleImportRotation));
        }

        /**
         * @param starttls Issue a StartTLS command after establishing unencrypted connection.
         * 
         * @return builder
         * 
         */
        public Builder starttls(@Nullable Output<Boolean> starttls) {
            $.starttls = starttls;
            return this;
        }

        /**
         * @param starttls Issue a StartTLS command after establishing unencrypted connection.
         * 
         * @return builder
         * 
         */
        public Builder starttls(Boolean starttls) {
            return starttls(Output.of(starttls));
        }

        /**
         * @param upndomain Enables userPrincipalDomain login with [username]{@literal @}UPNDomain.
         * 
         * @return builder
         * 
         */
        public Builder upndomain(@Nullable Output<String> upndomain) {
            $.upndomain = upndomain;
            return this;
        }

        /**
         * @param upndomain Enables userPrincipalDomain login with [username]{@literal @}UPNDomain.
         * 
         * @return builder
         * 
         */
        public Builder upndomain(String upndomain) {
            return upndomain(Output.of(upndomain));
        }

        /**
         * @param url LDAP URL to connect to. Multiple URLs can be specified by concatenating
         * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url LDAP URL to connect to. Multiple URLs can be specified by concatenating
         * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param userattr Attribute used when searching users. Defaults to `cn`.
         * 
         * @return builder
         * 
         */
        public Builder userattr(@Nullable Output<String> userattr) {
            $.userattr = userattr;
            return this;
        }

        /**
         * @param userattr Attribute used when searching users. Defaults to `cn`.
         * 
         * @return builder
         * 
         */
        public Builder userattr(String userattr) {
            return userattr(Output.of(userattr));
        }

        /**
         * @param userdn LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
         * 
         * @return builder
         * 
         */
        public Builder userdn(@Nullable Output<String> userdn) {
            $.userdn = userdn;
            return this;
        }

        /**
         * @param userdn LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
         * 
         * @return builder
         * 
         */
        public Builder userdn(String userdn) {
            return userdn(Output.of(userdn));
        }

        public SecretBackendArgs build() {
            if ($.binddn == null) {
                throw new MissingRequiredPropertyException("SecretBackendArgs", "binddn");
            }
            if ($.bindpass == null) {
                throw new MissingRequiredPropertyException("SecretBackendArgs", "bindpass");
            }
            return $;
        }
    }

}
