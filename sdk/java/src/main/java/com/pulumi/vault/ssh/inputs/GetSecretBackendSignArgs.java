// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ssh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecretBackendSignArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecretBackendSignArgs Empty = new GetSecretBackendSignArgs();

    /**
     * Specifies the type of certificate to be created; either &#34;user&#34; or &#34;host&#34;.
     * 
     */
    @Import(name="certType")
    private @Nullable Output<String> certType;

    /**
     * @return Specifies the type of certificate to be created; either &#34;user&#34; or &#34;host&#34;.
     * 
     */
    public Optional<Output<String>> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
     * 
     */
    @Import(name="criticalOptions")
    private @Nullable Output<Map<String,String>> criticalOptions;

    /**
     * @return Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
     * 
     */
    public Optional<Output<Map<String,String>>> criticalOptions() {
        return Optional.ofNullable(this.criticalOptions);
    }

    /**
     * Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
     * 
     */
    @Import(name="extensions")
    private @Nullable Output<Map<String,String>> extensions;

    /**
     * @return Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
     * 
     */
    public Optional<Output<Map<String,String>>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    /**
     * @return Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
     * 
     */
    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * Specifies the name of the role to sign.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Specifies the name of the role to sign.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Full path where SSH backend is mounted.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Full path where SSH backend is mounted.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Specifies the SSH public key that should be signed.
     * 
     */
    @Import(name="publicKey", required=true)
    private Output<String> publicKey;

    /**
     * @return Specifies the SSH public key that should be signed.
     * 
     */
    public Output<String> publicKey() {
        return this.publicKey;
    }

    /**
     * Specifies the Requested Time To Live. Cannot be greater than the role&#39;s max_ttl value. If not provided, the role&#39;s ttl value will be used. Note that the role values default to system values if not explicitly set.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return Specifies the Requested Time To Live. Cannot be greater than the role&#39;s max_ttl value. If not provided, the role&#39;s ttl value will be used. Note that the role values default to system values if not explicitly set.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allow_empty_principals or a value has been set for either the default_user or default_user_template role parameters.
     * 
     */
    @Import(name="validPrincipals")
    private @Nullable Output<String> validPrincipals;

    /**
     * @return Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allow_empty_principals or a value has been set for either the default_user or default_user_template role parameters.
     * 
     */
    public Optional<Output<String>> validPrincipals() {
        return Optional.ofNullable(this.validPrincipals);
    }

    private GetSecretBackendSignArgs() {}

    private GetSecretBackendSignArgs(GetSecretBackendSignArgs $) {
        this.certType = $.certType;
        this.criticalOptions = $.criticalOptions;
        this.extensions = $.extensions;
        this.keyId = $.keyId;
        this.name = $.name;
        this.namespace = $.namespace;
        this.path = $.path;
        this.publicKey = $.publicKey;
        this.ttl = $.ttl;
        this.validPrincipals = $.validPrincipals;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecretBackendSignArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecretBackendSignArgs $;

        public Builder() {
            $ = new GetSecretBackendSignArgs();
        }

        public Builder(GetSecretBackendSignArgs defaults) {
            $ = new GetSecretBackendSignArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certType Specifies the type of certificate to be created; either &#34;user&#34; or &#34;host&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable Output<String> certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param certType Specifies the type of certificate to be created; either &#34;user&#34; or &#34;host&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certType(String certType) {
            return certType(Output.of(certType));
        }

        /**
         * @param criticalOptions Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder criticalOptions(@Nullable Output<Map<String,String>> criticalOptions) {
            $.criticalOptions = criticalOptions;
            return this;
        }

        /**
         * @param criticalOptions Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder criticalOptions(Map<String,String> criticalOptions) {
            return criticalOptions(Output.of(criticalOptions));
        }

        /**
         * @param extensions Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Output<Map<String,String>> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder extensions(Map<String,String> extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param keyId Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param name Specifies the name of the role to sign.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the role to sign.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path Full path where SSH backend is mounted.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Full path where SSH backend is mounted.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param publicKey Specifies the SSH public key that should be signed.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey Specifies the SSH public key that should be signed.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param ttl Specifies the Requested Time To Live. Cannot be greater than the role&#39;s max_ttl value. If not provided, the role&#39;s ttl value will be used. Note that the role values default to system values if not explicitly set.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Specifies the Requested Time To Live. Cannot be greater than the role&#39;s max_ttl value. If not provided, the role&#39;s ttl value will be used. Note that the role values default to system values if not explicitly set.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param validPrincipals Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allow_empty_principals or a value has been set for either the default_user or default_user_template role parameters.
         * 
         * @return builder
         * 
         */
        public Builder validPrincipals(@Nullable Output<String> validPrincipals) {
            $.validPrincipals = validPrincipals;
            return this;
        }

        /**
         * @param validPrincipals Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allow_empty_principals or a value has been set for either the default_user or default_user_template role parameters.
         * 
         * @return builder
         * 
         */
        public Builder validPrincipals(String validPrincipals) {
            return validPrincipals(Output.of(validPrincipals));
        }

        public GetSecretBackendSignArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetSecretBackendSignArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetSecretBackendSignArgs", "path");
            }
            if ($.publicKey == null) {
                throw new MissingRequiredPropertyException("GetSecretBackendSignArgs", "publicKey");
            }
            return $;
        }
    }

}
