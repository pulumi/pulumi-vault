// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TokenState extends com.pulumi.resources.ResourceArgs {

    public static final TokenState Empty = new TokenState();

    /**
     * String containing the client token if stored in present file
     * 
     */
    @Import(name="clientToken")
    private @Nullable Output<String> clientToken;

    /**
     * @return String containing the client token if stored in present file
     * 
     */
    public Optional<Output<String>> clientToken() {
        return Optional.ofNullable(this.clientToken);
    }

    /**
     * String containing the token display name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return String containing the token display name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The explicit max TTL of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
     * 
     */
    @Import(name="explicitMaxTtl")
    private @Nullable Output<String> explicitMaxTtl;

    /**
     * @return The explicit max TTL of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
     * 
     */
    public Optional<Output<String>> explicitMaxTtl() {
        return Optional.ofNullable(this.explicitMaxTtl);
    }

    /**
     * String containing the token lease duration if present in state file
     * 
     */
    @Import(name="leaseDuration")
    private @Nullable Output<Integer> leaseDuration;

    /**
     * @return String containing the token lease duration if present in state file
     * 
     */
    public Optional<Output<Integer>> leaseDuration() {
        return Optional.ofNullable(this.leaseDuration);
    }

    /**
     * String containing the token lease started time if present in state file
     * 
     */
    @Import(name="leaseStarted")
    private @Nullable Output<String> leaseStarted;

    /**
     * @return String containing the token lease started time if present in state file
     * 
     */
    public Optional<Output<String>> leaseStarted() {
        return Optional.ofNullable(this.leaseStarted);
    }

    /**
     * Metadata to be set on this token
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return Metadata to be set on this token
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Flag to not attach the default policy to this token
     * 
     */
    @Import(name="noDefaultPolicy")
    private @Nullable Output<Boolean> noDefaultPolicy;

    /**
     * @return Flag to not attach the default policy to this token
     * 
     */
    public Optional<Output<Boolean>> noDefaultPolicy() {
        return Optional.ofNullable(this.noDefaultPolicy);
    }

    /**
     * Flag to create a token without parent
     * 
     */
    @Import(name="noParent")
    private @Nullable Output<Boolean> noParent;

    /**
     * @return Flag to create a token without parent
     * 
     */
    public Optional<Output<Boolean>> noParent() {
        return Optional.ofNullable(this.noParent);
    }

    /**
     * The number of allowed uses of this token
     * 
     */
    @Import(name="numUses")
    private @Nullable Output<Integer> numUses;

    /**
     * @return The number of allowed uses of this token
     * 
     */
    public Optional<Output<Integer>> numUses() {
        return Optional.ofNullable(this.numUses);
    }

    /**
     * The period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return The period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * List of policies to attach to this token
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return List of policies to attach to this token
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * The renew increment. This is specified in seconds
     * 
     */
    @Import(name="renewIncrement")
    private @Nullable Output<Integer> renewIncrement;

    /**
     * @return The renew increment. This is specified in seconds
     * 
     */
    public Optional<Output<Integer>> renewIncrement() {
        return Optional.ofNullable(this.renewIncrement);
    }

    /**
     * The minimal lease to renew this token
     * 
     */
    @Import(name="renewMinLease")
    private @Nullable Output<Integer> renewMinLease;

    /**
     * @return The minimal lease to renew this token
     * 
     */
    public Optional<Output<Integer>> renewMinLease() {
        return Optional.ofNullable(this.renewMinLease);
    }

    /**
     * Flag to allow to renew this token
     * 
     */
    @Import(name="renewable")
    private @Nullable Output<Boolean> renewable;

    /**
     * @return Flag to allow to renew this token
     * 
     */
    public Optional<Output<Boolean>> renewable() {
        return Optional.ofNullable(this.renewable);
    }

    /**
     * The token role name
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    /**
     * @return The token role name
     * 
     */
    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    /**
     * The TTL period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return The TTL period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The client wrapped token.
     * 
     */
    @Import(name="wrappedToken")
    private @Nullable Output<String> wrappedToken;

    /**
     * @return The client wrapped token.
     * 
     */
    public Optional<Output<String>> wrappedToken() {
        return Optional.ofNullable(this.wrappedToken);
    }

    /**
     * The client wrapping accessor.
     * 
     */
    @Import(name="wrappingAccessor")
    private @Nullable Output<String> wrappingAccessor;

    /**
     * @return The client wrapping accessor.
     * 
     */
    public Optional<Output<String>> wrappingAccessor() {
        return Optional.ofNullable(this.wrappingAccessor);
    }

    /**
     * The TTL period of the wrapped token.
     * 
     */
    @Import(name="wrappingTtl")
    private @Nullable Output<String> wrappingTtl;

    /**
     * @return The TTL period of the wrapped token.
     * 
     */
    public Optional<Output<String>> wrappingTtl() {
        return Optional.ofNullable(this.wrappingTtl);
    }

    private TokenState() {}

    private TokenState(TokenState $) {
        this.clientToken = $.clientToken;
        this.displayName = $.displayName;
        this.explicitMaxTtl = $.explicitMaxTtl;
        this.leaseDuration = $.leaseDuration;
        this.leaseStarted = $.leaseStarted;
        this.metadata = $.metadata;
        this.namespace = $.namespace;
        this.noDefaultPolicy = $.noDefaultPolicy;
        this.noParent = $.noParent;
        this.numUses = $.numUses;
        this.period = $.period;
        this.policies = $.policies;
        this.renewIncrement = $.renewIncrement;
        this.renewMinLease = $.renewMinLease;
        this.renewable = $.renewable;
        this.roleName = $.roleName;
        this.ttl = $.ttl;
        this.wrappedToken = $.wrappedToken;
        this.wrappingAccessor = $.wrappingAccessor;
        this.wrappingTtl = $.wrappingTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenState $;

        public Builder() {
            $ = new TokenState();
        }

        public Builder(TokenState defaults) {
            $ = new TokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientToken String containing the client token if stored in present file
         * 
         * @return builder
         * 
         */
        public Builder clientToken(@Nullable Output<String> clientToken) {
            $.clientToken = clientToken;
            return this;
        }

        /**
         * @param clientToken String containing the client token if stored in present file
         * 
         * @return builder
         * 
         */
        public Builder clientToken(String clientToken) {
            return clientToken(Output.of(clientToken));
        }

        /**
         * @param displayName String containing the token display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName String containing the token display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param explicitMaxTtl The explicit max TTL of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
         * 
         * @return builder
         * 
         */
        public Builder explicitMaxTtl(@Nullable Output<String> explicitMaxTtl) {
            $.explicitMaxTtl = explicitMaxTtl;
            return this;
        }

        /**
         * @param explicitMaxTtl The explicit max TTL of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
         * 
         * @return builder
         * 
         */
        public Builder explicitMaxTtl(String explicitMaxTtl) {
            return explicitMaxTtl(Output.of(explicitMaxTtl));
        }

        /**
         * @param leaseDuration String containing the token lease duration if present in state file
         * 
         * @return builder
         * 
         */
        public Builder leaseDuration(@Nullable Output<Integer> leaseDuration) {
            $.leaseDuration = leaseDuration;
            return this;
        }

        /**
         * @param leaseDuration String containing the token lease duration if present in state file
         * 
         * @return builder
         * 
         */
        public Builder leaseDuration(Integer leaseDuration) {
            return leaseDuration(Output.of(leaseDuration));
        }

        /**
         * @param leaseStarted String containing the token lease started time if present in state file
         * 
         * @return builder
         * 
         */
        public Builder leaseStarted(@Nullable Output<String> leaseStarted) {
            $.leaseStarted = leaseStarted;
            return this;
        }

        /**
         * @param leaseStarted String containing the token lease started time if present in state file
         * 
         * @return builder
         * 
         */
        public Builder leaseStarted(String leaseStarted) {
            return leaseStarted(Output.of(leaseStarted));
        }

        /**
         * @param metadata Metadata to be set on this token
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Metadata to be set on this token
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param noDefaultPolicy Flag to not attach the default policy to this token
         * 
         * @return builder
         * 
         */
        public Builder noDefaultPolicy(@Nullable Output<Boolean> noDefaultPolicy) {
            $.noDefaultPolicy = noDefaultPolicy;
            return this;
        }

        /**
         * @param noDefaultPolicy Flag to not attach the default policy to this token
         * 
         * @return builder
         * 
         */
        public Builder noDefaultPolicy(Boolean noDefaultPolicy) {
            return noDefaultPolicy(Output.of(noDefaultPolicy));
        }

        /**
         * @param noParent Flag to create a token without parent
         * 
         * @return builder
         * 
         */
        public Builder noParent(@Nullable Output<Boolean> noParent) {
            $.noParent = noParent;
            return this;
        }

        /**
         * @param noParent Flag to create a token without parent
         * 
         * @return builder
         * 
         */
        public Builder noParent(Boolean noParent) {
            return noParent(Output.of(noParent));
        }

        /**
         * @param numUses The number of allowed uses of this token
         * 
         * @return builder
         * 
         */
        public Builder numUses(@Nullable Output<Integer> numUses) {
            $.numUses = numUses;
            return this;
        }

        /**
         * @param numUses The number of allowed uses of this token
         * 
         * @return builder
         * 
         */
        public Builder numUses(Integer numUses) {
            return numUses(Output.of(numUses));
        }

        /**
         * @param period The period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param policies List of policies to attach to this token
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies List of policies to attach to this token
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies List of policies to attach to this token
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param renewIncrement The renew increment. This is specified in seconds
         * 
         * @return builder
         * 
         */
        public Builder renewIncrement(@Nullable Output<Integer> renewIncrement) {
            $.renewIncrement = renewIncrement;
            return this;
        }

        /**
         * @param renewIncrement The renew increment. This is specified in seconds
         * 
         * @return builder
         * 
         */
        public Builder renewIncrement(Integer renewIncrement) {
            return renewIncrement(Output.of(renewIncrement));
        }

        /**
         * @param renewMinLease The minimal lease to renew this token
         * 
         * @return builder
         * 
         */
        public Builder renewMinLease(@Nullable Output<Integer> renewMinLease) {
            $.renewMinLease = renewMinLease;
            return this;
        }

        /**
         * @param renewMinLease The minimal lease to renew this token
         * 
         * @return builder
         * 
         */
        public Builder renewMinLease(Integer renewMinLease) {
            return renewMinLease(Output.of(renewMinLease));
        }

        /**
         * @param renewable Flag to allow to renew this token
         * 
         * @return builder
         * 
         */
        public Builder renewable(@Nullable Output<Boolean> renewable) {
            $.renewable = renewable;
            return this;
        }

        /**
         * @param renewable Flag to allow to renew this token
         * 
         * @return builder
         * 
         */
        public Builder renewable(Boolean renewable) {
            return renewable(Output.of(renewable));
        }

        /**
         * @param roleName The token role name
         * 
         * @return builder
         * 
         */
        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The token role name
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param ttl The TTL period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The TTL period of this token. This is specified as a numeric string with suffix like &#34;30s&#34; ro &#34;5m&#34;
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param wrappedToken The client wrapped token.
         * 
         * @return builder
         * 
         */
        public Builder wrappedToken(@Nullable Output<String> wrappedToken) {
            $.wrappedToken = wrappedToken;
            return this;
        }

        /**
         * @param wrappedToken The client wrapped token.
         * 
         * @return builder
         * 
         */
        public Builder wrappedToken(String wrappedToken) {
            return wrappedToken(Output.of(wrappedToken));
        }

        /**
         * @param wrappingAccessor The client wrapping accessor.
         * 
         * @return builder
         * 
         */
        public Builder wrappingAccessor(@Nullable Output<String> wrappingAccessor) {
            $.wrappingAccessor = wrappingAccessor;
            return this;
        }

        /**
         * @param wrappingAccessor The client wrapping accessor.
         * 
         * @return builder
         * 
         */
        public Builder wrappingAccessor(String wrappingAccessor) {
            return wrappingAccessor(Output.of(wrappingAccessor));
        }

        /**
         * @param wrappingTtl The TTL period of the wrapped token.
         * 
         * @return builder
         * 
         */
        public Builder wrappingTtl(@Nullable Output<String> wrappingTtl) {
            $.wrappingTtl = wrappingTtl;
            return this;
        }

        /**
         * @param wrappingTtl The TTL period of the wrapped token.
         * 
         * @return builder
         * 
         */
        public Builder wrappingTtl(String wrappingTtl) {
            return wrappingTtl(Output.of(wrappingTtl));
        }

        public TokenState build() {
            return $;
        }
    }

}
