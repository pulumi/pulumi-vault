// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vault.database.inputs.SecretBackendConnectionCassandraArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionCouchbaseArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionElasticsearchArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionHanaArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionInfluxdbArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionMongodbArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionMongodbatlasArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionMssqlArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionMysqlArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionMysqlAuroraArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionMysqlLegacyArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionMysqlRdsArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionOracleArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionPostgresqlArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionRedisArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionRedisElasticacheArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionRedshiftArgs;
import com.pulumi.vault.database.inputs.SecretBackendConnectionSnowflakeArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendConnectionState Empty = new SecretBackendConnectionState();

    /**
     * A list of roles that are allowed to use this
     * connection.
     * 
     */
    @Import(name="allowedRoles")
    private @Nullable Output<List<String>> allowedRoles;

    /**
     * @return A list of roles that are allowed to use this
     * connection.
     * 
     */
    public Optional<Output<List<String>>> allowedRoles() {
        return Optional.ofNullable(this.allowedRoles);
    }

    /**
     * The unique name of the Vault mount to configure.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The unique name of the Vault mount to configure.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * A nested block containing configuration options for Cassandra connections.
     * 
     */
    @Import(name="cassandra")
    private @Nullable Output<SecretBackendConnectionCassandraArgs> cassandra;

    /**
     * @return A nested block containing configuration options for Cassandra connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionCassandraArgs>> cassandra() {
        return Optional.ofNullable(this.cassandra);
    }

    /**
     * A nested block containing configuration options for Couchbase connections.
     * 
     */
    @Import(name="couchbase")
    private @Nullable Output<SecretBackendConnectionCouchbaseArgs> couchbase;

    /**
     * @return A nested block containing configuration options for Couchbase connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionCouchbaseArgs>> couchbase() {
        return Optional.ofNullable(this.couchbase);
    }

    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     * 
     */
    @Import(name="data")
    private @Nullable Output<Map<String,Object>> data;

    /**
     * @return A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     * 
     */
    public Optional<Output<Map<String,Object>>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * A nested block containing configuration options for Elasticsearch connections.
     * 
     */
    @Import(name="elasticsearch")
    private @Nullable Output<SecretBackendConnectionElasticsearchArgs> elasticsearch;

    /**
     * @return A nested block containing configuration options for Elasticsearch connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionElasticsearchArgs>> elasticsearch() {
        return Optional.ofNullable(this.elasticsearch);
    }

    /**
     * A nested block containing configuration options for SAP HanaDB connections.
     * 
     */
    @Import(name="hana")
    private @Nullable Output<SecretBackendConnectionHanaArgs> hana;

    /**
     * @return A nested block containing configuration options for SAP HanaDB connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionHanaArgs>> hana() {
        return Optional.ofNullable(this.hana);
    }

    /**
     * A nested block containing configuration options for InfluxDB connections.
     * 
     */
    @Import(name="influxdb")
    private @Nullable Output<SecretBackendConnectionInfluxdbArgs> influxdb;

    /**
     * @return A nested block containing configuration options for InfluxDB connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionInfluxdbArgs>> influxdb() {
        return Optional.ofNullable(this.influxdb);
    }

    /**
     * A nested block containing configuration options for MongoDB connections.
     * 
     */
    @Import(name="mongodb")
    private @Nullable Output<SecretBackendConnectionMongodbArgs> mongodb;

    /**
     * @return A nested block containing configuration options for MongoDB connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionMongodbArgs>> mongodb() {
        return Optional.ofNullable(this.mongodb);
    }

    /**
     * A nested block containing configuration options for MongoDB Atlas connections.
     * 
     */
    @Import(name="mongodbatlas")
    private @Nullable Output<SecretBackendConnectionMongodbatlasArgs> mongodbatlas;

    /**
     * @return A nested block containing configuration options for MongoDB Atlas connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionMongodbatlasArgs>> mongodbatlas() {
        return Optional.ofNullable(this.mongodbatlas);
    }

    /**
     * A nested block containing configuration options for MSSQL connections.
     * 
     */
    @Import(name="mssql")
    private @Nullable Output<SecretBackendConnectionMssqlArgs> mssql;

    /**
     * @return A nested block containing configuration options for MSSQL connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionMssqlArgs>> mssql() {
        return Optional.ofNullable(this.mssql);
    }

    /**
     * A nested block containing configuration options for MySQL connections.
     * 
     */
    @Import(name="mysql")
    private @Nullable Output<SecretBackendConnectionMysqlArgs> mysql;

    /**
     * @return A nested block containing configuration options for MySQL connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionMysqlArgs>> mysql() {
        return Optional.ofNullable(this.mysql);
    }

    /**
     * A nested block containing configuration options for Aurora MySQL connections.
     * 
     */
    @Import(name="mysqlAurora")
    private @Nullable Output<SecretBackendConnectionMysqlAuroraArgs> mysqlAurora;

    /**
     * @return A nested block containing configuration options for Aurora MySQL connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionMysqlAuroraArgs>> mysqlAurora() {
        return Optional.ofNullable(this.mysqlAurora);
    }

    /**
     * A nested block containing configuration options for legacy MySQL connections.
     * 
     */
    @Import(name="mysqlLegacy")
    private @Nullable Output<SecretBackendConnectionMysqlLegacyArgs> mysqlLegacy;

    /**
     * @return A nested block containing configuration options for legacy MySQL connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionMysqlLegacyArgs>> mysqlLegacy() {
        return Optional.ofNullable(this.mysqlLegacy);
    }

    /**
     * A nested block containing configuration options for RDS MySQL connections.
     * 
     */
    @Import(name="mysqlRds")
    private @Nullable Output<SecretBackendConnectionMysqlRdsArgs> mysqlRds;

    /**
     * @return A nested block containing configuration options for RDS MySQL connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionMysqlRdsArgs>> mysqlRds() {
        return Optional.ofNullable(this.mysqlRds);
    }

    /**
     * A unique name to give the database connection.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique name to give the database connection.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * A nested block containing configuration options for Oracle connections.
     * 
     */
    @Import(name="oracle")
    private @Nullable Output<SecretBackendConnectionOracleArgs> oracle;

    /**
     * @return A nested block containing configuration options for Oracle connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionOracleArgs>> oracle() {
        return Optional.ofNullable(this.oracle);
    }

    /**
     * Specifies the name of the plugin to use.
     * 
     */
    @Import(name="pluginName")
    private @Nullable Output<String> pluginName;

    /**
     * @return Specifies the name of the plugin to use.
     * 
     */
    public Optional<Output<String>> pluginName() {
        return Optional.ofNullable(this.pluginName);
    }

    /**
     * A nested block containing configuration options for PostgreSQL connections.
     * 
     */
    @Import(name="postgresql")
    private @Nullable Output<SecretBackendConnectionPostgresqlArgs> postgresql;

    /**
     * @return A nested block containing configuration options for PostgreSQL connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionPostgresqlArgs>> postgresql() {
        return Optional.ofNullable(this.postgresql);
    }

    /**
     * A nested block containing configuration options for Redis connections.
     * 
     */
    @Import(name="redis")
    private @Nullable Output<SecretBackendConnectionRedisArgs> redis;

    /**
     * @return A nested block containing configuration options for Redis connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionRedisArgs>> redis() {
        return Optional.ofNullable(this.redis);
    }

    /**
     * A nested block containing configuration options for Redis ElastiCache connections.
     * 
     * Exactly one of the nested blocks of configuration options must be supplied.
     * 
     */
    @Import(name="redisElasticache")
    private @Nullable Output<SecretBackendConnectionRedisElasticacheArgs> redisElasticache;

    /**
     * @return A nested block containing configuration options for Redis ElastiCache connections.
     * 
     * Exactly one of the nested blocks of configuration options must be supplied.
     * 
     */
    public Optional<Output<SecretBackendConnectionRedisElasticacheArgs>> redisElasticache() {
        return Optional.ofNullable(this.redisElasticache);
    }

    /**
     * Connection parameters for the redshift-database-plugin plugin.
     * 
     */
    @Import(name="redshift")
    private @Nullable Output<SecretBackendConnectionRedshiftArgs> redshift;

    /**
     * @return Connection parameters for the redshift-database-plugin plugin.
     * 
     */
    public Optional<Output<SecretBackendConnectionRedshiftArgs>> redshift() {
        return Optional.ofNullable(this.redshift);
    }

    /**
     * A list of database statements to be executed to rotate the root user&#39;s credentials.
     * 
     */
    @Import(name="rootRotationStatements")
    private @Nullable Output<List<String>> rootRotationStatements;

    /**
     * @return A list of database statements to be executed to rotate the root user&#39;s credentials.
     * 
     */
    public Optional<Output<List<String>>> rootRotationStatements() {
        return Optional.ofNullable(this.rootRotationStatements);
    }

    /**
     * A nested block containing configuration options for Snowflake connections.
     * 
     */
    @Import(name="snowflake")
    private @Nullable Output<SecretBackendConnectionSnowflakeArgs> snowflake;

    /**
     * @return A nested block containing configuration options for Snowflake connections.
     * 
     */
    public Optional<Output<SecretBackendConnectionSnowflakeArgs>> snowflake() {
        return Optional.ofNullable(this.snowflake);
    }

    /**
     * Whether the connection should be verified on
     * initial configuration or not.
     * 
     */
    @Import(name="verifyConnection")
    private @Nullable Output<Boolean> verifyConnection;

    /**
     * @return Whether the connection should be verified on
     * initial configuration or not.
     * 
     */
    public Optional<Output<Boolean>> verifyConnection() {
        return Optional.ofNullable(this.verifyConnection);
    }

    private SecretBackendConnectionState() {}

    private SecretBackendConnectionState(SecretBackendConnectionState $) {
        this.allowedRoles = $.allowedRoles;
        this.backend = $.backend;
        this.cassandra = $.cassandra;
        this.couchbase = $.couchbase;
        this.data = $.data;
        this.elasticsearch = $.elasticsearch;
        this.hana = $.hana;
        this.influxdb = $.influxdb;
        this.mongodb = $.mongodb;
        this.mongodbatlas = $.mongodbatlas;
        this.mssql = $.mssql;
        this.mysql = $.mysql;
        this.mysqlAurora = $.mysqlAurora;
        this.mysqlLegacy = $.mysqlLegacy;
        this.mysqlRds = $.mysqlRds;
        this.name = $.name;
        this.namespace = $.namespace;
        this.oracle = $.oracle;
        this.pluginName = $.pluginName;
        this.postgresql = $.postgresql;
        this.redis = $.redis;
        this.redisElasticache = $.redisElasticache;
        this.redshift = $.redshift;
        this.rootRotationStatements = $.rootRotationStatements;
        this.snowflake = $.snowflake;
        this.verifyConnection = $.verifyConnection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendConnectionState $;

        public Builder() {
            $ = new SecretBackendConnectionState();
        }

        public Builder(SecretBackendConnectionState defaults) {
            $ = new SecretBackendConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedRoles A list of roles that are allowed to use this
         * connection.
         * 
         * @return builder
         * 
         */
        public Builder allowedRoles(@Nullable Output<List<String>> allowedRoles) {
            $.allowedRoles = allowedRoles;
            return this;
        }

        /**
         * @param allowedRoles A list of roles that are allowed to use this
         * connection.
         * 
         * @return builder
         * 
         */
        public Builder allowedRoles(List<String> allowedRoles) {
            return allowedRoles(Output.of(allowedRoles));
        }

        /**
         * @param allowedRoles A list of roles that are allowed to use this
         * connection.
         * 
         * @return builder
         * 
         */
        public Builder allowedRoles(String... allowedRoles) {
            return allowedRoles(List.of(allowedRoles));
        }

        /**
         * @param backend The unique name of the Vault mount to configure.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The unique name of the Vault mount to configure.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param cassandra A nested block containing configuration options for Cassandra connections.
         * 
         * @return builder
         * 
         */
        public Builder cassandra(@Nullable Output<SecretBackendConnectionCassandraArgs> cassandra) {
            $.cassandra = cassandra;
            return this;
        }

        /**
         * @param cassandra A nested block containing configuration options for Cassandra connections.
         * 
         * @return builder
         * 
         */
        public Builder cassandra(SecretBackendConnectionCassandraArgs cassandra) {
            return cassandra(Output.of(cassandra));
        }

        /**
         * @param couchbase A nested block containing configuration options for Couchbase connections.
         * 
         * @return builder
         * 
         */
        public Builder couchbase(@Nullable Output<SecretBackendConnectionCouchbaseArgs> couchbase) {
            $.couchbase = couchbase;
            return this;
        }

        /**
         * @param couchbase A nested block containing configuration options for Couchbase connections.
         * 
         * @return builder
         * 
         */
        public Builder couchbase(SecretBackendConnectionCouchbaseArgs couchbase) {
            return couchbase(Output.of(couchbase));
        }

        /**
         * @param data A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<Map<String,Object>> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         * 
         * @return builder
         * 
         */
        public Builder data(Map<String,Object> data) {
            return data(Output.of(data));
        }

        /**
         * @param elasticsearch A nested block containing configuration options for Elasticsearch connections.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearch(@Nullable Output<SecretBackendConnectionElasticsearchArgs> elasticsearch) {
            $.elasticsearch = elasticsearch;
            return this;
        }

        /**
         * @param elasticsearch A nested block containing configuration options for Elasticsearch connections.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearch(SecretBackendConnectionElasticsearchArgs elasticsearch) {
            return elasticsearch(Output.of(elasticsearch));
        }

        /**
         * @param hana A nested block containing configuration options for SAP HanaDB connections.
         * 
         * @return builder
         * 
         */
        public Builder hana(@Nullable Output<SecretBackendConnectionHanaArgs> hana) {
            $.hana = hana;
            return this;
        }

        /**
         * @param hana A nested block containing configuration options for SAP HanaDB connections.
         * 
         * @return builder
         * 
         */
        public Builder hana(SecretBackendConnectionHanaArgs hana) {
            return hana(Output.of(hana));
        }

        /**
         * @param influxdb A nested block containing configuration options for InfluxDB connections.
         * 
         * @return builder
         * 
         */
        public Builder influxdb(@Nullable Output<SecretBackendConnectionInfluxdbArgs> influxdb) {
            $.influxdb = influxdb;
            return this;
        }

        /**
         * @param influxdb A nested block containing configuration options for InfluxDB connections.
         * 
         * @return builder
         * 
         */
        public Builder influxdb(SecretBackendConnectionInfluxdbArgs influxdb) {
            return influxdb(Output.of(influxdb));
        }

        /**
         * @param mongodb A nested block containing configuration options for MongoDB connections.
         * 
         * @return builder
         * 
         */
        public Builder mongodb(@Nullable Output<SecretBackendConnectionMongodbArgs> mongodb) {
            $.mongodb = mongodb;
            return this;
        }

        /**
         * @param mongodb A nested block containing configuration options for MongoDB connections.
         * 
         * @return builder
         * 
         */
        public Builder mongodb(SecretBackendConnectionMongodbArgs mongodb) {
            return mongodb(Output.of(mongodb));
        }

        /**
         * @param mongodbatlas A nested block containing configuration options for MongoDB Atlas connections.
         * 
         * @return builder
         * 
         */
        public Builder mongodbatlas(@Nullable Output<SecretBackendConnectionMongodbatlasArgs> mongodbatlas) {
            $.mongodbatlas = mongodbatlas;
            return this;
        }

        /**
         * @param mongodbatlas A nested block containing configuration options for MongoDB Atlas connections.
         * 
         * @return builder
         * 
         */
        public Builder mongodbatlas(SecretBackendConnectionMongodbatlasArgs mongodbatlas) {
            return mongodbatlas(Output.of(mongodbatlas));
        }

        /**
         * @param mssql A nested block containing configuration options for MSSQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mssql(@Nullable Output<SecretBackendConnectionMssqlArgs> mssql) {
            $.mssql = mssql;
            return this;
        }

        /**
         * @param mssql A nested block containing configuration options for MSSQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mssql(SecretBackendConnectionMssqlArgs mssql) {
            return mssql(Output.of(mssql));
        }

        /**
         * @param mysql A nested block containing configuration options for MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysql(@Nullable Output<SecretBackendConnectionMysqlArgs> mysql) {
            $.mysql = mysql;
            return this;
        }

        /**
         * @param mysql A nested block containing configuration options for MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysql(SecretBackendConnectionMysqlArgs mysql) {
            return mysql(Output.of(mysql));
        }

        /**
         * @param mysqlAurora A nested block containing configuration options for Aurora MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysqlAurora(@Nullable Output<SecretBackendConnectionMysqlAuroraArgs> mysqlAurora) {
            $.mysqlAurora = mysqlAurora;
            return this;
        }

        /**
         * @param mysqlAurora A nested block containing configuration options for Aurora MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysqlAurora(SecretBackendConnectionMysqlAuroraArgs mysqlAurora) {
            return mysqlAurora(Output.of(mysqlAurora));
        }

        /**
         * @param mysqlLegacy A nested block containing configuration options for legacy MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysqlLegacy(@Nullable Output<SecretBackendConnectionMysqlLegacyArgs> mysqlLegacy) {
            $.mysqlLegacy = mysqlLegacy;
            return this;
        }

        /**
         * @param mysqlLegacy A nested block containing configuration options for legacy MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysqlLegacy(SecretBackendConnectionMysqlLegacyArgs mysqlLegacy) {
            return mysqlLegacy(Output.of(mysqlLegacy));
        }

        /**
         * @param mysqlRds A nested block containing configuration options for RDS MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysqlRds(@Nullable Output<SecretBackendConnectionMysqlRdsArgs> mysqlRds) {
            $.mysqlRds = mysqlRds;
            return this;
        }

        /**
         * @param mysqlRds A nested block containing configuration options for RDS MySQL connections.
         * 
         * @return builder
         * 
         */
        public Builder mysqlRds(SecretBackendConnectionMysqlRdsArgs mysqlRds) {
            return mysqlRds(Output.of(mysqlRds));
        }

        /**
         * @param name A unique name to give the database connection.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name to give the database connection.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured namespace.
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured namespace.
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param oracle A nested block containing configuration options for Oracle connections.
         * 
         * @return builder
         * 
         */
        public Builder oracle(@Nullable Output<SecretBackendConnectionOracleArgs> oracle) {
            $.oracle = oracle;
            return this;
        }

        /**
         * @param oracle A nested block containing configuration options for Oracle connections.
         * 
         * @return builder
         * 
         */
        public Builder oracle(SecretBackendConnectionOracleArgs oracle) {
            return oracle(Output.of(oracle));
        }

        /**
         * @param pluginName Specifies the name of the plugin to use.
         * 
         * @return builder
         * 
         */
        public Builder pluginName(@Nullable Output<String> pluginName) {
            $.pluginName = pluginName;
            return this;
        }

        /**
         * @param pluginName Specifies the name of the plugin to use.
         * 
         * @return builder
         * 
         */
        public Builder pluginName(String pluginName) {
            return pluginName(Output.of(pluginName));
        }

        /**
         * @param postgresql A nested block containing configuration options for PostgreSQL connections.
         * 
         * @return builder
         * 
         */
        public Builder postgresql(@Nullable Output<SecretBackendConnectionPostgresqlArgs> postgresql) {
            $.postgresql = postgresql;
            return this;
        }

        /**
         * @param postgresql A nested block containing configuration options for PostgreSQL connections.
         * 
         * @return builder
         * 
         */
        public Builder postgresql(SecretBackendConnectionPostgresqlArgs postgresql) {
            return postgresql(Output.of(postgresql));
        }

        /**
         * @param redis A nested block containing configuration options for Redis connections.
         * 
         * @return builder
         * 
         */
        public Builder redis(@Nullable Output<SecretBackendConnectionRedisArgs> redis) {
            $.redis = redis;
            return this;
        }

        /**
         * @param redis A nested block containing configuration options for Redis connections.
         * 
         * @return builder
         * 
         */
        public Builder redis(SecretBackendConnectionRedisArgs redis) {
            return redis(Output.of(redis));
        }

        /**
         * @param redisElasticache A nested block containing configuration options for Redis ElastiCache connections.
         * 
         * Exactly one of the nested blocks of configuration options must be supplied.
         * 
         * @return builder
         * 
         */
        public Builder redisElasticache(@Nullable Output<SecretBackendConnectionRedisElasticacheArgs> redisElasticache) {
            $.redisElasticache = redisElasticache;
            return this;
        }

        /**
         * @param redisElasticache A nested block containing configuration options for Redis ElastiCache connections.
         * 
         * Exactly one of the nested blocks of configuration options must be supplied.
         * 
         * @return builder
         * 
         */
        public Builder redisElasticache(SecretBackendConnectionRedisElasticacheArgs redisElasticache) {
            return redisElasticache(Output.of(redisElasticache));
        }

        /**
         * @param redshift Connection parameters for the redshift-database-plugin plugin.
         * 
         * @return builder
         * 
         */
        public Builder redshift(@Nullable Output<SecretBackendConnectionRedshiftArgs> redshift) {
            $.redshift = redshift;
            return this;
        }

        /**
         * @param redshift Connection parameters for the redshift-database-plugin plugin.
         * 
         * @return builder
         * 
         */
        public Builder redshift(SecretBackendConnectionRedshiftArgs redshift) {
            return redshift(Output.of(redshift));
        }

        /**
         * @param rootRotationStatements A list of database statements to be executed to rotate the root user&#39;s credentials.
         * 
         * @return builder
         * 
         */
        public Builder rootRotationStatements(@Nullable Output<List<String>> rootRotationStatements) {
            $.rootRotationStatements = rootRotationStatements;
            return this;
        }

        /**
         * @param rootRotationStatements A list of database statements to be executed to rotate the root user&#39;s credentials.
         * 
         * @return builder
         * 
         */
        public Builder rootRotationStatements(List<String> rootRotationStatements) {
            return rootRotationStatements(Output.of(rootRotationStatements));
        }

        /**
         * @param rootRotationStatements A list of database statements to be executed to rotate the root user&#39;s credentials.
         * 
         * @return builder
         * 
         */
        public Builder rootRotationStatements(String... rootRotationStatements) {
            return rootRotationStatements(List.of(rootRotationStatements));
        }

        /**
         * @param snowflake A nested block containing configuration options for Snowflake connections.
         * 
         * @return builder
         * 
         */
        public Builder snowflake(@Nullable Output<SecretBackendConnectionSnowflakeArgs> snowflake) {
            $.snowflake = snowflake;
            return this;
        }

        /**
         * @param snowflake A nested block containing configuration options for Snowflake connections.
         * 
         * @return builder
         * 
         */
        public Builder snowflake(SecretBackendConnectionSnowflakeArgs snowflake) {
            return snowflake(Output.of(snowflake));
        }

        /**
         * @param verifyConnection Whether the connection should be verified on
         * initial configuration or not.
         * 
         * @return builder
         * 
         */
        public Builder verifyConnection(@Nullable Output<Boolean> verifyConnection) {
            $.verifyConnection = verifyConnection;
            return this;
        }

        /**
         * @param verifyConnection Whether the connection should be verified on
         * initial configuration or not.
         * 
         * @return builder
         * 
         */
        public Builder verifyConnection(Boolean verifyConnection) {
            return verifyConnection(Output.of(verifyConnection));
        }

        public SecretBackendConnectionState build() {
            return $;
        }
    }

}
