// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.aws;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendRoleArgs Empty = new AuthBackendRoleArgs();

    /**
     * If set to `true`, allows migration of
     * the underlying instance where the client resides.
     * 
     */
    @Import(name="allowInstanceMigration")
    private @Nullable Output<Boolean> allowInstanceMigration;

    /**
     * @return If set to `true`, allows migration of
     * the underlying instance where the client resides.
     * 
     */
    public Optional<Output<Boolean>> allowInstanceMigration() {
        return Optional.ofNullable(this.allowInstanceMigration);
    }

    /**
     * The auth type permitted for this role. Valid choices
     * are `ec2` and `iam`. Defaults to `iam`.
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return The auth type permitted for this role. Valid choices
     * are `ec2` and `iam`. Defaults to `iam`.
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * Path to the mounted aws auth backend.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Path to the mounted aws auth backend.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * If set, defines a constraint on the EC2
     * instances that can perform the login operation that they should be using the
     * account ID specified by this field. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    @Import(name="boundAccountIds")
    private @Nullable Output<List<String>> boundAccountIds;

    /**
     * @return If set, defines a constraint on the EC2
     * instances that can perform the login operation that they should be using the
     * account ID specified by this field. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    public Optional<Output<List<String>>> boundAccountIds() {
        return Optional.ofNullable(this.boundAccountIds);
    }

    /**
     * If set, defines a constraint on the EC2 instances
     * that can perform the login operation that they should be using the AMI ID
     * specified by this field. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    @Import(name="boundAmiIds")
    private @Nullable Output<List<String>> boundAmiIds;

    /**
     * @return If set, defines a constraint on the EC2 instances
     * that can perform the login operation that they should be using the AMI ID
     * specified by this field. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    public Optional<Output<List<String>>> boundAmiIds() {
        return Optional.ofNullable(this.boundAmiIds);
    }

    /**
     * Only EC2 instances that match this instance ID will be permitted to log in.
     * 
     */
    @Import(name="boundEc2InstanceIds")
    private @Nullable Output<List<String>> boundEc2InstanceIds;

    /**
     * @return Only EC2 instances that match this instance ID will be permitted to log in.
     * 
     */
    public Optional<Output<List<String>>> boundEc2InstanceIds() {
        return Optional.ofNullable(this.boundEc2InstanceIds);
    }

    /**
     * If set, defines a constraint on
     * the EC2 instances that can perform the login operation that they must be
     * associated with an IAM instance profile ARN which has a prefix that matches
     * the value specified by this field. The value is prefix-matched as though it
     * were a glob ending in `*`. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    @Import(name="boundIamInstanceProfileArns")
    private @Nullable Output<List<String>> boundIamInstanceProfileArns;

    /**
     * @return If set, defines a constraint on
     * the EC2 instances that can perform the login operation that they must be
     * associated with an IAM instance profile ARN which has a prefix that matches
     * the value specified by this field. The value is prefix-matched as though it
     * were a glob ending in `*`. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    public Optional<Output<List<String>>> boundIamInstanceProfileArns() {
        return Optional.ofNullable(this.boundIamInstanceProfileArns);
    }

    /**
     * If set, defines the IAM principal that
     * must be authenticated when `auth_type` is set to `iam`. Wildcards are
     * supported at the end of the ARN.
     * 
     */
    @Import(name="boundIamPrincipalArns")
    private @Nullable Output<List<String>> boundIamPrincipalArns;

    /**
     * @return If set, defines the IAM principal that
     * must be authenticated when `auth_type` is set to `iam`. Wildcards are
     * supported at the end of the ARN.
     * 
     */
    public Optional<Output<List<String>>> boundIamPrincipalArns() {
        return Optional.ofNullable(this.boundIamPrincipalArns);
    }

    /**
     * If set, defines a constraint on the EC2
     * instances that can perform the login operation that they must match the IAM
     * role ARN specified by this field. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    @Import(name="boundIamRoleArns")
    private @Nullable Output<List<String>> boundIamRoleArns;

    /**
     * @return If set, defines a constraint on the EC2
     * instances that can perform the login operation that they must match the IAM
     * role ARN specified by this field. `auth_type` must be set to `ec2` or
     * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
     * 
     */
    public Optional<Output<List<String>>> boundIamRoleArns() {
        return Optional.ofNullable(this.boundIamRoleArns);
    }

    /**
     * If set, defines a constraint on the EC2 instances
     * that can perform the login operation that the region in their identity
     * document must match the one specified by this field. `auth_type` must be set
     * to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
     * constraint.
     * 
     */
    @Import(name="boundRegions")
    private @Nullable Output<List<String>> boundRegions;

    /**
     * @return If set, defines a constraint on the EC2 instances
     * that can perform the login operation that the region in their identity
     * document must match the one specified by this field. `auth_type` must be set
     * to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
     * constraint.
     * 
     */
    public Optional<Output<List<String>>> boundRegions() {
        return Optional.ofNullable(this.boundRegions);
    }

    /**
     * If set, defines a constraint on the EC2
     * instances that can perform the login operation that they be associated with
     * the subnet ID that matches the value specified by this field. `auth_type`
     * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
     * to use this constraint.
     * 
     */
    @Import(name="boundSubnetIds")
    private @Nullable Output<List<String>> boundSubnetIds;

    /**
     * @return If set, defines a constraint on the EC2
     * instances that can perform the login operation that they be associated with
     * the subnet ID that matches the value specified by this field. `auth_type`
     * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
     * to use this constraint.
     * 
     */
    public Optional<Output<List<String>>> boundSubnetIds() {
        return Optional.ofNullable(this.boundSubnetIds);
    }

    /**
     * If set, defines a constraint on the EC2 instances
     * that can perform the login operation that they be associated with the VPC ID
     * that matches the value specified by this field. `auth_type` must be set to
     * `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
     * constraint.
     * 
     */
    @Import(name="boundVpcIds")
    private @Nullable Output<List<String>> boundVpcIds;

    /**
     * @return If set, defines a constraint on the EC2 instances
     * that can perform the login operation that they be associated with the VPC ID
     * that matches the value specified by this field. `auth_type` must be set to
     * `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
     * constraint.
     * 
     */
    public Optional<Output<List<String>>> boundVpcIds() {
        return Optional.ofNullable(this.boundVpcIds);
    }

    /**
     * IF set to `true`, only allows a
     * single token to be granted per instance ID. This can only be set when
     * `auth_type` is set to `ec2`.
     * 
     */
    @Import(name="disallowReauthentication")
    private @Nullable Output<Boolean> disallowReauthentication;

    /**
     * @return IF set to `true`, only allows a
     * single token to be granted per instance ID. This can only be set when
     * `auth_type` is set to `ec2`.
     * 
     */
    public Optional<Output<Boolean>> disallowReauthentication() {
        return Optional.ofNullable(this.disallowReauthentication);
    }

    /**
     * When `inferred_entity_type` is set, this
     * is the region to search for the inferred entities. Required if
     * `inferred_entity_type` is set. This only applies when `auth_type` is set to
     * `iam`.
     * 
     */
    @Import(name="inferredAwsRegion")
    private @Nullable Output<String> inferredAwsRegion;

    /**
     * @return When `inferred_entity_type` is set, this
     * is the region to search for the inferred entities. Required if
     * `inferred_entity_type` is set. This only applies when `auth_type` is set to
     * `iam`.
     * 
     */
    public Optional<Output<String>> inferredAwsRegion() {
        return Optional.ofNullable(this.inferredAwsRegion);
    }

    /**
     * If set, instructs Vault to turn on
     * inferencing. The only valid value is `ec2_instance`, which instructs Vault to
     * infer that the role comes from an EC2 instance in an IAM instance profile.
     * This only applies when `auth_type` is set to `iam`.
     * 
     */
    @Import(name="inferredEntityType")
    private @Nullable Output<String> inferredEntityType;

    /**
     * @return If set, instructs Vault to turn on
     * inferencing. The only valid value is `ec2_instance`, which instructs Vault to
     * infer that the role comes from an EC2 instance in an IAM instance profile.
     * This only applies when `auth_type` is set to `iam`.
     * 
     */
    public Optional<Output<String>> inferredEntityType() {
        return Optional.ofNullable(this.inferredEntityType);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Only valid when
     * `auth_type` is `iam`. If set to `true`, the `bound_iam_principal_arns` are
     * resolved to [AWS Unique
     * IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
     * for the bound principal ARN. This field is ignored when a
     * `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more
     * closely mimics the behavior of AWS services in that if an IAM user or role is
     * deleted and a new one is recreated with the same name, those new users or
     * roles won&#39;t get access to roles in Vault that were permissioned to the prior
     * principals of the same name. Defaults to `true`.
     * Once set to `true`, this cannot be changed to `false` without recreating the role.
     * 
     */
    @Import(name="resolveAwsUniqueIds")
    private @Nullable Output<Boolean> resolveAwsUniqueIds;

    /**
     * @return Only valid when
     * `auth_type` is `iam`. If set to `true`, the `bound_iam_principal_arns` are
     * resolved to [AWS Unique
     * IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
     * for the bound principal ARN. This field is ignored when a
     * `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more
     * closely mimics the behavior of AWS services in that if an IAM user or role is
     * deleted and a new one is recreated with the same name, those new users or
     * roles won&#39;t get access to roles in Vault that were permissioned to the prior
     * principals of the same name. Defaults to `true`.
     * Once set to `true`, this cannot be changed to `false` without recreating the role.
     * 
     */
    public Optional<Output<Boolean>> resolveAwsUniqueIds() {
        return Optional.ofNullable(this.resolveAwsUniqueIds);
    }

    /**
     * The name of the role.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The name of the role.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * If set, enable role tags for this role. The value set
     * for this field should be the key of the tag on the EC2 instance. `auth_type`
     * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
     * to use this constraint.
     * 
     */
    @Import(name="roleTag")
    private @Nullable Output<String> roleTag;

    /**
     * @return If set, enable role tags for this role. The value set
     * for this field should be the key of the tag on the EC2 instance. `auth_type`
     * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
     * to use this constraint.
     * 
     */
    public Optional<Output<String>> roleTag() {
        return Optional.ofNullable(this.roleTag);
    }

    /**
     * List of CIDR blocks; if set, specifies blocks of IP
     * addresses which can authenticate successfully, and ties the resulting token to these blocks
     * as well.
     * 
     */
    @Import(name="tokenBoundCidrs")
    private @Nullable Output<List<String>> tokenBoundCidrs;

    /**
     * @return List of CIDR blocks; if set, specifies blocks of IP
     * addresses which can authenticate successfully, and ties the resulting token to these blocks
     * as well.
     * 
     */
    public Optional<Output<List<String>>> tokenBoundCidrs() {
        return Optional.ofNullable(this.tokenBoundCidrs);
    }

    /**
     * If set, will encode an
     * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
     * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
     * `token_max_ttl` would otherwise allow a renewal.
     * 
     */
    @Import(name="tokenExplicitMaxTtl")
    private @Nullable Output<Integer> tokenExplicitMaxTtl;

    /**
     * @return If set, will encode an
     * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
     * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
     * `token_max_ttl` would otherwise allow a renewal.
     * 
     */
    public Optional<Output<Integer>> tokenExplicitMaxTtl() {
        return Optional.ofNullable(this.tokenExplicitMaxTtl);
    }

    /**
     * The maximum lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    @Import(name="tokenMaxTtl")
    private @Nullable Output<Integer> tokenMaxTtl;

    /**
     * @return The maximum lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    public Optional<Output<Integer>> tokenMaxTtl() {
        return Optional.ofNullable(this.tokenMaxTtl);
    }

    /**
     * If set, the default policy will not be set on
     * generated tokens; otherwise it will be added to the policies set in token_policies.
     * 
     */
    @Import(name="tokenNoDefaultPolicy")
    private @Nullable Output<Boolean> tokenNoDefaultPolicy;

    /**
     * @return If set, the default policy will not be set on
     * generated tokens; otherwise it will be added to the policies set in token_policies.
     * 
     */
    public Optional<Output<Boolean>> tokenNoDefaultPolicy() {
        return Optional.ofNullable(this.tokenNoDefaultPolicy);
    }

    /**
     * The [maximum number](https://www.vaultproject.io/api-docs/auth/aws#token_num_uses)
     * of times a generated token may be used (within its lifetime); 0 means unlimited.
     * 
     */
    @Import(name="tokenNumUses")
    private @Nullable Output<Integer> tokenNumUses;

    /**
     * @return The [maximum number](https://www.vaultproject.io/api-docs/auth/aws#token_num_uses)
     * of times a generated token may be used (within its lifetime); 0 means unlimited.
     * 
     */
    public Optional<Output<Integer>> tokenNumUses() {
        return Optional.ofNullable(this.tokenNumUses);
    }

    /**
     * If set, indicates that the
     * token generated using this role should never expire. The token should be renewed within the
     * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
     * value of this field. Specified in seconds.
     * 
     */
    @Import(name="tokenPeriod")
    private @Nullable Output<Integer> tokenPeriod;

    /**
     * @return If set, indicates that the
     * token generated using this role should never expire. The token should be renewed within the
     * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
     * value of this field. Specified in seconds.
     * 
     */
    public Optional<Output<Integer>> tokenPeriod() {
        return Optional.ofNullable(this.tokenPeriod);
    }

    /**
     * List of policies to encode onto generated tokens. Depending
     * on the auth method, this list may be supplemented by user/group/other values.
     * 
     */
    @Import(name="tokenPolicies")
    private @Nullable Output<List<String>> tokenPolicies;

    /**
     * @return List of policies to encode onto generated tokens. Depending
     * on the auth method, this list may be supplemented by user/group/other values.
     * 
     */
    public Optional<Output<List<String>>> tokenPolicies() {
        return Optional.ofNullable(this.tokenPolicies);
    }

    /**
     * The incremental lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<Integer> tokenTtl;

    /**
     * @return The incremental lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    public Optional<Output<Integer>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    /**
     * The type of token that should be generated. Can be `service`,
     * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
     * `service` tokens). For token store roles, there are two additional possibilities:
     * `default-service` and `default-batch` which specify the type to return unless the client
     * requests a different type at generation time.
     * 
     */
    @Import(name="tokenType")
    private @Nullable Output<String> tokenType;

    /**
     * @return The type of token that should be generated. Can be `service`,
     * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
     * `service` tokens). For token store roles, there are two additional possibilities:
     * `default-service` and `default-batch` which specify the type to return unless the client
     * requests a different type at generation time.
     * 
     */
    public Optional<Output<String>> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    private AuthBackendRoleArgs() {}

    private AuthBackendRoleArgs(AuthBackendRoleArgs $) {
        this.allowInstanceMigration = $.allowInstanceMigration;
        this.authType = $.authType;
        this.backend = $.backend;
        this.boundAccountIds = $.boundAccountIds;
        this.boundAmiIds = $.boundAmiIds;
        this.boundEc2InstanceIds = $.boundEc2InstanceIds;
        this.boundIamInstanceProfileArns = $.boundIamInstanceProfileArns;
        this.boundIamPrincipalArns = $.boundIamPrincipalArns;
        this.boundIamRoleArns = $.boundIamRoleArns;
        this.boundRegions = $.boundRegions;
        this.boundSubnetIds = $.boundSubnetIds;
        this.boundVpcIds = $.boundVpcIds;
        this.disallowReauthentication = $.disallowReauthentication;
        this.inferredAwsRegion = $.inferredAwsRegion;
        this.inferredEntityType = $.inferredEntityType;
        this.namespace = $.namespace;
        this.resolveAwsUniqueIds = $.resolveAwsUniqueIds;
        this.role = $.role;
        this.roleTag = $.roleTag;
        this.tokenBoundCidrs = $.tokenBoundCidrs;
        this.tokenExplicitMaxTtl = $.tokenExplicitMaxTtl;
        this.tokenMaxTtl = $.tokenMaxTtl;
        this.tokenNoDefaultPolicy = $.tokenNoDefaultPolicy;
        this.tokenNumUses = $.tokenNumUses;
        this.tokenPeriod = $.tokenPeriod;
        this.tokenPolicies = $.tokenPolicies;
        this.tokenTtl = $.tokenTtl;
        this.tokenType = $.tokenType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendRoleArgs $;

        public Builder() {
            $ = new AuthBackendRoleArgs();
        }

        public Builder(AuthBackendRoleArgs defaults) {
            $ = new AuthBackendRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowInstanceMigration If set to `true`, allows migration of
         * the underlying instance where the client resides.
         * 
         * @return builder
         * 
         */
        public Builder allowInstanceMigration(@Nullable Output<Boolean> allowInstanceMigration) {
            $.allowInstanceMigration = allowInstanceMigration;
            return this;
        }

        /**
         * @param allowInstanceMigration If set to `true`, allows migration of
         * the underlying instance where the client resides.
         * 
         * @return builder
         * 
         */
        public Builder allowInstanceMigration(Boolean allowInstanceMigration) {
            return allowInstanceMigration(Output.of(allowInstanceMigration));
        }

        /**
         * @param authType The auth type permitted for this role. Valid choices
         * are `ec2` and `iam`. Defaults to `iam`.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType The auth type permitted for this role. Valid choices
         * are `ec2` and `iam`. Defaults to `iam`.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param backend Path to the mounted aws auth backend.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Path to the mounted aws auth backend.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param boundAccountIds If set, defines a constraint on the EC2
         * instances that can perform the login operation that they should be using the
         * account ID specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundAccountIds(@Nullable Output<List<String>> boundAccountIds) {
            $.boundAccountIds = boundAccountIds;
            return this;
        }

        /**
         * @param boundAccountIds If set, defines a constraint on the EC2
         * instances that can perform the login operation that they should be using the
         * account ID specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundAccountIds(List<String> boundAccountIds) {
            return boundAccountIds(Output.of(boundAccountIds));
        }

        /**
         * @param boundAccountIds If set, defines a constraint on the EC2
         * instances that can perform the login operation that they should be using the
         * account ID specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundAccountIds(String... boundAccountIds) {
            return boundAccountIds(List.of(boundAccountIds));
        }

        /**
         * @param boundAmiIds If set, defines a constraint on the EC2 instances
         * that can perform the login operation that they should be using the AMI ID
         * specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundAmiIds(@Nullable Output<List<String>> boundAmiIds) {
            $.boundAmiIds = boundAmiIds;
            return this;
        }

        /**
         * @param boundAmiIds If set, defines a constraint on the EC2 instances
         * that can perform the login operation that they should be using the AMI ID
         * specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundAmiIds(List<String> boundAmiIds) {
            return boundAmiIds(Output.of(boundAmiIds));
        }

        /**
         * @param boundAmiIds If set, defines a constraint on the EC2 instances
         * that can perform the login operation that they should be using the AMI ID
         * specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundAmiIds(String... boundAmiIds) {
            return boundAmiIds(List.of(boundAmiIds));
        }

        /**
         * @param boundEc2InstanceIds Only EC2 instances that match this instance ID will be permitted to log in.
         * 
         * @return builder
         * 
         */
        public Builder boundEc2InstanceIds(@Nullable Output<List<String>> boundEc2InstanceIds) {
            $.boundEc2InstanceIds = boundEc2InstanceIds;
            return this;
        }

        /**
         * @param boundEc2InstanceIds Only EC2 instances that match this instance ID will be permitted to log in.
         * 
         * @return builder
         * 
         */
        public Builder boundEc2InstanceIds(List<String> boundEc2InstanceIds) {
            return boundEc2InstanceIds(Output.of(boundEc2InstanceIds));
        }

        /**
         * @param boundEc2InstanceIds Only EC2 instances that match this instance ID will be permitted to log in.
         * 
         * @return builder
         * 
         */
        public Builder boundEc2InstanceIds(String... boundEc2InstanceIds) {
            return boundEc2InstanceIds(List.of(boundEc2InstanceIds));
        }

        /**
         * @param boundIamInstanceProfileArns If set, defines a constraint on
         * the EC2 instances that can perform the login operation that they must be
         * associated with an IAM instance profile ARN which has a prefix that matches
         * the value specified by this field. The value is prefix-matched as though it
         * were a glob ending in `*`. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundIamInstanceProfileArns(@Nullable Output<List<String>> boundIamInstanceProfileArns) {
            $.boundIamInstanceProfileArns = boundIamInstanceProfileArns;
            return this;
        }

        /**
         * @param boundIamInstanceProfileArns If set, defines a constraint on
         * the EC2 instances that can perform the login operation that they must be
         * associated with an IAM instance profile ARN which has a prefix that matches
         * the value specified by this field. The value is prefix-matched as though it
         * were a glob ending in `*`. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundIamInstanceProfileArns(List<String> boundIamInstanceProfileArns) {
            return boundIamInstanceProfileArns(Output.of(boundIamInstanceProfileArns));
        }

        /**
         * @param boundIamInstanceProfileArns If set, defines a constraint on
         * the EC2 instances that can perform the login operation that they must be
         * associated with an IAM instance profile ARN which has a prefix that matches
         * the value specified by this field. The value is prefix-matched as though it
         * were a glob ending in `*`. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundIamInstanceProfileArns(String... boundIamInstanceProfileArns) {
            return boundIamInstanceProfileArns(List.of(boundIamInstanceProfileArns));
        }

        /**
         * @param boundIamPrincipalArns If set, defines the IAM principal that
         * must be authenticated when `auth_type` is set to `iam`. Wildcards are
         * supported at the end of the ARN.
         * 
         * @return builder
         * 
         */
        public Builder boundIamPrincipalArns(@Nullable Output<List<String>> boundIamPrincipalArns) {
            $.boundIamPrincipalArns = boundIamPrincipalArns;
            return this;
        }

        /**
         * @param boundIamPrincipalArns If set, defines the IAM principal that
         * must be authenticated when `auth_type` is set to `iam`. Wildcards are
         * supported at the end of the ARN.
         * 
         * @return builder
         * 
         */
        public Builder boundIamPrincipalArns(List<String> boundIamPrincipalArns) {
            return boundIamPrincipalArns(Output.of(boundIamPrincipalArns));
        }

        /**
         * @param boundIamPrincipalArns If set, defines the IAM principal that
         * must be authenticated when `auth_type` is set to `iam`. Wildcards are
         * supported at the end of the ARN.
         * 
         * @return builder
         * 
         */
        public Builder boundIamPrincipalArns(String... boundIamPrincipalArns) {
            return boundIamPrincipalArns(List.of(boundIamPrincipalArns));
        }

        /**
         * @param boundIamRoleArns If set, defines a constraint on the EC2
         * instances that can perform the login operation that they must match the IAM
         * role ARN specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundIamRoleArns(@Nullable Output<List<String>> boundIamRoleArns) {
            $.boundIamRoleArns = boundIamRoleArns;
            return this;
        }

        /**
         * @param boundIamRoleArns If set, defines a constraint on the EC2
         * instances that can perform the login operation that they must match the IAM
         * role ARN specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundIamRoleArns(List<String> boundIamRoleArns) {
            return boundIamRoleArns(Output.of(boundIamRoleArns));
        }

        /**
         * @param boundIamRoleArns If set, defines a constraint on the EC2
         * instances that can perform the login operation that they must match the IAM
         * role ARN specified by this field. `auth_type` must be set to `ec2` or
         * `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundIamRoleArns(String... boundIamRoleArns) {
            return boundIamRoleArns(List.of(boundIamRoleArns));
        }

        /**
         * @param boundRegions If set, defines a constraint on the EC2 instances
         * that can perform the login operation that the region in their identity
         * document must match the one specified by this field. `auth_type` must be set
         * to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
         * constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundRegions(@Nullable Output<List<String>> boundRegions) {
            $.boundRegions = boundRegions;
            return this;
        }

        /**
         * @param boundRegions If set, defines a constraint on the EC2 instances
         * that can perform the login operation that the region in their identity
         * document must match the one specified by this field. `auth_type` must be set
         * to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
         * constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundRegions(List<String> boundRegions) {
            return boundRegions(Output.of(boundRegions));
        }

        /**
         * @param boundRegions If set, defines a constraint on the EC2 instances
         * that can perform the login operation that the region in their identity
         * document must match the one specified by this field. `auth_type` must be set
         * to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
         * constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundRegions(String... boundRegions) {
            return boundRegions(List.of(boundRegions));
        }

        /**
         * @param boundSubnetIds If set, defines a constraint on the EC2
         * instances that can perform the login operation that they be associated with
         * the subnet ID that matches the value specified by this field. `auth_type`
         * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
         * to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundSubnetIds(@Nullable Output<List<String>> boundSubnetIds) {
            $.boundSubnetIds = boundSubnetIds;
            return this;
        }

        /**
         * @param boundSubnetIds If set, defines a constraint on the EC2
         * instances that can perform the login operation that they be associated with
         * the subnet ID that matches the value specified by this field. `auth_type`
         * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
         * to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundSubnetIds(List<String> boundSubnetIds) {
            return boundSubnetIds(Output.of(boundSubnetIds));
        }

        /**
         * @param boundSubnetIds If set, defines a constraint on the EC2
         * instances that can perform the login operation that they be associated with
         * the subnet ID that matches the value specified by this field. `auth_type`
         * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
         * to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundSubnetIds(String... boundSubnetIds) {
            return boundSubnetIds(List.of(boundSubnetIds));
        }

        /**
         * @param boundVpcIds If set, defines a constraint on the EC2 instances
         * that can perform the login operation that they be associated with the VPC ID
         * that matches the value specified by this field. `auth_type` must be set to
         * `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
         * constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundVpcIds(@Nullable Output<List<String>> boundVpcIds) {
            $.boundVpcIds = boundVpcIds;
            return this;
        }

        /**
         * @param boundVpcIds If set, defines a constraint on the EC2 instances
         * that can perform the login operation that they be associated with the VPC ID
         * that matches the value specified by this field. `auth_type` must be set to
         * `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
         * constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundVpcIds(List<String> boundVpcIds) {
            return boundVpcIds(Output.of(boundVpcIds));
        }

        /**
         * @param boundVpcIds If set, defines a constraint on the EC2 instances
         * that can perform the login operation that they be associated with the VPC ID
         * that matches the value specified by this field. `auth_type` must be set to
         * `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
         * constraint.
         * 
         * @return builder
         * 
         */
        public Builder boundVpcIds(String... boundVpcIds) {
            return boundVpcIds(List.of(boundVpcIds));
        }

        /**
         * @param disallowReauthentication IF set to `true`, only allows a
         * single token to be granted per instance ID. This can only be set when
         * `auth_type` is set to `ec2`.
         * 
         * @return builder
         * 
         */
        public Builder disallowReauthentication(@Nullable Output<Boolean> disallowReauthentication) {
            $.disallowReauthentication = disallowReauthentication;
            return this;
        }

        /**
         * @param disallowReauthentication IF set to `true`, only allows a
         * single token to be granted per instance ID. This can only be set when
         * `auth_type` is set to `ec2`.
         * 
         * @return builder
         * 
         */
        public Builder disallowReauthentication(Boolean disallowReauthentication) {
            return disallowReauthentication(Output.of(disallowReauthentication));
        }

        /**
         * @param inferredAwsRegion When `inferred_entity_type` is set, this
         * is the region to search for the inferred entities. Required if
         * `inferred_entity_type` is set. This only applies when `auth_type` is set to
         * `iam`.
         * 
         * @return builder
         * 
         */
        public Builder inferredAwsRegion(@Nullable Output<String> inferredAwsRegion) {
            $.inferredAwsRegion = inferredAwsRegion;
            return this;
        }

        /**
         * @param inferredAwsRegion When `inferred_entity_type` is set, this
         * is the region to search for the inferred entities. Required if
         * `inferred_entity_type` is set. This only applies when `auth_type` is set to
         * `iam`.
         * 
         * @return builder
         * 
         */
        public Builder inferredAwsRegion(String inferredAwsRegion) {
            return inferredAwsRegion(Output.of(inferredAwsRegion));
        }

        /**
         * @param inferredEntityType If set, instructs Vault to turn on
         * inferencing. The only valid value is `ec2_instance`, which instructs Vault to
         * infer that the role comes from an EC2 instance in an IAM instance profile.
         * This only applies when `auth_type` is set to `iam`.
         * 
         * @return builder
         * 
         */
        public Builder inferredEntityType(@Nullable Output<String> inferredEntityType) {
            $.inferredEntityType = inferredEntityType;
            return this;
        }

        /**
         * @param inferredEntityType If set, instructs Vault to turn on
         * inferencing. The only valid value is `ec2_instance`, which instructs Vault to
         * infer that the role comes from an EC2 instance in an IAM instance profile.
         * This only applies when `auth_type` is set to `iam`.
         * 
         * @return builder
         * 
         */
        public Builder inferredEntityType(String inferredEntityType) {
            return inferredEntityType(Output.of(inferredEntityType));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param resolveAwsUniqueIds Only valid when
         * `auth_type` is `iam`. If set to `true`, the `bound_iam_principal_arns` are
         * resolved to [AWS Unique
         * IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
         * for the bound principal ARN. This field is ignored when a
         * `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more
         * closely mimics the behavior of AWS services in that if an IAM user or role is
         * deleted and a new one is recreated with the same name, those new users or
         * roles won&#39;t get access to roles in Vault that were permissioned to the prior
         * principals of the same name. Defaults to `true`.
         * Once set to `true`, this cannot be changed to `false` without recreating the role.
         * 
         * @return builder
         * 
         */
        public Builder resolveAwsUniqueIds(@Nullable Output<Boolean> resolveAwsUniqueIds) {
            $.resolveAwsUniqueIds = resolveAwsUniqueIds;
            return this;
        }

        /**
         * @param resolveAwsUniqueIds Only valid when
         * `auth_type` is `iam`. If set to `true`, the `bound_iam_principal_arns` are
         * resolved to [AWS Unique
         * IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
         * for the bound principal ARN. This field is ignored when a
         * `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more
         * closely mimics the behavior of AWS services in that if an IAM user or role is
         * deleted and a new one is recreated with the same name, those new users or
         * roles won&#39;t get access to roles in Vault that were permissioned to the prior
         * principals of the same name. Defaults to `true`.
         * Once set to `true`, this cannot be changed to `false` without recreating the role.
         * 
         * @return builder
         * 
         */
        public Builder resolveAwsUniqueIds(Boolean resolveAwsUniqueIds) {
            return resolveAwsUniqueIds(Output.of(resolveAwsUniqueIds));
        }

        /**
         * @param role The name of the role.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The name of the role.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param roleTag If set, enable role tags for this role. The value set
         * for this field should be the key of the tag on the EC2 instance. `auth_type`
         * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
         * to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder roleTag(@Nullable Output<String> roleTag) {
            $.roleTag = roleTag;
            return this;
        }

        /**
         * @param roleTag If set, enable role tags for this role. The value set
         * for this field should be the key of the tag on the EC2 instance. `auth_type`
         * must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
         * to use this constraint.
         * 
         * @return builder
         * 
         */
        public Builder roleTag(String roleTag) {
            return roleTag(Output.of(roleTag));
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(@Nullable Output<List<String>> tokenBoundCidrs) {
            $.tokenBoundCidrs = tokenBoundCidrs;
            return this;
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(List<String> tokenBoundCidrs) {
            return tokenBoundCidrs(Output.of(tokenBoundCidrs));
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(String... tokenBoundCidrs) {
            return tokenBoundCidrs(List.of(tokenBoundCidrs));
        }

        /**
         * @param tokenExplicitMaxTtl If set, will encode an
         * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
         * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
         * `token_max_ttl` would otherwise allow a renewal.
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(@Nullable Output<Integer> tokenExplicitMaxTtl) {
            $.tokenExplicitMaxTtl = tokenExplicitMaxTtl;
            return this;
        }

        /**
         * @param tokenExplicitMaxTtl If set, will encode an
         * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
         * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
         * `token_max_ttl` would otherwise allow a renewal.
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(Integer tokenExplicitMaxTtl) {
            return tokenExplicitMaxTtl(Output.of(tokenExplicitMaxTtl));
        }

        /**
         * @param tokenMaxTtl The maximum lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(@Nullable Output<Integer> tokenMaxTtl) {
            $.tokenMaxTtl = tokenMaxTtl;
            return this;
        }

        /**
         * @param tokenMaxTtl The maximum lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(Integer tokenMaxTtl) {
            return tokenMaxTtl(Output.of(tokenMaxTtl));
        }

        /**
         * @param tokenNoDefaultPolicy If set, the default policy will not be set on
         * generated tokens; otherwise it will be added to the policies set in token_policies.
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(@Nullable Output<Boolean> tokenNoDefaultPolicy) {
            $.tokenNoDefaultPolicy = tokenNoDefaultPolicy;
            return this;
        }

        /**
         * @param tokenNoDefaultPolicy If set, the default policy will not be set on
         * generated tokens; otherwise it will be added to the policies set in token_policies.
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(Boolean tokenNoDefaultPolicy) {
            return tokenNoDefaultPolicy(Output.of(tokenNoDefaultPolicy));
        }

        /**
         * @param tokenNumUses The [maximum number](https://www.vaultproject.io/api-docs/auth/aws#token_num_uses)
         * of times a generated token may be used (within its lifetime); 0 means unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(@Nullable Output<Integer> tokenNumUses) {
            $.tokenNumUses = tokenNumUses;
            return this;
        }

        /**
         * @param tokenNumUses The [maximum number](https://www.vaultproject.io/api-docs/auth/aws#token_num_uses)
         * of times a generated token may be used (within its lifetime); 0 means unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(Integer tokenNumUses) {
            return tokenNumUses(Output.of(tokenNumUses));
        }

        /**
         * @param tokenPeriod If set, indicates that the
         * token generated using this role should never expire. The token should be renewed within the
         * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
         * value of this field. Specified in seconds.
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(@Nullable Output<Integer> tokenPeriod) {
            $.tokenPeriod = tokenPeriod;
            return this;
        }

        /**
         * @param tokenPeriod If set, indicates that the
         * token generated using this role should never expire. The token should be renewed within the
         * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
         * value of this field. Specified in seconds.
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(Integer tokenPeriod) {
            return tokenPeriod(Output.of(tokenPeriod));
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(@Nullable Output<List<String>> tokenPolicies) {
            $.tokenPolicies = tokenPolicies;
            return this;
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(List<String> tokenPolicies) {
            return tokenPolicies(Output.of(tokenPolicies));
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(String... tokenPolicies) {
            return tokenPolicies(List.of(tokenPolicies));
        }

        /**
         * @param tokenTtl The incremental lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<Integer> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl The incremental lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(Integer tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        /**
         * @param tokenType The type of token that should be generated. Can be `service`,
         * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
         * `service` tokens). For token store roles, there are two additional possibilities:
         * `default-service` and `default-batch` which specify the type to return unless the client
         * requests a different type at generation time.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(@Nullable Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType The type of token that should be generated. Can be `service`,
         * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
         * `service` tokens). For token store roles, there are two additional possibilities:
         * `default-service` and `default-batch` which specify the type to return unless the client
         * requests a different type at generation time.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        public AuthBackendRoleArgs build() {
            if ($.role == null) {
                throw new MissingRequiredPropertyException("AuthBackendRoleArgs", "role");
            }
            return $;
        }
    }

}
