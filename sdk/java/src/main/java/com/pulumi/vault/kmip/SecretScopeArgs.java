// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.kmip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretScopeArgs Empty = new SecretScopeArgs();

    /**
     * Boolean field to force deletion even if there are managed objects in the scope.
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Boolean field to force deletion even if there are managed objects in the scope.
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `kmip`.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `kmip`.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Name of the scope.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Name of the scope.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private SecretScopeArgs() {}

    private SecretScopeArgs(SecretScopeArgs $) {
        this.force = $.force;
        this.namespace = $.namespace;
        this.path = $.path;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretScopeArgs $;

        public Builder() {
            $ = new SecretScopeArgs();
        }

        public Builder(SecretScopeArgs defaults) {
            $ = new SecretScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param force Boolean field to force deletion even if there are managed objects in the scope.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Boolean field to force deletion even if there are managed objects in the scope.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `kmip`.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `kmip`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param scope Name of the scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Name of the scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public SecretScopeArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("SecretScopeArgs", "path");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("SecretScopeArgs", "scope");
            }
            return $;
        }
    }

}
