// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ssh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SecretBackendRoleAllowedUserKeyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendRoleAllowedUserKeyConfigArgs Empty = new SecretBackendRoleAllowedUserKeyConfigArgs();

    /**
     * List of allowed key lengths, vault-1.10 and above
     * 
     */
    @Import(name="lengths", required=true)
    private Output<List<Integer>> lengths;

    /**
     * @return List of allowed key lengths, vault-1.10 and above
     * 
     */
    public Output<List<Integer>> lengths() {
        return this.lengths;
    }

    /**
     * Key type, choices:
     * rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Key type, choices:
     * rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private SecretBackendRoleAllowedUserKeyConfigArgs() {}

    private SecretBackendRoleAllowedUserKeyConfigArgs(SecretBackendRoleAllowedUserKeyConfigArgs $) {
        this.lengths = $.lengths;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendRoleAllowedUserKeyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendRoleAllowedUserKeyConfigArgs $;

        public Builder() {
            $ = new SecretBackendRoleAllowedUserKeyConfigArgs();
        }

        public Builder(SecretBackendRoleAllowedUserKeyConfigArgs defaults) {
            $ = new SecretBackendRoleAllowedUserKeyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lengths List of allowed key lengths, vault-1.10 and above
         * 
         * @return builder
         * 
         */
        public Builder lengths(Output<List<Integer>> lengths) {
            $.lengths = lengths;
            return this;
        }

        /**
         * @param lengths List of allowed key lengths, vault-1.10 and above
         * 
         * @return builder
         * 
         */
        public Builder lengths(List<Integer> lengths) {
            return lengths(Output.of(lengths));
        }

        /**
         * @param lengths List of allowed key lengths, vault-1.10 and above
         * 
         * @return builder
         * 
         */
        public Builder lengths(Integer... lengths) {
            return lengths(List.of(lengths));
        }

        /**
         * @param type Key type, choices:
         * rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Key type, choices:
         * rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SecretBackendRoleAllowedUserKeyConfigArgs build() {
            if ($.lengths == null) {
                throw new MissingRequiredPropertyException("SecretBackendRoleAllowedUserKeyConfigArgs", "lengths");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SecretBackendRoleAllowedUserKeyConfigArgs", "type");
            }
            return $;
        }
    }

}
