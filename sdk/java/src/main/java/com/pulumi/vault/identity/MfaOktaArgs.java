// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MfaOktaArgs extends com.pulumi.resources.ResourceArgs {

    public static final MfaOktaArgs Empty = new MfaOktaArgs();

    /**
     * Okta API token.
     * 
     */
    @Import(name="apiToken", required=true)
    private Output<String> apiToken;

    /**
     * @return Okta API token.
     * 
     */
    public Output<String> apiToken() {
        return this.apiToken;
    }

    /**
     * The base domain to use for API requests.
     * 
     */
    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    /**
     * @return The base domain to use for API requests.
     * 
     */
    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    /**
     * Target namespace. (requires Enterprise)
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Target namespace. (requires Enterprise)
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Name of the organization to be used in the Okta API.
     * 
     */
    @Import(name="orgName", required=true)
    private Output<String> orgName;

    /**
     * @return Name of the organization to be used in the Okta API.
     * 
     */
    public Output<String> orgName() {
        return this.orgName;
    }

    /**
     * Only match the primary email for the account.
     * 
     */
    @Import(name="primaryEmail")
    private @Nullable Output<Boolean> primaryEmail;

    /**
     * @return Only match the primary email for the account.
     * 
     */
    public Optional<Output<Boolean>> primaryEmail() {
        return Optional.ofNullable(this.primaryEmail);
    }

    /**
     * A template string for mapping Identity names to MFA methods.
     * 
     */
    @Import(name="usernameFormat")
    private @Nullable Output<String> usernameFormat;

    /**
     * @return A template string for mapping Identity names to MFA methods.
     * 
     */
    public Optional<Output<String>> usernameFormat() {
        return Optional.ofNullable(this.usernameFormat);
    }

    private MfaOktaArgs() {}

    private MfaOktaArgs(MfaOktaArgs $) {
        this.apiToken = $.apiToken;
        this.baseUrl = $.baseUrl;
        this.namespace = $.namespace;
        this.orgName = $.orgName;
        this.primaryEmail = $.primaryEmail;
        this.usernameFormat = $.usernameFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MfaOktaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MfaOktaArgs $;

        public Builder() {
            $ = new MfaOktaArgs();
        }

        public Builder(MfaOktaArgs defaults) {
            $ = new MfaOktaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Okta API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Okta API token.
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param baseUrl The base domain to use for API requests.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl The base domain to use for API requests.
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param orgName Name of the organization to be used in the Okta API.
         * 
         * @return builder
         * 
         */
        public Builder orgName(Output<String> orgName) {
            $.orgName = orgName;
            return this;
        }

        /**
         * @param orgName Name of the organization to be used in the Okta API.
         * 
         * @return builder
         * 
         */
        public Builder orgName(String orgName) {
            return orgName(Output.of(orgName));
        }

        /**
         * @param primaryEmail Only match the primary email for the account.
         * 
         * @return builder
         * 
         */
        public Builder primaryEmail(@Nullable Output<Boolean> primaryEmail) {
            $.primaryEmail = primaryEmail;
            return this;
        }

        /**
         * @param primaryEmail Only match the primary email for the account.
         * 
         * @return builder
         * 
         */
        public Builder primaryEmail(Boolean primaryEmail) {
            return primaryEmail(Output.of(primaryEmail));
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(@Nullable Output<String> usernameFormat) {
            $.usernameFormat = usernameFormat;
            return this;
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(String usernameFormat) {
            return usernameFormat(Output.of(usernameFormat));
        }

        public MfaOktaArgs build() {
            if ($.apiToken == null) {
                throw new MissingRequiredPropertyException("MfaOktaArgs", "apiToken");
            }
            if ($.orgName == null) {
                throw new MissingRequiredPropertyException("MfaOktaArgs", "orgName");
            }
            return $;
        }
    }

}
