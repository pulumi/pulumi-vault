// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.transit.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSignResult {
    private @Nullable List<Map<String,String>> batchInputs;
    /**
     * @return The results returned from Vault if using `batch_input`
     * 
     */
    private List<Map<String,String>> batchResults;
    private @Nullable String context;
    private @Nullable String hashAlgorithm;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String input;
    private @Nullable Integer keyVersion;
    private @Nullable String marshalingAlgorithm;
    private String name;
    private @Nullable String namespace;
    private String path;
    private @Nullable Boolean prehashed;
    private @Nullable String reference;
    private @Nullable String saltLength;
    /**
     * @return The signature returned from Vault if using `input`
     * 
     */
    private String signature;
    private @Nullable String signatureAlgorithm;
    private @Nullable String signatureContext;

    private GetSignResult() {}
    public List<Map<String,String>> batchInputs() {
        return this.batchInputs == null ? List.of() : this.batchInputs;
    }
    /**
     * @return The results returned from Vault if using `batch_input`
     * 
     */
    public List<Map<String,String>> batchResults() {
        return this.batchResults;
    }
    public Optional<String> context() {
        return Optional.ofNullable(this.context);
    }
    public Optional<String> hashAlgorithm() {
        return Optional.ofNullable(this.hashAlgorithm);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> input() {
        return Optional.ofNullable(this.input);
    }
    public Optional<Integer> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }
    public Optional<String> marshalingAlgorithm() {
        return Optional.ofNullable(this.marshalingAlgorithm);
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    public String path() {
        return this.path;
    }
    public Optional<Boolean> prehashed() {
        return Optional.ofNullable(this.prehashed);
    }
    public Optional<String> reference() {
        return Optional.ofNullable(this.reference);
    }
    public Optional<String> saltLength() {
        return Optional.ofNullable(this.saltLength);
    }
    /**
     * @return The signature returned from Vault if using `input`
     * 
     */
    public String signature() {
        return this.signature;
    }
    public Optional<String> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }
    public Optional<String> signatureContext() {
        return Optional.ofNullable(this.signatureContext);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSignResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Map<String,String>> batchInputs;
        private List<Map<String,String>> batchResults;
        private @Nullable String context;
        private @Nullable String hashAlgorithm;
        private String id;
        private @Nullable String input;
        private @Nullable Integer keyVersion;
        private @Nullable String marshalingAlgorithm;
        private String name;
        private @Nullable String namespace;
        private String path;
        private @Nullable Boolean prehashed;
        private @Nullable String reference;
        private @Nullable String saltLength;
        private String signature;
        private @Nullable String signatureAlgorithm;
        private @Nullable String signatureContext;
        public Builder() {}
        public Builder(GetSignResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchInputs = defaults.batchInputs;
    	      this.batchResults = defaults.batchResults;
    	      this.context = defaults.context;
    	      this.hashAlgorithm = defaults.hashAlgorithm;
    	      this.id = defaults.id;
    	      this.input = defaults.input;
    	      this.keyVersion = defaults.keyVersion;
    	      this.marshalingAlgorithm = defaults.marshalingAlgorithm;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.path = defaults.path;
    	      this.prehashed = defaults.prehashed;
    	      this.reference = defaults.reference;
    	      this.saltLength = defaults.saltLength;
    	      this.signature = defaults.signature;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.signatureContext = defaults.signatureContext;
        }

        @CustomType.Setter
        public Builder batchInputs(@Nullable List<Map<String,String>> batchInputs) {

            this.batchInputs = batchInputs;
            return this;
        }
        @CustomType.Setter
        public Builder batchResults(List<Map<String,String>> batchResults) {
            if (batchResults == null) {
              throw new MissingRequiredPropertyException("GetSignResult", "batchResults");
            }
            this.batchResults = batchResults;
            return this;
        }
        @CustomType.Setter
        public Builder context(@Nullable String context) {

            this.context = context;
            return this;
        }
        @CustomType.Setter
        public Builder hashAlgorithm(@Nullable String hashAlgorithm) {

            this.hashAlgorithm = hashAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSignResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder input(@Nullable String input) {

            this.input = input;
            return this;
        }
        @CustomType.Setter
        public Builder keyVersion(@Nullable Integer keyVersion) {

            this.keyVersion = keyVersion;
            return this;
        }
        @CustomType.Setter
        public Builder marshalingAlgorithm(@Nullable String marshalingAlgorithm) {

            this.marshalingAlgorithm = marshalingAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSignResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetSignResult", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder prehashed(@Nullable Boolean prehashed) {

            this.prehashed = prehashed;
            return this;
        }
        @CustomType.Setter
        public Builder reference(@Nullable String reference) {

            this.reference = reference;
            return this;
        }
        @CustomType.Setter
        public Builder saltLength(@Nullable String saltLength) {

            this.saltLength = saltLength;
            return this;
        }
        @CustomType.Setter
        public Builder signature(String signature) {
            if (signature == null) {
              throw new MissingRequiredPropertyException("GetSignResult", "signature");
            }
            this.signature = signature;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(@Nullable String signatureAlgorithm) {

            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder signatureContext(@Nullable String signatureContext) {

            this.signatureContext = signatureContext;
            return this;
        }
        public GetSignResult build() {
            final var _resultValue = new GetSignResult();
            _resultValue.batchInputs = batchInputs;
            _resultValue.batchResults = batchResults;
            _resultValue.context = context;
            _resultValue.hashAlgorithm = hashAlgorithm;
            _resultValue.id = id;
            _resultValue.input = input;
            _resultValue.keyVersion = keyVersion;
            _resultValue.marshalingAlgorithm = marshalingAlgorithm;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.path = path;
            _resultValue.prehashed = prehashed;
            _resultValue.reference = reference;
            _resultValue.saltLength = saltLength;
            _resultValue.signature = signature;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.signatureContext = signatureContext;
            return _resultValue;
        }
    }
}
