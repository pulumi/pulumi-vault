// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.managed.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KeysAw {
    /**
     * @return The AWS access key to use.
     * 
     */
    private String accessKey;
    /**
     * @return If no existing key can be found in
     * the referenced backend, instructs Vault to generate a key within the backend.
     * 
     */
    private @Nullable Boolean allowGenerateKey;
    /**
     * @return Controls the ability for Vault to replace through
     * generation or importing a key into the configured backend even
     * if a key is present, if set to `false` those operations are forbidden
     * if a key exists.
     * 
     */
    private @Nullable Boolean allowReplaceKey;
    /**
     * @return Controls the ability for Vault to import a key to the
     * configured backend, if `false`, those operations will be forbidden.
     * 
     */
    private @Nullable Boolean allowStoreKey;
    /**
     * @return If `true`, allows usage from any mount point within the
     * namespace.
     * 
     */
    private @Nullable Boolean anyMount;
    /**
     * @return The curve to use for an ECDSA key. Used when `key_type`
     * is `ECDSA`. Required if `allow_generate_key` is `true`.
     * 
     */
    private @Nullable String curve;
    /**
     * @return Used to specify a custom AWS endpoint.
     * 
     */
    private @Nullable String endpoint;
    /**
     * @return The size in bits for an RSA key.
     * 
     */
    private String keyBits;
    /**
     * @return The type of key to use.
     * 
     */
    private String keyType;
    /**
     * @return An identifier for the key.
     * 
     */
    private String kmsKey;
    /**
     * @return A unique lowercase name that serves as identifying the key.
     * 
     */
    private String name;
    /**
     * @return The AWS region where the keys are stored (or will be stored).
     * 
     */
    private @Nullable String region;
    /**
     * @return The AWS access key to use.
     * 
     */
    private String secretKey;
    private @Nullable String uuid;

    private KeysAw() {}
    /**
     * @return The AWS access key to use.
     * 
     */
    public String accessKey() {
        return this.accessKey;
    }
    /**
     * @return If no existing key can be found in
     * the referenced backend, instructs Vault to generate a key within the backend.
     * 
     */
    public Optional<Boolean> allowGenerateKey() {
        return Optional.ofNullable(this.allowGenerateKey);
    }
    /**
     * @return Controls the ability for Vault to replace through
     * generation or importing a key into the configured backend even
     * if a key is present, if set to `false` those operations are forbidden
     * if a key exists.
     * 
     */
    public Optional<Boolean> allowReplaceKey() {
        return Optional.ofNullable(this.allowReplaceKey);
    }
    /**
     * @return Controls the ability for Vault to import a key to the
     * configured backend, if `false`, those operations will be forbidden.
     * 
     */
    public Optional<Boolean> allowStoreKey() {
        return Optional.ofNullable(this.allowStoreKey);
    }
    /**
     * @return If `true`, allows usage from any mount point within the
     * namespace.
     * 
     */
    public Optional<Boolean> anyMount() {
        return Optional.ofNullable(this.anyMount);
    }
    /**
     * @return The curve to use for an ECDSA key. Used when `key_type`
     * is `ECDSA`. Required if `allow_generate_key` is `true`.
     * 
     */
    public Optional<String> curve() {
        return Optional.ofNullable(this.curve);
    }
    /**
     * @return Used to specify a custom AWS endpoint.
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return The size in bits for an RSA key.
     * 
     */
    public String keyBits() {
        return this.keyBits;
    }
    /**
     * @return The type of key to use.
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    /**
     * @return An identifier for the key.
     * 
     */
    public String kmsKey() {
        return this.kmsKey;
    }
    /**
     * @return A unique lowercase name that serves as identifying the key.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The AWS region where the keys are stored (or will be stored).
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The AWS access key to use.
     * 
     */
    public String secretKey() {
        return this.secretKey;
    }
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeysAw defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKey;
        private @Nullable Boolean allowGenerateKey;
        private @Nullable Boolean allowReplaceKey;
        private @Nullable Boolean allowStoreKey;
        private @Nullable Boolean anyMount;
        private @Nullable String curve;
        private @Nullable String endpoint;
        private String keyBits;
        private String keyType;
        private String kmsKey;
        private String name;
        private @Nullable String region;
        private String secretKey;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(KeysAw defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.allowGenerateKey = defaults.allowGenerateKey;
    	      this.allowReplaceKey = defaults.allowReplaceKey;
    	      this.allowStoreKey = defaults.allowStoreKey;
    	      this.anyMount = defaults.anyMount;
    	      this.curve = defaults.curve;
    	      this.endpoint = defaults.endpoint;
    	      this.keyBits = defaults.keyBits;
    	      this.keyType = defaults.keyType;
    	      this.kmsKey = defaults.kmsKey;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.secretKey = defaults.secretKey;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            this.accessKey = Objects.requireNonNull(accessKey);
            return this;
        }
        @CustomType.Setter
        public Builder allowGenerateKey(@Nullable Boolean allowGenerateKey) {
            this.allowGenerateKey = allowGenerateKey;
            return this;
        }
        @CustomType.Setter
        public Builder allowReplaceKey(@Nullable Boolean allowReplaceKey) {
            this.allowReplaceKey = allowReplaceKey;
            return this;
        }
        @CustomType.Setter
        public Builder allowStoreKey(@Nullable Boolean allowStoreKey) {
            this.allowStoreKey = allowStoreKey;
            return this;
        }
        @CustomType.Setter
        public Builder anyMount(@Nullable Boolean anyMount) {
            this.anyMount = anyMount;
            return this;
        }
        @CustomType.Setter
        public Builder curve(@Nullable String curve) {
            this.curve = curve;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder keyBits(String keyBits) {
            this.keyBits = Objects.requireNonNull(keyBits);
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            this.keyType = Objects.requireNonNull(keyType);
            return this;
        }
        @CustomType.Setter
        public Builder kmsKey(String kmsKey) {
            this.kmsKey = Objects.requireNonNull(kmsKey);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            this.secretKey = Objects.requireNonNull(secretKey);
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {
            this.uuid = uuid;
            return this;
        }
        public KeysAw build() {
            final var o = new KeysAw();
            o.accessKey = accessKey;
            o.allowGenerateKey = allowGenerateKey;
            o.allowReplaceKey = allowReplaceKey;
            o.allowStoreKey = allowStoreKey;
            o.anyMount = anyMount;
            o.curve = curve;
            o.endpoint = endpoint;
            o.keyBits = keyBits;
            o.keyType = keyType;
            o.kmsKey = kmsKey;
            o.name = name;
            o.region = region;
            o.secretKey = secretKey;
            o.uuid = uuid;
            return o;
        }
    }
}
