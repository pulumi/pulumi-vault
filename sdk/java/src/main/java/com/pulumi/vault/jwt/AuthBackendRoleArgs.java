// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.jwt;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendRoleArgs Empty = new AuthBackendRoleArgs();

    /**
     * The list of allowed values for redirect_uri during OIDC logins.
     * Required for OIDC roles
     * 
     */
    @Import(name="allowedRedirectUris")
    private @Nullable Output<List<String>> allowedRedirectUris;

    /**
     * @return The list of allowed values for redirect_uri during OIDC logins.
     * Required for OIDC roles
     * 
     */
    public Optional<Output<List<String>>> allowedRedirectUris() {
        return Optional.ofNullable(this.allowedRedirectUris);
    }

    /**
     * The unique name of the auth backend to configure.
     * Defaults to `jwt`.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The unique name of the auth backend to configure.
     * Defaults to `jwt`.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * (For &#34;jwt&#34; roles, at least one of `bound_audiences`, `bound_subject`, `bound_claims`
     * or `token_bound_cidrs` is required. Optional for &#34;oidc&#34; roles.) List of `aud` claims to match against.
     * Any match is sufficient.
     * 
     */
    @Import(name="boundAudiences")
    private @Nullable Output<List<String>> boundAudiences;

    /**
     * @return (For &#34;jwt&#34; roles, at least one of `bound_audiences`, `bound_subject`, `bound_claims`
     * or `token_bound_cidrs` is required. Optional for &#34;oidc&#34; roles.) List of `aud` claims to match against.
     * Any match is sufficient.
     * 
     */
    public Optional<Output<List<String>>> boundAudiences() {
        return Optional.ofNullable(this.boundAudiences);
    }

    /**
     * If set, a map of claims to values to match against.
     * A claim&#39;s value must be a string, which may contain one value or multiple
     * comma-separated values, e.g. `&#34;red&#34;` or `&#34;red,green,blue&#34;`.
     * 
     */
    @Import(name="boundClaims")
    private @Nullable Output<Map<String,Object>> boundClaims;

    /**
     * @return If set, a map of claims to values to match against.
     * A claim&#39;s value must be a string, which may contain one value or multiple
     * comma-separated values, e.g. `&#34;red&#34;` or `&#34;red,green,blue&#34;`.
     * 
     */
    public Optional<Output<Map<String,Object>>> boundClaims() {
        return Optional.ofNullable(this.boundClaims);
    }

    /**
     * How to interpret values in the claims/values
     * map (`bound_claims`): can be either `string` (exact match) or `glob` (wildcard
     * match). Requires Vault 1.4.0 or above.
     * 
     */
    @Import(name="boundClaimsType")
    private @Nullable Output<String> boundClaimsType;

    /**
     * @return How to interpret values in the claims/values
     * map (`bound_claims`): can be either `string` (exact match) or `glob` (wildcard
     * match). Requires Vault 1.4.0 or above.
     * 
     */
    public Optional<Output<String>> boundClaimsType() {
        return Optional.ofNullable(this.boundClaimsType);
    }

    /**
     * If set, requires that the `sub` claim matches
     * this value.
     * 
     */
    @Import(name="boundSubject")
    private @Nullable Output<String> boundSubject;

    /**
     * @return If set, requires that the `sub` claim matches
     * this value.
     * 
     */
    public Optional<Output<String>> boundSubject() {
        return Optional.ofNullable(this.boundSubject);
    }

    /**
     * If set, a map of claims (keys) to be copied
     * to specified metadata fields (values).
     * 
     */
    @Import(name="claimMappings")
    private @Nullable Output<Map<String,Object>> claimMappings;

    /**
     * @return If set, a map of claims (keys) to be copied
     * to specified metadata fields (values).
     * 
     */
    public Optional<Output<Map<String,Object>>> claimMappings() {
        return Optional.ofNullable(this.claimMappings);
    }

    /**
     * The amount of leeway to add to all claims to account for clock skew, in
     * seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
     * Only applicable with &#34;jwt&#34; roles.
     * 
     */
    @Import(name="clockSkewLeeway")
    private @Nullable Output<Integer> clockSkewLeeway;

    /**
     * @return The amount of leeway to add to all claims to account for clock skew, in
     * seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
     * Only applicable with &#34;jwt&#34; roles.
     * 
     */
    public Optional<Output<Integer>> clockSkewLeeway() {
        return Optional.ofNullable(this.clockSkewLeeway);
    }

    /**
     * Disable bound claim value parsing. Useful when values contain commas.
     * 
     */
    @Import(name="disableBoundClaimsParsing")
    private @Nullable Output<Boolean> disableBoundClaimsParsing;

    /**
     * @return Disable bound claim value parsing. Useful when values contain commas.
     * 
     */
    public Optional<Output<Boolean>> disableBoundClaimsParsing() {
        return Optional.ofNullable(this.disableBoundClaimsParsing);
    }

    /**
     * The amount of leeway to add to expiration (`exp`) claims to account for
     * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
     * Only applicable with &#34;jwt&#34; roles.
     * 
     */
    @Import(name="expirationLeeway")
    private @Nullable Output<Integer> expirationLeeway;

    /**
     * @return The amount of leeway to add to expiration (`exp`) claims to account for
     * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
     * Only applicable with &#34;jwt&#34; roles.
     * 
     */
    public Optional<Output<Integer>> expirationLeeway() {
        return Optional.ofNullable(this.expirationLeeway);
    }

    /**
     * The claim to use to uniquely identify
     * the set of groups to which the user belongs; this will be used as the names
     * for the Identity group aliases created due to a successful login. The claim
     * value must be a list of strings.
     * 
     */
    @Import(name="groupsClaim")
    private @Nullable Output<String> groupsClaim;

    /**
     * @return The claim to use to uniquely identify
     * the set of groups to which the user belongs; this will be used as the names
     * for the Identity group aliases created due to a successful login. The claim
     * value must be a list of strings.
     * 
     */
    public Optional<Output<String>> groupsClaim() {
        return Optional.ofNullable(this.groupsClaim);
    }

    /**
     * Specifies the allowable elapsed time in seconds since the last time
     * the user was actively authenticated with the OIDC provider.
     * 
     */
    @Import(name="maxAge")
    private @Nullable Output<Integer> maxAge;

    /**
     * @return Specifies the allowable elapsed time in seconds since the last time
     * the user was actively authenticated with the OIDC provider.
     * 
     */
    public Optional<Output<Integer>> maxAge() {
        return Optional.ofNullable(this.maxAge);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The amount of leeway to add to not before (`nbf`) claims to account for
     * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
     * Only applicable with &#34;jwt&#34; roles.
     * 
     */
    @Import(name="notBeforeLeeway")
    private @Nullable Output<Integer> notBeforeLeeway;

    /**
     * @return The amount of leeway to add to not before (`nbf`) claims to account for
     * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
     * Only applicable with &#34;jwt&#34; roles.
     * 
     */
    public Optional<Output<Integer>> notBeforeLeeway() {
        return Optional.ofNullable(this.notBeforeLeeway);
    }

    /**
     * If set, a list of OIDC scopes to be used with an OIDC role.
     * The standard scope &#34;openid&#34; is automatically included and need not be specified.
     * 
     */
    @Import(name="oidcScopes")
    private @Nullable Output<List<String>> oidcScopes;

    /**
     * @return If set, a list of OIDC scopes to be used with an OIDC role.
     * The standard scope &#34;openid&#34; is automatically included and need not be specified.
     * 
     */
    public Optional<Output<List<String>>> oidcScopes() {
        return Optional.ofNullable(this.oidcScopes);
    }

    /**
     * The name of the role.
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return The name of the role.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    /**
     * Type of role, either &#34;oidc&#34; (default) or &#34;jwt&#34;.
     * 
     */
    @Import(name="roleType")
    private @Nullable Output<String> roleType;

    /**
     * @return Type of role, either &#34;oidc&#34; (default) or &#34;jwt&#34;.
     * 
     */
    public Optional<Output<String>> roleType() {
        return Optional.ofNullable(this.roleType);
    }

    /**
     * List of CIDR blocks; if set, specifies blocks of IP
     * addresses which can authenticate successfully, and ties the resulting token to these blocks
     * as well.
     * 
     */
    @Import(name="tokenBoundCidrs")
    private @Nullable Output<List<String>> tokenBoundCidrs;

    /**
     * @return List of CIDR blocks; if set, specifies blocks of IP
     * addresses which can authenticate successfully, and ties the resulting token to these blocks
     * as well.
     * 
     */
    public Optional<Output<List<String>>> tokenBoundCidrs() {
        return Optional.ofNullable(this.tokenBoundCidrs);
    }

    /**
     * If set, will encode an
     * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
     * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
     * `token_max_ttl` would otherwise allow a renewal.
     * 
     */
    @Import(name="tokenExplicitMaxTtl")
    private @Nullable Output<Integer> tokenExplicitMaxTtl;

    /**
     * @return If set, will encode an
     * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
     * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
     * `token_max_ttl` would otherwise allow a renewal.
     * 
     */
    public Optional<Output<Integer>> tokenExplicitMaxTtl() {
        return Optional.ofNullable(this.tokenExplicitMaxTtl);
    }

    /**
     * The maximum lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    @Import(name="tokenMaxTtl")
    private @Nullable Output<Integer> tokenMaxTtl;

    /**
     * @return The maximum lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    public Optional<Output<Integer>> tokenMaxTtl() {
        return Optional.ofNullable(this.tokenMaxTtl);
    }

    /**
     * If set, the default policy will not be set on
     * generated tokens; otherwise it will be added to the policies set in token_policies.
     * 
     */
    @Import(name="tokenNoDefaultPolicy")
    private @Nullable Output<Boolean> tokenNoDefaultPolicy;

    /**
     * @return If set, the default policy will not be set on
     * generated tokens; otherwise it will be added to the policies set in token_policies.
     * 
     */
    public Optional<Output<Boolean>> tokenNoDefaultPolicy() {
        return Optional.ofNullable(this.tokenNoDefaultPolicy);
    }

    /**
     * The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
     * of times a generated token may be used (within its lifetime); 0 means unlimited.
     * 
     */
    @Import(name="tokenNumUses")
    private @Nullable Output<Integer> tokenNumUses;

    /**
     * @return The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
     * of times a generated token may be used (within its lifetime); 0 means unlimited.
     * 
     */
    public Optional<Output<Integer>> tokenNumUses() {
        return Optional.ofNullable(this.tokenNumUses);
    }

    /**
     * If set, indicates that the
     * token generated using this role should never expire. The token should be renewed within the
     * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
     * value of this field. Specified in seconds.
     * 
     */
    @Import(name="tokenPeriod")
    private @Nullable Output<Integer> tokenPeriod;

    /**
     * @return If set, indicates that the
     * token generated using this role should never expire. The token should be renewed within the
     * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
     * value of this field. Specified in seconds.
     * 
     */
    public Optional<Output<Integer>> tokenPeriod() {
        return Optional.ofNullable(this.tokenPeriod);
    }

    /**
     * List of policies to encode onto generated tokens. Depending
     * on the auth method, this list may be supplemented by user/group/other values.
     * 
     */
    @Import(name="tokenPolicies")
    private @Nullable Output<List<String>> tokenPolicies;

    /**
     * @return List of policies to encode onto generated tokens. Depending
     * on the auth method, this list may be supplemented by user/group/other values.
     * 
     */
    public Optional<Output<List<String>>> tokenPolicies() {
        return Optional.ofNullable(this.tokenPolicies);
    }

    /**
     * The incremental lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<Integer> tokenTtl;

    /**
     * @return The incremental lifetime for generated tokens in number of seconds.
     * Its current value will be referenced at renewal time.
     * 
     */
    public Optional<Output<Integer>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    /**
     * The type of token that should be generated. Can be `service`,
     * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
     * `service` tokens). For token store roles, there are two additional possibilities:
     * `default-service` and `default-batch` which specify the type to return unless the client
     * requests a different type at generation time.
     * 
     */
    @Import(name="tokenType")
    private @Nullable Output<String> tokenType;

    /**
     * @return The type of token that should be generated. Can be `service`,
     * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
     * `service` tokens). For token store roles, there are two additional possibilities:
     * `default-service` and `default-batch` which specify the type to return unless the client
     * requests a different type at generation time.
     * 
     */
    public Optional<Output<String>> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    /**
     * The claim to use to uniquely identify
     * the user; this will be used as the name for the Identity entity alias created
     * due to a successful login.
     * 
     */
    @Import(name="userClaim", required=true)
    private Output<String> userClaim;

    /**
     * @return The claim to use to uniquely identify
     * the user; this will be used as the name for the Identity entity alias created
     * due to a successful login.
     * 
     */
    public Output<String> userClaim() {
        return this.userClaim;
    }

    /**
     * Specifies if the `user_claim` value uses
     * [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
     * syntax for referencing claims. By default, the `user_claim` value will not use JSON pointer.
     * Requires Vault 1.11+.
     * 
     */
    @Import(name="userClaimJsonPointer")
    private @Nullable Output<Boolean> userClaimJsonPointer;

    /**
     * @return Specifies if the `user_claim` value uses
     * [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
     * syntax for referencing claims. By default, the `user_claim` value will not use JSON pointer.
     * Requires Vault 1.11+.
     * 
     */
    public Optional<Output<Boolean>> userClaimJsonPointer() {
        return Optional.ofNullable(this.userClaimJsonPointer);
    }

    /**
     * Log received OIDC tokens and claims when debug-level
     * logging is active. Not recommended in production since sensitive information may be present
     * in OIDC responses.
     * 
     */
    @Import(name="verboseOidcLogging")
    private @Nullable Output<Boolean> verboseOidcLogging;

    /**
     * @return Log received OIDC tokens and claims when debug-level
     * logging is active. Not recommended in production since sensitive information may be present
     * in OIDC responses.
     * 
     */
    public Optional<Output<Boolean>> verboseOidcLogging() {
        return Optional.ofNullable(this.verboseOidcLogging);
    }

    private AuthBackendRoleArgs() {}

    private AuthBackendRoleArgs(AuthBackendRoleArgs $) {
        this.allowedRedirectUris = $.allowedRedirectUris;
        this.backend = $.backend;
        this.boundAudiences = $.boundAudiences;
        this.boundClaims = $.boundClaims;
        this.boundClaimsType = $.boundClaimsType;
        this.boundSubject = $.boundSubject;
        this.claimMappings = $.claimMappings;
        this.clockSkewLeeway = $.clockSkewLeeway;
        this.disableBoundClaimsParsing = $.disableBoundClaimsParsing;
        this.expirationLeeway = $.expirationLeeway;
        this.groupsClaim = $.groupsClaim;
        this.maxAge = $.maxAge;
        this.namespace = $.namespace;
        this.notBeforeLeeway = $.notBeforeLeeway;
        this.oidcScopes = $.oidcScopes;
        this.roleName = $.roleName;
        this.roleType = $.roleType;
        this.tokenBoundCidrs = $.tokenBoundCidrs;
        this.tokenExplicitMaxTtl = $.tokenExplicitMaxTtl;
        this.tokenMaxTtl = $.tokenMaxTtl;
        this.tokenNoDefaultPolicy = $.tokenNoDefaultPolicy;
        this.tokenNumUses = $.tokenNumUses;
        this.tokenPeriod = $.tokenPeriod;
        this.tokenPolicies = $.tokenPolicies;
        this.tokenTtl = $.tokenTtl;
        this.tokenType = $.tokenType;
        this.userClaim = $.userClaim;
        this.userClaimJsonPointer = $.userClaimJsonPointer;
        this.verboseOidcLogging = $.verboseOidcLogging;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendRoleArgs $;

        public Builder() {
            $ = new AuthBackendRoleArgs();
        }

        public Builder(AuthBackendRoleArgs defaults) {
            $ = new AuthBackendRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedRedirectUris The list of allowed values for redirect_uri during OIDC logins.
         * Required for OIDC roles
         * 
         * @return builder
         * 
         */
        public Builder allowedRedirectUris(@Nullable Output<List<String>> allowedRedirectUris) {
            $.allowedRedirectUris = allowedRedirectUris;
            return this;
        }

        /**
         * @param allowedRedirectUris The list of allowed values for redirect_uri during OIDC logins.
         * Required for OIDC roles
         * 
         * @return builder
         * 
         */
        public Builder allowedRedirectUris(List<String> allowedRedirectUris) {
            return allowedRedirectUris(Output.of(allowedRedirectUris));
        }

        /**
         * @param allowedRedirectUris The list of allowed values for redirect_uri during OIDC logins.
         * Required for OIDC roles
         * 
         * @return builder
         * 
         */
        public Builder allowedRedirectUris(String... allowedRedirectUris) {
            return allowedRedirectUris(List.of(allowedRedirectUris));
        }

        /**
         * @param backend The unique name of the auth backend to configure.
         * Defaults to `jwt`.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The unique name of the auth backend to configure.
         * Defaults to `jwt`.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param boundAudiences (For &#34;jwt&#34; roles, at least one of `bound_audiences`, `bound_subject`, `bound_claims`
         * or `token_bound_cidrs` is required. Optional for &#34;oidc&#34; roles.) List of `aud` claims to match against.
         * Any match is sufficient.
         * 
         * @return builder
         * 
         */
        public Builder boundAudiences(@Nullable Output<List<String>> boundAudiences) {
            $.boundAudiences = boundAudiences;
            return this;
        }

        /**
         * @param boundAudiences (For &#34;jwt&#34; roles, at least one of `bound_audiences`, `bound_subject`, `bound_claims`
         * or `token_bound_cidrs` is required. Optional for &#34;oidc&#34; roles.) List of `aud` claims to match against.
         * Any match is sufficient.
         * 
         * @return builder
         * 
         */
        public Builder boundAudiences(List<String> boundAudiences) {
            return boundAudiences(Output.of(boundAudiences));
        }

        /**
         * @param boundAudiences (For &#34;jwt&#34; roles, at least one of `bound_audiences`, `bound_subject`, `bound_claims`
         * or `token_bound_cidrs` is required. Optional for &#34;oidc&#34; roles.) List of `aud` claims to match against.
         * Any match is sufficient.
         * 
         * @return builder
         * 
         */
        public Builder boundAudiences(String... boundAudiences) {
            return boundAudiences(List.of(boundAudiences));
        }

        /**
         * @param boundClaims If set, a map of claims to values to match against.
         * A claim&#39;s value must be a string, which may contain one value or multiple
         * comma-separated values, e.g. `&#34;red&#34;` or `&#34;red,green,blue&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder boundClaims(@Nullable Output<Map<String,Object>> boundClaims) {
            $.boundClaims = boundClaims;
            return this;
        }

        /**
         * @param boundClaims If set, a map of claims to values to match against.
         * A claim&#39;s value must be a string, which may contain one value or multiple
         * comma-separated values, e.g. `&#34;red&#34;` or `&#34;red,green,blue&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder boundClaims(Map<String,Object> boundClaims) {
            return boundClaims(Output.of(boundClaims));
        }

        /**
         * @param boundClaimsType How to interpret values in the claims/values
         * map (`bound_claims`): can be either `string` (exact match) or `glob` (wildcard
         * match). Requires Vault 1.4.0 or above.
         * 
         * @return builder
         * 
         */
        public Builder boundClaimsType(@Nullable Output<String> boundClaimsType) {
            $.boundClaimsType = boundClaimsType;
            return this;
        }

        /**
         * @param boundClaimsType How to interpret values in the claims/values
         * map (`bound_claims`): can be either `string` (exact match) or `glob` (wildcard
         * match). Requires Vault 1.4.0 or above.
         * 
         * @return builder
         * 
         */
        public Builder boundClaimsType(String boundClaimsType) {
            return boundClaimsType(Output.of(boundClaimsType));
        }

        /**
         * @param boundSubject If set, requires that the `sub` claim matches
         * this value.
         * 
         * @return builder
         * 
         */
        public Builder boundSubject(@Nullable Output<String> boundSubject) {
            $.boundSubject = boundSubject;
            return this;
        }

        /**
         * @param boundSubject If set, requires that the `sub` claim matches
         * this value.
         * 
         * @return builder
         * 
         */
        public Builder boundSubject(String boundSubject) {
            return boundSubject(Output.of(boundSubject));
        }

        /**
         * @param claimMappings If set, a map of claims (keys) to be copied
         * to specified metadata fields (values).
         * 
         * @return builder
         * 
         */
        public Builder claimMappings(@Nullable Output<Map<String,Object>> claimMappings) {
            $.claimMappings = claimMappings;
            return this;
        }

        /**
         * @param claimMappings If set, a map of claims (keys) to be copied
         * to specified metadata fields (values).
         * 
         * @return builder
         * 
         */
        public Builder claimMappings(Map<String,Object> claimMappings) {
            return claimMappings(Output.of(claimMappings));
        }

        /**
         * @param clockSkewLeeway The amount of leeway to add to all claims to account for clock skew, in
         * seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
         * Only applicable with &#34;jwt&#34; roles.
         * 
         * @return builder
         * 
         */
        public Builder clockSkewLeeway(@Nullable Output<Integer> clockSkewLeeway) {
            $.clockSkewLeeway = clockSkewLeeway;
            return this;
        }

        /**
         * @param clockSkewLeeway The amount of leeway to add to all claims to account for clock skew, in
         * seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
         * Only applicable with &#34;jwt&#34; roles.
         * 
         * @return builder
         * 
         */
        public Builder clockSkewLeeway(Integer clockSkewLeeway) {
            return clockSkewLeeway(Output.of(clockSkewLeeway));
        }

        /**
         * @param disableBoundClaimsParsing Disable bound claim value parsing. Useful when values contain commas.
         * 
         * @return builder
         * 
         */
        public Builder disableBoundClaimsParsing(@Nullable Output<Boolean> disableBoundClaimsParsing) {
            $.disableBoundClaimsParsing = disableBoundClaimsParsing;
            return this;
        }

        /**
         * @param disableBoundClaimsParsing Disable bound claim value parsing. Useful when values contain commas.
         * 
         * @return builder
         * 
         */
        public Builder disableBoundClaimsParsing(Boolean disableBoundClaimsParsing) {
            return disableBoundClaimsParsing(Output.of(disableBoundClaimsParsing));
        }

        /**
         * @param expirationLeeway The amount of leeway to add to expiration (`exp`) claims to account for
         * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
         * Only applicable with &#34;jwt&#34; roles.
         * 
         * @return builder
         * 
         */
        public Builder expirationLeeway(@Nullable Output<Integer> expirationLeeway) {
            $.expirationLeeway = expirationLeeway;
            return this;
        }

        /**
         * @param expirationLeeway The amount of leeway to add to expiration (`exp`) claims to account for
         * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
         * Only applicable with &#34;jwt&#34; roles.
         * 
         * @return builder
         * 
         */
        public Builder expirationLeeway(Integer expirationLeeway) {
            return expirationLeeway(Output.of(expirationLeeway));
        }

        /**
         * @param groupsClaim The claim to use to uniquely identify
         * the set of groups to which the user belongs; this will be used as the names
         * for the Identity group aliases created due to a successful login. The claim
         * value must be a list of strings.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(@Nullable Output<String> groupsClaim) {
            $.groupsClaim = groupsClaim;
            return this;
        }

        /**
         * @param groupsClaim The claim to use to uniquely identify
         * the set of groups to which the user belongs; this will be used as the names
         * for the Identity group aliases created due to a successful login. The claim
         * value must be a list of strings.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(String groupsClaim) {
            return groupsClaim(Output.of(groupsClaim));
        }

        /**
         * @param maxAge Specifies the allowable elapsed time in seconds since the last time
         * the user was actively authenticated with the OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(@Nullable Output<Integer> maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        /**
         * @param maxAge Specifies the allowable elapsed time in seconds since the last time
         * the user was actively authenticated with the OIDC provider.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(Integer maxAge) {
            return maxAge(Output.of(maxAge));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param notBeforeLeeway The amount of leeway to add to not before (`nbf`) claims to account for
         * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
         * Only applicable with &#34;jwt&#34; roles.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeLeeway(@Nullable Output<Integer> notBeforeLeeway) {
            $.notBeforeLeeway = notBeforeLeeway;
            return this;
        }

        /**
         * @param notBeforeLeeway The amount of leeway to add to not before (`nbf`) claims to account for
         * clock skew, in seconds. Defaults to `60` seconds if set to `0` and can be disabled if set to `-1`.
         * Only applicable with &#34;jwt&#34; roles.
         * 
         * @return builder
         * 
         */
        public Builder notBeforeLeeway(Integer notBeforeLeeway) {
            return notBeforeLeeway(Output.of(notBeforeLeeway));
        }

        /**
         * @param oidcScopes If set, a list of OIDC scopes to be used with an OIDC role.
         * The standard scope &#34;openid&#34; is automatically included and need not be specified.
         * 
         * @return builder
         * 
         */
        public Builder oidcScopes(@Nullable Output<List<String>> oidcScopes) {
            $.oidcScopes = oidcScopes;
            return this;
        }

        /**
         * @param oidcScopes If set, a list of OIDC scopes to be used with an OIDC role.
         * The standard scope &#34;openid&#34; is automatically included and need not be specified.
         * 
         * @return builder
         * 
         */
        public Builder oidcScopes(List<String> oidcScopes) {
            return oidcScopes(Output.of(oidcScopes));
        }

        /**
         * @param oidcScopes If set, a list of OIDC scopes to be used with an OIDC role.
         * The standard scope &#34;openid&#34; is automatically included and need not be specified.
         * 
         * @return builder
         * 
         */
        public Builder oidcScopes(String... oidcScopes) {
            return oidcScopes(List.of(oidcScopes));
        }

        /**
         * @param roleName The name of the role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The name of the role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param roleType Type of role, either &#34;oidc&#34; (default) or &#34;jwt&#34;.
         * 
         * @return builder
         * 
         */
        public Builder roleType(@Nullable Output<String> roleType) {
            $.roleType = roleType;
            return this;
        }

        /**
         * @param roleType Type of role, either &#34;oidc&#34; (default) or &#34;jwt&#34;.
         * 
         * @return builder
         * 
         */
        public Builder roleType(String roleType) {
            return roleType(Output.of(roleType));
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(@Nullable Output<List<String>> tokenBoundCidrs) {
            $.tokenBoundCidrs = tokenBoundCidrs;
            return this;
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(List<String> tokenBoundCidrs) {
            return tokenBoundCidrs(Output.of(tokenBoundCidrs));
        }

        /**
         * @param tokenBoundCidrs List of CIDR blocks; if set, specifies blocks of IP
         * addresses which can authenticate successfully, and ties the resulting token to these blocks
         * as well.
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(String... tokenBoundCidrs) {
            return tokenBoundCidrs(List.of(tokenBoundCidrs));
        }

        /**
         * @param tokenExplicitMaxTtl If set, will encode an
         * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
         * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
         * `token_max_ttl` would otherwise allow a renewal.
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(@Nullable Output<Integer> tokenExplicitMaxTtl) {
            $.tokenExplicitMaxTtl = tokenExplicitMaxTtl;
            return this;
        }

        /**
         * @param tokenExplicitMaxTtl If set, will encode an
         * [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
         * onto the token in number of seconds. This is a hard cap even if `token_ttl` and
         * `token_max_ttl` would otherwise allow a renewal.
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(Integer tokenExplicitMaxTtl) {
            return tokenExplicitMaxTtl(Output.of(tokenExplicitMaxTtl));
        }

        /**
         * @param tokenMaxTtl The maximum lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(@Nullable Output<Integer> tokenMaxTtl) {
            $.tokenMaxTtl = tokenMaxTtl;
            return this;
        }

        /**
         * @param tokenMaxTtl The maximum lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(Integer tokenMaxTtl) {
            return tokenMaxTtl(Output.of(tokenMaxTtl));
        }

        /**
         * @param tokenNoDefaultPolicy If set, the default policy will not be set on
         * generated tokens; otherwise it will be added to the policies set in token_policies.
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(@Nullable Output<Boolean> tokenNoDefaultPolicy) {
            $.tokenNoDefaultPolicy = tokenNoDefaultPolicy;
            return this;
        }

        /**
         * @param tokenNoDefaultPolicy If set, the default policy will not be set on
         * generated tokens; otherwise it will be added to the policies set in token_policies.
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(Boolean tokenNoDefaultPolicy) {
            return tokenNoDefaultPolicy(Output.of(tokenNoDefaultPolicy));
        }

        /**
         * @param tokenNumUses The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
         * of times a generated token may be used (within its lifetime); 0 means unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(@Nullable Output<Integer> tokenNumUses) {
            $.tokenNumUses = tokenNumUses;
            return this;
        }

        /**
         * @param tokenNumUses The [maximum number](https://www.vaultproject.io/api-docs/jwt#token_num_uses)
         * of times a generated token may be used (within its lifetime); 0 means unlimited.
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(Integer tokenNumUses) {
            return tokenNumUses(Output.of(tokenNumUses));
        }

        /**
         * @param tokenPeriod If set, indicates that the
         * token generated using this role should never expire. The token should be renewed within the
         * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
         * value of this field. Specified in seconds.
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(@Nullable Output<Integer> tokenPeriod) {
            $.tokenPeriod = tokenPeriod;
            return this;
        }

        /**
         * @param tokenPeriod If set, indicates that the
         * token generated using this role should never expire. The token should be renewed within the
         * duration specified by this value. At each renewal, the token&#39;s TTL will be set to the
         * value of this field. Specified in seconds.
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(Integer tokenPeriod) {
            return tokenPeriod(Output.of(tokenPeriod));
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(@Nullable Output<List<String>> tokenPolicies) {
            $.tokenPolicies = tokenPolicies;
            return this;
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(List<String> tokenPolicies) {
            return tokenPolicies(Output.of(tokenPolicies));
        }

        /**
         * @param tokenPolicies List of policies to encode onto generated tokens. Depending
         * on the auth method, this list may be supplemented by user/group/other values.
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(String... tokenPolicies) {
            return tokenPolicies(List.of(tokenPolicies));
        }

        /**
         * @param tokenTtl The incremental lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<Integer> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl The incremental lifetime for generated tokens in number of seconds.
         * Its current value will be referenced at renewal time.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(Integer tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        /**
         * @param tokenType The type of token that should be generated. Can be `service`,
         * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
         * `service` tokens). For token store roles, there are two additional possibilities:
         * `default-service` and `default-batch` which specify the type to return unless the client
         * requests a different type at generation time.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(@Nullable Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType The type of token that should be generated. Can be `service`,
         * `batch`, or `default` to use the mount&#39;s tuned default (which unless changed will be
         * `service` tokens). For token store roles, there are two additional possibilities:
         * `default-service` and `default-batch` which specify the type to return unless the client
         * requests a different type at generation time.
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        /**
         * @param userClaim The claim to use to uniquely identify
         * the user; this will be used as the name for the Identity entity alias created
         * due to a successful login.
         * 
         * @return builder
         * 
         */
        public Builder userClaim(Output<String> userClaim) {
            $.userClaim = userClaim;
            return this;
        }

        /**
         * @param userClaim The claim to use to uniquely identify
         * the user; this will be used as the name for the Identity entity alias created
         * due to a successful login.
         * 
         * @return builder
         * 
         */
        public Builder userClaim(String userClaim) {
            return userClaim(Output.of(userClaim));
        }

        /**
         * @param userClaimJsonPointer Specifies if the `user_claim` value uses
         * [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
         * syntax for referencing claims. By default, the `user_claim` value will not use JSON pointer.
         * Requires Vault 1.11+.
         * 
         * @return builder
         * 
         */
        public Builder userClaimJsonPointer(@Nullable Output<Boolean> userClaimJsonPointer) {
            $.userClaimJsonPointer = userClaimJsonPointer;
            return this;
        }

        /**
         * @param userClaimJsonPointer Specifies if the `user_claim` value uses
         * [JSON pointer](https://www.vaultproject.io/docs/auth/jwt#claim-specifications-and-json-pointer)
         * syntax for referencing claims. By default, the `user_claim` value will not use JSON pointer.
         * Requires Vault 1.11+.
         * 
         * @return builder
         * 
         */
        public Builder userClaimJsonPointer(Boolean userClaimJsonPointer) {
            return userClaimJsonPointer(Output.of(userClaimJsonPointer));
        }

        /**
         * @param verboseOidcLogging Log received OIDC tokens and claims when debug-level
         * logging is active. Not recommended in production since sensitive information may be present
         * in OIDC responses.
         * 
         * @return builder
         * 
         */
        public Builder verboseOidcLogging(@Nullable Output<Boolean> verboseOidcLogging) {
            $.verboseOidcLogging = verboseOidcLogging;
            return this;
        }

        /**
         * @param verboseOidcLogging Log received OIDC tokens and claims when debug-level
         * logging is active. Not recommended in production since sensitive information may be present
         * in OIDC responses.
         * 
         * @return builder
         * 
         */
        public Builder verboseOidcLogging(Boolean verboseOidcLogging) {
            return verboseOidcLogging(Output.of(verboseOidcLogging));
        }

        public AuthBackendRoleArgs build() {
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("AuthBackendRoleArgs", "roleName");
            }
            if ($.userClaim == null) {
                throw new MissingRequiredPropertyException("AuthBackendRoleArgs", "userClaim");
            }
            return $;
        }
    }

}
