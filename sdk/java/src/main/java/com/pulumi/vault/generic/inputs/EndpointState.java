// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.generic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointState extends com.pulumi.resources.ResourceArgs {

    public static final EndpointState Empty = new EndpointState();

    /**
     * String containing a JSON-encoded object that will be
     * written to the given path as the secret data.
     * 
     */
    @Import(name="dataJson")
    private @Nullable Output<String> dataJson;

    /**
     * @return String containing a JSON-encoded object that will be
     * written to the given path as the secret data.
     * 
     */
    public Optional<Output<String>> dataJson() {
        return Optional.ofNullable(this.dataJson);
    }

    /**
     * - (Optional) True/false. Set this to true if your
     *   vault authentication is not able to delete the data or if the endpoint
     *   does not support the `DELETE` method. Defaults to false.
     * 
     */
    @Import(name="disableDelete")
    private @Nullable Output<Boolean> disableDelete;

    /**
     * @return - (Optional) True/false. Set this to true if your
     * vault authentication is not able to delete the data or if the endpoint
     * does not support the `DELETE` method. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableDelete() {
        return Optional.ofNullable(this.disableDelete);
    }

    /**
     * True/false. Set this to true if your vault
     * authentication is not able to read the data or if the endpoint does
     * not support the `GET` method. Setting this to `true` will break drift
     * detection. You should set this to `true` for endpoints that are
     * write-only. Defaults to false.
     * 
     */
    @Import(name="disableRead")
    private @Nullable Output<Boolean> disableRead;

    /**
     * @return True/false. Set this to true if your vault
     * authentication is not able to read the data or if the endpoint does
     * not support the `GET` method. Setting this to `true` will break drift
     * detection. You should set this to `true` for endpoints that are
     * write-only. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableRead() {
        return Optional.ofNullable(this.disableRead);
    }

    /**
     * - (Optional) True/false. If set to true,
     *   ignore any fields present when the endpoint is read but that were not
     *   in `data_json`. Also, if a field that was written is not returned when
     *   the endpoint is read, treat that field as being up to date. You should
     *   set this to `true` when writing to endpoint that, when read, returns a
     *   different set of fields from the ones you wrote, as is common with
     *   many configuration endpoints. Defaults to false.
     * 
     */
    @Import(name="ignoreAbsentFields")
    private @Nullable Output<Boolean> ignoreAbsentFields;

    /**
     * @return - (Optional) True/false. If set to true,
     * ignore any fields present when the endpoint is read but that were not
     * in `data_json`. Also, if a field that was written is not returned when
     * the endpoint is read, treat that field as being up to date. You should
     * set this to `true` when writing to endpoint that, when read, returns a
     * different set of fields from the ones you wrote, as is common with
     * many configuration endpoints. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> ignoreAbsentFields() {
        return Optional.ofNullable(this.ignoreAbsentFields);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The full logical path at which to write the given
     * data. Consult each backend&#39;s documentation to see which endpoints
     * support the `PUT` methods and to determine whether they also support
     * `DELETE` and `GET`.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The full logical path at which to write the given
     * data. Consult each backend&#39;s documentation to see which endpoints
     * support the `PUT` methods and to determine whether they also support
     * `DELETE` and `GET`.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * - A map whose keys are the top-level data keys
     *   returned from Vault by the write operation and whose values are the
     *   corresponding values. This map can only represent string data, so
     *   any non-string values returned from Vault are serialized as JSON.
     *   Only fields set in `write_fields` are present in the JSON data.
     * 
     */
    @Import(name="writeData")
    private @Nullable Output<Map<String,String>> writeData;

    /**
     * @return - A map whose keys are the top-level data keys
     * returned from Vault by the write operation and whose values are the
     * corresponding values. This map can only represent string data, so
     * any non-string values returned from Vault are serialized as JSON.
     * Only fields set in `write_fields` are present in the JSON data.
     * 
     */
    public Optional<Output<Map<String,String>>> writeData() {
        return Optional.ofNullable(this.writeData);
    }

    /**
     * - The JSON data returned by the write operation.
     *   Only fields set in `write_fields` are present in the JSON data.
     * 
     */
    @Import(name="writeDataJson")
    private @Nullable Output<String> writeDataJson;

    /**
     * @return - The JSON data returned by the write operation.
     * Only fields set in `write_fields` are present in the JSON data.
     * 
     */
    public Optional<Output<String>> writeDataJson() {
        return Optional.ofNullable(this.writeDataJson);
    }

    /**
     * - (Optional). A list of fields that should be returned
     *   in `write_data_json` and `write_data`. If omitted, data returned by
     *   the write operation is not available to the resource or included in
     *   state. This helps to avoid accidental storage of sensitive values in
     *   state. Some endpoints, such as many dynamic secrets endpoints, return
     *   data from writing to an endpoint rather than reading it. You should
     *   use `write_fields` if you need information returned in this way.
     * 
     */
    @Import(name="writeFields")
    private @Nullable Output<List<String>> writeFields;

    /**
     * @return - (Optional). A list of fields that should be returned
     * in `write_data_json` and `write_data`. If omitted, data returned by
     * the write operation is not available to the resource or included in
     * state. This helps to avoid accidental storage of sensitive values in
     * state. Some endpoints, such as many dynamic secrets endpoints, return
     * data from writing to an endpoint rather than reading it. You should
     * use `write_fields` if you need information returned in this way.
     * 
     */
    public Optional<Output<List<String>>> writeFields() {
        return Optional.ofNullable(this.writeFields);
    }

    private EndpointState() {}

    private EndpointState(EndpointState $) {
        this.dataJson = $.dataJson;
        this.disableDelete = $.disableDelete;
        this.disableRead = $.disableRead;
        this.ignoreAbsentFields = $.ignoreAbsentFields;
        this.namespace = $.namespace;
        this.path = $.path;
        this.writeData = $.writeData;
        this.writeDataJson = $.writeDataJson;
        this.writeFields = $.writeFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointState $;

        public Builder() {
            $ = new EndpointState();
        }

        public Builder(EndpointState defaults) {
            $ = new EndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataJson String containing a JSON-encoded object that will be
         * written to the given path as the secret data.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(@Nullable Output<String> dataJson) {
            $.dataJson = dataJson;
            return this;
        }

        /**
         * @param dataJson String containing a JSON-encoded object that will be
         * written to the given path as the secret data.
         * 
         * @return builder
         * 
         */
        public Builder dataJson(String dataJson) {
            return dataJson(Output.of(dataJson));
        }

        /**
         * @param disableDelete - (Optional) True/false. Set this to true if your
         * vault authentication is not able to delete the data or if the endpoint
         * does not support the `DELETE` method. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableDelete(@Nullable Output<Boolean> disableDelete) {
            $.disableDelete = disableDelete;
            return this;
        }

        /**
         * @param disableDelete - (Optional) True/false. Set this to true if your
         * vault authentication is not able to delete the data or if the endpoint
         * does not support the `DELETE` method. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableDelete(Boolean disableDelete) {
            return disableDelete(Output.of(disableDelete));
        }

        /**
         * @param disableRead True/false. Set this to true if your vault
         * authentication is not able to read the data or if the endpoint does
         * not support the `GET` method. Setting this to `true` will break drift
         * detection. You should set this to `true` for endpoints that are
         * write-only. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRead(@Nullable Output<Boolean> disableRead) {
            $.disableRead = disableRead;
            return this;
        }

        /**
         * @param disableRead True/false. Set this to true if your vault
         * authentication is not able to read the data or if the endpoint does
         * not support the `GET` method. Setting this to `true` will break drift
         * detection. You should set this to `true` for endpoints that are
         * write-only. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRead(Boolean disableRead) {
            return disableRead(Output.of(disableRead));
        }

        /**
         * @param ignoreAbsentFields - (Optional) True/false. If set to true,
         * ignore any fields present when the endpoint is read but that were not
         * in `data_json`. Also, if a field that was written is not returned when
         * the endpoint is read, treat that field as being up to date. You should
         * set this to `true` when writing to endpoint that, when read, returns a
         * different set of fields from the ones you wrote, as is common with
         * many configuration endpoints. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreAbsentFields(@Nullable Output<Boolean> ignoreAbsentFields) {
            $.ignoreAbsentFields = ignoreAbsentFields;
            return this;
        }

        /**
         * @param ignoreAbsentFields - (Optional) True/false. If set to true,
         * ignore any fields present when the endpoint is read but that were not
         * in `data_json`. Also, if a field that was written is not returned when
         * the endpoint is read, treat that field as being up to date. You should
         * set this to `true` when writing to endpoint that, when read, returns a
         * different set of fields from the ones you wrote, as is common with
         * many configuration endpoints. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder ignoreAbsentFields(Boolean ignoreAbsentFields) {
            return ignoreAbsentFields(Output.of(ignoreAbsentFields));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param path The full logical path at which to write the given
         * data. Consult each backend&#39;s documentation to see which endpoints
         * support the `PUT` methods and to determine whether they also support
         * `DELETE` and `GET`.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The full logical path at which to write the given
         * data. Consult each backend&#39;s documentation to see which endpoints
         * support the `PUT` methods and to determine whether they also support
         * `DELETE` and `GET`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param writeData - A map whose keys are the top-level data keys
         * returned from Vault by the write operation and whose values are the
         * corresponding values. This map can only represent string data, so
         * any non-string values returned from Vault are serialized as JSON.
         * Only fields set in `write_fields` are present in the JSON data.
         * 
         * @return builder
         * 
         */
        public Builder writeData(@Nullable Output<Map<String,String>> writeData) {
            $.writeData = writeData;
            return this;
        }

        /**
         * @param writeData - A map whose keys are the top-level data keys
         * returned from Vault by the write operation and whose values are the
         * corresponding values. This map can only represent string data, so
         * any non-string values returned from Vault are serialized as JSON.
         * Only fields set in `write_fields` are present in the JSON data.
         * 
         * @return builder
         * 
         */
        public Builder writeData(Map<String,String> writeData) {
            return writeData(Output.of(writeData));
        }

        /**
         * @param writeDataJson - The JSON data returned by the write operation.
         * Only fields set in `write_fields` are present in the JSON data.
         * 
         * @return builder
         * 
         */
        public Builder writeDataJson(@Nullable Output<String> writeDataJson) {
            $.writeDataJson = writeDataJson;
            return this;
        }

        /**
         * @param writeDataJson - The JSON data returned by the write operation.
         * Only fields set in `write_fields` are present in the JSON data.
         * 
         * @return builder
         * 
         */
        public Builder writeDataJson(String writeDataJson) {
            return writeDataJson(Output.of(writeDataJson));
        }

        /**
         * @param writeFields - (Optional). A list of fields that should be returned
         * in `write_data_json` and `write_data`. If omitted, data returned by
         * the write operation is not available to the resource or included in
         * state. This helps to avoid accidental storage of sensitive values in
         * state. Some endpoints, such as many dynamic secrets endpoints, return
         * data from writing to an endpoint rather than reading it. You should
         * use `write_fields` if you need information returned in this way.
         * 
         * @return builder
         * 
         */
        public Builder writeFields(@Nullable Output<List<String>> writeFields) {
            $.writeFields = writeFields;
            return this;
        }

        /**
         * @param writeFields - (Optional). A list of fields that should be returned
         * in `write_data_json` and `write_data`. If omitted, data returned by
         * the write operation is not available to the resource or included in
         * state. This helps to avoid accidental storage of sensitive values in
         * state. Some endpoints, such as many dynamic secrets endpoints, return
         * data from writing to an endpoint rather than reading it. You should
         * use `write_fields` if you need information returned in this way.
         * 
         * @return builder
         * 
         */
        public Builder writeFields(List<String> writeFields) {
            return writeFields(Output.of(writeFields));
        }

        /**
         * @param writeFields - (Optional). A list of fields that should be returned
         * in `write_data_json` and `write_data`. If omitted, data returned by
         * the write operation is not available to the resource or included in
         * state. This helps to avoid accidental storage of sensitive values in
         * state. Some endpoints, such as many dynamic secrets endpoints, return
         * data from writing to an endpoint rather than reading it. You should
         * use `write_fields` if you need information returned in this way.
         * 
         * @return builder
         * 
         */
        public Builder writeFields(String... writeFields) {
            return writeFields(List.of(writeFields));
        }

        public EndpointState build() {
            return $;
        }
    }

}
