// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.secrets.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyncAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final SyncAssociationState Empty = new SyncAssociationState();

    /**
     * Specifies the mount where the secret is located.
     * 
     */
    @Import(name="mount")
    private @Nullable Output<String> mount;

    /**
     * @return Specifies the mount where the secret is located.
     * 
     */
    public Optional<Output<String>> mount() {
        return Optional.ofNullable(this.mount);
    }

    /**
     * Specifies the name of the destination.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the destination.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the name of the secret to synchronize.
     * 
     */
    @Import(name="secretName")
    private @Nullable Output<String> secretName;

    /**
     * @return Specifies the name of the secret to synchronize.
     * 
     */
    public Optional<Output<String>> secretName() {
        return Optional.ofNullable(this.secretName);
    }

    /**
     * Specifies the status of the association (for eg. `SYNCED`).
     * 
     */
    @Import(name="syncStatus")
    private @Nullable Output<String> syncStatus;

    /**
     * @return Specifies the status of the association (for eg. `SYNCED`).
     * 
     */
    public Optional<Output<String>> syncStatus() {
        return Optional.ofNullable(this.syncStatus);
    }

    /**
     * Specifies the destination type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Specifies the destination type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Duration string specifying when the secret was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Duration string specifying when the secret was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private SyncAssociationState() {}

    private SyncAssociationState(SyncAssociationState $) {
        this.mount = $.mount;
        this.name = $.name;
        this.namespace = $.namespace;
        this.secretName = $.secretName;
        this.syncStatus = $.syncStatus;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyncAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyncAssociationState $;

        public Builder() {
            $ = new SyncAssociationState();
        }

        public Builder(SyncAssociationState defaults) {
            $ = new SyncAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param mount Specifies the mount where the secret is located.
         * 
         * @return builder
         * 
         */
        public Builder mount(@Nullable Output<String> mount) {
            $.mount = mount;
            return this;
        }

        /**
         * @param mount Specifies the mount where the secret is located.
         * 
         * @return builder
         * 
         */
        public Builder mount(String mount) {
            return mount(Output.of(mount));
        }

        /**
         * @param name Specifies the name of the destination.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the destination.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param secretName Specifies the name of the secret to synchronize.
         * 
         * @return builder
         * 
         */
        public Builder secretName(@Nullable Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretName Specifies the name of the secret to synchronize.
         * 
         * @return builder
         * 
         */
        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        /**
         * @param syncStatus Specifies the status of the association (for eg. `SYNCED`).
         * 
         * @return builder
         * 
         */
        public Builder syncStatus(@Nullable Output<String> syncStatus) {
            $.syncStatus = syncStatus;
            return this;
        }

        /**
         * @param syncStatus Specifies the status of the association (for eg. `SYNCED`).
         * 
         * @return builder
         * 
         */
        public Builder syncStatus(String syncStatus) {
            return syncStatus(Output.of(syncStatus));
        }

        /**
         * @param type Specifies the destination type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the destination type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updatedAt Duration string specifying when the secret was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Duration string specifying when the secret was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public SyncAssociationState build() {
            return $;
        }
    }

}
