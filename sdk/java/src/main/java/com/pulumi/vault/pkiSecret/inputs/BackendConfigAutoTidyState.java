// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendConfigAutoTidyState extends com.pulumi.resources.ResourceArgs {

    public static final BackendConfigAutoTidyState Empty = new BackendConfigAutoTidyState();

    /**
     * The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of
     * time after being marked revoked or deactivated.
     * 
     */
    @Import(name="acmeAccountSafetyBuffer")
    private @Nullable Output<String> acmeAccountSafetyBuffer;

    /**
     * @return The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of
     * time after being marked revoked or deactivated.
     * 
     */
    public Optional<Output<String>> acmeAccountSafetyBuffer() {
        return Optional.ofNullable(this.acmeAccountSafetyBuffer);
    }

    /**
     * The path to the PKI secret backend to
     * read the configuration from, with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The path to the PKI secret backend to
     * read the configuration from, with no leading or trailing `/`s.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * Specifies whether automatic tidy is enabled or not.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Specifies whether automatic tidy is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Interval at which to run an auto-tidy operation. This is the time
     * between tidy invocations (after one finishes to the start of the next).
     * 
     */
    @Import(name="intervalDuration")
    private @Nullable Output<String> intervalDuration;

    /**
     * @return Interval at which to run an auto-tidy operation. This is the time
     * between tidy invocations (after one finishes to the start of the next).
     * 
     */
    public Optional<Output<String>> intervalDuration() {
        return Optional.ofNullable(this.intervalDuration);
    }

    /**
     * The amount of extra time that must have passed beyond issuer&#39;s
     * expiration before it is removed from the backend storage.
     * 
     */
    @Import(name="issuerSafetyBuffer")
    private @Nullable Output<String> issuerSafetyBuffer;

    /**
     * @return The amount of extra time that must have passed beyond issuer&#39;s
     * expiration before it is removed from the backend storage.
     * 
     */
    public Optional<Output<String>> issuerSafetyBuffer() {
        return Optional.ofNullable(this.issuerSafetyBuffer);
    }

    /**
     * This configures whether stored certificate are
     * counted upon initialization of the backend, and whether during normal operation, a running count
     * of certificates stored is maintained.
     * 
     */
    @Import(name="maintainStoredCertificateCounts")
    private @Nullable Output<Boolean> maintainStoredCertificateCounts;

    /**
     * @return This configures whether stored certificate are
     * counted upon initialization of the backend, and whether during normal operation, a running count
     * of certificates stored is maintained.
     * 
     */
    public Optional<Output<Boolean>> maintainStoredCertificateCounts() {
        return Optional.ofNullable(this.maintainStoredCertificateCounts);
    }

    /**
     * The maximum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    @Import(name="maxStartupBackoffDuration")
    private @Nullable Output<String> maxStartupBackoffDuration;

    /**
     * @return The maximum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    public Optional<Output<String>> maxStartupBackoffDuration() {
        return Optional.ofNullable(this.maxStartupBackoffDuration);
    }

    /**
     * The minimum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    @Import(name="minStartupBackoffDuration")
    private @Nullable Output<String> minStartupBackoffDuration;

    /**
     * @return The minimum amount of time auto-tidy will be delayed
     * after startup.
     * 
     */
    public Optional<Output<String>> minStartupBackoffDuration() {
        return Optional.ofNullable(this.minStartupBackoffDuration);
    }

    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The amount of time to wait between processing certificates.
     * 
     */
    @Import(name="pauseDuration")
    private @Nullable Output<String> pauseDuration;

    /**
     * @return The amount of time to wait between processing certificates.
     * 
     */
    public Optional<Output<String>> pauseDuration() {
        return Optional.ofNullable(this.pauseDuration);
    }

    /**
     * This configures whether the stored
     * certificate count is published to the metrics consumer.
     * 
     */
    @Import(name="publishStoredCertificateCountMetrics")
    private @Nullable Output<Boolean> publishStoredCertificateCountMetrics;

    /**
     * @return This configures whether the stored
     * certificate count is published to the metrics consumer.
     * 
     */
    public Optional<Output<Boolean>> publishStoredCertificateCountMetrics() {
        return Optional.ofNullable(this.publishStoredCertificateCountMetrics);
    }

    /**
     * The amount of time that must pass from the
     * cross-cluster revocation request being initiated to when it will be slated for removal.
     * 
     */
    @Import(name="revocationQueueSafetyBuffer")
    private @Nullable Output<String> revocationQueueSafetyBuffer;

    /**
     * @return The amount of time that must pass from the
     * cross-cluster revocation request being initiated to when it will be slated for removal.
     * 
     */
    public Optional<Output<String>> revocationQueueSafetyBuffer() {
        return Optional.ofNullable(this.revocationQueueSafetyBuffer);
    }

    /**
     * The amount of extra time that must have passed beyond certificate
     * expiration before it is removed from the backend storage and/or revocation list.
     * 
     */
    @Import(name="safetyBuffer")
    private @Nullable Output<String> safetyBuffer;

    /**
     * @return The amount of extra time that must have passed beyond certificate
     * expiration before it is removed from the backend storage and/or revocation list.
     * 
     */
    public Optional<Output<String>> safetyBuffer() {
        return Optional.ofNullable(this.safetyBuffer);
    }

    /**
     * Set to true to enable tidying ACME accounts, orders and authorizations.
     * 
     */
    @Import(name="tidyAcme")
    private @Nullable Output<Boolean> tidyAcme;

    /**
     * @return Set to true to enable tidying ACME accounts, orders and authorizations.
     * 
     */
    public Optional<Output<Boolean>> tidyAcme() {
        return Optional.ofNullable(this.tidyAcme);
    }

    /**
     * Set to true to enable tidying up certificate metadata.
     * 
     */
    @Import(name="tidyCertMetadata")
    private @Nullable Output<Boolean> tidyCertMetadata;

    /**
     * @return Set to true to enable tidying up certificate metadata.
     * 
     */
    public Optional<Output<Boolean>> tidyCertMetadata() {
        return Optional.ofNullable(this.tidyCertMetadata);
    }

    /**
     * Set to true to enable tidying up the certificate store
     * 
     */
    @Import(name="tidyCertStore")
    private @Nullable Output<Boolean> tidyCertStore;

    /**
     * @return Set to true to enable tidying up the certificate store
     * 
     */
    public Optional<Output<Boolean>> tidyCertStore() {
        return Optional.ofNullable(this.tidyCertStore);
    }

    /**
     * Set to true to enable tidying up the CMPv2 nonce store.
     * 
     */
    @Import(name="tidyCmpv2NonceStore")
    private @Nullable Output<Boolean> tidyCmpv2NonceStore;

    /**
     * @return Set to true to enable tidying up the CMPv2 nonce store.
     * 
     */
    public Optional<Output<Boolean>> tidyCmpv2NonceStore() {
        return Optional.ofNullable(this.tidyCmpv2NonceStore);
    }

    /**
     * Set to true to enable tidying up the cross-cluster
     * revoked certificate store.
     * 
     */
    @Import(name="tidyCrossClusterRevokedCerts")
    private @Nullable Output<Boolean> tidyCrossClusterRevokedCerts;

    /**
     * @return Set to true to enable tidying up the cross-cluster
     * revoked certificate store.
     * 
     */
    public Optional<Output<Boolean>> tidyCrossClusterRevokedCerts() {
        return Optional.ofNullable(this.tidyCrossClusterRevokedCerts);
    }

    /**
     * Set to true to automatically remove expired issuers past the
     * `issuer_safety_buffer`. No keys will be removed as part of this operation.
     * 
     */
    @Import(name="tidyExpiredIssuers")
    private @Nullable Output<Boolean> tidyExpiredIssuers;

    /**
     * @return Set to true to automatically remove expired issuers past the
     * `issuer_safety_buffer`. No keys will be removed as part of this operation.
     * 
     */
    public Optional<Output<Boolean>> tidyExpiredIssuers() {
        return Optional.ofNullable(this.tidyExpiredIssuers);
    }

    /**
     * Set to true to move the legacy `ca_bundle` from
     * `/config/ca_bundle` to `/config/ca_bundle.bak`.
     * 
     */
    @Import(name="tidyMoveLegacyCaBundle")
    private @Nullable Output<Boolean> tidyMoveLegacyCaBundle;

    /**
     * @return Set to true to move the legacy `ca_bundle` from
     * `/config/ca_bundle` to `/config/ca_bundle.bak`.
     * 
     */
    public Optional<Output<Boolean>> tidyMoveLegacyCaBundle() {
        return Optional.ofNullable(this.tidyMoveLegacyCaBundle);
    }

    /**
     * Set to true to remove stale revocation queue entries that
     * haven&#39;t been confirmed by any active cluster.
     * 
     */
    @Import(name="tidyRevocationQueue")
    private @Nullable Output<Boolean> tidyRevocationQueue;

    /**
     * @return Set to true to remove stale revocation queue entries that
     * haven&#39;t been confirmed by any active cluster.
     * 
     */
    public Optional<Output<Boolean>> tidyRevocationQueue() {
        return Optional.ofNullable(this.tidyRevocationQueue);
    }

    /**
     * Set to true to validate issuer associations
     * on revocation entries. This helps increase the performance of CRL building and OCSP responses.
     * 
     */
    @Import(name="tidyRevokedCertIssuerAssociations")
    private @Nullable Output<Boolean> tidyRevokedCertIssuerAssociations;

    /**
     * @return Set to true to validate issuer associations
     * on revocation entries. This helps increase the performance of CRL building and OCSP responses.
     * 
     */
    public Optional<Output<Boolean>> tidyRevokedCertIssuerAssociations() {
        return Optional.ofNullable(this.tidyRevokedCertIssuerAssociations);
    }

    /**
     * Set to true to remove all invalid and expired certificates from
     * storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
     * the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
     * the CRL, and the CRL will be rotated.
     * 
     */
    @Import(name="tidyRevokedCerts")
    private @Nullable Output<Boolean> tidyRevokedCerts;

    /**
     * @return Set to true to remove all invalid and expired certificates from
     * storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
     * the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
     * the CRL, and the CRL will be rotated.
     * 
     */
    public Optional<Output<Boolean>> tidyRevokedCerts() {
        return Optional.ofNullable(this.tidyRevokedCerts);
    }

    private BackendConfigAutoTidyState() {}

    private BackendConfigAutoTidyState(BackendConfigAutoTidyState $) {
        this.acmeAccountSafetyBuffer = $.acmeAccountSafetyBuffer;
        this.backend = $.backend;
        this.enabled = $.enabled;
        this.intervalDuration = $.intervalDuration;
        this.issuerSafetyBuffer = $.issuerSafetyBuffer;
        this.maintainStoredCertificateCounts = $.maintainStoredCertificateCounts;
        this.maxStartupBackoffDuration = $.maxStartupBackoffDuration;
        this.minStartupBackoffDuration = $.minStartupBackoffDuration;
        this.namespace = $.namespace;
        this.pauseDuration = $.pauseDuration;
        this.publishStoredCertificateCountMetrics = $.publishStoredCertificateCountMetrics;
        this.revocationQueueSafetyBuffer = $.revocationQueueSafetyBuffer;
        this.safetyBuffer = $.safetyBuffer;
        this.tidyAcme = $.tidyAcme;
        this.tidyCertMetadata = $.tidyCertMetadata;
        this.tidyCertStore = $.tidyCertStore;
        this.tidyCmpv2NonceStore = $.tidyCmpv2NonceStore;
        this.tidyCrossClusterRevokedCerts = $.tidyCrossClusterRevokedCerts;
        this.tidyExpiredIssuers = $.tidyExpiredIssuers;
        this.tidyMoveLegacyCaBundle = $.tidyMoveLegacyCaBundle;
        this.tidyRevocationQueue = $.tidyRevocationQueue;
        this.tidyRevokedCertIssuerAssociations = $.tidyRevokedCertIssuerAssociations;
        this.tidyRevokedCerts = $.tidyRevokedCerts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendConfigAutoTidyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendConfigAutoTidyState $;

        public Builder() {
            $ = new BackendConfigAutoTidyState();
        }

        public Builder(BackendConfigAutoTidyState defaults) {
            $ = new BackendConfigAutoTidyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acmeAccountSafetyBuffer The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of
         * time after being marked revoked or deactivated.
         * 
         * @return builder
         * 
         */
        public Builder acmeAccountSafetyBuffer(@Nullable Output<String> acmeAccountSafetyBuffer) {
            $.acmeAccountSafetyBuffer = acmeAccountSafetyBuffer;
            return this;
        }

        /**
         * @param acmeAccountSafetyBuffer The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of
         * time after being marked revoked or deactivated.
         * 
         * @return builder
         * 
         */
        public Builder acmeAccountSafetyBuffer(String acmeAccountSafetyBuffer) {
            return acmeAccountSafetyBuffer(Output.of(acmeAccountSafetyBuffer));
        }

        /**
         * @param backend The path to the PKI secret backend to
         * read the configuration from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path to the PKI secret backend to
         * read the configuration from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param enabled Specifies whether automatic tidy is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies whether automatic tidy is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param intervalDuration Interval at which to run an auto-tidy operation. This is the time
         * between tidy invocations (after one finishes to the start of the next).
         * 
         * @return builder
         * 
         */
        public Builder intervalDuration(@Nullable Output<String> intervalDuration) {
            $.intervalDuration = intervalDuration;
            return this;
        }

        /**
         * @param intervalDuration Interval at which to run an auto-tidy operation. This is the time
         * between tidy invocations (after one finishes to the start of the next).
         * 
         * @return builder
         * 
         */
        public Builder intervalDuration(String intervalDuration) {
            return intervalDuration(Output.of(intervalDuration));
        }

        /**
         * @param issuerSafetyBuffer The amount of extra time that must have passed beyond issuer&#39;s
         * expiration before it is removed from the backend storage.
         * 
         * @return builder
         * 
         */
        public Builder issuerSafetyBuffer(@Nullable Output<String> issuerSafetyBuffer) {
            $.issuerSafetyBuffer = issuerSafetyBuffer;
            return this;
        }

        /**
         * @param issuerSafetyBuffer The amount of extra time that must have passed beyond issuer&#39;s
         * expiration before it is removed from the backend storage.
         * 
         * @return builder
         * 
         */
        public Builder issuerSafetyBuffer(String issuerSafetyBuffer) {
            return issuerSafetyBuffer(Output.of(issuerSafetyBuffer));
        }

        /**
         * @param maintainStoredCertificateCounts This configures whether stored certificate are
         * counted upon initialization of the backend, and whether during normal operation, a running count
         * of certificates stored is maintained.
         * 
         * @return builder
         * 
         */
        public Builder maintainStoredCertificateCounts(@Nullable Output<Boolean> maintainStoredCertificateCounts) {
            $.maintainStoredCertificateCounts = maintainStoredCertificateCounts;
            return this;
        }

        /**
         * @param maintainStoredCertificateCounts This configures whether stored certificate are
         * counted upon initialization of the backend, and whether during normal operation, a running count
         * of certificates stored is maintained.
         * 
         * @return builder
         * 
         */
        public Builder maintainStoredCertificateCounts(Boolean maintainStoredCertificateCounts) {
            return maintainStoredCertificateCounts(Output.of(maintainStoredCertificateCounts));
        }

        /**
         * @param maxStartupBackoffDuration The maximum amount of time auto-tidy will be delayed
         * after startup.
         * 
         * @return builder
         * 
         */
        public Builder maxStartupBackoffDuration(@Nullable Output<String> maxStartupBackoffDuration) {
            $.maxStartupBackoffDuration = maxStartupBackoffDuration;
            return this;
        }

        /**
         * @param maxStartupBackoffDuration The maximum amount of time auto-tidy will be delayed
         * after startup.
         * 
         * @return builder
         * 
         */
        public Builder maxStartupBackoffDuration(String maxStartupBackoffDuration) {
            return maxStartupBackoffDuration(Output.of(maxStartupBackoffDuration));
        }

        /**
         * @param minStartupBackoffDuration The minimum amount of time auto-tidy will be delayed
         * after startup.
         * 
         * @return builder
         * 
         */
        public Builder minStartupBackoffDuration(@Nullable Output<String> minStartupBackoffDuration) {
            $.minStartupBackoffDuration = minStartupBackoffDuration;
            return this;
        }

        /**
         * @param minStartupBackoffDuration The minimum amount of time auto-tidy will be delayed
         * after startup.
         * 
         * @return builder
         * 
         */
        public Builder minStartupBackoffDuration(String minStartupBackoffDuration) {
            return minStartupBackoffDuration(Output.of(minStartupBackoffDuration));
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param pauseDuration The amount of time to wait between processing certificates.
         * 
         * @return builder
         * 
         */
        public Builder pauseDuration(@Nullable Output<String> pauseDuration) {
            $.pauseDuration = pauseDuration;
            return this;
        }

        /**
         * @param pauseDuration The amount of time to wait between processing certificates.
         * 
         * @return builder
         * 
         */
        public Builder pauseDuration(String pauseDuration) {
            return pauseDuration(Output.of(pauseDuration));
        }

        /**
         * @param publishStoredCertificateCountMetrics This configures whether the stored
         * certificate count is published to the metrics consumer.
         * 
         * @return builder
         * 
         */
        public Builder publishStoredCertificateCountMetrics(@Nullable Output<Boolean> publishStoredCertificateCountMetrics) {
            $.publishStoredCertificateCountMetrics = publishStoredCertificateCountMetrics;
            return this;
        }

        /**
         * @param publishStoredCertificateCountMetrics This configures whether the stored
         * certificate count is published to the metrics consumer.
         * 
         * @return builder
         * 
         */
        public Builder publishStoredCertificateCountMetrics(Boolean publishStoredCertificateCountMetrics) {
            return publishStoredCertificateCountMetrics(Output.of(publishStoredCertificateCountMetrics));
        }

        /**
         * @param revocationQueueSafetyBuffer The amount of time that must pass from the
         * cross-cluster revocation request being initiated to when it will be slated for removal.
         * 
         * @return builder
         * 
         */
        public Builder revocationQueueSafetyBuffer(@Nullable Output<String> revocationQueueSafetyBuffer) {
            $.revocationQueueSafetyBuffer = revocationQueueSafetyBuffer;
            return this;
        }

        /**
         * @param revocationQueueSafetyBuffer The amount of time that must pass from the
         * cross-cluster revocation request being initiated to when it will be slated for removal.
         * 
         * @return builder
         * 
         */
        public Builder revocationQueueSafetyBuffer(String revocationQueueSafetyBuffer) {
            return revocationQueueSafetyBuffer(Output.of(revocationQueueSafetyBuffer));
        }

        /**
         * @param safetyBuffer The amount of extra time that must have passed beyond certificate
         * expiration before it is removed from the backend storage and/or revocation list.
         * 
         * @return builder
         * 
         */
        public Builder safetyBuffer(@Nullable Output<String> safetyBuffer) {
            $.safetyBuffer = safetyBuffer;
            return this;
        }

        /**
         * @param safetyBuffer The amount of extra time that must have passed beyond certificate
         * expiration before it is removed from the backend storage and/or revocation list.
         * 
         * @return builder
         * 
         */
        public Builder safetyBuffer(String safetyBuffer) {
            return safetyBuffer(Output.of(safetyBuffer));
        }

        /**
         * @param tidyAcme Set to true to enable tidying ACME accounts, orders and authorizations.
         * 
         * @return builder
         * 
         */
        public Builder tidyAcme(@Nullable Output<Boolean> tidyAcme) {
            $.tidyAcme = tidyAcme;
            return this;
        }

        /**
         * @param tidyAcme Set to true to enable tidying ACME accounts, orders and authorizations.
         * 
         * @return builder
         * 
         */
        public Builder tidyAcme(Boolean tidyAcme) {
            return tidyAcme(Output.of(tidyAcme));
        }

        /**
         * @param tidyCertMetadata Set to true to enable tidying up certificate metadata.
         * 
         * @return builder
         * 
         */
        public Builder tidyCertMetadata(@Nullable Output<Boolean> tidyCertMetadata) {
            $.tidyCertMetadata = tidyCertMetadata;
            return this;
        }

        /**
         * @param tidyCertMetadata Set to true to enable tidying up certificate metadata.
         * 
         * @return builder
         * 
         */
        public Builder tidyCertMetadata(Boolean tidyCertMetadata) {
            return tidyCertMetadata(Output.of(tidyCertMetadata));
        }

        /**
         * @param tidyCertStore Set to true to enable tidying up the certificate store
         * 
         * @return builder
         * 
         */
        public Builder tidyCertStore(@Nullable Output<Boolean> tidyCertStore) {
            $.tidyCertStore = tidyCertStore;
            return this;
        }

        /**
         * @param tidyCertStore Set to true to enable tidying up the certificate store
         * 
         * @return builder
         * 
         */
        public Builder tidyCertStore(Boolean tidyCertStore) {
            return tidyCertStore(Output.of(tidyCertStore));
        }

        /**
         * @param tidyCmpv2NonceStore Set to true to enable tidying up the CMPv2 nonce store.
         * 
         * @return builder
         * 
         */
        public Builder tidyCmpv2NonceStore(@Nullable Output<Boolean> tidyCmpv2NonceStore) {
            $.tidyCmpv2NonceStore = tidyCmpv2NonceStore;
            return this;
        }

        /**
         * @param tidyCmpv2NonceStore Set to true to enable tidying up the CMPv2 nonce store.
         * 
         * @return builder
         * 
         */
        public Builder tidyCmpv2NonceStore(Boolean tidyCmpv2NonceStore) {
            return tidyCmpv2NonceStore(Output.of(tidyCmpv2NonceStore));
        }

        /**
         * @param tidyCrossClusterRevokedCerts Set to true to enable tidying up the cross-cluster
         * revoked certificate store.
         * 
         * @return builder
         * 
         */
        public Builder tidyCrossClusterRevokedCerts(@Nullable Output<Boolean> tidyCrossClusterRevokedCerts) {
            $.tidyCrossClusterRevokedCerts = tidyCrossClusterRevokedCerts;
            return this;
        }

        /**
         * @param tidyCrossClusterRevokedCerts Set to true to enable tidying up the cross-cluster
         * revoked certificate store.
         * 
         * @return builder
         * 
         */
        public Builder tidyCrossClusterRevokedCerts(Boolean tidyCrossClusterRevokedCerts) {
            return tidyCrossClusterRevokedCerts(Output.of(tidyCrossClusterRevokedCerts));
        }

        /**
         * @param tidyExpiredIssuers Set to true to automatically remove expired issuers past the
         * `issuer_safety_buffer`. No keys will be removed as part of this operation.
         * 
         * @return builder
         * 
         */
        public Builder tidyExpiredIssuers(@Nullable Output<Boolean> tidyExpiredIssuers) {
            $.tidyExpiredIssuers = tidyExpiredIssuers;
            return this;
        }

        /**
         * @param tidyExpiredIssuers Set to true to automatically remove expired issuers past the
         * `issuer_safety_buffer`. No keys will be removed as part of this operation.
         * 
         * @return builder
         * 
         */
        public Builder tidyExpiredIssuers(Boolean tidyExpiredIssuers) {
            return tidyExpiredIssuers(Output.of(tidyExpiredIssuers));
        }

        /**
         * @param tidyMoveLegacyCaBundle Set to true to move the legacy `ca_bundle` from
         * `/config/ca_bundle` to `/config/ca_bundle.bak`.
         * 
         * @return builder
         * 
         */
        public Builder tidyMoveLegacyCaBundle(@Nullable Output<Boolean> tidyMoveLegacyCaBundle) {
            $.tidyMoveLegacyCaBundle = tidyMoveLegacyCaBundle;
            return this;
        }

        /**
         * @param tidyMoveLegacyCaBundle Set to true to move the legacy `ca_bundle` from
         * `/config/ca_bundle` to `/config/ca_bundle.bak`.
         * 
         * @return builder
         * 
         */
        public Builder tidyMoveLegacyCaBundle(Boolean tidyMoveLegacyCaBundle) {
            return tidyMoveLegacyCaBundle(Output.of(tidyMoveLegacyCaBundle));
        }

        /**
         * @param tidyRevocationQueue Set to true to remove stale revocation queue entries that
         * haven&#39;t been confirmed by any active cluster.
         * 
         * @return builder
         * 
         */
        public Builder tidyRevocationQueue(@Nullable Output<Boolean> tidyRevocationQueue) {
            $.tidyRevocationQueue = tidyRevocationQueue;
            return this;
        }

        /**
         * @param tidyRevocationQueue Set to true to remove stale revocation queue entries that
         * haven&#39;t been confirmed by any active cluster.
         * 
         * @return builder
         * 
         */
        public Builder tidyRevocationQueue(Boolean tidyRevocationQueue) {
            return tidyRevocationQueue(Output.of(tidyRevocationQueue));
        }

        /**
         * @param tidyRevokedCertIssuerAssociations Set to true to validate issuer associations
         * on revocation entries. This helps increase the performance of CRL building and OCSP responses.
         * 
         * @return builder
         * 
         */
        public Builder tidyRevokedCertIssuerAssociations(@Nullable Output<Boolean> tidyRevokedCertIssuerAssociations) {
            $.tidyRevokedCertIssuerAssociations = tidyRevokedCertIssuerAssociations;
            return this;
        }

        /**
         * @param tidyRevokedCertIssuerAssociations Set to true to validate issuer associations
         * on revocation entries. This helps increase the performance of CRL building and OCSP responses.
         * 
         * @return builder
         * 
         */
        public Builder tidyRevokedCertIssuerAssociations(Boolean tidyRevokedCertIssuerAssociations) {
            return tidyRevokedCertIssuerAssociations(Output.of(tidyRevokedCertIssuerAssociations));
        }

        /**
         * @param tidyRevokedCerts Set to true to remove all invalid and expired certificates from
         * storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
         * the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
         * the CRL, and the CRL will be rotated.
         * 
         * @return builder
         * 
         */
        public Builder tidyRevokedCerts(@Nullable Output<Boolean> tidyRevokedCerts) {
            $.tidyRevokedCerts = tidyRevokedCerts;
            return this;
        }

        /**
         * @param tidyRevokedCerts Set to true to remove all invalid and expired certificates from
         * storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
         * the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
         * the CRL, and the CRL will be rotated.
         * 
         * @return builder
         * 
         */
        public Builder tidyRevokedCerts(Boolean tidyRevokedCerts) {
            return tidyRevokedCerts(Output.of(tidyRevokedCerts));
        }

        public BackendConfigAutoTidyState build() {
            return $;
        }
    }

}
