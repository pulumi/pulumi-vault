// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MfaLoginEnforcementArgs extends com.pulumi.resources.ResourceArgs {

    public static final MfaLoginEnforcementArgs Empty = new MfaLoginEnforcementArgs();

    /**
     * Set of auth method accessor IDs.
     * 
     */
    @Import(name="authMethodAccessors")
    private @Nullable Output<List<String>> authMethodAccessors;

    /**
     * @return Set of auth method accessor IDs.
     * 
     */
    public Optional<Output<List<String>>> authMethodAccessors() {
        return Optional.ofNullable(this.authMethodAccessors);
    }

    /**
     * Set of auth method types.
     * 
     */
    @Import(name="authMethodTypes")
    private @Nullable Output<List<String>> authMethodTypes;

    /**
     * @return Set of auth method types.
     * 
     */
    public Optional<Output<List<String>>> authMethodTypes() {
        return Optional.ofNullable(this.authMethodTypes);
    }

    /**
     * Set of identity entity IDs.
     * 
     */
    @Import(name="identityEntityIds")
    private @Nullable Output<List<String>> identityEntityIds;

    /**
     * @return Set of identity entity IDs.
     * 
     */
    public Optional<Output<List<String>>> identityEntityIds() {
        return Optional.ofNullable(this.identityEntityIds);
    }

    /**
     * Set of identity group IDs.
     * 
     */
    @Import(name="identityGroupIds")
    private @Nullable Output<List<String>> identityGroupIds;

    /**
     * @return Set of identity group IDs.
     * 
     */
    public Optional<Output<List<String>>> identityGroupIds() {
        return Optional.ofNullable(this.identityGroupIds);
    }

    /**
     * Set of MFA method UUIDs.
     * 
     */
    @Import(name="mfaMethodIds", required=true)
    private Output<List<String>> mfaMethodIds;

    /**
     * @return Set of MFA method UUIDs.
     * 
     */
    public Output<List<String>> mfaMethodIds() {
        return this.mfaMethodIds;
    }

    /**
     * Login enforcement name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Login enforcement name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Target namespace. (requires Enterprise)
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Target namespace. (requires Enterprise)
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    private MfaLoginEnforcementArgs() {}

    private MfaLoginEnforcementArgs(MfaLoginEnforcementArgs $) {
        this.authMethodAccessors = $.authMethodAccessors;
        this.authMethodTypes = $.authMethodTypes;
        this.identityEntityIds = $.identityEntityIds;
        this.identityGroupIds = $.identityGroupIds;
        this.mfaMethodIds = $.mfaMethodIds;
        this.name = $.name;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MfaLoginEnforcementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MfaLoginEnforcementArgs $;

        public Builder() {
            $ = new MfaLoginEnforcementArgs();
        }

        public Builder(MfaLoginEnforcementArgs defaults) {
            $ = new MfaLoginEnforcementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authMethodAccessors Set of auth method accessor IDs.
         * 
         * @return builder
         * 
         */
        public Builder authMethodAccessors(@Nullable Output<List<String>> authMethodAccessors) {
            $.authMethodAccessors = authMethodAccessors;
            return this;
        }

        /**
         * @param authMethodAccessors Set of auth method accessor IDs.
         * 
         * @return builder
         * 
         */
        public Builder authMethodAccessors(List<String> authMethodAccessors) {
            return authMethodAccessors(Output.of(authMethodAccessors));
        }

        /**
         * @param authMethodAccessors Set of auth method accessor IDs.
         * 
         * @return builder
         * 
         */
        public Builder authMethodAccessors(String... authMethodAccessors) {
            return authMethodAccessors(List.of(authMethodAccessors));
        }

        /**
         * @param authMethodTypes Set of auth method types.
         * 
         * @return builder
         * 
         */
        public Builder authMethodTypes(@Nullable Output<List<String>> authMethodTypes) {
            $.authMethodTypes = authMethodTypes;
            return this;
        }

        /**
         * @param authMethodTypes Set of auth method types.
         * 
         * @return builder
         * 
         */
        public Builder authMethodTypes(List<String> authMethodTypes) {
            return authMethodTypes(Output.of(authMethodTypes));
        }

        /**
         * @param authMethodTypes Set of auth method types.
         * 
         * @return builder
         * 
         */
        public Builder authMethodTypes(String... authMethodTypes) {
            return authMethodTypes(List.of(authMethodTypes));
        }

        /**
         * @param identityEntityIds Set of identity entity IDs.
         * 
         * @return builder
         * 
         */
        public Builder identityEntityIds(@Nullable Output<List<String>> identityEntityIds) {
            $.identityEntityIds = identityEntityIds;
            return this;
        }

        /**
         * @param identityEntityIds Set of identity entity IDs.
         * 
         * @return builder
         * 
         */
        public Builder identityEntityIds(List<String> identityEntityIds) {
            return identityEntityIds(Output.of(identityEntityIds));
        }

        /**
         * @param identityEntityIds Set of identity entity IDs.
         * 
         * @return builder
         * 
         */
        public Builder identityEntityIds(String... identityEntityIds) {
            return identityEntityIds(List.of(identityEntityIds));
        }

        /**
         * @param identityGroupIds Set of identity group IDs.
         * 
         * @return builder
         * 
         */
        public Builder identityGroupIds(@Nullable Output<List<String>> identityGroupIds) {
            $.identityGroupIds = identityGroupIds;
            return this;
        }

        /**
         * @param identityGroupIds Set of identity group IDs.
         * 
         * @return builder
         * 
         */
        public Builder identityGroupIds(List<String> identityGroupIds) {
            return identityGroupIds(Output.of(identityGroupIds));
        }

        /**
         * @param identityGroupIds Set of identity group IDs.
         * 
         * @return builder
         * 
         */
        public Builder identityGroupIds(String... identityGroupIds) {
            return identityGroupIds(List.of(identityGroupIds));
        }

        /**
         * @param mfaMethodIds Set of MFA method UUIDs.
         * 
         * @return builder
         * 
         */
        public Builder mfaMethodIds(Output<List<String>> mfaMethodIds) {
            $.mfaMethodIds = mfaMethodIds;
            return this;
        }

        /**
         * @param mfaMethodIds Set of MFA method UUIDs.
         * 
         * @return builder
         * 
         */
        public Builder mfaMethodIds(List<String> mfaMethodIds) {
            return mfaMethodIds(Output.of(mfaMethodIds));
        }

        /**
         * @param mfaMethodIds Set of MFA method UUIDs.
         * 
         * @return builder
         * 
         */
        public Builder mfaMethodIds(String... mfaMethodIds) {
            return mfaMethodIds(List.of(mfaMethodIds));
        }

        /**
         * @param name Login enforcement name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Login enforcement name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public MfaLoginEnforcementArgs build() {
            if ($.mfaMethodIds == null) {
                throw new MissingRequiredPropertyException("MfaLoginEnforcementArgs", "mfaMethodIds");
            }
            return $;
        }
    }

}
