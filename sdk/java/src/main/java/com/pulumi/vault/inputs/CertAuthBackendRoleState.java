// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertAuthBackendRoleState extends com.pulumi.resources.ResourceArgs {

    public static final CertAuthBackendRoleState Empty = new CertAuthBackendRoleState();

    /**
     * Allowed the common names for authenticated client certificates
     * 
     */
    @Import(name="allowedCommonNames")
    private @Nullable Output<List<String>> allowedCommonNames;

    /**
     * @return Allowed the common names for authenticated client certificates
     * 
     */
    public Optional<Output<List<String>>> allowedCommonNames() {
        return Optional.ofNullable(this.allowedCommonNames);
    }

    /**
     * Allowed alternative dns names for authenticated client certificates
     * 
     */
    @Import(name="allowedDnsSans")
    private @Nullable Output<List<String>> allowedDnsSans;

    /**
     * @return Allowed alternative dns names for authenticated client certificates
     * 
     */
    public Optional<Output<List<String>>> allowedDnsSans() {
        return Optional.ofNullable(this.allowedDnsSans);
    }

    /**
     * Allowed emails for authenticated client certificates
     * 
     */
    @Import(name="allowedEmailSans")
    private @Nullable Output<List<String>> allowedEmailSans;

    /**
     * @return Allowed emails for authenticated client certificates
     * 
     */
    public Optional<Output<List<String>>> allowedEmailSans() {
        return Optional.ofNullable(this.allowedEmailSans);
    }

    /**
     * DEPRECATED: Please use the individual `allowed_X_sans` parameters instead. Allowed subject names for authenticated client certificates
     * 
     */
    @Import(name="allowedNames")
    private @Nullable Output<List<String>> allowedNames;

    /**
     * @return DEPRECATED: Please use the individual `allowed_X_sans` parameters instead. Allowed subject names for authenticated client certificates
     * 
     */
    public Optional<Output<List<String>>> allowedNames() {
        return Optional.ofNullable(this.allowedNames);
    }

    /**
     * Allowed organization units for authenticated client certificates.
     * 
     */
    @Import(name="allowedOrganizationalUnits")
    private @Nullable Output<List<String>> allowedOrganizationalUnits;

    /**
     * @return Allowed organization units for authenticated client certificates.
     * 
     */
    public Optional<Output<List<String>>> allowedOrganizationalUnits() {
        return Optional.ofNullable(this.allowedOrganizationalUnits);
    }

    /**
     * Allowed URIs for authenticated client certificates
     * 
     */
    @Import(name="allowedUriSans")
    private @Nullable Output<List<String>> allowedUriSans;

    /**
     * @return Allowed URIs for authenticated client certificates
     * 
     */
    public Optional<Output<List<String>>> allowedUriSans() {
        return Optional.ofNullable(this.allowedUriSans);
    }

    /**
     * Path to the mounted Cert auth backend
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Path to the mounted Cert auth backend
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * CA certificate used to validate client certificates
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return CA certificate used to validate client certificates
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The name to display on tokens issued under this role.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name to display on tokens issued under this role.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Name of the role
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the role
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Any additional CA certificates
     * needed to verify OCSP responses. Provided as base64 encoded PEM data.
     * Requires Vault version 1.13+.
     * 
     */
    @Import(name="ocspCaCertificates")
    private @Nullable Output<String> ocspCaCertificates;

    /**
     * @return Any additional CA certificates
     * needed to verify OCSP responses. Provided as base64 encoded PEM data.
     * Requires Vault version 1.13+.
     * 
     */
    public Optional<Output<String>> ocspCaCertificates() {
        return Optional.ofNullable(this.ocspCaCertificates);
    }

    /**
     * If enabled, validate certificates&#39;
     * revocation status using OCSP. Requires Vault version 1.13+.
     * 
     */
    @Import(name="ocspEnabled")
    private @Nullable Output<Boolean> ocspEnabled;

    /**
     * @return If enabled, validate certificates&#39;
     * revocation status using OCSP. Requires Vault version 1.13+.
     * 
     */
    public Optional<Output<Boolean>> ocspEnabled() {
        return Optional.ofNullable(this.ocspEnabled);
    }

    /**
     * If true and an OCSP response cannot
     * be fetched or is of an unknown status, the login will proceed as if the
     * certificate has not been revoked.
     * Requires Vault version 1.13+.
     * 
     */
    @Import(name="ocspFailOpen")
    private @Nullable Output<Boolean> ocspFailOpen;

    /**
     * @return If true and an OCSP response cannot
     * be fetched or is of an unknown status, the login will proceed as if the
     * certificate has not been revoked.
     * Requires Vault version 1.13+.
     * 
     */
    public Optional<Output<Boolean>> ocspFailOpen() {
        return Optional.ofNullable(this.ocspFailOpen);
    }

    /**
     * If set to true, rather than
     * accepting the first successful OCSP response, query all servers and consider
     * the certificate valid only if all servers agree.
     * Requires Vault version 1.13+.
     * 
     */
    @Import(name="ocspQueryAllServers")
    private @Nullable Output<Boolean> ocspQueryAllServers;

    /**
     * @return If set to true, rather than
     * accepting the first successful OCSP response, query all servers and consider
     * the certificate valid only if all servers agree.
     * Requires Vault version 1.13+.
     * 
     */
    public Optional<Output<Boolean>> ocspQueryAllServers() {
        return Optional.ofNullable(this.ocspQueryAllServers);
    }

    /**
     * : A comma-separated list of OCSP
     * server addresses. If unset, the OCSP server is determined from the
     * AuthorityInformationAccess extension on the certificate being inspected.
     * Requires Vault version 1.13+.
     * 
     */
    @Import(name="ocspServersOverrides")
    private @Nullable Output<List<String>> ocspServersOverrides;

    /**
     * @return : A comma-separated list of OCSP
     * server addresses. If unset, the OCSP server is determined from the
     * AuthorityInformationAccess extension on the certificate being inspected.
     * Requires Vault version 1.13+.
     * 
     */
    public Optional<Output<List<String>>> ocspServersOverrides() {
        return Optional.ofNullable(this.ocspServersOverrides);
    }

    /**
     * TLS extensions required on
     * client certificates
     * 
     */
    @Import(name="requiredExtensions")
    private @Nullable Output<List<String>> requiredExtensions;

    /**
     * @return TLS extensions required on
     * client certificates
     * 
     */
    public Optional<Output<List<String>>> requiredExtensions() {
        return Optional.ofNullable(this.requiredExtensions);
    }

    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     * 
     */
    @Import(name="tokenBoundCidrs")
    private @Nullable Output<List<String>> tokenBoundCidrs;

    /**
     * @return Specifies the blocks of IP addresses which are allowed to use the generated token
     * 
     */
    public Optional<Output<List<String>>> tokenBoundCidrs() {
        return Optional.ofNullable(this.tokenBoundCidrs);
    }

    /**
     * Generated Token&#39;s Explicit Maximum TTL in seconds
     * 
     */
    @Import(name="tokenExplicitMaxTtl")
    private @Nullable Output<Integer> tokenExplicitMaxTtl;

    /**
     * @return Generated Token&#39;s Explicit Maximum TTL in seconds
     * 
     */
    public Optional<Output<Integer>> tokenExplicitMaxTtl() {
        return Optional.ofNullable(this.tokenExplicitMaxTtl);
    }

    /**
     * The maximum lifetime of the generated token
     * 
     */
    @Import(name="tokenMaxTtl")
    private @Nullable Output<Integer> tokenMaxTtl;

    /**
     * @return The maximum lifetime of the generated token
     * 
     */
    public Optional<Output<Integer>> tokenMaxTtl() {
        return Optional.ofNullable(this.tokenMaxTtl);
    }

    /**
     * If true, the &#39;default&#39; policy will not automatically be added to generated tokens
     * 
     */
    @Import(name="tokenNoDefaultPolicy")
    private @Nullable Output<Boolean> tokenNoDefaultPolicy;

    /**
     * @return If true, the &#39;default&#39; policy will not automatically be added to generated tokens
     * 
     */
    public Optional<Output<Boolean>> tokenNoDefaultPolicy() {
        return Optional.ofNullable(this.tokenNoDefaultPolicy);
    }

    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     * 
     */
    @Import(name="tokenNumUses")
    private @Nullable Output<Integer> tokenNumUses;

    /**
     * @return The maximum number of times a token may be used, a value of zero means unlimited
     * 
     */
    public Optional<Output<Integer>> tokenNumUses() {
        return Optional.ofNullable(this.tokenNumUses);
    }

    /**
     * Generated Token&#39;s Period
     * 
     */
    @Import(name="tokenPeriod")
    private @Nullable Output<Integer> tokenPeriod;

    /**
     * @return Generated Token&#39;s Period
     * 
     */
    public Optional<Output<Integer>> tokenPeriod() {
        return Optional.ofNullable(this.tokenPeriod);
    }

    /**
     * Generated Token&#39;s Policies
     * 
     */
    @Import(name="tokenPolicies")
    private @Nullable Output<List<String>> tokenPolicies;

    /**
     * @return Generated Token&#39;s Policies
     * 
     */
    public Optional<Output<List<String>>> tokenPolicies() {
        return Optional.ofNullable(this.tokenPolicies);
    }

    /**
     * The initial ttl of the token to generate in seconds
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<Integer> tokenTtl;

    /**
     * @return The initial ttl of the token to generate in seconds
     * 
     */
    public Optional<Output<Integer>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    /**
     * The type of token to generate, service or batch
     * 
     */
    @Import(name="tokenType")
    private @Nullable Output<String> tokenType;

    /**
     * @return The type of token to generate, service or batch
     * 
     */
    public Optional<Output<String>> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    private CertAuthBackendRoleState() {}

    private CertAuthBackendRoleState(CertAuthBackendRoleState $) {
        this.allowedCommonNames = $.allowedCommonNames;
        this.allowedDnsSans = $.allowedDnsSans;
        this.allowedEmailSans = $.allowedEmailSans;
        this.allowedNames = $.allowedNames;
        this.allowedOrganizationalUnits = $.allowedOrganizationalUnits;
        this.allowedUriSans = $.allowedUriSans;
        this.backend = $.backend;
        this.certificate = $.certificate;
        this.displayName = $.displayName;
        this.name = $.name;
        this.namespace = $.namespace;
        this.ocspCaCertificates = $.ocspCaCertificates;
        this.ocspEnabled = $.ocspEnabled;
        this.ocspFailOpen = $.ocspFailOpen;
        this.ocspQueryAllServers = $.ocspQueryAllServers;
        this.ocspServersOverrides = $.ocspServersOverrides;
        this.requiredExtensions = $.requiredExtensions;
        this.tokenBoundCidrs = $.tokenBoundCidrs;
        this.tokenExplicitMaxTtl = $.tokenExplicitMaxTtl;
        this.tokenMaxTtl = $.tokenMaxTtl;
        this.tokenNoDefaultPolicy = $.tokenNoDefaultPolicy;
        this.tokenNumUses = $.tokenNumUses;
        this.tokenPeriod = $.tokenPeriod;
        this.tokenPolicies = $.tokenPolicies;
        this.tokenTtl = $.tokenTtl;
        this.tokenType = $.tokenType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertAuthBackendRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertAuthBackendRoleState $;

        public Builder() {
            $ = new CertAuthBackendRoleState();
        }

        public Builder(CertAuthBackendRoleState defaults) {
            $ = new CertAuthBackendRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedCommonNames Allowed the common names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedCommonNames(@Nullable Output<List<String>> allowedCommonNames) {
            $.allowedCommonNames = allowedCommonNames;
            return this;
        }

        /**
         * @param allowedCommonNames Allowed the common names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedCommonNames(List<String> allowedCommonNames) {
            return allowedCommonNames(Output.of(allowedCommonNames));
        }

        /**
         * @param allowedCommonNames Allowed the common names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedCommonNames(String... allowedCommonNames) {
            return allowedCommonNames(List.of(allowedCommonNames));
        }

        /**
         * @param allowedDnsSans Allowed alternative dns names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedDnsSans(@Nullable Output<List<String>> allowedDnsSans) {
            $.allowedDnsSans = allowedDnsSans;
            return this;
        }

        /**
         * @param allowedDnsSans Allowed alternative dns names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedDnsSans(List<String> allowedDnsSans) {
            return allowedDnsSans(Output.of(allowedDnsSans));
        }

        /**
         * @param allowedDnsSans Allowed alternative dns names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedDnsSans(String... allowedDnsSans) {
            return allowedDnsSans(List.of(allowedDnsSans));
        }

        /**
         * @param allowedEmailSans Allowed emails for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedEmailSans(@Nullable Output<List<String>> allowedEmailSans) {
            $.allowedEmailSans = allowedEmailSans;
            return this;
        }

        /**
         * @param allowedEmailSans Allowed emails for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedEmailSans(List<String> allowedEmailSans) {
            return allowedEmailSans(Output.of(allowedEmailSans));
        }

        /**
         * @param allowedEmailSans Allowed emails for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedEmailSans(String... allowedEmailSans) {
            return allowedEmailSans(List.of(allowedEmailSans));
        }

        /**
         * @param allowedNames DEPRECATED: Please use the individual `allowed_X_sans` parameters instead. Allowed subject names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedNames(@Nullable Output<List<String>> allowedNames) {
            $.allowedNames = allowedNames;
            return this;
        }

        /**
         * @param allowedNames DEPRECATED: Please use the individual `allowed_X_sans` parameters instead. Allowed subject names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedNames(List<String> allowedNames) {
            return allowedNames(Output.of(allowedNames));
        }

        /**
         * @param allowedNames DEPRECATED: Please use the individual `allowed_X_sans` parameters instead. Allowed subject names for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedNames(String... allowedNames) {
            return allowedNames(List.of(allowedNames));
        }

        /**
         * @param allowedOrganizationalUnits Allowed organization units for authenticated client certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrganizationalUnits(@Nullable Output<List<String>> allowedOrganizationalUnits) {
            $.allowedOrganizationalUnits = allowedOrganizationalUnits;
            return this;
        }

        /**
         * @param allowedOrganizationalUnits Allowed organization units for authenticated client certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrganizationalUnits(List<String> allowedOrganizationalUnits) {
            return allowedOrganizationalUnits(Output.of(allowedOrganizationalUnits));
        }

        /**
         * @param allowedOrganizationalUnits Allowed organization units for authenticated client certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrganizationalUnits(String... allowedOrganizationalUnits) {
            return allowedOrganizationalUnits(List.of(allowedOrganizationalUnits));
        }

        /**
         * @param allowedUriSans Allowed URIs for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSans(@Nullable Output<List<String>> allowedUriSans) {
            $.allowedUriSans = allowedUriSans;
            return this;
        }

        /**
         * @param allowedUriSans Allowed URIs for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSans(List<String> allowedUriSans) {
            return allowedUriSans(Output.of(allowedUriSans));
        }

        /**
         * @param allowedUriSans Allowed URIs for authenticated client certificates
         * 
         * @return builder
         * 
         */
        public Builder allowedUriSans(String... allowedUriSans) {
            return allowedUriSans(List.of(allowedUriSans));
        }

        /**
         * @param backend Path to the mounted Cert auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Path to the mounted Cert auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param certificate CA certificate used to validate client certificates
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate CA certificate used to validate client certificates
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param displayName The name to display on tokens issued under this role.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name to display on tokens issued under this role.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name Name of the role
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the role
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param ocspCaCertificates Any additional CA certificates
         * needed to verify OCSP responses. Provided as base64 encoded PEM data.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspCaCertificates(@Nullable Output<String> ocspCaCertificates) {
            $.ocspCaCertificates = ocspCaCertificates;
            return this;
        }

        /**
         * @param ocspCaCertificates Any additional CA certificates
         * needed to verify OCSP responses. Provided as base64 encoded PEM data.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspCaCertificates(String ocspCaCertificates) {
            return ocspCaCertificates(Output.of(ocspCaCertificates));
        }

        /**
         * @param ocspEnabled If enabled, validate certificates&#39;
         * revocation status using OCSP. Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspEnabled(@Nullable Output<Boolean> ocspEnabled) {
            $.ocspEnabled = ocspEnabled;
            return this;
        }

        /**
         * @param ocspEnabled If enabled, validate certificates&#39;
         * revocation status using OCSP. Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspEnabled(Boolean ocspEnabled) {
            return ocspEnabled(Output.of(ocspEnabled));
        }

        /**
         * @param ocspFailOpen If true and an OCSP response cannot
         * be fetched or is of an unknown status, the login will proceed as if the
         * certificate has not been revoked.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspFailOpen(@Nullable Output<Boolean> ocspFailOpen) {
            $.ocspFailOpen = ocspFailOpen;
            return this;
        }

        /**
         * @param ocspFailOpen If true and an OCSP response cannot
         * be fetched or is of an unknown status, the login will proceed as if the
         * certificate has not been revoked.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspFailOpen(Boolean ocspFailOpen) {
            return ocspFailOpen(Output.of(ocspFailOpen));
        }

        /**
         * @param ocspQueryAllServers If set to true, rather than
         * accepting the first successful OCSP response, query all servers and consider
         * the certificate valid only if all servers agree.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspQueryAllServers(@Nullable Output<Boolean> ocspQueryAllServers) {
            $.ocspQueryAllServers = ocspQueryAllServers;
            return this;
        }

        /**
         * @param ocspQueryAllServers If set to true, rather than
         * accepting the first successful OCSP response, query all servers and consider
         * the certificate valid only if all servers agree.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspQueryAllServers(Boolean ocspQueryAllServers) {
            return ocspQueryAllServers(Output.of(ocspQueryAllServers));
        }

        /**
         * @param ocspServersOverrides : A comma-separated list of OCSP
         * server addresses. If unset, the OCSP server is determined from the
         * AuthorityInformationAccess extension on the certificate being inspected.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspServersOverrides(@Nullable Output<List<String>> ocspServersOverrides) {
            $.ocspServersOverrides = ocspServersOverrides;
            return this;
        }

        /**
         * @param ocspServersOverrides : A comma-separated list of OCSP
         * server addresses. If unset, the OCSP server is determined from the
         * AuthorityInformationAccess extension on the certificate being inspected.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspServersOverrides(List<String> ocspServersOverrides) {
            return ocspServersOverrides(Output.of(ocspServersOverrides));
        }

        /**
         * @param ocspServersOverrides : A comma-separated list of OCSP
         * server addresses. If unset, the OCSP server is determined from the
         * AuthorityInformationAccess extension on the certificate being inspected.
         * Requires Vault version 1.13+.
         * 
         * @return builder
         * 
         */
        public Builder ocspServersOverrides(String... ocspServersOverrides) {
            return ocspServersOverrides(List.of(ocspServersOverrides));
        }

        /**
         * @param requiredExtensions TLS extensions required on
         * client certificates
         * 
         * @return builder
         * 
         */
        public Builder requiredExtensions(@Nullable Output<List<String>> requiredExtensions) {
            $.requiredExtensions = requiredExtensions;
            return this;
        }

        /**
         * @param requiredExtensions TLS extensions required on
         * client certificates
         * 
         * @return builder
         * 
         */
        public Builder requiredExtensions(List<String> requiredExtensions) {
            return requiredExtensions(Output.of(requiredExtensions));
        }

        /**
         * @param requiredExtensions TLS extensions required on
         * client certificates
         * 
         * @return builder
         * 
         */
        public Builder requiredExtensions(String... requiredExtensions) {
            return requiredExtensions(List.of(requiredExtensions));
        }

        /**
         * @param tokenBoundCidrs Specifies the blocks of IP addresses which are allowed to use the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(@Nullable Output<List<String>> tokenBoundCidrs) {
            $.tokenBoundCidrs = tokenBoundCidrs;
            return this;
        }

        /**
         * @param tokenBoundCidrs Specifies the blocks of IP addresses which are allowed to use the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(List<String> tokenBoundCidrs) {
            return tokenBoundCidrs(Output.of(tokenBoundCidrs));
        }

        /**
         * @param tokenBoundCidrs Specifies the blocks of IP addresses which are allowed to use the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenBoundCidrs(String... tokenBoundCidrs) {
            return tokenBoundCidrs(List.of(tokenBoundCidrs));
        }

        /**
         * @param tokenExplicitMaxTtl Generated Token&#39;s Explicit Maximum TTL in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(@Nullable Output<Integer> tokenExplicitMaxTtl) {
            $.tokenExplicitMaxTtl = tokenExplicitMaxTtl;
            return this;
        }

        /**
         * @param tokenExplicitMaxTtl Generated Token&#39;s Explicit Maximum TTL in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenExplicitMaxTtl(Integer tokenExplicitMaxTtl) {
            return tokenExplicitMaxTtl(Output.of(tokenExplicitMaxTtl));
        }

        /**
         * @param tokenMaxTtl The maximum lifetime of the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(@Nullable Output<Integer> tokenMaxTtl) {
            $.tokenMaxTtl = tokenMaxTtl;
            return this;
        }

        /**
         * @param tokenMaxTtl The maximum lifetime of the generated token
         * 
         * @return builder
         * 
         */
        public Builder tokenMaxTtl(Integer tokenMaxTtl) {
            return tokenMaxTtl(Output.of(tokenMaxTtl));
        }

        /**
         * @param tokenNoDefaultPolicy If true, the &#39;default&#39; policy will not automatically be added to generated tokens
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(@Nullable Output<Boolean> tokenNoDefaultPolicy) {
            $.tokenNoDefaultPolicy = tokenNoDefaultPolicy;
            return this;
        }

        /**
         * @param tokenNoDefaultPolicy If true, the &#39;default&#39; policy will not automatically be added to generated tokens
         * 
         * @return builder
         * 
         */
        public Builder tokenNoDefaultPolicy(Boolean tokenNoDefaultPolicy) {
            return tokenNoDefaultPolicy(Output.of(tokenNoDefaultPolicy));
        }

        /**
         * @param tokenNumUses The maximum number of times a token may be used, a value of zero means unlimited
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(@Nullable Output<Integer> tokenNumUses) {
            $.tokenNumUses = tokenNumUses;
            return this;
        }

        /**
         * @param tokenNumUses The maximum number of times a token may be used, a value of zero means unlimited
         * 
         * @return builder
         * 
         */
        public Builder tokenNumUses(Integer tokenNumUses) {
            return tokenNumUses(Output.of(tokenNumUses));
        }

        /**
         * @param tokenPeriod Generated Token&#39;s Period
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(@Nullable Output<Integer> tokenPeriod) {
            $.tokenPeriod = tokenPeriod;
            return this;
        }

        /**
         * @param tokenPeriod Generated Token&#39;s Period
         * 
         * @return builder
         * 
         */
        public Builder tokenPeriod(Integer tokenPeriod) {
            return tokenPeriod(Output.of(tokenPeriod));
        }

        /**
         * @param tokenPolicies Generated Token&#39;s Policies
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(@Nullable Output<List<String>> tokenPolicies) {
            $.tokenPolicies = tokenPolicies;
            return this;
        }

        /**
         * @param tokenPolicies Generated Token&#39;s Policies
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(List<String> tokenPolicies) {
            return tokenPolicies(Output.of(tokenPolicies));
        }

        /**
         * @param tokenPolicies Generated Token&#39;s Policies
         * 
         * @return builder
         * 
         */
        public Builder tokenPolicies(String... tokenPolicies) {
            return tokenPolicies(List.of(tokenPolicies));
        }

        /**
         * @param tokenTtl The initial ttl of the token to generate in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<Integer> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl The initial ttl of the token to generate in seconds
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(Integer tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        /**
         * @param tokenType The type of token to generate, service or batch
         * 
         * @return builder
         * 
         */
        public Builder tokenType(@Nullable Output<String> tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        /**
         * @param tokenType The type of token to generate, service or batch
         * 
         * @return builder
         * 
         */
        public Builder tokenType(String tokenType) {
            return tokenType(Output.of(tokenType));
        }

        public CertAuthBackendRoleState build() {
            return $;
        }
    }

}
