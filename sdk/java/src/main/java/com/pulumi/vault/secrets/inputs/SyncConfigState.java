// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.secrets.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyncConfigState extends com.pulumi.resources.ResourceArgs {

    public static final SyncConfigState Empty = new SyncConfigState();

    /**
     * Disables the syncing process between Vault and external destinations. Defaults to `false`.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Disables the syncing process between Vault and external destinations. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The namespace to provision the resource in.
     * This resource can only be configured in the root namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * This resource can only be configured in the root namespace.
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
     * 
     */
    @Import(name="queueCapacity")
    private @Nullable Output<Integer> queueCapacity;

    /**
     * @return Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
     * 
     */
    public Optional<Output<Integer>> queueCapacity() {
        return Optional.ofNullable(this.queueCapacity);
    }

    private SyncConfigState() {}

    private SyncConfigState(SyncConfigState $) {
        this.disabled = $.disabled;
        this.namespace = $.namespace;
        this.queueCapacity = $.queueCapacity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyncConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyncConfigState $;

        public Builder() {
            $ = new SyncConfigState();
        }

        public Builder(SyncConfigState defaults) {
            $ = new SyncConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Disables the syncing process between Vault and external destinations. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Disables the syncing process between Vault and external destinations. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * This resource can only be configured in the root namespace.
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * This resource can only be configured in the root namespace.
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param queueCapacity Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
         * 
         * @return builder
         * 
         */
        public Builder queueCapacity(@Nullable Output<Integer> queueCapacity) {
            $.queueCapacity = queueCapacity;
            return this;
        }

        /**
         * @param queueCapacity Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
         * 
         * @return builder
         * 
         */
        public Builder queueCapacity(Integer queueCapacity) {
            return queueCapacity(Output.of(queueCapacity));
        }

        public SyncConfigState build() {
            return $;
        }
    }

}
