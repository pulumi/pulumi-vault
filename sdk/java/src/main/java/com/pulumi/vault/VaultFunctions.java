// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.inputs.GetAuthBackendArgs;
import com.pulumi.vault.inputs.GetAuthBackendPlainArgs;
import com.pulumi.vault.inputs.GetAuthBackendsArgs;
import com.pulumi.vault.inputs.GetAuthBackendsPlainArgs;
import com.pulumi.vault.inputs.GetNamespaceArgs;
import com.pulumi.vault.inputs.GetNamespacePlainArgs;
import com.pulumi.vault.inputs.GetNamespacesArgs;
import com.pulumi.vault.inputs.GetNamespacesPlainArgs;
import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
import com.pulumi.vault.inputs.GetNomadAccessTokenPlainArgs;
import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
import com.pulumi.vault.inputs.GetPolicyDocumentPlainArgs;
import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
import com.pulumi.vault.inputs.GetRaftAutopilotStatePlainArgs;
import com.pulumi.vault.outputs.GetAuthBackendResult;
import com.pulumi.vault.outputs.GetAuthBackendsResult;
import com.pulumi.vault.outputs.GetNamespaceResult;
import com.pulumi.vault.outputs.GetNamespacesResult;
import com.pulumi.vault.outputs.GetNomadAccessTokenResult;
import com.pulumi.vault.outputs.GetPolicyDocumentResult;
import com.pulumi.vault.outputs.GetRaftAutopilotStateResult;
import java.util.concurrent.CompletableFuture;

public final class VaultFunctions {
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path("userpass")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAuthBackendResult> getAuthBackend(GetAuthBackendArgs args) {
        return getAuthBackend(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path("userpass")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAuthBackendResult> getAuthBackendPlain(GetAuthBackendPlainArgs args) {
        return getAuthBackendPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path("userpass")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAuthBackendResult> getAuthBackend(GetAuthBackendArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getAuthBackend:getAuthBackend", TypeShape.of(GetAuthBackendResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path("userpass")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAuthBackendResult> getAuthBackend(GetAuthBackendArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:index/getAuthBackend:getAuthBackend", TypeShape.of(GetAuthBackendResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path("userpass")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAuthBackendResult> getAuthBackendPlain(GetAuthBackendPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getAuthBackend:getAuthBackend", TypeShape.of(GetAuthBackendResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example-filter = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .type("kubernetes")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAuthBackendsResult> getAuthBackends() {
        return getAuthBackends(GetAuthBackendsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example-filter = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .type("kubernetes")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAuthBackendsResult> getAuthBackendsPlain() {
        return getAuthBackendsPlain(GetAuthBackendsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example-filter = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .type("kubernetes")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAuthBackendsResult> getAuthBackends(GetAuthBackendsArgs args) {
        return getAuthBackends(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example-filter = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .type("kubernetes")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAuthBackendsResult> getAuthBackendsPlain(GetAuthBackendsPlainArgs args) {
        return getAuthBackendsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example-filter = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .type("kubernetes")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAuthBackendsResult> getAuthBackends(GetAuthBackendsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getAuthBackends:getAuthBackends", TypeShape.of(GetAuthBackendsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example-filter = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .type("kubernetes")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetAuthBackendsResult> getAuthBackends(GetAuthBackendsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:index/getAuthBackends:getAuthBackends", TypeShape.of(GetAuthBackendsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example-filter = VaultFunctions.getAuthBackends(GetAuthBackendsArgs.builder()
     *             .type("kubernetes")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetAuthBackendsResult> getAuthBackendsPlain(GetAuthBackendsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getAuthBackends:getAuthBackends", TypeShape.of(GetAuthBackendsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Current namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Single namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1 = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .path("ns1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Nested namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var child = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .namespace("parent")
     *             .path("child")
     *             .build());
     * 
     *         final var fullPath = child.id();
     * 
     *         // -> foo/parent/child/
     *         final var pathFq = child.pathFq();
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespaceResult> getNamespace() {
        return getNamespace(GetNamespaceArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Current namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Single namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1 = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .path("ns1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Nested namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var child = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .namespace("parent")
     *             .path("child")
     *             .build());
     * 
     *         final var fullPath = child.id();
     * 
     *         // -> foo/parent/child/
     *         final var pathFq = child.pathFq();
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNamespaceResult> getNamespacePlain() {
        return getNamespacePlain(GetNamespacePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Current namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Single namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1 = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .path("ns1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Nested namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var child = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .namespace("parent")
     *             .path("child")
     *             .build());
     * 
     *         final var fullPath = child.id();
     * 
     *         // -> foo/parent/child/
     *         final var pathFq = child.pathFq();
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespaceResult> getNamespace(GetNamespaceArgs args) {
        return getNamespace(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Current namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Single namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1 = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .path("ns1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Nested namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var child = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .namespace("parent")
     *             .path("child")
     *             .build());
     * 
     *         final var fullPath = child.id();
     * 
     *         // -> foo/parent/child/
     *         final var pathFq = child.pathFq();
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNamespaceResult> getNamespacePlain(GetNamespacePlainArgs args) {
        return getNamespacePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Current namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Single namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1 = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .path("ns1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Nested namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var child = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .namespace("parent")
     *             .path("child")
     *             .build());
     * 
     *         final var fullPath = child.id();
     * 
     *         // -> foo/parent/child/
     *         final var pathFq = child.pathFq();
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespaceResult> getNamespace(GetNamespaceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getNamespace:getNamespace", TypeShape.of(GetNamespaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Current namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Single namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1 = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .path("ns1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Nested namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var child = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .namespace("parent")
     *             .path("child")
     *             .build());
     * 
     *         final var fullPath = child.id();
     * 
     *         // -> foo/parent/child/
     *         final var pathFq = child.pathFq();
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespaceResult> getNamespace(GetNamespaceArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:index/getNamespace:getNamespace", TypeShape.of(GetNamespaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Current namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Single namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1 = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .path("ns1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### Nested namespace
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var child = VaultFunctions.getNamespace(GetNamespaceArgs.builder()
     *             .namespace("parent")
     *             .path("child")
     *             .build());
     * 
     *         final var fullPath = child.id();
     * 
     *         // -> foo/parent/child/
     *         final var pathFq = child.pathFq();
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNamespaceResult> getNamespacePlain(GetNamespacePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getNamespace:getNamespace", TypeShape.of(GetNamespaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Direct child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### All child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces() {
        return getNamespaces(GetNamespacesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Direct child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### All child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNamespacesResult> getNamespacesPlain() {
        return getNamespacesPlain(GetNamespacesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Direct child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### All child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces(GetNamespacesArgs args) {
        return getNamespaces(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Direct child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### All child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNamespacesResult> getNamespacesPlain(GetNamespacesPlainArgs args) {
        return getNamespacesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Direct child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### All child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces(GetNamespacesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getNamespaces:getNamespaces", TypeShape.of(GetNamespacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Direct child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### All child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNamespacesResult> getNamespaces(GetNamespacesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:index/getNamespaces:getNamespaces", TypeShape.of(GetNamespacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Direct child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     * ### All child namespaces
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNamespacesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var children = VaultFunctions.getNamespaces(GetNamespacesArgs.builder()
     *             .recursive(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNamespacesResult> getNamespacesPlain(GetNamespacesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getNamespaces:getNamespaces", TypeShape.of(GetNamespacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend("config", NomadSecretBackendArgs.builder()
     *             .backend("nomad")
     *             .description("test description")
     *             .defaultLeaseTtlSeconds(3600)
     *             .maxLeaseTtlSeconds(7200)
     *             .address("https://127.0.0.1:4646")
     *             .token("ae20ceaa-...")
     *             .build());
     * 
     *         var test = new NomadSecretRole("test", NomadSecretRoleArgs.builder()
     *             .backend(config.backend())
     *             .role("test")
     *             .type("client")
     *             .policies("readonly")
     *             .build());
     * 
     *         final var token = Output.tuple(config.backend(), test.role()).applyValue(values -> {
     *             var backend = values.t1;
     *             var role = values.t2;
     *             return VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *                 .backend(backend)
     *                 .role(role)
     *                 .build());
     *         });
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNomadAccessTokenResult> getNomadAccessToken(GetNomadAccessTokenArgs args) {
        return getNomadAccessToken(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend("config", NomadSecretBackendArgs.builder()
     *             .backend("nomad")
     *             .description("test description")
     *             .defaultLeaseTtlSeconds(3600)
     *             .maxLeaseTtlSeconds(7200)
     *             .address("https://127.0.0.1:4646")
     *             .token("ae20ceaa-...")
     *             .build());
     * 
     *         var test = new NomadSecretRole("test", NomadSecretRoleArgs.builder()
     *             .backend(config.backend())
     *             .role("test")
     *             .type("client")
     *             .policies("readonly")
     *             .build());
     * 
     *         final var token = Output.tuple(config.backend(), test.role()).applyValue(values -> {
     *             var backend = values.t1;
     *             var role = values.t2;
     *             return VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *                 .backend(backend)
     *                 .role(role)
     *                 .build());
     *         });
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNomadAccessTokenResult> getNomadAccessTokenPlain(GetNomadAccessTokenPlainArgs args) {
        return getNomadAccessTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend("config", NomadSecretBackendArgs.builder()
     *             .backend("nomad")
     *             .description("test description")
     *             .defaultLeaseTtlSeconds(3600)
     *             .maxLeaseTtlSeconds(7200)
     *             .address("https://127.0.0.1:4646")
     *             .token("ae20ceaa-...")
     *             .build());
     * 
     *         var test = new NomadSecretRole("test", NomadSecretRoleArgs.builder()
     *             .backend(config.backend())
     *             .role("test")
     *             .type("client")
     *             .policies("readonly")
     *             .build());
     * 
     *         final var token = Output.tuple(config.backend(), test.role()).applyValue(values -> {
     *             var backend = values.t1;
     *             var role = values.t2;
     *             return VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *                 .backend(backend)
     *                 .role(role)
     *                 .build());
     *         });
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNomadAccessTokenResult> getNomadAccessToken(GetNomadAccessTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getNomadAccessToken:getNomadAccessToken", TypeShape.of(GetNomadAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend("config", NomadSecretBackendArgs.builder()
     *             .backend("nomad")
     *             .description("test description")
     *             .defaultLeaseTtlSeconds(3600)
     *             .maxLeaseTtlSeconds(7200)
     *             .address("https://127.0.0.1:4646")
     *             .token("ae20ceaa-...")
     *             .build());
     * 
     *         var test = new NomadSecretRole("test", NomadSecretRoleArgs.builder()
     *             .backend(config.backend())
     *             .role("test")
     *             .type("client")
     *             .policies("readonly")
     *             .build());
     * 
     *         final var token = Output.tuple(config.backend(), test.role()).applyValue(values -> {
     *             var backend = values.t1;
     *             var role = values.t2;
     *             return VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *                 .backend(backend)
     *                 .role(role)
     *                 .build());
     *         });
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetNomadAccessTokenResult> getNomadAccessToken(GetNomadAccessTokenArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:index/getNomadAccessToken:getNomadAccessToken", TypeShape.of(GetNomadAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend("config", NomadSecretBackendArgs.builder()
     *             .backend("nomad")
     *             .description("test description")
     *             .defaultLeaseTtlSeconds(3600)
     *             .maxLeaseTtlSeconds(7200)
     *             .address("https://127.0.0.1:4646")
     *             .token("ae20ceaa-...")
     *             .build());
     * 
     *         var test = new NomadSecretRole("test", NomadSecretRoleArgs.builder()
     *             .backend(config.backend())
     *             .role("test")
     *             .type("client")
     *             .policies("readonly")
     *             .build());
     * 
     *         final var token = Output.tuple(config.backend(), test.role()).applyValue(values -> {
     *             var backend = values.t1;
     *             var role = values.t2;
     *             return VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *                 .backend(backend)
     *                 .role(role)
     *                 .build());
     *         });
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetNomadAccessTokenResult> getNomadAccessTokenPlain(GetNomadAccessTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getNomadAccessToken:getNomadAccessToken", TypeShape.of(GetNomadAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path("secret/*")
     *                 .capabilities(                
     *                     "create",
     *                     "read",
     *                     "update",
     *                     "delete",
     *                     "list")
     *                 .description("allow all on secrets")
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
     *             .name("example_policy")
     *             .policy(example.hcl())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPolicyDocumentResult> getPolicyDocument() {
        return getPolicyDocument(GetPolicyDocumentArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path("secret/*")
     *                 .capabilities(                
     *                     "create",
     *                     "read",
     *                     "update",
     *                     "delete",
     *                     "list")
     *                 .description("allow all on secrets")
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
     *             .name("example_policy")
     *             .policy(example.hcl())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetPolicyDocumentResult> getPolicyDocumentPlain() {
        return getPolicyDocumentPlain(GetPolicyDocumentPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path("secret/*")
     *                 .capabilities(                
     *                     "create",
     *                     "read",
     *                     "update",
     *                     "delete",
     *                     "list")
     *                 .description("allow all on secrets")
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
     *             .name("example_policy")
     *             .policy(example.hcl())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPolicyDocumentResult> getPolicyDocument(GetPolicyDocumentArgs args) {
        return getPolicyDocument(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path("secret/*")
     *                 .capabilities(                
     *                     "create",
     *                     "read",
     *                     "update",
     *                     "delete",
     *                     "list")
     *                 .description("allow all on secrets")
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
     *             .name("example_policy")
     *             .policy(example.hcl())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetPolicyDocumentResult> getPolicyDocumentPlain(GetPolicyDocumentPlainArgs args) {
        return getPolicyDocumentPlain(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path("secret/*")
     *                 .capabilities(                
     *                     "create",
     *                     "read",
     *                     "update",
     *                     "delete",
     *                     "list")
     *                 .description("allow all on secrets")
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
     *             .name("example_policy")
     *             .policy(example.hcl())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPolicyDocumentResult> getPolicyDocument(GetPolicyDocumentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getPolicyDocument:getPolicyDocument", TypeShape.of(GetPolicyDocumentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path("secret/*")
     *                 .capabilities(                
     *                     "create",
     *                     "read",
     *                     "update",
     *                     "delete",
     *                     "list")
     *                 .description("allow all on secrets")
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
     *             .name("example_policy")
     *             .policy(example.hcl())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetPolicyDocumentResult> getPolicyDocument(GetPolicyDocumentArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:index/getPolicyDocument:getPolicyDocument", TypeShape.of(GetPolicyDocumentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path("secret/*")
     *                 .capabilities(                
     *                     "create",
     *                     "read",
     *                     "update",
     *                     "delete",
     *                     "list")
     *                 .description("allow all on secrets")
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()
     *             .name("example_policy")
     *             .policy(example.hcl())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetPolicyDocumentResult> getPolicyDocumentPlain(GetPolicyDocumentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getPolicyDocument:getPolicyDocument", TypeShape.of(GetPolicyDocumentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState(GetRaftAutopilotStateArgs.builder()
     *             .build());
     * 
     *         ctx.export("failure-tolerance", main.failureTolerance());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRaftAutopilotStateResult> getRaftAutopilotState() {
        return getRaftAutopilotState(GetRaftAutopilotStateArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState(GetRaftAutopilotStateArgs.builder()
     *             .build());
     * 
     *         ctx.export("failure-tolerance", main.failureTolerance());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRaftAutopilotStateResult> getRaftAutopilotStatePlain() {
        return getRaftAutopilotStatePlain(GetRaftAutopilotStatePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState(GetRaftAutopilotStateArgs.builder()
     *             .build());
     * 
     *         ctx.export("failure-tolerance", main.failureTolerance());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRaftAutopilotStateResult> getRaftAutopilotState(GetRaftAutopilotStateArgs args) {
        return getRaftAutopilotState(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState(GetRaftAutopilotStateArgs.builder()
     *             .build());
     * 
     *         ctx.export("failure-tolerance", main.failureTolerance());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRaftAutopilotStateResult> getRaftAutopilotStatePlain(GetRaftAutopilotStatePlainArgs args) {
        return getRaftAutopilotStatePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState(GetRaftAutopilotStateArgs.builder()
     *             .build());
     * 
     *         ctx.export("failure-tolerance", main.failureTolerance());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRaftAutopilotStateResult> getRaftAutopilotState(GetRaftAutopilotStateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getRaftAutopilotState:getRaftAutopilotState", TypeShape.of(GetRaftAutopilotStateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState(GetRaftAutopilotStateArgs.builder()
     *             .build());
     * 
     *         ctx.export("failure-tolerance", main.failureTolerance());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static Output<GetRaftAutopilotStateResult> getRaftAutopilotState(GetRaftAutopilotStateArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("vault:index/getRaftAutopilotState:getRaftAutopilotState", TypeShape.of(GetRaftAutopilotStateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState(GetRaftAutopilotStateArgs.builder()
     *             .build());
     * 
     *         ctx.export("failure-tolerance", main.failureTolerance());
     *     }
     * }
     * }
     * </pre>
     * 
     */
    public static CompletableFuture<GetRaftAutopilotStateResult> getRaftAutopilotStatePlain(GetRaftAutopilotStatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getRaftAutopilotState:getRaftAutopilotState", TypeShape.of(GetRaftAutopilotStateResult.class), args, Utilities.withVersion(options));
    }
}
