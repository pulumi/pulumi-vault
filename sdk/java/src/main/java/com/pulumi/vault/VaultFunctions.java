// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.inputs.GetAuthBackendArgs;
import com.pulumi.vault.inputs.GetAuthBackendPlainArgs;
import com.pulumi.vault.inputs.GetAuthBackendsArgs;
import com.pulumi.vault.inputs.GetAuthBackendsPlainArgs;
import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
import com.pulumi.vault.inputs.GetNomadAccessTokenPlainArgs;
import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
import com.pulumi.vault.inputs.GetPolicyDocumentPlainArgs;
import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
import com.pulumi.vault.inputs.GetRaftAutopilotStatePlainArgs;
import com.pulumi.vault.outputs.GetAuthBackendResult;
import com.pulumi.vault.outputs.GetAuthBackendsResult;
import com.pulumi.vault.outputs.GetNomadAccessTokenResult;
import com.pulumi.vault.outputs.GetPolicyDocumentResult;
import com.pulumi.vault.outputs.GetRaftAutopilotStateResult;
import java.util.concurrent.CompletableFuture;

public final class VaultFunctions {
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path(&#34;userpass&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAuthBackendResult> getAuthBackend(GetAuthBackendArgs args) {
        return getAuthBackend(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path(&#34;userpass&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAuthBackendResult> getAuthBackendPlain(GetAuthBackendPlainArgs args) {
        return getAuthBackendPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path(&#34;userpass&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAuthBackendResult> getAuthBackend(GetAuthBackendArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getAuthBackend:getAuthBackend", TypeShape.of(GetAuthBackendResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetAuthBackendArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = VaultFunctions.getAuthBackend(GetAuthBackendArgs.builder()
     *             .path(&#34;userpass&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAuthBackendResult> getAuthBackendPlain(GetAuthBackendPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getAuthBackend:getAuthBackend", TypeShape.of(GetAuthBackendResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetAuthBackendsResult> getAuthBackends() {
        return getAuthBackends(GetAuthBackendsArgs.Empty, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetAuthBackendsResult> getAuthBackendsPlain() {
        return getAuthBackendsPlain(GetAuthBackendsPlainArgs.Empty, InvokeOptions.Empty);
    }
    public static Output<GetAuthBackendsResult> getAuthBackends(GetAuthBackendsArgs args) {
        return getAuthBackends(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetAuthBackendsResult> getAuthBackendsPlain(GetAuthBackendsPlainArgs args) {
        return getAuthBackendsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetAuthBackendsResult> getAuthBackends(GetAuthBackendsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getAuthBackends:getAuthBackends", TypeShape.of(GetAuthBackendsResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetAuthBackendsResult> getAuthBackendsPlain(GetAuthBackendsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getAuthBackends:getAuthBackends", TypeShape.of(GetAuthBackendsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend(&#34;config&#34;, NomadSecretBackendArgs.builder()        
     *             .backend(&#34;nomad&#34;)
     *             .description(&#34;test description&#34;)
     *             .defaultLeaseTtlSeconds(&#34;3600&#34;)
     *             .maxLeaseTtlSeconds(&#34;7200&#34;)
     *             .address(&#34;https://127.0.0.1:4646&#34;)
     *             .token(&#34;ae20ceaa-...&#34;)
     *             .build());
     * 
     *         var test = new NomadSecretRole(&#34;test&#34;, NomadSecretRoleArgs.builder()        
     *             .backend(config.backend())
     *             .role(&#34;test&#34;)
     *             .type(&#34;client&#34;)
     *             .policies(&#34;readonly&#34;)
     *             .build());
     * 
     *         final var token = VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *             .backend(config.backend())
     *             .role(test.role())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNomadAccessTokenResult> getNomadAccessToken(GetNomadAccessTokenArgs args) {
        return getNomadAccessToken(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend(&#34;config&#34;, NomadSecretBackendArgs.builder()        
     *             .backend(&#34;nomad&#34;)
     *             .description(&#34;test description&#34;)
     *             .defaultLeaseTtlSeconds(&#34;3600&#34;)
     *             .maxLeaseTtlSeconds(&#34;7200&#34;)
     *             .address(&#34;https://127.0.0.1:4646&#34;)
     *             .token(&#34;ae20ceaa-...&#34;)
     *             .build());
     * 
     *         var test = new NomadSecretRole(&#34;test&#34;, NomadSecretRoleArgs.builder()        
     *             .backend(config.backend())
     *             .role(&#34;test&#34;)
     *             .type(&#34;client&#34;)
     *             .policies(&#34;readonly&#34;)
     *             .build());
     * 
     *         final var token = VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *             .backend(config.backend())
     *             .role(test.role())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNomadAccessTokenResult> getNomadAccessTokenPlain(GetNomadAccessTokenPlainArgs args) {
        return getNomadAccessTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend(&#34;config&#34;, NomadSecretBackendArgs.builder()        
     *             .backend(&#34;nomad&#34;)
     *             .description(&#34;test description&#34;)
     *             .defaultLeaseTtlSeconds(&#34;3600&#34;)
     *             .maxLeaseTtlSeconds(&#34;7200&#34;)
     *             .address(&#34;https://127.0.0.1:4646&#34;)
     *             .token(&#34;ae20ceaa-...&#34;)
     *             .build());
     * 
     *         var test = new NomadSecretRole(&#34;test&#34;, NomadSecretRoleArgs.builder()        
     *             .backend(config.backend())
     *             .role(&#34;test&#34;)
     *             .type(&#34;client&#34;)
     *             .policies(&#34;readonly&#34;)
     *             .build());
     * 
     *         final var token = VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *             .backend(config.backend())
     *             .role(test.role())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNomadAccessTokenResult> getNomadAccessToken(GetNomadAccessTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getNomadAccessToken:getNomadAccessToken", TypeShape.of(GetNomadAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.NomadSecretBackend;
     * import com.pulumi.vault.NomadSecretBackendArgs;
     * import com.pulumi.vault.NomadSecretRole;
     * import com.pulumi.vault.NomadSecretRoleArgs;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetNomadAccessTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var config = new NomadSecretBackend(&#34;config&#34;, NomadSecretBackendArgs.builder()        
     *             .backend(&#34;nomad&#34;)
     *             .description(&#34;test description&#34;)
     *             .defaultLeaseTtlSeconds(&#34;3600&#34;)
     *             .maxLeaseTtlSeconds(&#34;7200&#34;)
     *             .address(&#34;https://127.0.0.1:4646&#34;)
     *             .token(&#34;ae20ceaa-...&#34;)
     *             .build());
     * 
     *         var test = new NomadSecretRole(&#34;test&#34;, NomadSecretRoleArgs.builder()        
     *             .backend(config.backend())
     *             .role(&#34;test&#34;)
     *             .type(&#34;client&#34;)
     *             .policies(&#34;readonly&#34;)
     *             .build());
     * 
     *         final var token = VaultFunctions.getNomadAccessToken(GetNomadAccessTokenArgs.builder()
     *             .backend(config.backend())
     *             .role(test.role())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNomadAccessTokenResult> getNomadAccessTokenPlain(GetNomadAccessTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getNomadAccessToken:getNomadAccessToken", TypeShape.of(GetNomadAccessTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examplePolicyDocument = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path(&#34;secret/*&#34;)
     *                 .capabilities(                
     *                     &#34;create&#34;,
     *                     &#34;read&#34;,
     *                     &#34;update&#34;,
     *                     &#34;delete&#34;,
     *                     &#34;list&#34;)
     *                 .description(&#34;allow all on secrets&#34;)
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy(&#34;examplePolicy&#34;, PolicyArgs.builder()        
     *             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.hcl()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPolicyDocumentResult> getPolicyDocument() {
        return getPolicyDocument(GetPolicyDocumentArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examplePolicyDocument = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path(&#34;secret/*&#34;)
     *                 .capabilities(                
     *                     &#34;create&#34;,
     *                     &#34;read&#34;,
     *                     &#34;update&#34;,
     *                     &#34;delete&#34;,
     *                     &#34;list&#34;)
     *                 .description(&#34;allow all on secrets&#34;)
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy(&#34;examplePolicy&#34;, PolicyArgs.builder()        
     *             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.hcl()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPolicyDocumentResult> getPolicyDocumentPlain() {
        return getPolicyDocumentPlain(GetPolicyDocumentPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examplePolicyDocument = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path(&#34;secret/*&#34;)
     *                 .capabilities(                
     *                     &#34;create&#34;,
     *                     &#34;read&#34;,
     *                     &#34;update&#34;,
     *                     &#34;delete&#34;,
     *                     &#34;list&#34;)
     *                 .description(&#34;allow all on secrets&#34;)
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy(&#34;examplePolicy&#34;, PolicyArgs.builder()        
     *             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.hcl()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPolicyDocumentResult> getPolicyDocument(GetPolicyDocumentArgs args) {
        return getPolicyDocument(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examplePolicyDocument = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path(&#34;secret/*&#34;)
     *                 .capabilities(                
     *                     &#34;create&#34;,
     *                     &#34;read&#34;,
     *                     &#34;update&#34;,
     *                     &#34;delete&#34;,
     *                     &#34;list&#34;)
     *                 .description(&#34;allow all on secrets&#34;)
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy(&#34;examplePolicy&#34;, PolicyArgs.builder()        
     *             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.hcl()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPolicyDocumentResult> getPolicyDocumentPlain(GetPolicyDocumentPlainArgs args) {
        return getPolicyDocumentPlain(args, InvokeOptions.Empty);
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examplePolicyDocument = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path(&#34;secret/*&#34;)
     *                 .capabilities(                
     *                     &#34;create&#34;,
     *                     &#34;read&#34;,
     *                     &#34;update&#34;,
     *                     &#34;delete&#34;,
     *                     &#34;list&#34;)
     *                 .description(&#34;allow all on secrets&#34;)
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy(&#34;examplePolicy&#34;, PolicyArgs.builder()        
     *             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.hcl()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPolicyDocumentResult> getPolicyDocument(GetPolicyDocumentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getPolicyDocument:getPolicyDocument", TypeShape.of(GetPolicyDocumentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This is a data source which can be used to construct a HCL representation of an Vault policy document, for use with resources which expect policy documents, such as the `vault.Policy` resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetPolicyDocumentArgs;
     * import com.pulumi.vault.Policy;
     * import com.pulumi.vault.PolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examplePolicyDocument = VaultFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
     *             .rules(GetPolicyDocumentRuleArgs.builder()
     *                 .path(&#34;secret/*&#34;)
     *                 .capabilities(                
     *                     &#34;create&#34;,
     *                     &#34;read&#34;,
     *                     &#34;update&#34;,
     *                     &#34;delete&#34;,
     *                     &#34;list&#34;)
     *                 .description(&#34;allow all on secrets&#34;)
     *                 .build())
     *             .build());
     * 
     *         var examplePolicy = new Policy(&#34;examplePolicy&#34;, PolicyArgs.builder()        
     *             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.hcl()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPolicyDocumentResult> getPolicyDocumentPlain(GetPolicyDocumentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getPolicyDocument:getPolicyDocument", TypeShape.of(GetPolicyDocumentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Displays the state of the raft cluster under integrated storage as seen by
     * autopilot. It shows whether autopilot thinks the cluster is healthy or not, and
     * how many nodes could fail before the cluster becomes unhealthy (&#34;Failure
     * Tolerance&#34;). For more information, please refer to the
     * [Vault documentation](https://developer.hashicorp.com/vault/api-docs/system/storage/raftautopilot#get-cluster-state).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState();
     * 
     *         ctx.export(&#34;failure-tolerance&#34;, main.applyValue(getRaftAutopilotStateResult -&gt; getRaftAutopilotStateResult.failureTolerance()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRaftAutopilotStateResult> getRaftAutopilotState() {
        return getRaftAutopilotState(GetRaftAutopilotStateArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Displays the state of the raft cluster under integrated storage as seen by
     * autopilot. It shows whether autopilot thinks the cluster is healthy or not, and
     * how many nodes could fail before the cluster becomes unhealthy (&#34;Failure
     * Tolerance&#34;). For more information, please refer to the
     * [Vault documentation](https://developer.hashicorp.com/vault/api-docs/system/storage/raftautopilot#get-cluster-state).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState();
     * 
     *         ctx.export(&#34;failure-tolerance&#34;, main.applyValue(getRaftAutopilotStateResult -&gt; getRaftAutopilotStateResult.failureTolerance()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRaftAutopilotStateResult> getRaftAutopilotStatePlain() {
        return getRaftAutopilotStatePlain(GetRaftAutopilotStatePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Displays the state of the raft cluster under integrated storage as seen by
     * autopilot. It shows whether autopilot thinks the cluster is healthy or not, and
     * how many nodes could fail before the cluster becomes unhealthy (&#34;Failure
     * Tolerance&#34;). For more information, please refer to the
     * [Vault documentation](https://developer.hashicorp.com/vault/api-docs/system/storage/raftautopilot#get-cluster-state).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState();
     * 
     *         ctx.export(&#34;failure-tolerance&#34;, main.applyValue(getRaftAutopilotStateResult -&gt; getRaftAutopilotStateResult.failureTolerance()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRaftAutopilotStateResult> getRaftAutopilotState(GetRaftAutopilotStateArgs args) {
        return getRaftAutopilotState(args, InvokeOptions.Empty);
    }
    /**
     * Displays the state of the raft cluster under integrated storage as seen by
     * autopilot. It shows whether autopilot thinks the cluster is healthy or not, and
     * how many nodes could fail before the cluster becomes unhealthy (&#34;Failure
     * Tolerance&#34;). For more information, please refer to the
     * [Vault documentation](https://developer.hashicorp.com/vault/api-docs/system/storage/raftautopilot#get-cluster-state).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState();
     * 
     *         ctx.export(&#34;failure-tolerance&#34;, main.applyValue(getRaftAutopilotStateResult -&gt; getRaftAutopilotStateResult.failureTolerance()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRaftAutopilotStateResult> getRaftAutopilotStatePlain(GetRaftAutopilotStatePlainArgs args) {
        return getRaftAutopilotStatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Displays the state of the raft cluster under integrated storage as seen by
     * autopilot. It shows whether autopilot thinks the cluster is healthy or not, and
     * how many nodes could fail before the cluster becomes unhealthy (&#34;Failure
     * Tolerance&#34;). For more information, please refer to the
     * [Vault documentation](https://developer.hashicorp.com/vault/api-docs/system/storage/raftautopilot#get-cluster-state).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState();
     * 
     *         ctx.export(&#34;failure-tolerance&#34;, main.applyValue(getRaftAutopilotStateResult -&gt; getRaftAutopilotStateResult.failureTolerance()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRaftAutopilotStateResult> getRaftAutopilotState(GetRaftAutopilotStateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("vault:index/getRaftAutopilotState:getRaftAutopilotState", TypeShape.of(GetRaftAutopilotStateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Displays the state of the raft cluster under integrated storage as seen by
     * autopilot. It shows whether autopilot thinks the cluster is healthy or not, and
     * how many nodes could fail before the cluster becomes unhealthy (&#34;Failure
     * Tolerance&#34;). For more information, please refer to the
     * [Vault documentation](https://developer.hashicorp.com/vault/api-docs/system/storage/raftautopilot#get-cluster-state).
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.vault.VaultFunctions;
     * import com.pulumi.vault.inputs.GetRaftAutopilotStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = VaultFunctions.getRaftAutopilotState();
     * 
     *         ctx.export(&#34;failure-tolerance&#34;, main.applyValue(getRaftAutopilotStateResult -&gt; getRaftAutopilotStateResult.failureTolerance()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRaftAutopilotStateResult> getRaftAutopilotStatePlain(GetRaftAutopilotStatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("vault:index/getRaftAutopilotState:getRaftAutopilotState", TypeShape.of(GetRaftAutopilotStateResult.class), args, Utilities.withVersion(options));
    }
}
