// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vault.inputs.GetPolicyDocumentRuleAllowedParameterArgs;
import com.pulumi.vault.inputs.GetPolicyDocumentRuleDeniedParameterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyDocumentRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPolicyDocumentRuleArgs Empty = new GetPolicyDocumentRuleArgs();

    /**
     * Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
     * 
     */
    @Import(name="allowedParameters")
    private @Nullable Output<List<GetPolicyDocumentRuleAllowedParameterArgs>> allowedParameters;

    /**
     * @return Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
     * 
     */
    public Optional<Output<List<GetPolicyDocumentRuleAllowedParameterArgs>>> allowedParameters() {
        return Optional.ofNullable(this.allowedParameters);
    }

    /**
     * A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
     * 
     */
    @Import(name="capabilities", required=true)
    private Output<List<String>> capabilities;

    /**
     * @return A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
     * 
     */
    public Output<List<String>> capabilities() {
        return this.capabilities;
    }

    /**
     * Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
     * 
     */
    @Import(name="deniedParameters")
    private @Nullable Output<List<GetPolicyDocumentRuleDeniedParameterArgs>> deniedParameters;

    /**
     * @return Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
     * 
     */
    public Optional<Output<List<GetPolicyDocumentRuleDeniedParameterArgs>>> deniedParameters() {
        return Optional.ofNullable(this.deniedParameters);
    }

    /**
     * Description of the rule. Will be added as a comment to rendered rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the rule. Will be added as a comment to rendered rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The maximum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    @Import(name="maxWrappingTtl")
    private @Nullable Output<String> maxWrappingTtl;

    /**
     * @return The maximum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    public Optional<Output<String>> maxWrappingTtl() {
        return Optional.ofNullable(this.maxWrappingTtl);
    }

    /**
     * The minimum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    @Import(name="minWrappingTtl")
    private @Nullable Output<String> minWrappingTtl;

    /**
     * @return The minimum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    public Optional<Output<String>> minWrappingTtl() {
        return Optional.ofNullable(this.minWrappingTtl);
    }

    /**
     * A path in Vault that this rule applies to.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return A path in Vault that this rule applies to.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * A list of parameters that must be specified.
     * 
     */
    @Import(name="requiredParameters")
    private @Nullable Output<List<String>> requiredParameters;

    /**
     * @return A list of parameters that must be specified.
     * 
     */
    public Optional<Output<List<String>>> requiredParameters() {
        return Optional.ofNullable(this.requiredParameters);
    }

    private GetPolicyDocumentRuleArgs() {}

    private GetPolicyDocumentRuleArgs(GetPolicyDocumentRuleArgs $) {
        this.allowedParameters = $.allowedParameters;
        this.capabilities = $.capabilities;
        this.deniedParameters = $.deniedParameters;
        this.description = $.description;
        this.maxWrappingTtl = $.maxWrappingTtl;
        this.minWrappingTtl = $.minWrappingTtl;
        this.path = $.path;
        this.requiredParameters = $.requiredParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyDocumentRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyDocumentRuleArgs $;

        public Builder() {
            $ = new GetPolicyDocumentRuleArgs();
        }

        public Builder(GetPolicyDocumentRuleArgs defaults) {
            $ = new GetPolicyDocumentRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedParameters Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder allowedParameters(@Nullable Output<List<GetPolicyDocumentRuleAllowedParameterArgs>> allowedParameters) {
            $.allowedParameters = allowedParameters;
            return this;
        }

        /**
         * @param allowedParameters Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder allowedParameters(List<GetPolicyDocumentRuleAllowedParameterArgs> allowedParameters) {
            return allowedParameters(Output.of(allowedParameters));
        }

        /**
         * @param allowedParameters Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder allowedParameters(GetPolicyDocumentRuleAllowedParameterArgs... allowedParameters) {
            return allowedParameters(List.of(allowedParameters));
        }

        /**
         * @param capabilities A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
         * 
         * @return builder
         * 
         */
        public Builder capabilities(Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
         * 
         * @return builder
         * 
         */
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param deniedParameters Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder deniedParameters(@Nullable Output<List<GetPolicyDocumentRuleDeniedParameterArgs>> deniedParameters) {
            $.deniedParameters = deniedParameters;
            return this;
        }

        /**
         * @param deniedParameters Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder deniedParameters(List<GetPolicyDocumentRuleDeniedParameterArgs> deniedParameters) {
            return deniedParameters(Output.of(deniedParameters));
        }

        /**
         * @param deniedParameters Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder deniedParameters(GetPolicyDocumentRuleDeniedParameterArgs... deniedParameters) {
            return deniedParameters(List.of(deniedParameters));
        }

        /**
         * @param description Description of the rule. Will be added as a comment to rendered rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the rule. Will be added as a comment to rendered rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param maxWrappingTtl The maximum allowed TTL that clients can specify for a wrapped response.
         * 
         * @return builder
         * 
         */
        public Builder maxWrappingTtl(@Nullable Output<String> maxWrappingTtl) {
            $.maxWrappingTtl = maxWrappingTtl;
            return this;
        }

        /**
         * @param maxWrappingTtl The maximum allowed TTL that clients can specify for a wrapped response.
         * 
         * @return builder
         * 
         */
        public Builder maxWrappingTtl(String maxWrappingTtl) {
            return maxWrappingTtl(Output.of(maxWrappingTtl));
        }

        /**
         * @param minWrappingTtl The minimum allowed TTL that clients can specify for a wrapped response.
         * 
         * @return builder
         * 
         */
        public Builder minWrappingTtl(@Nullable Output<String> minWrappingTtl) {
            $.minWrappingTtl = minWrappingTtl;
            return this;
        }

        /**
         * @param minWrappingTtl The minimum allowed TTL that clients can specify for a wrapped response.
         * 
         * @return builder
         * 
         */
        public Builder minWrappingTtl(String minWrappingTtl) {
            return minWrappingTtl(Output.of(minWrappingTtl));
        }

        /**
         * @param path A path in Vault that this rule applies to.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path A path in Vault that this rule applies to.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param requiredParameters A list of parameters that must be specified.
         * 
         * @return builder
         * 
         */
        public Builder requiredParameters(@Nullable Output<List<String>> requiredParameters) {
            $.requiredParameters = requiredParameters;
            return this;
        }

        /**
         * @param requiredParameters A list of parameters that must be specified.
         * 
         * @return builder
         * 
         */
        public Builder requiredParameters(List<String> requiredParameters) {
            return requiredParameters(Output.of(requiredParameters));
        }

        /**
         * @param requiredParameters A list of parameters that must be specified.
         * 
         * @return builder
         * 
         */
        public Builder requiredParameters(String... requiredParameters) {
            return requiredParameters(List.of(requiredParameters));
        }

        public GetPolicyDocumentRuleArgs build() {
            if ($.capabilities == null) {
                throw new MissingRequiredPropertyException("GetPolicyDocumentRuleArgs", "capabilities");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetPolicyDocumentRuleArgs", "path");
            }
            return $;
        }
    }

}
