// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ssh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vault.ssh.inputs.SecretBackendRoleAllowedUserKeyConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendRoleArgs Empty = new SecretBackendRoleArgs();

    /**
     * When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
     * 
     */
    @Import(name="algorithmSigner")
    private @Nullable Output<String> algorithmSigner;

    /**
     * @return When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
     * 
     */
    public Optional<Output<String>> algorithmSigner() {
        return Optional.ofNullable(this.algorithmSigner);
    }

    /**
     * Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
     * 
     */
    @Import(name="allowBareDomains")
    private @Nullable Output<Boolean> allowBareDomains;

    /**
     * @return Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
     * 
     */
    public Optional<Output<Boolean>> allowBareDomains() {
        return Optional.ofNullable(this.allowBareDomains);
    }

    /**
     * Specifies if certificates are allowed to be signed for use as a &#39;host&#39;.
     * 
     */
    @Import(name="allowHostCertificates")
    private @Nullable Output<Boolean> allowHostCertificates;

    /**
     * @return Specifies if certificates are allowed to be signed for use as a &#39;host&#39;.
     * 
     */
    public Optional<Output<Boolean>> allowHostCertificates() {
        return Optional.ofNullable(this.allowHostCertificates);
    }

    /**
     * Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
     * 
     */
    @Import(name="allowSubdomains")
    private @Nullable Output<Boolean> allowSubdomains;

    /**
     * @return Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
     * 
     */
    public Optional<Output<Boolean>> allowSubdomains() {
        return Optional.ofNullable(this.allowSubdomains);
    }

    /**
     * Specifies if certificates are allowed to be signed for use as a &#39;user&#39;.
     * 
     */
    @Import(name="allowUserCertificates")
    private @Nullable Output<Boolean> allowUserCertificates;

    /**
     * @return Specifies if certificates are allowed to be signed for use as a &#39;user&#39;.
     * 
     */
    public Optional<Output<Boolean>> allowUserCertificates() {
        return Optional.ofNullable(this.allowUserCertificates);
    }

    /**
     * Specifies if users can override the key ID for a signed certificate with the `key_id` field.
     * 
     */
    @Import(name="allowUserKeyIds")
    private @Nullable Output<Boolean> allowUserKeyIds;

    /**
     * @return Specifies if users can override the key ID for a signed certificate with the `key_id` field.
     * 
     */
    public Optional<Output<Boolean>> allowUserKeyIds() {
        return Optional.ofNullable(this.allowUserKeyIds);
    }

    /**
     * Specifies a comma-separated list of critical options that certificates can have when signed.
     * 
     */
    @Import(name="allowedCriticalOptions")
    private @Nullable Output<String> allowedCriticalOptions;

    /**
     * @return Specifies a comma-separated list of critical options that certificates can have when signed.
     * 
     */
    public Optional<Output<String>> allowedCriticalOptions() {
        return Optional.ofNullable(this.allowedCriticalOptions);
    }

    /**
     * The list of domains for which a client can request a host certificate.
     * 
     */
    @Import(name="allowedDomains")
    private @Nullable Output<String> allowedDomains;

    /**
     * @return The list of domains for which a client can request a host certificate.
     * 
     */
    public Optional<Output<String>> allowedDomains() {
        return Optional.ofNullable(this.allowedDomains);
    }

    /**
     * Specifies if `allowed_domains` can be declared using
     * identity template policies. Non-templated domains are also permitted.
     * 
     */
    @Import(name="allowedDomainsTemplate")
    private @Nullable Output<Boolean> allowedDomainsTemplate;

    /**
     * @return Specifies if `allowed_domains` can be declared using
     * identity template policies. Non-templated domains are also permitted.
     * 
     */
    public Optional<Output<Boolean>> allowedDomainsTemplate() {
        return Optional.ofNullable(this.allowedDomainsTemplate);
    }

    /**
     * Specifies a comma-separated list of extensions that certificates can have when signed.
     * 
     */
    @Import(name="allowedExtensions")
    private @Nullable Output<String> allowedExtensions;

    /**
     * @return Specifies a comma-separated list of extensions that certificates can have when signed.
     * 
     */
    public Optional<Output<String>> allowedExtensions() {
        return Optional.ofNullable(this.allowedExtensions);
    }

    /**
     * Set of configuration blocks to define allowed\
     * user key configuration, like key type and their lengths. Can be specified multiple times.
     * *See Configuration-Options for more info*
     * 
     */
    @Import(name="allowedUserKeyConfigs")
    private @Nullable Output<List<SecretBackendRoleAllowedUserKeyConfigArgs>> allowedUserKeyConfigs;

    /**
     * @return Set of configuration blocks to define allowed\
     * user key configuration, like key type and their lengths. Can be specified multiple times.
     * *See Configuration-Options for more info*
     * 
     */
    public Optional<Output<List<SecretBackendRoleAllowedUserKeyConfigArgs>>> allowedUserKeyConfigs() {
        return Optional.ofNullable(this.allowedUserKeyConfigs);
    }

    /**
     * Specifies a map of ssh key types and their expected sizes which
     * are allowed to be signed by the CA type.
     * *Deprecated: use* allowed_user_key_config *instead*
     * 
     * @deprecated
     * Set in allowed_user_key_config
     * 
     */
    @Deprecated /* Set in allowed_user_key_config */
    @Import(name="allowedUserKeyLengths")
    private @Nullable Output<Map<String,Integer>> allowedUserKeyLengths;

    /**
     * @return Specifies a map of ssh key types and their expected sizes which
     * are allowed to be signed by the CA type.
     * *Deprecated: use* allowed_user_key_config *instead*
     * 
     * @deprecated
     * Set in allowed_user_key_config
     * 
     */
    @Deprecated /* Set in allowed_user_key_config */
    public Optional<Output<Map<String,Integer>>> allowedUserKeyLengths() {
        return Optional.ofNullable(this.allowedUserKeyLengths);
    }

    /**
     * Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
     * 
     */
    @Import(name="allowedUsers")
    private @Nullable Output<String> allowedUsers;

    /**
     * @return Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
     * 
     */
    public Optional<Output<String>> allowedUsers() {
        return Optional.ofNullable(this.allowedUsers);
    }

    /**
     * Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
     * 
     */
    @Import(name="allowedUsersTemplate")
    private @Nullable Output<Boolean> allowedUsersTemplate;

    /**
     * @return Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
     * 
     */
    public Optional<Output<Boolean>> allowedUsersTemplate() {
        return Optional.ofNullable(this.allowedUsersTemplate);
    }

    /**
     * The path where the SSH secret backend is mounted.
     * 
     */
    @Import(name="backend", required=true)
    private Output<String> backend;

    /**
     * @return The path where the SSH secret backend is mounted.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }

    /**
     * The comma-separated string of CIDR blocks for which this role is applicable.
     * 
     */
    @Import(name="cidrList")
    private @Nullable Output<String> cidrList;

    /**
     * @return The comma-separated string of CIDR blocks for which this role is applicable.
     * 
     */
    public Optional<Output<String>> cidrList() {
        return Optional.ofNullable(this.cidrList);
    }

    /**
     * Specifies a map of critical options that certificates have when signed.
     * 
     */
    @Import(name="defaultCriticalOptions")
    private @Nullable Output<Map<String,Object>> defaultCriticalOptions;

    /**
     * @return Specifies a map of critical options that certificates have when signed.
     * 
     */
    public Optional<Output<Map<String,Object>>> defaultCriticalOptions() {
        return Optional.ofNullable(this.defaultCriticalOptions);
    }

    /**
     * Specifies a map of extensions that certificates have when signed.
     * 
     */
    @Import(name="defaultExtensions")
    private @Nullable Output<Map<String,Object>> defaultExtensions;

    /**
     * @return Specifies a map of extensions that certificates have when signed.
     * 
     */
    public Optional<Output<Map<String,Object>>> defaultExtensions() {
        return Optional.ofNullable(this.defaultExtensions);
    }

    /**
     * Specifies the default username for which a credential will be generated.
     * 
     */
    @Import(name="defaultUser")
    private @Nullable Output<String> defaultUser;

    /**
     * @return Specifies the default username for which a credential will be generated.
     * 
     */
    public Optional<Output<String>> defaultUser() {
        return Optional.ofNullable(this.defaultUser);
    }

    /**
     * If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
     * 
     */
    @Import(name="defaultUserTemplate")
    private @Nullable Output<Boolean> defaultUserTemplate;

    /**
     * @return If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
     * 
     */
    public Optional<Output<Boolean>> defaultUserTemplate() {
        return Optional.ofNullable(this.defaultUserTemplate);
    }

    /**
     * Specifies a custom format for the key id of a signed certificate.
     * 
     */
    @Import(name="keyIdFormat")
    private @Nullable Output<String> keyIdFormat;

    /**
     * @return Specifies a custom format for the key id of a signed certificate.
     * 
     */
    public Optional<Output<String>> keyIdFormat() {
        return Optional.ofNullable(this.keyIdFormat);
    }

    /**
     * Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
     * 
     */
    @Import(name="keyType", required=true)
    private Output<String> keyType;

    /**
     * @return Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }

    /**
     * Specifies the maximum Time To Live value.
     * 
     */
    @Import(name="maxTtl")
    private @Nullable Output<String> maxTtl;

    /**
     * @return Specifies the maximum Time To Live value.
     * 
     */
    public Optional<Output<String>> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }

    /**
     * Specifies the name of the role to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the role to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies the duration by which to backdate the ValidAfter property.
     * Uses [duration format strings](https://developer.hashicorp.com/vault/docs/concepts/duration-format).
     * 
     */
    @Import(name="notBeforeDuration")
    private @Nullable Output<String> notBeforeDuration;

    /**
     * @return Specifies the duration by which to backdate the ValidAfter property.
     * Uses [duration format strings](https://developer.hashicorp.com/vault/docs/concepts/duration-format).
     * 
     */
    public Optional<Output<String>> notBeforeDuration() {
        return Optional.ofNullable(this.notBeforeDuration);
    }

    /**
     * Specifies the Time To Live value.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return Specifies the Time To Live value.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private SecretBackendRoleArgs() {}

    private SecretBackendRoleArgs(SecretBackendRoleArgs $) {
        this.algorithmSigner = $.algorithmSigner;
        this.allowBareDomains = $.allowBareDomains;
        this.allowHostCertificates = $.allowHostCertificates;
        this.allowSubdomains = $.allowSubdomains;
        this.allowUserCertificates = $.allowUserCertificates;
        this.allowUserKeyIds = $.allowUserKeyIds;
        this.allowedCriticalOptions = $.allowedCriticalOptions;
        this.allowedDomains = $.allowedDomains;
        this.allowedDomainsTemplate = $.allowedDomainsTemplate;
        this.allowedExtensions = $.allowedExtensions;
        this.allowedUserKeyConfigs = $.allowedUserKeyConfigs;
        this.allowedUserKeyLengths = $.allowedUserKeyLengths;
        this.allowedUsers = $.allowedUsers;
        this.allowedUsersTemplate = $.allowedUsersTemplate;
        this.backend = $.backend;
        this.cidrList = $.cidrList;
        this.defaultCriticalOptions = $.defaultCriticalOptions;
        this.defaultExtensions = $.defaultExtensions;
        this.defaultUser = $.defaultUser;
        this.defaultUserTemplate = $.defaultUserTemplate;
        this.keyIdFormat = $.keyIdFormat;
        this.keyType = $.keyType;
        this.maxTtl = $.maxTtl;
        this.name = $.name;
        this.namespace = $.namespace;
        this.notBeforeDuration = $.notBeforeDuration;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendRoleArgs $;

        public Builder() {
            $ = new SecretBackendRoleArgs();
        }

        public Builder(SecretBackendRoleArgs defaults) {
            $ = new SecretBackendRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithmSigner When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
         * 
         * @return builder
         * 
         */
        public Builder algorithmSigner(@Nullable Output<String> algorithmSigner) {
            $.algorithmSigner = algorithmSigner;
            return this;
        }

        /**
         * @param algorithmSigner When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
         * 
         * @return builder
         * 
         */
        public Builder algorithmSigner(String algorithmSigner) {
            return algorithmSigner(Output.of(algorithmSigner));
        }

        /**
         * @param allowBareDomains Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
         * 
         * @return builder
         * 
         */
        public Builder allowBareDomains(@Nullable Output<Boolean> allowBareDomains) {
            $.allowBareDomains = allowBareDomains;
            return this;
        }

        /**
         * @param allowBareDomains Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
         * 
         * @return builder
         * 
         */
        public Builder allowBareDomains(Boolean allowBareDomains) {
            return allowBareDomains(Output.of(allowBareDomains));
        }

        /**
         * @param allowHostCertificates Specifies if certificates are allowed to be signed for use as a &#39;host&#39;.
         * 
         * @return builder
         * 
         */
        public Builder allowHostCertificates(@Nullable Output<Boolean> allowHostCertificates) {
            $.allowHostCertificates = allowHostCertificates;
            return this;
        }

        /**
         * @param allowHostCertificates Specifies if certificates are allowed to be signed for use as a &#39;host&#39;.
         * 
         * @return builder
         * 
         */
        public Builder allowHostCertificates(Boolean allowHostCertificates) {
            return allowHostCertificates(Output.of(allowHostCertificates));
        }

        /**
         * @param allowSubdomains Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
         * 
         * @return builder
         * 
         */
        public Builder allowSubdomains(@Nullable Output<Boolean> allowSubdomains) {
            $.allowSubdomains = allowSubdomains;
            return this;
        }

        /**
         * @param allowSubdomains Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
         * 
         * @return builder
         * 
         */
        public Builder allowSubdomains(Boolean allowSubdomains) {
            return allowSubdomains(Output.of(allowSubdomains));
        }

        /**
         * @param allowUserCertificates Specifies if certificates are allowed to be signed for use as a &#39;user&#39;.
         * 
         * @return builder
         * 
         */
        public Builder allowUserCertificates(@Nullable Output<Boolean> allowUserCertificates) {
            $.allowUserCertificates = allowUserCertificates;
            return this;
        }

        /**
         * @param allowUserCertificates Specifies if certificates are allowed to be signed for use as a &#39;user&#39;.
         * 
         * @return builder
         * 
         */
        public Builder allowUserCertificates(Boolean allowUserCertificates) {
            return allowUserCertificates(Output.of(allowUserCertificates));
        }

        /**
         * @param allowUserKeyIds Specifies if users can override the key ID for a signed certificate with the `key_id` field.
         * 
         * @return builder
         * 
         */
        public Builder allowUserKeyIds(@Nullable Output<Boolean> allowUserKeyIds) {
            $.allowUserKeyIds = allowUserKeyIds;
            return this;
        }

        /**
         * @param allowUserKeyIds Specifies if users can override the key ID for a signed certificate with the `key_id` field.
         * 
         * @return builder
         * 
         */
        public Builder allowUserKeyIds(Boolean allowUserKeyIds) {
            return allowUserKeyIds(Output.of(allowUserKeyIds));
        }

        /**
         * @param allowedCriticalOptions Specifies a comma-separated list of critical options that certificates can have when signed.
         * 
         * @return builder
         * 
         */
        public Builder allowedCriticalOptions(@Nullable Output<String> allowedCriticalOptions) {
            $.allowedCriticalOptions = allowedCriticalOptions;
            return this;
        }

        /**
         * @param allowedCriticalOptions Specifies a comma-separated list of critical options that certificates can have when signed.
         * 
         * @return builder
         * 
         */
        public Builder allowedCriticalOptions(String allowedCriticalOptions) {
            return allowedCriticalOptions(Output.of(allowedCriticalOptions));
        }

        /**
         * @param allowedDomains The list of domains for which a client can request a host certificate.
         * 
         * @return builder
         * 
         */
        public Builder allowedDomains(@Nullable Output<String> allowedDomains) {
            $.allowedDomains = allowedDomains;
            return this;
        }

        /**
         * @param allowedDomains The list of domains for which a client can request a host certificate.
         * 
         * @return builder
         * 
         */
        public Builder allowedDomains(String allowedDomains) {
            return allowedDomains(Output.of(allowedDomains));
        }

        /**
         * @param allowedDomainsTemplate Specifies if `allowed_domains` can be declared using
         * identity template policies. Non-templated domains are also permitted.
         * 
         * @return builder
         * 
         */
        public Builder allowedDomainsTemplate(@Nullable Output<Boolean> allowedDomainsTemplate) {
            $.allowedDomainsTemplate = allowedDomainsTemplate;
            return this;
        }

        /**
         * @param allowedDomainsTemplate Specifies if `allowed_domains` can be declared using
         * identity template policies. Non-templated domains are also permitted.
         * 
         * @return builder
         * 
         */
        public Builder allowedDomainsTemplate(Boolean allowedDomainsTemplate) {
            return allowedDomainsTemplate(Output.of(allowedDomainsTemplate));
        }

        /**
         * @param allowedExtensions Specifies a comma-separated list of extensions that certificates can have when signed.
         * 
         * @return builder
         * 
         */
        public Builder allowedExtensions(@Nullable Output<String> allowedExtensions) {
            $.allowedExtensions = allowedExtensions;
            return this;
        }

        /**
         * @param allowedExtensions Specifies a comma-separated list of extensions that certificates can have when signed.
         * 
         * @return builder
         * 
         */
        public Builder allowedExtensions(String allowedExtensions) {
            return allowedExtensions(Output.of(allowedExtensions));
        }

        /**
         * @param allowedUserKeyConfigs Set of configuration blocks to define allowed\
         * user key configuration, like key type and their lengths. Can be specified multiple times.
         * *See Configuration-Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder allowedUserKeyConfigs(@Nullable Output<List<SecretBackendRoleAllowedUserKeyConfigArgs>> allowedUserKeyConfigs) {
            $.allowedUserKeyConfigs = allowedUserKeyConfigs;
            return this;
        }

        /**
         * @param allowedUserKeyConfigs Set of configuration blocks to define allowed\
         * user key configuration, like key type and their lengths. Can be specified multiple times.
         * *See Configuration-Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder allowedUserKeyConfigs(List<SecretBackendRoleAllowedUserKeyConfigArgs> allowedUserKeyConfigs) {
            return allowedUserKeyConfigs(Output.of(allowedUserKeyConfigs));
        }

        /**
         * @param allowedUserKeyConfigs Set of configuration blocks to define allowed\
         * user key configuration, like key type and their lengths. Can be specified multiple times.
         * *See Configuration-Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder allowedUserKeyConfigs(SecretBackendRoleAllowedUserKeyConfigArgs... allowedUserKeyConfigs) {
            return allowedUserKeyConfigs(List.of(allowedUserKeyConfigs));
        }

        /**
         * @param allowedUserKeyLengths Specifies a map of ssh key types and their expected sizes which
         * are allowed to be signed by the CA type.
         * *Deprecated: use* allowed_user_key_config *instead*
         * 
         * @return builder
         * 
         * @deprecated
         * Set in allowed_user_key_config
         * 
         */
        @Deprecated /* Set in allowed_user_key_config */
        public Builder allowedUserKeyLengths(@Nullable Output<Map<String,Integer>> allowedUserKeyLengths) {
            $.allowedUserKeyLengths = allowedUserKeyLengths;
            return this;
        }

        /**
         * @param allowedUserKeyLengths Specifies a map of ssh key types and their expected sizes which
         * are allowed to be signed by the CA type.
         * *Deprecated: use* allowed_user_key_config *instead*
         * 
         * @return builder
         * 
         * @deprecated
         * Set in allowed_user_key_config
         * 
         */
        @Deprecated /* Set in allowed_user_key_config */
        public Builder allowedUserKeyLengths(Map<String,Integer> allowedUserKeyLengths) {
            return allowedUserKeyLengths(Output.of(allowedUserKeyLengths));
        }

        /**
         * @param allowedUsers Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedUsers(@Nullable Output<String> allowedUsers) {
            $.allowedUsers = allowedUsers;
            return this;
        }

        /**
         * @param allowedUsers Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedUsers(String allowedUsers) {
            return allowedUsers(Output.of(allowedUsers));
        }

        /**
         * @param allowedUsersTemplate Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
         * 
         * @return builder
         * 
         */
        public Builder allowedUsersTemplate(@Nullable Output<Boolean> allowedUsersTemplate) {
            $.allowedUsersTemplate = allowedUsersTemplate;
            return this;
        }

        /**
         * @param allowedUsersTemplate Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
         * 
         * @return builder
         * 
         */
        public Builder allowedUsersTemplate(Boolean allowedUsersTemplate) {
            return allowedUsersTemplate(Output.of(allowedUsersTemplate));
        }

        /**
         * @param backend The path where the SSH secret backend is mounted.
         * 
         * @return builder
         * 
         */
        public Builder backend(Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The path where the SSH secret backend is mounted.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param cidrList The comma-separated string of CIDR blocks for which this role is applicable.
         * 
         * @return builder
         * 
         */
        public Builder cidrList(@Nullable Output<String> cidrList) {
            $.cidrList = cidrList;
            return this;
        }

        /**
         * @param cidrList The comma-separated string of CIDR blocks for which this role is applicable.
         * 
         * @return builder
         * 
         */
        public Builder cidrList(String cidrList) {
            return cidrList(Output.of(cidrList));
        }

        /**
         * @param defaultCriticalOptions Specifies a map of critical options that certificates have when signed.
         * 
         * @return builder
         * 
         */
        public Builder defaultCriticalOptions(@Nullable Output<Map<String,Object>> defaultCriticalOptions) {
            $.defaultCriticalOptions = defaultCriticalOptions;
            return this;
        }

        /**
         * @param defaultCriticalOptions Specifies a map of critical options that certificates have when signed.
         * 
         * @return builder
         * 
         */
        public Builder defaultCriticalOptions(Map<String,Object> defaultCriticalOptions) {
            return defaultCriticalOptions(Output.of(defaultCriticalOptions));
        }

        /**
         * @param defaultExtensions Specifies a map of extensions that certificates have when signed.
         * 
         * @return builder
         * 
         */
        public Builder defaultExtensions(@Nullable Output<Map<String,Object>> defaultExtensions) {
            $.defaultExtensions = defaultExtensions;
            return this;
        }

        /**
         * @param defaultExtensions Specifies a map of extensions that certificates have when signed.
         * 
         * @return builder
         * 
         */
        public Builder defaultExtensions(Map<String,Object> defaultExtensions) {
            return defaultExtensions(Output.of(defaultExtensions));
        }

        /**
         * @param defaultUser Specifies the default username for which a credential will be generated.
         * 
         * @return builder
         * 
         */
        public Builder defaultUser(@Nullable Output<String> defaultUser) {
            $.defaultUser = defaultUser;
            return this;
        }

        /**
         * @param defaultUser Specifies the default username for which a credential will be generated.
         * 
         * @return builder
         * 
         */
        public Builder defaultUser(String defaultUser) {
            return defaultUser(Output.of(defaultUser));
        }

        /**
         * @param defaultUserTemplate If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
         * 
         * @return builder
         * 
         */
        public Builder defaultUserTemplate(@Nullable Output<Boolean> defaultUserTemplate) {
            $.defaultUserTemplate = defaultUserTemplate;
            return this;
        }

        /**
         * @param defaultUserTemplate If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
         * 
         * @return builder
         * 
         */
        public Builder defaultUserTemplate(Boolean defaultUserTemplate) {
            return defaultUserTemplate(Output.of(defaultUserTemplate));
        }

        /**
         * @param keyIdFormat Specifies a custom format for the key id of a signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder keyIdFormat(@Nullable Output<String> keyIdFormat) {
            $.keyIdFormat = keyIdFormat;
            return this;
        }

        /**
         * @param keyIdFormat Specifies a custom format for the key id of a signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder keyIdFormat(String keyIdFormat) {
            return keyIdFormat(Output.of(keyIdFormat));
        }

        /**
         * @param keyType Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
         * 
         * @return builder
         * 
         */
        public Builder keyType(Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param maxTtl Specifies the maximum Time To Live value.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(@Nullable Output<String> maxTtl) {
            $.maxTtl = maxTtl;
            return this;
        }

        /**
         * @param maxTtl Specifies the maximum Time To Live value.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(String maxTtl) {
            return maxTtl(Output.of(maxTtl));
        }

        /**
         * @param name Specifies the name of the role to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the role to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param notBeforeDuration Specifies the duration by which to backdate the ValidAfter property.
         * Uses [duration format strings](https://developer.hashicorp.com/vault/docs/concepts/duration-format).
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDuration(@Nullable Output<String> notBeforeDuration) {
            $.notBeforeDuration = notBeforeDuration;
            return this;
        }

        /**
         * @param notBeforeDuration Specifies the duration by which to backdate the ValidAfter property.
         * Uses [duration format strings](https://developer.hashicorp.com/vault/docs/concepts/duration-format).
         * 
         * @return builder
         * 
         */
        public Builder notBeforeDuration(String notBeforeDuration) {
            return notBeforeDuration(Output.of(notBeforeDuration));
        }

        /**
         * @param ttl Specifies the Time To Live value.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Specifies the Time To Live value.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        public SecretBackendRoleArgs build() {
            $.backend = Objects.requireNonNull($.backend, "expected parameter 'backend' to be non-null");
            $.keyType = Objects.requireNonNull($.keyType, "expected parameter 'keyType' to be non-null");
            return $;
        }
    }

}
