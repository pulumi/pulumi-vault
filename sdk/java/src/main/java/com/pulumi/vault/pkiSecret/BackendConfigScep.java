// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.pkiSecret.BackendConfigScepArgs;
import com.pulumi.vault.pkiSecret.inputs.BackendConfigScepState;
import com.pulumi.vault.pkiSecret.outputs.BackendConfigScepAuthenticators;
import com.pulumi.vault.pkiSecret.outputs.BackendConfigScepExternalValidation;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows setting the SCEP configuration on a PKI Secret Backend.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.AuthBackend;
 * import com.pulumi.vault.AuthBackendArgs;
 * import com.pulumi.vault.ScepAuthBackendRole;
 * import com.pulumi.vault.ScepAuthBackendRoleArgs;
 * import com.pulumi.vault.Mount;
 * import com.pulumi.vault.MountArgs;
 * import com.pulumi.vault.pkiSecret.BackendConfigScep;
 * import com.pulumi.vault.pkiSecret.BackendConfigScepArgs;
 * import com.pulumi.vault.pkiSecret.inputs.BackendConfigScepAuthenticatorsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var scep = new AuthBackend("scep", AuthBackendArgs.builder()
 *             .path("scep-auth")
 *             .type("scep")
 *             .build());
 * 
 *         var scepChallenge = new ScepAuthBackendRole("scepChallenge", ScepAuthBackendRoleArgs.builder()
 *             .backend(scep.id())
 *             .name("scep-auth")
 *             .displayName("Static challenge for SCEP clients")
 *             .authType("static-challenge")
 *             .challenge("ac7e4ada-c8ef-4393-9098-d69d08736833")
 *             .build());
 * 
 *         var pki = new Mount("pki", MountArgs.builder()
 *             .path("pki_scep")
 *             .type("pki")
 *             .description("PKI secret engine mount")
 *             .build());
 * 
 *         var test = new BackendConfigScep("test", BackendConfigScepArgs.builder()
 *             .backend(pki.path())
 *             .enabled(true)
 *             .defaultPathPolicy("sign-verbatim")
 *             .restrictCaChainToIssuer(true)
 *             .authenticators(BackendConfigScepAuthenticatorsArgs.builder()
 *                 .scep(Map.ofEntries(
 *                     Map.entry("accessor", scep.accessor()),
 *                     Map.entry("scep_role", scepChallenge.name())
 *                 ))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The PKI config cluster can be imported using the resource&#39;s `id`.
 * In the case of the example above the `id` would be `pki-root/config/scep`,
 * where the `pki-root` component is the resource&#39;s `backend`, e.g.
 * 
 * ```sh
 * $ pulumi import vault:pkiSecret/backendConfigScep:BackendConfigScep example pki-root/config/scep
 * ```
 * 
 */
@ResourceType(type="vault:pkiSecret/backendConfigScep:BackendConfigScep")
public class BackendConfigScep extends com.pulumi.resources.CustomResource {
    /**
     * List of allowed digest algorithms for SCEP requests.
     * 
     */
    @Export(name="allowedDigestAlgorithms", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedDigestAlgorithms;

    /**
     * @return List of allowed digest algorithms for SCEP requests.
     * 
     */
    public Output<List<String>> allowedDigestAlgorithms() {
        return this.allowedDigestAlgorithms;
    }
    /**
     * List of allowed encryption algorithms for SCEP requests.
     * 
     */
    @Export(name="allowedEncryptionAlgorithms", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedEncryptionAlgorithms;

    /**
     * @return List of allowed encryption algorithms for SCEP requests.
     * 
     */
    public Output<List<String>> allowedEncryptionAlgorithms() {
        return this.allowedEncryptionAlgorithms;
    }
    /**
     * Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     * 
     */
    @Export(name="authenticators", refs={BackendConfigScepAuthenticators.class}, tree="[0]")
    private Output<BackendConfigScepAuthenticators> authenticators;

    /**
     * @return Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     * 
     */
    public Output<BackendConfigScepAuthenticators> authenticators() {
        return this.authenticators;
    }
    /**
     * The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     * 
     */
    @Export(name="backend", refs={String.class}, tree="[0]")
    private Output<String> backend;

    /**
     * @return The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }
    /**
     * Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
     * 
     */
    @Export(name="defaultPathPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultPathPolicy;

    /**
     * @return Specifies the policy to be used for non-role-qualified SCEP requests; valid values are &#39;sign-verbatim&#39;, or &#34;role:&lt;role_name&gt;&#34; to specify a role to use as this policy.
     * 
     */
    public Output<Optional<String>> defaultPathPolicy() {
        return Codegen.optional(this.defaultPathPolicy);
    }
    /**
     * Specifies whether SCEP is enabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Specifies whether SCEP is enabled.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Lists the 3rd party validation of SCEP requests (see below for nested schema).
     * 
     */
    @Export(name="externalValidations", refs={List.class,BackendConfigScepExternalValidation.class}, tree="[0,1]")
    private Output<List<BackendConfigScepExternalValidation>> externalValidations;

    /**
     * @return Lists the 3rd party validation of SCEP requests (see below for nested schema).
     * 
     */
    public Output<List<BackendConfigScepExternalValidation>> externalValidations() {
        return this.externalValidations;
    }
    /**
     * A read-only timestamp representing the last time the configuration was updated.
     * 
     */
    @Export(name="lastUpdated", refs={String.class}, tree="[0]")
    private Output<String> lastUpdated;

    /**
     * @return A read-only timestamp representing the last time the configuration was updated.
     * 
     */
    public Output<String> lastUpdated() {
        return this.lastUpdated;
    }
    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     * 
     * &lt;a id=&#34;nestedatt--authenticators&#34;&gt;&lt;/a&gt;
     * 
     */
    @Export(name="logLevel", refs={String.class}, tree="[0]")
    private Output<String> logLevel;

    /**
     * @return The level of logging verbosity, affects only SCEP logs on this mount.
     * 
     * &lt;a id=&#34;nestedatt--authenticators&#34;&gt;&lt;/a&gt;
     * 
     */
    public Output<String> logLevel() {
        return this.logLevel;
    }
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     * 
     */
    @Export(name="restrictCaChainToIssuer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> restrictCaChainToIssuer;

    /**
     * @return If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     * 
     */
    public Output<Optional<Boolean>> restrictCaChainToIssuer() {
        return Codegen.optional(this.restrictCaChainToIssuer);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendConfigScep(java.lang.String name) {
        this(name, BackendConfigScepArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendConfigScep(java.lang.String name, BackendConfigScepArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendConfigScep(java.lang.String name, BackendConfigScepArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendConfigScep:BackendConfigScep", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackendConfigScep(java.lang.String name, Output<java.lang.String> id, @Nullable BackendConfigScepState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendConfigScep:BackendConfigScep", name, state, makeResourceOptions(options, id), false);
    }

    private static BackendConfigScepArgs makeArgs(BackendConfigScepArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackendConfigScepArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendConfigScep get(java.lang.String name, Output<java.lang.String> id, @Nullable BackendConfigScepState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendConfigScep(name, id, state, options);
    }
}
