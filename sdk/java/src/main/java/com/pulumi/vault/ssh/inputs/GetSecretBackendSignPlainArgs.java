// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ssh.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSecretBackendSignPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSecretBackendSignPlainArgs Empty = new GetSecretBackendSignPlainArgs();

    /**
     * Specifies the type of certificate to be created; either &#34;user&#34; or &#34;host&#34;.
     * 
     */
    @Import(name="certType")
    private @Nullable String certType;

    /**
     * @return Specifies the type of certificate to be created; either &#34;user&#34; or &#34;host&#34;.
     * 
     */
    public Optional<String> certType() {
        return Optional.ofNullable(this.certType);
    }

    /**
     * Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
     * 
     */
    @Import(name="criticalOptions")
    private @Nullable Map<String,String> criticalOptions;

    /**
     * @return Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
     * 
     */
    public Optional<Map<String,String>> criticalOptions() {
        return Optional.ofNullable(this.criticalOptions);
    }

    /**
     * Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
     * 
     */
    @Import(name="extensions")
    private @Nullable Map<String,String> extensions;

    /**
     * @return Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
     * 
     */
    public Optional<Map<String,String>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
     * 
     */
    @Import(name="keyId")
    private @Nullable String keyId;

    /**
     * @return Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * Specifies the name of the role to sign.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Specifies the name of the role to sign.
     * 
     */
    public String name() {
        return this.name;
    }

    @Import(name="namespace")
    private @Nullable String namespace;

    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Full path where SSH backend is mounted.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return Full path where SSH backend is mounted.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * Specifies the SSH public key that should be signed.
     * 
     */
    @Import(name="publicKey", required=true)
    private String publicKey;

    /**
     * @return Specifies the SSH public key that should be signed.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Specifies the Requested Time To Live. Cannot be greater than the role&#39;s maxTtl value. If not provided, the role&#39;s ttl value will be used. Note that the role values default to system values if not explicitly set.
     * 
     */
    @Import(name="ttl")
    private @Nullable String ttl;

    /**
     * @return Specifies the Requested Time To Live. Cannot be greater than the role&#39;s maxTtl value. If not provided, the role&#39;s ttl value will be used. Note that the role values default to system values if not explicitly set.
     * 
     */
    public Optional<String> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allowEmptyPrincipals or a value has been set for either the defaultUser or defaultUserTemplate role parameters.
     * 
     */
    @Import(name="validPrincipals")
    private @Nullable String validPrincipals;

    /**
     * @return Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allowEmptyPrincipals or a value has been set for either the defaultUser or defaultUserTemplate role parameters.
     * 
     */
    public Optional<String> validPrincipals() {
        return Optional.ofNullable(this.validPrincipals);
    }

    private GetSecretBackendSignPlainArgs() {}

    private GetSecretBackendSignPlainArgs(GetSecretBackendSignPlainArgs $) {
        this.certType = $.certType;
        this.criticalOptions = $.criticalOptions;
        this.extensions = $.extensions;
        this.keyId = $.keyId;
        this.name = $.name;
        this.namespace = $.namespace;
        this.path = $.path;
        this.publicKey = $.publicKey;
        this.ttl = $.ttl;
        this.validPrincipals = $.validPrincipals;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSecretBackendSignPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSecretBackendSignPlainArgs $;

        public Builder() {
            $ = new GetSecretBackendSignPlainArgs();
        }

        public Builder(GetSecretBackendSignPlainArgs defaults) {
            $ = new GetSecretBackendSignPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certType Specifies the type of certificate to be created; either &#34;user&#34; or &#34;host&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certType(@Nullable String certType) {
            $.certType = certType;
            return this;
        }

        /**
         * @param criticalOptions Specifies a map of the critical options that the certificate should be signed for. Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder criticalOptions(@Nullable Map<String,String> criticalOptions) {
            $.criticalOptions = criticalOptions;
            return this;
        }

        /**
         * @param extensions Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Map<String,String> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param keyId Specifies the key id that the created certificate should have. If not specified, the display name of the token will be used.
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable String keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param name Specifies the name of the role to sign.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder namespace(@Nullable String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param path Full path where SSH backend is mounted.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param publicKey Specifies the SSH public key that should be signed.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param ttl Specifies the Requested Time To Live. Cannot be greater than the role&#39;s maxTtl value. If not provided, the role&#39;s ttl value will be used. Note that the role values default to system values if not explicitly set.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable String ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param validPrincipals Specifies valid principals, either usernames or hostnames, that the certificate should be signed for. Required unless the role has specified allowEmptyPrincipals or a value has been set for either the defaultUser or defaultUserTemplate role parameters.
         * 
         * @return builder
         * 
         */
        public Builder validPrincipals(@Nullable String validPrincipals) {
            $.validPrincipals = validPrincipals;
            return this;
        }

        public GetSecretBackendSignPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetSecretBackendSignPlainArgs", "name");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetSecretBackendSignPlainArgs", "path");
            }
            if ($.publicKey == null) {
                throw new MissingRequiredPropertyException("GetSecretBackendSignPlainArgs", "publicKey");
            }
            return $;
        }
    }

}
