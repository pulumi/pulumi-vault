// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.kubernetes;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendArgs Empty = new SecretBackendArgs();

    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     * 
     */
    @Import(name="allowedManagedKeys")
    private @Nullable Output<List<String>> allowedManagedKeys;

    /**
     * @return List of managed key registry entry names that the mount in question is allowed to access
     * 
     */
    public Optional<Output<List<String>>> allowedManagedKeys() {
        return Optional.ofNullable(this.allowedManagedKeys);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    @Import(name="auditNonHmacRequestKeys")
    private @Nullable Output<List<String>> auditNonHmacRequestKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacRequestKeys() {
        return Optional.ofNullable(this.auditNonHmacRequestKeys);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    @Import(name="auditNonHmacResponseKeys")
    private @Nullable Output<List<String>> auditNonHmacResponseKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacResponseKeys() {
        return Optional.ofNullable(this.auditNonHmacResponseKeys);
    }

    /**
     * Default lease duration for tokens and secrets in seconds
     * 
     */
    @Import(name="defaultLeaseTtlSeconds")
    private @Nullable Output<Integer> defaultLeaseTtlSeconds;

    /**
     * @return Default lease duration for tokens and secrets in seconds
     * 
     */
    public Optional<Output<Integer>> defaultLeaseTtlSeconds() {
        return Optional.ofNullable(this.defaultLeaseTtlSeconds);
    }

    /**
     * Human-friendly description of the mount
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-friendly description of the mount
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Disable defaulting to the local CA certificate and
     * service account JWT when Vault is running in a Kubernetes pod.
     * 
     */
    @Import(name="disableLocalCaJwt")
    private @Nullable Output<Boolean> disableLocalCaJwt;

    /**
     * @return Disable defaulting to the local CA certificate and
     * service account JWT when Vault is running in a Kubernetes pod.
     * 
     */
    public Optional<Output<Boolean>> disableLocalCaJwt() {
        return Optional.ofNullable(this.disableLocalCaJwt);
    }

    /**
     * Enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    @Import(name="externalEntropyAccess")
    private @Nullable Output<Boolean> externalEntropyAccess;

    /**
     * @return Enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    public Optional<Output<Boolean>> externalEntropyAccess() {
        return Optional.ofNullable(this.externalEntropyAccess);
    }

    /**
     * A PEM-encoded CA certificate used by the
     * secrets engine to verify the Kubernetes API server certificate. Defaults to the local
     * pod’s CA if Vault is running in Kubernetes. Otherwise, defaults to the root CA set where
     * Vault is running.
     * 
     */
    @Import(name="kubernetesCaCert")
    private @Nullable Output<String> kubernetesCaCert;

    /**
     * @return A PEM-encoded CA certificate used by the
     * secrets engine to verify the Kubernetes API server certificate. Defaults to the local
     * pod’s CA if Vault is running in Kubernetes. Otherwise, defaults to the root CA set where
     * Vault is running.
     * 
     */
    public Optional<Output<String>> kubernetesCaCert() {
        return Optional.ofNullable(this.kubernetesCaCert);
    }

    /**
     * The Kubernetes API URL to connect to. Required if the
     * standard pod environment variables `KUBERNETES_SERVICE_HOST` or `KUBERNETES_SERVICE_PORT`
     * are not set on the host that Vault is running on.
     * 
     */
    @Import(name="kubernetesHost")
    private @Nullable Output<String> kubernetesHost;

    /**
     * @return The Kubernetes API URL to connect to. Required if the
     * standard pod environment variables `KUBERNETES_SERVICE_HOST` or `KUBERNETES_SERVICE_PORT`
     * are not set on the host that Vault is running on.
     * 
     */
    public Optional<Output<String>> kubernetesHost() {
        return Optional.ofNullable(this.kubernetesHost);
    }

    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     * 
     */
    @Import(name="maxLeaseTtlSeconds")
    private @Nullable Output<Integer> maxLeaseTtlSeconds;

    /**
     * @return Maximum possible lease duration for tokens and secrets in seconds
     * 
     */
    public Optional<Output<Integer>> maxLeaseTtlSeconds() {
        return Optional.ofNullable(this.maxLeaseTtlSeconds);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies mount type specific options that are passed to the backend
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,Object>> options;

    /**
     * @return Specifies mount type specific options that are passed to the backend
     * 
     */
    public Optional<Output<Map<String,Object>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Where the secret backend will be mounted
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Where the secret backend will be mounted
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    @Import(name="sealWrap")
    private @Nullable Output<Boolean> sealWrap;

    /**
     * @return Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    public Optional<Output<Boolean>> sealWrap() {
        return Optional.ofNullable(this.sealWrap);
    }

    /**
     * The JSON web token of the service account used by the
     * secrets engine to manage Kubernetes credentials. Defaults to the local pod’s JWT if Vault
     * is running in Kubernetes.
     * 
     */
    @Import(name="serviceAccountJwt")
    private @Nullable Output<String> serviceAccountJwt;

    /**
     * @return The JSON web token of the service account used by the
     * secrets engine to manage Kubernetes credentials. Defaults to the local pod’s JWT if Vault
     * is running in Kubernetes.
     * 
     */
    public Optional<Output<String>> serviceAccountJwt() {
        return Optional.ofNullable(this.serviceAccountJwt);
    }

    private SecretBackendArgs() {}

    private SecretBackendArgs(SecretBackendArgs $) {
        this.allowedManagedKeys = $.allowedManagedKeys;
        this.auditNonHmacRequestKeys = $.auditNonHmacRequestKeys;
        this.auditNonHmacResponseKeys = $.auditNonHmacResponseKeys;
        this.defaultLeaseTtlSeconds = $.defaultLeaseTtlSeconds;
        this.description = $.description;
        this.disableLocalCaJwt = $.disableLocalCaJwt;
        this.externalEntropyAccess = $.externalEntropyAccess;
        this.kubernetesCaCert = $.kubernetesCaCert;
        this.kubernetesHost = $.kubernetesHost;
        this.local = $.local;
        this.maxLeaseTtlSeconds = $.maxLeaseTtlSeconds;
        this.namespace = $.namespace;
        this.options = $.options;
        this.path = $.path;
        this.sealWrap = $.sealWrap;
        this.serviceAccountJwt = $.serviceAccountJwt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendArgs $;

        public Builder() {
            $ = new SecretBackendArgs();
        }

        public Builder(SecretBackendArgs defaults) {
            $ = new SecretBackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(@Nullable Output<List<String>> allowedManagedKeys) {
            $.allowedManagedKeys = allowedManagedKeys;
            return this;
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(List<String> allowedManagedKeys) {
            return allowedManagedKeys(Output.of(allowedManagedKeys));
        }

        /**
         * @param allowedManagedKeys List of managed key registry entry names that the mount in question is allowed to access
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(String... allowedManagedKeys) {
            return allowedManagedKeys(List.of(allowedManagedKeys));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(@Nullable Output<List<String>> auditNonHmacRequestKeys) {
            $.auditNonHmacRequestKeys = auditNonHmacRequestKeys;
            return this;
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(List<String> auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(Output.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(String... auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(List.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(@Nullable Output<List<String>> auditNonHmacResponseKeys) {
            $.auditNonHmacResponseKeys = auditNonHmacResponseKeys;
            return this;
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(List<String> auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(Output.of(auditNonHmacResponseKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(String... auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(List.of(auditNonHmacResponseKeys));
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(@Nullable Output<Integer> defaultLeaseTtlSeconds) {
            $.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            return this;
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(Integer defaultLeaseTtlSeconds) {
            return defaultLeaseTtlSeconds(Output.of(defaultLeaseTtlSeconds));
        }

        /**
         * @param description Human-friendly description of the mount
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-friendly description of the mount
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableLocalCaJwt Disable defaulting to the local CA certificate and
         * service account JWT when Vault is running in a Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder disableLocalCaJwt(@Nullable Output<Boolean> disableLocalCaJwt) {
            $.disableLocalCaJwt = disableLocalCaJwt;
            return this;
        }

        /**
         * @param disableLocalCaJwt Disable defaulting to the local CA certificate and
         * service account JWT when Vault is running in a Kubernetes pod.
         * 
         * @return builder
         * 
         */
        public Builder disableLocalCaJwt(Boolean disableLocalCaJwt) {
            return disableLocalCaJwt(Output.of(disableLocalCaJwt));
        }

        /**
         * @param externalEntropyAccess Enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(@Nullable Output<Boolean> externalEntropyAccess) {
            $.externalEntropyAccess = externalEntropyAccess;
            return this;
        }

        /**
         * @param externalEntropyAccess Enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(Boolean externalEntropyAccess) {
            return externalEntropyAccess(Output.of(externalEntropyAccess));
        }

        /**
         * @param kubernetesCaCert A PEM-encoded CA certificate used by the
         * secrets engine to verify the Kubernetes API server certificate. Defaults to the local
         * pod’s CA if Vault is running in Kubernetes. Otherwise, defaults to the root CA set where
         * Vault is running.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesCaCert(@Nullable Output<String> kubernetesCaCert) {
            $.kubernetesCaCert = kubernetesCaCert;
            return this;
        }

        /**
         * @param kubernetesCaCert A PEM-encoded CA certificate used by the
         * secrets engine to verify the Kubernetes API server certificate. Defaults to the local
         * pod’s CA if Vault is running in Kubernetes. Otherwise, defaults to the root CA set where
         * Vault is running.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesCaCert(String kubernetesCaCert) {
            return kubernetesCaCert(Output.of(kubernetesCaCert));
        }

        /**
         * @param kubernetesHost The Kubernetes API URL to connect to. Required if the
         * standard pod environment variables `KUBERNETES_SERVICE_HOST` or `KUBERNETES_SERVICE_PORT`
         * are not set on the host that Vault is running on.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesHost(@Nullable Output<String> kubernetesHost) {
            $.kubernetesHost = kubernetesHost;
            return this;
        }

        /**
         * @param kubernetesHost The Kubernetes API URL to connect to. Required if the
         * standard pod environment variables `KUBERNETES_SERVICE_HOST` or `KUBERNETES_SERVICE_PORT`
         * are not set on the host that Vault is running on.
         * 
         * @return builder
         * 
         */
        public Builder kubernetesHost(String kubernetesHost) {
            return kubernetesHost(Output.of(kubernetesHost));
        }

        /**
         * @param local Local mount flag that can be explicitly set to true to enforce local mount in HA environment
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local Local mount flag that can be explicitly set to true to enforce local mount in HA environment
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(@Nullable Output<Integer> maxLeaseTtlSeconds) {
            $.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            return this;
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(Integer maxLeaseTtlSeconds) {
            return maxLeaseTtlSeconds(Output.of(maxLeaseTtlSeconds));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,Object>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,Object> options) {
            return options(Output.of(options));
        }

        /**
         * @param path Where the secret backend will be mounted
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Where the secret backend will be mounted
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param sealWrap Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(@Nullable Output<Boolean> sealWrap) {
            $.sealWrap = sealWrap;
            return this;
        }

        /**
         * @param sealWrap Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(Boolean sealWrap) {
            return sealWrap(Output.of(sealWrap));
        }

        /**
         * @param serviceAccountJwt The JSON web token of the service account used by the
         * secrets engine to manage Kubernetes credentials. Defaults to the local pod’s JWT if Vault
         * is running in Kubernetes.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountJwt(@Nullable Output<String> serviceAccountJwt) {
            $.serviceAccountJwt = serviceAccountJwt;
            return this;
        }

        /**
         * @param serviceAccountJwt The JSON web token of the service account used by the
         * secrets engine to manage Kubernetes credentials. Defaults to the local pod’s JWT if Vault
         * is running in Kubernetes.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountJwt(String serviceAccountJwt) {
            return serviceAccountJwt(Output.of(serviceAccountJwt));
        }

        public SecretBackendArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("SecretBackendArgs", "path");
            }
            return $;
        }
    }

}
