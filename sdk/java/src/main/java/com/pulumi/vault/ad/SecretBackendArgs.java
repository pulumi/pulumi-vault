// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ad;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendArgs Empty = new SecretBackendArgs();

    /**
     * Use anonymous binds when performing LDAP group searches
     * (if true the initial credentials will still be used for the initial connection test).
     * 
     */
    @Import(name="anonymousGroupSearch")
    private @Nullable Output<Boolean> anonymousGroupSearch;

    /**
     * @return Use anonymous binds when performing LDAP group searches
     * (if true the initial credentials will still be used for the initial connection test).
     * 
     */
    public Optional<Output<Boolean>> anonymousGroupSearch() {
        return Optional.ofNullable(this.anonymousGroupSearch);
    }

    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ad`.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ad`.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * Distinguished name of object to bind when performing user and group search.
     * 
     */
    @Import(name="binddn", required=true)
    private Output<String> binddn;

    /**
     * @return Distinguished name of object to bind when performing user and group search.
     * 
     */
    public Output<String> binddn() {
        return this.binddn;
    }

    /**
     * Password to use along with binddn when performing user search.
     * 
     */
    @Import(name="bindpass", required=true)
    private Output<String> bindpass;

    /**
     * @return Password to use along with binddn when performing user search.
     * 
     */
    public Output<String> bindpass() {
        return this.bindpass;
    }

    /**
     * If set, user and group names assigned to policies within the
     * backend will be case sensitive. Otherwise, names will be normalized to lower case.
     * 
     */
    @Import(name="caseSensitiveNames")
    private @Nullable Output<Boolean> caseSensitiveNames;

    /**
     * @return If set, user and group names assigned to policies within the
     * backend will be case sensitive. Otherwise, names will be normalized to lower case.
     * 
     */
    public Optional<Output<Boolean>> caseSensitiveNames() {
        return Optional.ofNullable(this.caseSensitiveNames);
    }

    /**
     * CA certificate to use when verifying LDAP server certificate, must be
     * x509 PEM encoded.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return CA certificate to use when verifying LDAP server certificate, must be
     * x509 PEM encoded.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Client certificate to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    @Import(name="clientTlsCert")
    private @Nullable Output<String> clientTlsCert;

    /**
     * @return Client certificate to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    public Optional<Output<String>> clientTlsCert() {
        return Optional.ofNullable(this.clientTlsCert);
    }

    /**
     * Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    @Import(name="clientTlsKey")
    private @Nullable Output<String> clientTlsKey;

    /**
     * @return Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
     * 
     */
    public Optional<Output<String>> clientTlsKey() {
        return Optional.ofNullable(this.clientTlsKey);
    }

    /**
     * Default lease duration for secrets in seconds.
     * 
     */
    @Import(name="defaultLeaseTtlSeconds")
    private @Nullable Output<Integer> defaultLeaseTtlSeconds;

    /**
     * @return Default lease duration for secrets in seconds.
     * 
     */
    public Optional<Output<Integer>> defaultLeaseTtlSeconds() {
        return Optional.ofNullable(this.defaultLeaseTtlSeconds);
    }

    /**
     * Denies an unauthenticated LDAP bind request if the user&#39;s password is empty;
     * defaults to true.
     * 
     */
    @Import(name="denyNullBind")
    private @Nullable Output<Boolean> denyNullBind;

    /**
     * @return Denies an unauthenticated LDAP bind request if the user&#39;s password is empty;
     * defaults to true.
     * 
     */
    public Optional<Output<Boolean>> denyNullBind() {
        return Optional.ofNullable(this.denyNullBind);
    }

    /**
     * Human-friendly description of the mount for the Active Directory backend.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-friendly description of the mount for the Active Directory backend.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     * 
     */
    @Import(name="disableRemount")
    private @Nullable Output<Boolean> disableRemount;

    /**
     * @return If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     * 
     */
    public Optional<Output<Boolean>> disableRemount() {
        return Optional.ofNullable(this.disableRemount);
    }

    /**
     * Use anonymous bind to discover the bind Distinguished Name of a user.
     * 
     */
    @Import(name="discoverdn")
    private @Nullable Output<Boolean> discoverdn;

    /**
     * @return Use anonymous bind to discover the bind Distinguished Name of a user.
     * 
     */
    public Optional<Output<Boolean>> discoverdn() {
        return Optional.ofNullable(this.discoverdn);
    }

    /**
     * **Deprecated** use `password_policy`. Text to insert the password into, ex. &#34;customPrefix{{PASSWORD}}customSuffix&#34;.
     * 
     * @deprecated
     * Formatter is deprecated and password_policy should be used with Vault &gt;= 1.5.
     * 
     */
    @Deprecated /* Formatter is deprecated and password_policy should be used with Vault >= 1.5. */
    @Import(name="formatter")
    private @Nullable Output<String> formatter;

    /**
     * @return **Deprecated** use `password_policy`. Text to insert the password into, ex. &#34;customPrefix{{PASSWORD}}customSuffix&#34;.
     * 
     * @deprecated
     * Formatter is deprecated and password_policy should be used with Vault &gt;= 1.5.
     * 
     */
    @Deprecated /* Formatter is deprecated and password_policy should be used with Vault >= 1.5. */
    public Optional<Output<String>> formatter() {
        return Optional.ofNullable(this.formatter);
    }

    /**
     * LDAP attribute to follow on objects returned by &lt;groupfilter&gt; in order to enumerate
     * user group membership. Examples: `cn` or `memberOf`, etc. Defaults to `cn`.
     * 
     */
    @Import(name="groupattr")
    private @Nullable Output<String> groupattr;

    /**
     * @return LDAP attribute to follow on objects returned by &lt;groupfilter&gt; in order to enumerate
     * user group membership. Examples: `cn` or `memberOf`, etc. Defaults to `cn`.
     * 
     */
    public Optional<Output<String>> groupattr() {
        return Optional.ofNullable(this.groupattr);
    }

    /**
     * LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).
     * 
     */
    @Import(name="groupdn")
    private @Nullable Output<String> groupdn;

    /**
     * @return LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).
     * 
     */
    public Optional<Output<String>> groupdn() {
        return Optional.ofNullable(this.groupdn);
    }

    /**
     * Go template for querying group membership of user (optional) The template can access
     * the following context variables: UserDN, Username. Defaults to `(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))`
     * 
     */
    @Import(name="groupfilter")
    private @Nullable Output<String> groupfilter;

    /**
     * @return Go template for querying group membership of user (optional) The template can access
     * the following context variables: UserDN, Username. Defaults to `(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))`
     * 
     */
    public Optional<Output<String>> groupfilter() {
        return Optional.ofNullable(this.groupfilter);
    }

    /**
     * Skip LDAP server SSL Certificate verification. This is not recommended for production.
     * Defaults to `false`.
     * 
     */
    @Import(name="insecureTls")
    private @Nullable Output<Boolean> insecureTls;

    /**
     * @return Skip LDAP server SSL Certificate verification. This is not recommended for production.
     * Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> insecureTls() {
        return Optional.ofNullable(this.insecureTls);
    }

    /**
     * The number of seconds after a Vault rotation where, if Active Directory
     * shows a later rotation, it should be considered out-of-band
     * 
     */
    @Import(name="lastRotationTolerance")
    private @Nullable Output<Integer> lastRotationTolerance;

    /**
     * @return The number of seconds after a Vault rotation where, if Active Directory
     * shows a later rotation, it should be considered out-of-band
     * 
     */
    public Optional<Output<Integer>> lastRotationTolerance() {
        return Optional.ofNullable(this.lastRotationTolerance);
    }

    /**
     * **Deprecated** use `password_policy`. The desired length of passwords that Vault generates.
     * *Mutually exclusive with `password_policy` on vault-1.11+*
     * 
     * @deprecated
     * Length is deprecated and password_policy should be used with Vault &gt;= 1.5.
     * 
     */
    @Deprecated /* Length is deprecated and password_policy should be used with Vault >= 1.5. */
    @Import(name="length")
    private @Nullable Output<Integer> length;

    /**
     * @return **Deprecated** use `password_policy`. The desired length of passwords that Vault generates.
     * *Mutually exclusive with `password_policy` on vault-1.11+*
     * 
     * @deprecated
     * Length is deprecated and password_policy should be used with Vault &gt;= 1.5.
     * 
     */
    @Deprecated /* Length is deprecated and password_policy should be used with Vault >= 1.5. */
    public Optional<Output<Integer>> length() {
        return Optional.ofNullable(this.length);
    }

    /**
     * Mark the secrets engine as local-only. Local engines are not replicated or removed by
     * replication.Tolerance duration to use when checking the last rotation time.
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return Mark the secrets engine as local-only. Local engines are not replicated or removed by
     * replication.Tolerance duration to use when checking the last rotation time.
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * Maximum possible lease duration for secrets in seconds.
     * 
     */
    @Import(name="maxLeaseTtlSeconds")
    private @Nullable Output<Integer> maxLeaseTtlSeconds;

    /**
     * @return Maximum possible lease duration for secrets in seconds.
     * 
     */
    public Optional<Output<Integer>> maxLeaseTtlSeconds() {
        return Optional.ofNullable(this.maxLeaseTtlSeconds);
    }

    /**
     * In seconds, the maximum password time-to-live.
     * 
     */
    @Import(name="maxTtl")
    private @Nullable Output<Integer> maxTtl;

    /**
     * @return In seconds, the maximum password time-to-live.
     * 
     */
    public Optional<Output<Integer>> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Name of the password policy to use to generate passwords.
     * 
     */
    @Import(name="passwordPolicy")
    private @Nullable Output<String> passwordPolicy;

    /**
     * @return Name of the password policy to use to generate passwords.
     * 
     */
    public Optional<Output<String>> passwordPolicy() {
        return Optional.ofNullable(this.passwordPolicy);
    }

    /**
     * Timeout, in seconds, for the connection when making requests against the server
     * before returning back an error.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<Integer> requestTimeout;

    /**
     * @return Timeout, in seconds, for the connection when making requests against the server
     * before returning back an error.
     * 
     */
    public Optional<Output<Integer>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * Issue a StartTLS command after establishing unencrypted connection.
     * 
     */
    @Import(name="starttls")
    private @Nullable Output<Boolean> starttls;

    /**
     * @return Issue a StartTLS command after establishing unencrypted connection.
     * 
     */
    public Optional<Output<Boolean>> starttls() {
        return Optional.ofNullable(this.starttls);
    }

    /**
     * Maximum TLS version to use. Accepted values are `tls10`, `tls11`,
     * `tls12` or `tls13`. Defaults to `tls12`.
     * 
     */
    @Import(name="tlsMaxVersion")
    private @Nullable Output<String> tlsMaxVersion;

    /**
     * @return Maximum TLS version to use. Accepted values are `tls10`, `tls11`,
     * `tls12` or `tls13`. Defaults to `tls12`.
     * 
     */
    public Optional<Output<String>> tlsMaxVersion() {
        return Optional.ofNullable(this.tlsMaxVersion);
    }

    /**
     * Minimum TLS version to use. Accepted values are `tls10`, `tls11`,
     * `tls12` or `tls13`. Defaults to `tls12`.
     * 
     */
    @Import(name="tlsMinVersion")
    private @Nullable Output<String> tlsMinVersion;

    /**
     * @return Minimum TLS version to use. Accepted values are `tls10`, `tls11`,
     * `tls12` or `tls13`. Defaults to `tls12`.
     * 
     */
    public Optional<Output<String>> tlsMinVersion() {
        return Optional.ofNullable(this.tlsMinVersion);
    }

    /**
     * In seconds, the default password time-to-live.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return In seconds, the default password time-to-live.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * Enables userPrincipalDomain login with [username]@UPNDomain.
     * 
     */
    @Import(name="upndomain")
    private @Nullable Output<String> upndomain;

    /**
     * @return Enables userPrincipalDomain login with [username]@UPNDomain.
     * 
     */
    public Optional<Output<String>> upndomain() {
        return Optional.ofNullable(this.upndomain);
    }

    /**
     * LDAP URL to connect to. Multiple URLs can be specified by concatenating
     * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return LDAP URL to connect to. Multiple URLs can be specified by concatenating
     * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * In Vault 1.1.1 a fix for handling group CN values of
     * different cases unfortunately introduced a regression that could cause previously defined groups
     * to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
     * matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
     * compatibility. It is enabled by default if the config is upgraded but disabled by default on
     * new configurations.
     * 
     */
    @Import(name="usePre111GroupCnBehavior")
    private @Nullable Output<Boolean> usePre111GroupCnBehavior;

    /**
     * @return In Vault 1.1.1 a fix for handling group CN values of
     * different cases unfortunately introduced a regression that could cause previously defined groups
     * to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
     * matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
     * compatibility. It is enabled by default if the config is upgraded but disabled by default on
     * new configurations.
     * 
     */
    public Optional<Output<Boolean>> usePre111GroupCnBehavior() {
        return Optional.ofNullable(this.usePre111GroupCnBehavior);
    }

    /**
     * If true, use the Active Directory tokenGroups constructed attribute of the
     * user to find the group memberships. This will find all security groups including nested ones.
     * 
     */
    @Import(name="useTokenGroups")
    private @Nullable Output<Boolean> useTokenGroups;

    /**
     * @return If true, use the Active Directory tokenGroups constructed attribute of the
     * user to find the group memberships. This will find all security groups including nested ones.
     * 
     */
    public Optional<Output<Boolean>> useTokenGroups() {
        return Optional.ofNullable(this.useTokenGroups);
    }

    /**
     * Attribute used when searching users. Defaults to `cn`.
     * 
     */
    @Import(name="userattr")
    private @Nullable Output<String> userattr;

    /**
     * @return Attribute used when searching users. Defaults to `cn`.
     * 
     */
    public Optional<Output<String>> userattr() {
        return Optional.ofNullable(this.userattr);
    }

    /**
     * LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
     * 
     */
    @Import(name="userdn")
    private @Nullable Output<String> userdn;

    /**
     * @return LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
     * 
     */
    public Optional<Output<String>> userdn() {
        return Optional.ofNullable(this.userdn);
    }

    private SecretBackendArgs() {}

    private SecretBackendArgs(SecretBackendArgs $) {
        this.anonymousGroupSearch = $.anonymousGroupSearch;
        this.backend = $.backend;
        this.binddn = $.binddn;
        this.bindpass = $.bindpass;
        this.caseSensitiveNames = $.caseSensitiveNames;
        this.certificate = $.certificate;
        this.clientTlsCert = $.clientTlsCert;
        this.clientTlsKey = $.clientTlsKey;
        this.defaultLeaseTtlSeconds = $.defaultLeaseTtlSeconds;
        this.denyNullBind = $.denyNullBind;
        this.description = $.description;
        this.disableRemount = $.disableRemount;
        this.discoverdn = $.discoverdn;
        this.formatter = $.formatter;
        this.groupattr = $.groupattr;
        this.groupdn = $.groupdn;
        this.groupfilter = $.groupfilter;
        this.insecureTls = $.insecureTls;
        this.lastRotationTolerance = $.lastRotationTolerance;
        this.length = $.length;
        this.local = $.local;
        this.maxLeaseTtlSeconds = $.maxLeaseTtlSeconds;
        this.maxTtl = $.maxTtl;
        this.namespace = $.namespace;
        this.passwordPolicy = $.passwordPolicy;
        this.requestTimeout = $.requestTimeout;
        this.starttls = $.starttls;
        this.tlsMaxVersion = $.tlsMaxVersion;
        this.tlsMinVersion = $.tlsMinVersion;
        this.ttl = $.ttl;
        this.upndomain = $.upndomain;
        this.url = $.url;
        this.usePre111GroupCnBehavior = $.usePre111GroupCnBehavior;
        this.useTokenGroups = $.useTokenGroups;
        this.userattr = $.userattr;
        this.userdn = $.userdn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendArgs $;

        public Builder() {
            $ = new SecretBackendArgs();
        }

        public Builder(SecretBackendArgs defaults) {
            $ = new SecretBackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param anonymousGroupSearch Use anonymous binds when performing LDAP group searches
         * (if true the initial credentials will still be used for the initial connection test).
         * 
         * @return builder
         * 
         */
        public Builder anonymousGroupSearch(@Nullable Output<Boolean> anonymousGroupSearch) {
            $.anonymousGroupSearch = anonymousGroupSearch;
            return this;
        }

        /**
         * @param anonymousGroupSearch Use anonymous binds when performing LDAP group searches
         * (if true the initial credentials will still be used for the initial connection test).
         * 
         * @return builder
         * 
         */
        public Builder anonymousGroupSearch(Boolean anonymousGroupSearch) {
            return anonymousGroupSearch(Output.of(anonymousGroupSearch));
        }

        /**
         * @param backend The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `ad`.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `ad`.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param binddn Distinguished name of object to bind when performing user and group search.
         * 
         * @return builder
         * 
         */
        public Builder binddn(Output<String> binddn) {
            $.binddn = binddn;
            return this;
        }

        /**
         * @param binddn Distinguished name of object to bind when performing user and group search.
         * 
         * @return builder
         * 
         */
        public Builder binddn(String binddn) {
            return binddn(Output.of(binddn));
        }

        /**
         * @param bindpass Password to use along with binddn when performing user search.
         * 
         * @return builder
         * 
         */
        public Builder bindpass(Output<String> bindpass) {
            $.bindpass = bindpass;
            return this;
        }

        /**
         * @param bindpass Password to use along with binddn when performing user search.
         * 
         * @return builder
         * 
         */
        public Builder bindpass(String bindpass) {
            return bindpass(Output.of(bindpass));
        }

        /**
         * @param caseSensitiveNames If set, user and group names assigned to policies within the
         * backend will be case sensitive. Otherwise, names will be normalized to lower case.
         * 
         * @return builder
         * 
         */
        public Builder caseSensitiveNames(@Nullable Output<Boolean> caseSensitiveNames) {
            $.caseSensitiveNames = caseSensitiveNames;
            return this;
        }

        /**
         * @param caseSensitiveNames If set, user and group names assigned to policies within the
         * backend will be case sensitive. Otherwise, names will be normalized to lower case.
         * 
         * @return builder
         * 
         */
        public Builder caseSensitiveNames(Boolean caseSensitiveNames) {
            return caseSensitiveNames(Output.of(caseSensitiveNames));
        }

        /**
         * @param certificate CA certificate to use when verifying LDAP server certificate, must be
         * x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate CA certificate to use when verifying LDAP server certificate, must be
         * x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param clientTlsCert Client certificate to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsCert(@Nullable Output<String> clientTlsCert) {
            $.clientTlsCert = clientTlsCert;
            return this;
        }

        /**
         * @param clientTlsCert Client certificate to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsCert(String clientTlsCert) {
            return clientTlsCert(Output.of(clientTlsCert));
        }

        /**
         * @param clientTlsKey Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsKey(@Nullable Output<String> clientTlsKey) {
            $.clientTlsKey = clientTlsKey;
            return this;
        }

        /**
         * @param clientTlsKey Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
         * 
         * @return builder
         * 
         */
        public Builder clientTlsKey(String clientTlsKey) {
            return clientTlsKey(Output.of(clientTlsKey));
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for secrets in seconds.
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(@Nullable Output<Integer> defaultLeaseTtlSeconds) {
            $.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            return this;
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for secrets in seconds.
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(Integer defaultLeaseTtlSeconds) {
            return defaultLeaseTtlSeconds(Output.of(defaultLeaseTtlSeconds));
        }

        /**
         * @param denyNullBind Denies an unauthenticated LDAP bind request if the user&#39;s password is empty;
         * defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder denyNullBind(@Nullable Output<Boolean> denyNullBind) {
            $.denyNullBind = denyNullBind;
            return this;
        }

        /**
         * @param denyNullBind Denies an unauthenticated LDAP bind request if the user&#39;s password is empty;
         * defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder denyNullBind(Boolean denyNullBind) {
            return denyNullBind(Output.of(denyNullBind));
        }

        /**
         * @param description Human-friendly description of the mount for the Active Directory backend.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-friendly description of the mount for the Active Directory backend.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(@Nullable Output<Boolean> disableRemount) {
            $.disableRemount = disableRemount;
            return this;
        }

        /**
         * @param disableRemount If set, opts out of mount migration on path updates.
         * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
         * 
         * @return builder
         * 
         */
        public Builder disableRemount(Boolean disableRemount) {
            return disableRemount(Output.of(disableRemount));
        }

        /**
         * @param discoverdn Use anonymous bind to discover the bind Distinguished Name of a user.
         * 
         * @return builder
         * 
         */
        public Builder discoverdn(@Nullable Output<Boolean> discoverdn) {
            $.discoverdn = discoverdn;
            return this;
        }

        /**
         * @param discoverdn Use anonymous bind to discover the bind Distinguished Name of a user.
         * 
         * @return builder
         * 
         */
        public Builder discoverdn(Boolean discoverdn) {
            return discoverdn(Output.of(discoverdn));
        }

        /**
         * @param formatter **Deprecated** use `password_policy`. Text to insert the password into, ex. &#34;customPrefix{{PASSWORD}}customSuffix&#34;.
         * 
         * @return builder
         * 
         * @deprecated
         * Formatter is deprecated and password_policy should be used with Vault &gt;= 1.5.
         * 
         */
        @Deprecated /* Formatter is deprecated and password_policy should be used with Vault >= 1.5. */
        public Builder formatter(@Nullable Output<String> formatter) {
            $.formatter = formatter;
            return this;
        }

        /**
         * @param formatter **Deprecated** use `password_policy`. Text to insert the password into, ex. &#34;customPrefix{{PASSWORD}}customSuffix&#34;.
         * 
         * @return builder
         * 
         * @deprecated
         * Formatter is deprecated and password_policy should be used with Vault &gt;= 1.5.
         * 
         */
        @Deprecated /* Formatter is deprecated and password_policy should be used with Vault >= 1.5. */
        public Builder formatter(String formatter) {
            return formatter(Output.of(formatter));
        }

        /**
         * @param groupattr LDAP attribute to follow on objects returned by &lt;groupfilter&gt; in order to enumerate
         * user group membership. Examples: `cn` or `memberOf`, etc. Defaults to `cn`.
         * 
         * @return builder
         * 
         */
        public Builder groupattr(@Nullable Output<String> groupattr) {
            $.groupattr = groupattr;
            return this;
        }

        /**
         * @param groupattr LDAP attribute to follow on objects returned by &lt;groupfilter&gt; in order to enumerate
         * user group membership. Examples: `cn` or `memberOf`, etc. Defaults to `cn`.
         * 
         * @return builder
         * 
         */
        public Builder groupattr(String groupattr) {
            return groupattr(Output.of(groupattr));
        }

        /**
         * @param groupdn LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).
         * 
         * @return builder
         * 
         */
        public Builder groupdn(@Nullable Output<String> groupdn) {
            $.groupdn = groupdn;
            return this;
        }

        /**
         * @param groupdn LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org).
         * 
         * @return builder
         * 
         */
        public Builder groupdn(String groupdn) {
            return groupdn(Output.of(groupdn));
        }

        /**
         * @param groupfilter Go template for querying group membership of user (optional) The template can access
         * the following context variables: UserDN, Username. Defaults to `(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))`
         * 
         * @return builder
         * 
         */
        public Builder groupfilter(@Nullable Output<String> groupfilter) {
            $.groupfilter = groupfilter;
            return this;
        }

        /**
         * @param groupfilter Go template for querying group membership of user (optional) The template can access
         * the following context variables: UserDN, Username. Defaults to `(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))`
         * 
         * @return builder
         * 
         */
        public Builder groupfilter(String groupfilter) {
            return groupfilter(Output.of(groupfilter));
        }

        /**
         * @param insecureTls Skip LDAP server SSL Certificate verification. This is not recommended for production.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder insecureTls(@Nullable Output<Boolean> insecureTls) {
            $.insecureTls = insecureTls;
            return this;
        }

        /**
         * @param insecureTls Skip LDAP server SSL Certificate verification. This is not recommended for production.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder insecureTls(Boolean insecureTls) {
            return insecureTls(Output.of(insecureTls));
        }

        /**
         * @param lastRotationTolerance The number of seconds after a Vault rotation where, if Active Directory
         * shows a later rotation, it should be considered out-of-band
         * 
         * @return builder
         * 
         */
        public Builder lastRotationTolerance(@Nullable Output<Integer> lastRotationTolerance) {
            $.lastRotationTolerance = lastRotationTolerance;
            return this;
        }

        /**
         * @param lastRotationTolerance The number of seconds after a Vault rotation where, if Active Directory
         * shows a later rotation, it should be considered out-of-band
         * 
         * @return builder
         * 
         */
        public Builder lastRotationTolerance(Integer lastRotationTolerance) {
            return lastRotationTolerance(Output.of(lastRotationTolerance));
        }

        /**
         * @param length **Deprecated** use `password_policy`. The desired length of passwords that Vault generates.
         * *Mutually exclusive with `password_policy` on vault-1.11+*
         * 
         * @return builder
         * 
         * @deprecated
         * Length is deprecated and password_policy should be used with Vault &gt;= 1.5.
         * 
         */
        @Deprecated /* Length is deprecated and password_policy should be used with Vault >= 1.5. */
        public Builder length(@Nullable Output<Integer> length) {
            $.length = length;
            return this;
        }

        /**
         * @param length **Deprecated** use `password_policy`. The desired length of passwords that Vault generates.
         * *Mutually exclusive with `password_policy` on vault-1.11+*
         * 
         * @return builder
         * 
         * @deprecated
         * Length is deprecated and password_policy should be used with Vault &gt;= 1.5.
         * 
         */
        @Deprecated /* Length is deprecated and password_policy should be used with Vault >= 1.5. */
        public Builder length(Integer length) {
            return length(Output.of(length));
        }

        /**
         * @param local Mark the secrets engine as local-only. Local engines are not replicated or removed by
         * replication.Tolerance duration to use when checking the last rotation time.
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local Mark the secrets engine as local-only. Local engines are not replicated or removed by
         * replication.Tolerance duration to use when checking the last rotation time.
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for secrets in seconds.
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(@Nullable Output<Integer> maxLeaseTtlSeconds) {
            $.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            return this;
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for secrets in seconds.
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(Integer maxLeaseTtlSeconds) {
            return maxLeaseTtlSeconds(Output.of(maxLeaseTtlSeconds));
        }

        /**
         * @param maxTtl In seconds, the maximum password time-to-live.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(@Nullable Output<Integer> maxTtl) {
            $.maxTtl = maxTtl;
            return this;
        }

        /**
         * @param maxTtl In seconds, the maximum password time-to-live.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(Integer maxTtl) {
            return maxTtl(Output.of(maxTtl));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param passwordPolicy Name of the password policy to use to generate passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(@Nullable Output<String> passwordPolicy) {
            $.passwordPolicy = passwordPolicy;
            return this;
        }

        /**
         * @param passwordPolicy Name of the password policy to use to generate passwords.
         * 
         * @return builder
         * 
         */
        public Builder passwordPolicy(String passwordPolicy) {
            return passwordPolicy(Output.of(passwordPolicy));
        }

        /**
         * @param requestTimeout Timeout, in seconds, for the connection when making requests against the server
         * before returning back an error.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<Integer> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout Timeout, in seconds, for the connection when making requests against the server
         * before returning back an error.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(Integer requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        /**
         * @param starttls Issue a StartTLS command after establishing unencrypted connection.
         * 
         * @return builder
         * 
         */
        public Builder starttls(@Nullable Output<Boolean> starttls) {
            $.starttls = starttls;
            return this;
        }

        /**
         * @param starttls Issue a StartTLS command after establishing unencrypted connection.
         * 
         * @return builder
         * 
         */
        public Builder starttls(Boolean starttls) {
            return starttls(Output.of(starttls));
        }

        /**
         * @param tlsMaxVersion Maximum TLS version to use. Accepted values are `tls10`, `tls11`,
         * `tls12` or `tls13`. Defaults to `tls12`.
         * 
         * @return builder
         * 
         */
        public Builder tlsMaxVersion(@Nullable Output<String> tlsMaxVersion) {
            $.tlsMaxVersion = tlsMaxVersion;
            return this;
        }

        /**
         * @param tlsMaxVersion Maximum TLS version to use. Accepted values are `tls10`, `tls11`,
         * `tls12` or `tls13`. Defaults to `tls12`.
         * 
         * @return builder
         * 
         */
        public Builder tlsMaxVersion(String tlsMaxVersion) {
            return tlsMaxVersion(Output.of(tlsMaxVersion));
        }

        /**
         * @param tlsMinVersion Minimum TLS version to use. Accepted values are `tls10`, `tls11`,
         * `tls12` or `tls13`. Defaults to `tls12`.
         * 
         * @return builder
         * 
         */
        public Builder tlsMinVersion(@Nullable Output<String> tlsMinVersion) {
            $.tlsMinVersion = tlsMinVersion;
            return this;
        }

        /**
         * @param tlsMinVersion Minimum TLS version to use. Accepted values are `tls10`, `tls11`,
         * `tls12` or `tls13`. Defaults to `tls12`.
         * 
         * @return builder
         * 
         */
        public Builder tlsMinVersion(String tlsMinVersion) {
            return tlsMinVersion(Output.of(tlsMinVersion));
        }

        /**
         * @param ttl In seconds, the default password time-to-live.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl In seconds, the default password time-to-live.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param upndomain Enables userPrincipalDomain login with [username]@UPNDomain.
         * 
         * @return builder
         * 
         */
        public Builder upndomain(@Nullable Output<String> upndomain) {
            $.upndomain = upndomain;
            return this;
        }

        /**
         * @param upndomain Enables userPrincipalDomain login with [username]@UPNDomain.
         * 
         * @return builder
         * 
         */
        public Builder upndomain(String upndomain) {
            return upndomain(Output.of(upndomain));
        }

        /**
         * @param url LDAP URL to connect to. Multiple URLs can be specified by concatenating
         * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url LDAP URL to connect to. Multiple URLs can be specified by concatenating
         * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param usePre111GroupCnBehavior In Vault 1.1.1 a fix for handling group CN values of
         * different cases unfortunately introduced a regression that could cause previously defined groups
         * to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
         * matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
         * compatibility. It is enabled by default if the config is upgraded but disabled by default on
         * new configurations.
         * 
         * @return builder
         * 
         */
        public Builder usePre111GroupCnBehavior(@Nullable Output<Boolean> usePre111GroupCnBehavior) {
            $.usePre111GroupCnBehavior = usePre111GroupCnBehavior;
            return this;
        }

        /**
         * @param usePre111GroupCnBehavior In Vault 1.1.1 a fix for handling group CN values of
         * different cases unfortunately introduced a regression that could cause previously defined groups
         * to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for
         * matching group CNs will be used. This is only needed in some upgrade scenarios for backwards
         * compatibility. It is enabled by default if the config is upgraded but disabled by default on
         * new configurations.
         * 
         * @return builder
         * 
         */
        public Builder usePre111GroupCnBehavior(Boolean usePre111GroupCnBehavior) {
            return usePre111GroupCnBehavior(Output.of(usePre111GroupCnBehavior));
        }

        /**
         * @param useTokenGroups If true, use the Active Directory tokenGroups constructed attribute of the
         * user to find the group memberships. This will find all security groups including nested ones.
         * 
         * @return builder
         * 
         */
        public Builder useTokenGroups(@Nullable Output<Boolean> useTokenGroups) {
            $.useTokenGroups = useTokenGroups;
            return this;
        }

        /**
         * @param useTokenGroups If true, use the Active Directory tokenGroups constructed attribute of the
         * user to find the group memberships. This will find all security groups including nested ones.
         * 
         * @return builder
         * 
         */
        public Builder useTokenGroups(Boolean useTokenGroups) {
            return useTokenGroups(Output.of(useTokenGroups));
        }

        /**
         * @param userattr Attribute used when searching users. Defaults to `cn`.
         * 
         * @return builder
         * 
         */
        public Builder userattr(@Nullable Output<String> userattr) {
            $.userattr = userattr;
            return this;
        }

        /**
         * @param userattr Attribute used when searching users. Defaults to `cn`.
         * 
         * @return builder
         * 
         */
        public Builder userattr(String userattr) {
            return userattr(Output.of(userattr));
        }

        /**
         * @param userdn LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
         * 
         * @return builder
         * 
         */
        public Builder userdn(@Nullable Output<String> userdn) {
            $.userdn = userdn;
            return this;
        }

        /**
         * @param userdn LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
         * 
         * @return builder
         * 
         */
        public Builder userdn(String userdn) {
            return userdn(Output.of(userdn));
        }

        public SecretBackendArgs build() {
            if ($.binddn == null) {
                throw new MissingRequiredPropertyException("SecretBackendArgs", "binddn");
            }
            if ($.bindpass == null) {
                throw new MissingRequiredPropertyException("SecretBackendArgs", "bindpass");
            }
            return $;
        }
    }

}
