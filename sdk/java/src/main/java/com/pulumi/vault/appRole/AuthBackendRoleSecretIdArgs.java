// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.appRole;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendRoleSecretIdArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendRoleSecretIdArgs Empty = new AuthBackendRoleSecretIdArgs();

    /**
     * Unique name of the auth backend to configure.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Unique name of the auth backend to configure.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * If set, specifies blocks of IP addresses which can
     * perform the login operation using this SecretID.
     * 
     */
    @Import(name="cidrLists")
    private @Nullable Output<List<String>> cidrLists;

    /**
     * @return If set, specifies blocks of IP addresses which can
     * perform the login operation using this SecretID.
     * 
     */
    public Optional<Output<List<String>>> cidrLists() {
        return Optional.ofNullable(this.cidrLists);
    }

    /**
     * A JSON-encoded string containing metadata in
     * key-value pairs to be set on tokens issued with this SecretID.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    /**
     * @return A JSON-encoded string containing metadata in
     * key-value pairs to be set on tokens issued with this SecretID.
     * 
     */
    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The name of the role to create the SecretID for.
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return The name of the role to create the SecretID for.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    /**
     * The SecretID to be created. If set, uses &#34;Push&#34;
     * mode.  Defaults to Vault auto-generating SecretIDs.
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return The SecretID to be created. If set, uses &#34;Push&#34;
     * mode.  Defaults to Vault auto-generating SecretIDs.
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * Set to `true` to use the wrapped secret-id accessor as the resource ID.
     * If `false` (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
     * invalidated through unwrapping.
     * 
     */
    @Import(name="withWrappedAccessor")
    private @Nullable Output<Boolean> withWrappedAccessor;

    /**
     * @return Set to `true` to use the wrapped secret-id accessor as the resource ID.
     * If `false` (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
     * invalidated through unwrapping.
     * 
     */
    public Optional<Output<Boolean>> withWrappedAccessor() {
        return Optional.ofNullable(this.withWrappedAccessor);
    }

    /**
     * If set, the SecretID response will be
     * [response-wrapped](https://www.vaultproject.io/docs/concepts/response-wrapping)
     * and available for the duration specified. Only a single unwrapping of the
     * token is allowed.
     * 
     */
    @Import(name="wrappingTtl")
    private @Nullable Output<String> wrappingTtl;

    /**
     * @return If set, the SecretID response will be
     * [response-wrapped](https://www.vaultproject.io/docs/concepts/response-wrapping)
     * and available for the duration specified. Only a single unwrapping of the
     * token is allowed.
     * 
     */
    public Optional<Output<String>> wrappingTtl() {
        return Optional.ofNullable(this.wrappingTtl);
    }

    private AuthBackendRoleSecretIdArgs() {}

    private AuthBackendRoleSecretIdArgs(AuthBackendRoleSecretIdArgs $) {
        this.backend = $.backend;
        this.cidrLists = $.cidrLists;
        this.metadata = $.metadata;
        this.namespace = $.namespace;
        this.roleName = $.roleName;
        this.secretId = $.secretId;
        this.withWrappedAccessor = $.withWrappedAccessor;
        this.wrappingTtl = $.wrappingTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendRoleSecretIdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendRoleSecretIdArgs $;

        public Builder() {
            $ = new AuthBackendRoleSecretIdArgs();
        }

        public Builder(AuthBackendRoleSecretIdArgs defaults) {
            $ = new AuthBackendRoleSecretIdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend Unique name of the auth backend to configure.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Unique name of the auth backend to configure.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param cidrLists If set, specifies blocks of IP addresses which can
         * perform the login operation using this SecretID.
         * 
         * @return builder
         * 
         */
        public Builder cidrLists(@Nullable Output<List<String>> cidrLists) {
            $.cidrLists = cidrLists;
            return this;
        }

        /**
         * @param cidrLists If set, specifies blocks of IP addresses which can
         * perform the login operation using this SecretID.
         * 
         * @return builder
         * 
         */
        public Builder cidrLists(List<String> cidrLists) {
            return cidrLists(Output.of(cidrLists));
        }

        /**
         * @param cidrLists If set, specifies blocks of IP addresses which can
         * perform the login operation using this SecretID.
         * 
         * @return builder
         * 
         */
        public Builder cidrLists(String... cidrLists) {
            return cidrLists(List.of(cidrLists));
        }

        /**
         * @param metadata A JSON-encoded string containing metadata in
         * key-value pairs to be set on tokens issued with this SecretID.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata A JSON-encoded string containing metadata in
         * key-value pairs to be set on tokens issued with this SecretID.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param roleName The name of the role to create the SecretID for.
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The name of the role to create the SecretID for.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param secretId The SecretID to be created. If set, uses &#34;Push&#34;
         * mode.  Defaults to Vault auto-generating SecretIDs.
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId The SecretID to be created. If set, uses &#34;Push&#34;
         * mode.  Defaults to Vault auto-generating SecretIDs.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param withWrappedAccessor Set to `true` to use the wrapped secret-id accessor as the resource ID.
         * If `false` (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
         * invalidated through unwrapping.
         * 
         * @return builder
         * 
         */
        public Builder withWrappedAccessor(@Nullable Output<Boolean> withWrappedAccessor) {
            $.withWrappedAccessor = withWrappedAccessor;
            return this;
        }

        /**
         * @param withWrappedAccessor Set to `true` to use the wrapped secret-id accessor as the resource ID.
         * If `false` (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
         * invalidated through unwrapping.
         * 
         * @return builder
         * 
         */
        public Builder withWrappedAccessor(Boolean withWrappedAccessor) {
            return withWrappedAccessor(Output.of(withWrappedAccessor));
        }

        /**
         * @param wrappingTtl If set, the SecretID response will be
         * [response-wrapped](https://www.vaultproject.io/docs/concepts/response-wrapping)
         * and available for the duration specified. Only a single unwrapping of the
         * token is allowed.
         * 
         * @return builder
         * 
         */
        public Builder wrappingTtl(@Nullable Output<String> wrappingTtl) {
            $.wrappingTtl = wrappingTtl;
            return this;
        }

        /**
         * @param wrappingTtl If set, the SecretID response will be
         * [response-wrapped](https://www.vaultproject.io/docs/concepts/response-wrapping)
         * and available for the duration specified. Only a single unwrapping of the
         * token is allowed.
         * 
         * @return builder
         * 
         */
        public Builder wrappingTtl(String wrappingTtl) {
            return wrappingTtl(Output.of(wrappingTtl));
        }

        public AuthBackendRoleSecretIdArgs build() {
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("AuthBackendRoleSecretIdArgs", "roleName");
            }
            return $;
        }
    }

}
