// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.aws.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccessCredentialsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAccessCredentialsPlainArgs Empty = new GetAccessCredentialsPlainArgs();

    /**
     * The path to the AWS secret backend to
     * read credentials from, with no leading or trailing `/`s.
     * 
     */
    @Import(name="backend", required=true)
    private String backend;

    /**
     * @return The path to the AWS secret backend to
     * read credentials from, with no leading or trailing `/`s.
     * 
     */
    public String backend() {
        return this.backend;
    }

    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable String namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The region the read credentials belong to.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return The region the read credentials belong to.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the AWS secret backend role to read
     * credentials from, with no leading or trailing `/`s.
     * 
     */
    @Import(name="role", required=true)
    private String role;

    /**
     * @return The name of the AWS secret backend role to read
     * credentials from, with no leading or trailing `/`s.
     * 
     */
    public String role() {
        return this.role;
    }

    /**
     * The specific AWS ARN to use
     * from the configured role. If the role does not have multiple ARNs, this does
     * not need to be specified.
     * 
     */
    @Import(name="roleArn")
    private @Nullable String roleArn;

    /**
     * @return The specific AWS ARN to use
     * from the configured role. If the role does not have multiple ARNs, this does
     * not need to be specified.
     * 
     */
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Specifies the TTL for the use of the STS token. This
     * is specified as a string with a duration suffix. Valid only when
     * `credential_type` of the connected `vault.aws.SecretBackendRole` resource is `assumed_role` or `federation_token`
     * 
     */
    @Import(name="ttl")
    private @Nullable String ttl;

    /**
     * @return Specifies the TTL for the use of the STS token. This
     * is specified as a string with a duration suffix. Valid only when
     * `credential_type` of the connected `vault.aws.SecretBackendRole` resource is `assumed_role` or `federation_token`
     * 
     */
    public Optional<String> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The type of credentials to read. Defaults
     * to `&#34;creds&#34;`, which just returns an AWS Access Key ID and Secret
     * Key. Can also be set to `&#34;sts&#34;`, which will return a security token
     * in addition to the keys.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of credentials to read. Defaults
     * to `&#34;creds&#34;`, which just returns an AWS Access Key ID and Secret
     * Key. Can also be set to `&#34;sts&#34;`, which will return a security token
     * in addition to the keys.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetAccessCredentialsPlainArgs() {}

    private GetAccessCredentialsPlainArgs(GetAccessCredentialsPlainArgs $) {
        this.backend = $.backend;
        this.namespace = $.namespace;
        this.region = $.region;
        this.role = $.role;
        this.roleArn = $.roleArn;
        this.ttl = $.ttl;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccessCredentialsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccessCredentialsPlainArgs $;

        public Builder() {
            $ = new GetAccessCredentialsPlainArgs();
        }

        public Builder(GetAccessCredentialsPlainArgs defaults) {
            $ = new GetAccessCredentialsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backend The path to the AWS secret backend to
         * read credentials from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param namespace The namespace of the target resource.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable String namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param region The region the read credentials belong to.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param role The name of the AWS secret backend role to read
         * credentials from, with no leading or trailing `/`s.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            $.role = role;
            return this;
        }

        /**
         * @param roleArn The specific AWS ARN to use
         * from the configured role. If the role does not have multiple ARNs, this does
         * not need to be specified.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable String roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param ttl Specifies the TTL for the use of the STS token. This
         * is specified as a string with a duration suffix. Valid only when
         * `credential_type` of the connected `vault.aws.SecretBackendRole` resource is `assumed_role` or `federation_token`
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable String ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param type The type of credentials to read. Defaults
         * to `&#34;creds&#34;`, which just returns an AWS Access Key ID and Secret
         * Key. Can also be set to `&#34;sts&#34;`, which will return a security token
         * in addition to the keys.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetAccessCredentialsPlainArgs build() {
            if ($.backend == null) {
                throw new MissingRequiredPropertyException("GetAccessCredentialsPlainArgs", "backend");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("GetAccessCredentialsPlainArgs", "role");
            }
            return $;
        }
    }

}
