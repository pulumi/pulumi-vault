// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ldap;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretBackendStaticRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretBackendStaticRoleArgs Empty = new SecretBackendStaticRoleArgs();

    /**
     * Distinguished name (DN) of the existing LDAP entry to manage
     * password rotation for. If given, it will take precedence over `username` for the LDAP
     * search performed during password rotation. Cannot be modified after creation.
     * 
     */
    @Import(name="dn")
    private @Nullable Output<String> dn;

    /**
     * @return Distinguished name (DN) of the existing LDAP entry to manage
     * password rotation for. If given, it will take precedence over `username` for the LDAP
     * search performed during password rotation. Cannot be modified after creation.
     * 
     */
    public Optional<Output<String>> dn() {
        return Optional.ofNullable(this.dn);
    }

    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     * 
     */
    @Import(name="mount")
    private @Nullable Output<String> mount;

    /**
     * @return The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     * 
     */
    public Optional<Output<String>> mount() {
        return Optional.ofNullable(this.mount);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Name of the role.
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return Name of the role.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    /**
     * How often Vault should rotate the password of the user entry.
     * 
     */
    @Import(name="rotationPeriod", required=true)
    private Output<Integer> rotationPeriod;

    /**
     * @return How often Vault should rotate the password of the user entry.
     * 
     */
    public Output<Integer> rotationPeriod() {
        return this.rotationPeriod;
    }

    /**
     * The username of the existing LDAP entry to manage password rotation for.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username of the existing LDAP entry to manage password rotation for.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private SecretBackendStaticRoleArgs() {}

    private SecretBackendStaticRoleArgs(SecretBackendStaticRoleArgs $) {
        this.dn = $.dn;
        this.mount = $.mount;
        this.namespace = $.namespace;
        this.roleName = $.roleName;
        this.rotationPeriod = $.rotationPeriod;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretBackendStaticRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretBackendStaticRoleArgs $;

        public Builder() {
            $ = new SecretBackendStaticRoleArgs();
        }

        public Builder(SecretBackendStaticRoleArgs defaults) {
            $ = new SecretBackendStaticRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dn Distinguished name (DN) of the existing LDAP entry to manage
         * password rotation for. If given, it will take precedence over `username` for the LDAP
         * search performed during password rotation. Cannot be modified after creation.
         * 
         * @return builder
         * 
         */
        public Builder dn(@Nullable Output<String> dn) {
            $.dn = dn;
            return this;
        }

        /**
         * @param dn Distinguished name (DN) of the existing LDAP entry to manage
         * password rotation for. If given, it will take precedence over `username` for the LDAP
         * search performed during password rotation. Cannot be modified after creation.
         * 
         * @return builder
         * 
         */
        public Builder dn(String dn) {
            return dn(Output.of(dn));
        }

        /**
         * @param mount The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `ldap`.
         * 
         * @return builder
         * 
         */
        public Builder mount(@Nullable Output<String> mount) {
            $.mount = mount;
            return this;
        }

        /**
         * @param mount The unique path this backend should be mounted at. Must
         * not begin or end with a `/`. Defaults to `ldap`.
         * 
         * @return builder
         * 
         */
        public Builder mount(String mount) {
            return mount(Output.of(mount));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param roleName Name of the role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName Name of the role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param rotationPeriod How often Vault should rotate the password of the user entry.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(Output<Integer> rotationPeriod) {
            $.rotationPeriod = rotationPeriod;
            return this;
        }

        /**
         * @param rotationPeriod How often Vault should rotate the password of the user entry.
         * 
         * @return builder
         * 
         */
        public Builder rotationPeriod(Integer rotationPeriod) {
            return rotationPeriod(Output.of(rotationPeriod));
        }

        /**
         * @param username The username of the existing LDAP entry to manage password rotation for.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the existing LDAP entry to manage password rotation for.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public SecretBackendStaticRoleArgs build() {
            $.roleName = Objects.requireNonNull($.roleName, "expected parameter 'roleName' to be non-null");
            $.rotationPeriod = Objects.requireNonNull($.rotationPeriod, "expected parameter 'rotationPeriod' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
