// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.managed.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeysPkcArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeysPkcArgs Empty = new KeysPkcArgs();

    /**
     * If no existing key can be found in
     * the referenced backend, instructs Vault to generate a key within the backend.
     * 
     */
    @Import(name="allowGenerateKey")
    private @Nullable Output<Boolean> allowGenerateKey;

    /**
     * @return If no existing key can be found in
     * the referenced backend, instructs Vault to generate a key within the backend.
     * 
     */
    public Optional<Output<Boolean>> allowGenerateKey() {
        return Optional.ofNullable(this.allowGenerateKey);
    }

    /**
     * Controls the ability for Vault to replace through
     * generation or importing a key into the configured backend even
     * if a key is present, if set to `false` those operations are forbidden
     * if a key exists.
     * 
     */
    @Import(name="allowReplaceKey")
    private @Nullable Output<Boolean> allowReplaceKey;

    /**
     * @return Controls the ability for Vault to replace through
     * generation or importing a key into the configured backend even
     * if a key is present, if set to `false` those operations are forbidden
     * if a key exists.
     * 
     */
    public Optional<Output<Boolean>> allowReplaceKey() {
        return Optional.ofNullable(this.allowReplaceKey);
    }

    /**
     * Controls the ability for Vault to import a key to the
     * configured backend, if `false`, those operations will be forbidden.
     * 
     */
    @Import(name="allowStoreKey")
    private @Nullable Output<Boolean> allowStoreKey;

    /**
     * @return Controls the ability for Vault to import a key to the
     * configured backend, if `false`, those operations will be forbidden.
     * 
     */
    public Optional<Output<Boolean>> allowStoreKey() {
        return Optional.ofNullable(this.allowStoreKey);
    }

    /**
     * If `true`, allows usage from any mount point within the
     * namespace.
     * 
     */
    @Import(name="anyMount")
    private @Nullable Output<Boolean> anyMount;

    /**
     * @return If `true`, allows usage from any mount point within the
     * namespace.
     * 
     */
    public Optional<Output<Boolean>> anyMount() {
        return Optional.ofNullable(this.anyMount);
    }

    /**
     * The curve to use for an ECDSA key. Used when `key_type`
     * is `ECDSA`. Required if `allow_generate_key` is `true`.
     * 
     */
    @Import(name="curve")
    private @Nullable Output<String> curve;

    /**
     * @return The curve to use for an ECDSA key. Used when `key_type`
     * is `ECDSA`. Required if `allow_generate_key` is `true`.
     * 
     */
    public Optional<Output<String>> curve() {
        return Optional.ofNullable(this.curve);
    }

    /**
     * Force all operations to open up a read-write session to
     * the HSM.
     * 
     */
    @Import(name="forceRwSession")
    private @Nullable Output<String> forceRwSession;

    /**
     * @return Force all operations to open up a read-write session to
     * the HSM.
     * 
     */
    public Optional<Output<String>> forceRwSession() {
        return Optional.ofNullable(this.forceRwSession);
    }

    /**
     * The size in bits for an RSA key.
     * 
     */
    @Import(name="keyBits")
    private @Nullable Output<String> keyBits;

    /**
     * @return The size in bits for an RSA key.
     * 
     */
    public Optional<Output<String>> keyBits() {
        return Optional.ofNullable(this.keyBits);
    }

    /**
     * The id of a PKCS#11 key to use.
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The id of a PKCS#11 key to use.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * The label of the key to use.
     * 
     */
    @Import(name="keyLabel", required=true)
    private Output<String> keyLabel;

    /**
     * @return The label of the key to use.
     * 
     */
    public Output<String> keyLabel() {
        return this.keyLabel;
    }

    /**
     * The name of the kms_library stanza to use from Vault&#39;s config
     * to lookup the local library path.
     * 
     */
    @Import(name="library", required=true)
    private Output<String> library;

    /**
     * @return The name of the kms_library stanza to use from Vault&#39;s config
     * to lookup the local library path.
     * 
     */
    public Output<String> library() {
        return this.library;
    }

    /**
     * The encryption/decryption mechanism to use, specified as a
     * hexadecimal (prefixed by 0x) string.
     * 
     */
    @Import(name="mechanism", required=true)
    private Output<String> mechanism;

    /**
     * @return The encryption/decryption mechanism to use, specified as a
     * hexadecimal (prefixed by 0x) string.
     * 
     */
    public Output<String> mechanism() {
        return this.mechanism;
    }

    /**
     * A unique lowercase name that serves as identifying the key.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique lowercase name that serves as identifying the key.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The PIN for login.
     * 
     */
    @Import(name="pin", required=true)
    private Output<String> pin;

    /**
     * @return The PIN for login.
     * 
     */
    public Output<String> pin() {
        return this.pin;
    }

    /**
     * The slot number to use, specified as a string in a decimal format
     * (e.g. `2305843009213693953`).
     * 
     */
    @Import(name="slot")
    private @Nullable Output<String> slot;

    /**
     * @return The slot number to use, specified as a string in a decimal format
     * (e.g. `2305843009213693953`).
     * 
     */
    public Optional<Output<String>> slot() {
        return Optional.ofNullable(this.slot);
    }

    /**
     * The slot token label to use.
     * 
     */
    @Import(name="tokenLabel")
    private @Nullable Output<String> tokenLabel;

    /**
     * @return The slot token label to use.
     * 
     */
    public Optional<Output<String>> tokenLabel() {
        return Optional.ofNullable(this.tokenLabel);
    }

    /**
     * ID of the managed key read from Vault
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return ID of the managed key read from Vault
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private KeysPkcArgs() {}

    private KeysPkcArgs(KeysPkcArgs $) {
        this.allowGenerateKey = $.allowGenerateKey;
        this.allowReplaceKey = $.allowReplaceKey;
        this.allowStoreKey = $.allowStoreKey;
        this.anyMount = $.anyMount;
        this.curve = $.curve;
        this.forceRwSession = $.forceRwSession;
        this.keyBits = $.keyBits;
        this.keyId = $.keyId;
        this.keyLabel = $.keyLabel;
        this.library = $.library;
        this.mechanism = $.mechanism;
        this.name = $.name;
        this.pin = $.pin;
        this.slot = $.slot;
        this.tokenLabel = $.tokenLabel;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeysPkcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeysPkcArgs $;

        public Builder() {
            $ = new KeysPkcArgs();
        }

        public Builder(KeysPkcArgs defaults) {
            $ = new KeysPkcArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowGenerateKey If no existing key can be found in
         * the referenced backend, instructs Vault to generate a key within the backend.
         * 
         * @return builder
         * 
         */
        public Builder allowGenerateKey(@Nullable Output<Boolean> allowGenerateKey) {
            $.allowGenerateKey = allowGenerateKey;
            return this;
        }

        /**
         * @param allowGenerateKey If no existing key can be found in
         * the referenced backend, instructs Vault to generate a key within the backend.
         * 
         * @return builder
         * 
         */
        public Builder allowGenerateKey(Boolean allowGenerateKey) {
            return allowGenerateKey(Output.of(allowGenerateKey));
        }

        /**
         * @param allowReplaceKey Controls the ability for Vault to replace through
         * generation or importing a key into the configured backend even
         * if a key is present, if set to `false` those operations are forbidden
         * if a key exists.
         * 
         * @return builder
         * 
         */
        public Builder allowReplaceKey(@Nullable Output<Boolean> allowReplaceKey) {
            $.allowReplaceKey = allowReplaceKey;
            return this;
        }

        /**
         * @param allowReplaceKey Controls the ability for Vault to replace through
         * generation or importing a key into the configured backend even
         * if a key is present, if set to `false` those operations are forbidden
         * if a key exists.
         * 
         * @return builder
         * 
         */
        public Builder allowReplaceKey(Boolean allowReplaceKey) {
            return allowReplaceKey(Output.of(allowReplaceKey));
        }

        /**
         * @param allowStoreKey Controls the ability for Vault to import a key to the
         * configured backend, if `false`, those operations will be forbidden.
         * 
         * @return builder
         * 
         */
        public Builder allowStoreKey(@Nullable Output<Boolean> allowStoreKey) {
            $.allowStoreKey = allowStoreKey;
            return this;
        }

        /**
         * @param allowStoreKey Controls the ability for Vault to import a key to the
         * configured backend, if `false`, those operations will be forbidden.
         * 
         * @return builder
         * 
         */
        public Builder allowStoreKey(Boolean allowStoreKey) {
            return allowStoreKey(Output.of(allowStoreKey));
        }

        /**
         * @param anyMount If `true`, allows usage from any mount point within the
         * namespace.
         * 
         * @return builder
         * 
         */
        public Builder anyMount(@Nullable Output<Boolean> anyMount) {
            $.anyMount = anyMount;
            return this;
        }

        /**
         * @param anyMount If `true`, allows usage from any mount point within the
         * namespace.
         * 
         * @return builder
         * 
         */
        public Builder anyMount(Boolean anyMount) {
            return anyMount(Output.of(anyMount));
        }

        /**
         * @param curve The curve to use for an ECDSA key. Used when `key_type`
         * is `ECDSA`. Required if `allow_generate_key` is `true`.
         * 
         * @return builder
         * 
         */
        public Builder curve(@Nullable Output<String> curve) {
            $.curve = curve;
            return this;
        }

        /**
         * @param curve The curve to use for an ECDSA key. Used when `key_type`
         * is `ECDSA`. Required if `allow_generate_key` is `true`.
         * 
         * @return builder
         * 
         */
        public Builder curve(String curve) {
            return curve(Output.of(curve));
        }

        /**
         * @param forceRwSession Force all operations to open up a read-write session to
         * the HSM.
         * 
         * @return builder
         * 
         */
        public Builder forceRwSession(@Nullable Output<String> forceRwSession) {
            $.forceRwSession = forceRwSession;
            return this;
        }

        /**
         * @param forceRwSession Force all operations to open up a read-write session to
         * the HSM.
         * 
         * @return builder
         * 
         */
        public Builder forceRwSession(String forceRwSession) {
            return forceRwSession(Output.of(forceRwSession));
        }

        /**
         * @param keyBits The size in bits for an RSA key.
         * 
         * @return builder
         * 
         */
        public Builder keyBits(@Nullable Output<String> keyBits) {
            $.keyBits = keyBits;
            return this;
        }

        /**
         * @param keyBits The size in bits for an RSA key.
         * 
         * @return builder
         * 
         */
        public Builder keyBits(String keyBits) {
            return keyBits(Output.of(keyBits));
        }

        /**
         * @param keyId The id of a PKCS#11 key to use.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The id of a PKCS#11 key to use.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param keyLabel The label of the key to use.
         * 
         * @return builder
         * 
         */
        public Builder keyLabel(Output<String> keyLabel) {
            $.keyLabel = keyLabel;
            return this;
        }

        /**
         * @param keyLabel The label of the key to use.
         * 
         * @return builder
         * 
         */
        public Builder keyLabel(String keyLabel) {
            return keyLabel(Output.of(keyLabel));
        }

        /**
         * @param library The name of the kms_library stanza to use from Vault&#39;s config
         * to lookup the local library path.
         * 
         * @return builder
         * 
         */
        public Builder library(Output<String> library) {
            $.library = library;
            return this;
        }

        /**
         * @param library The name of the kms_library stanza to use from Vault&#39;s config
         * to lookup the local library path.
         * 
         * @return builder
         * 
         */
        public Builder library(String library) {
            return library(Output.of(library));
        }

        /**
         * @param mechanism The encryption/decryption mechanism to use, specified as a
         * hexadecimal (prefixed by 0x) string.
         * 
         * @return builder
         * 
         */
        public Builder mechanism(Output<String> mechanism) {
            $.mechanism = mechanism;
            return this;
        }

        /**
         * @param mechanism The encryption/decryption mechanism to use, specified as a
         * hexadecimal (prefixed by 0x) string.
         * 
         * @return builder
         * 
         */
        public Builder mechanism(String mechanism) {
            return mechanism(Output.of(mechanism));
        }

        /**
         * @param name A unique lowercase name that serves as identifying the key.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique lowercase name that serves as identifying the key.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pin The PIN for login.
         * 
         * @return builder
         * 
         */
        public Builder pin(Output<String> pin) {
            $.pin = pin;
            return this;
        }

        /**
         * @param pin The PIN for login.
         * 
         * @return builder
         * 
         */
        public Builder pin(String pin) {
            return pin(Output.of(pin));
        }

        /**
         * @param slot The slot number to use, specified as a string in a decimal format
         * (e.g. `2305843009213693953`).
         * 
         * @return builder
         * 
         */
        public Builder slot(@Nullable Output<String> slot) {
            $.slot = slot;
            return this;
        }

        /**
         * @param slot The slot number to use, specified as a string in a decimal format
         * (e.g. `2305843009213693953`).
         * 
         * @return builder
         * 
         */
        public Builder slot(String slot) {
            return slot(Output.of(slot));
        }

        /**
         * @param tokenLabel The slot token label to use.
         * 
         * @return builder
         * 
         */
        public Builder tokenLabel(@Nullable Output<String> tokenLabel) {
            $.tokenLabel = tokenLabel;
            return this;
        }

        /**
         * @param tokenLabel The slot token label to use.
         * 
         * @return builder
         * 
         */
        public Builder tokenLabel(String tokenLabel) {
            return tokenLabel(Output.of(tokenLabel));
        }

        /**
         * @param uuid ID of the managed key read from Vault
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid ID of the managed key read from Vault
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public KeysPkcArgs build() {
            if ($.keyId == null) {
                throw new MissingRequiredPropertyException("KeysPkcArgs", "keyId");
            }
            if ($.keyLabel == null) {
                throw new MissingRequiredPropertyException("KeysPkcArgs", "keyLabel");
            }
            if ($.library == null) {
                throw new MissingRequiredPropertyException("KeysPkcArgs", "library");
            }
            if ($.mechanism == null) {
                throw new MissingRequiredPropertyException("KeysPkcArgs", "mechanism");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("KeysPkcArgs", "name");
            }
            if ($.pin == null) {
                throw new MissingRequiredPropertyException("KeysPkcArgs", "pin");
            }
            return $;
        }
    }

}
