// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vault.database.inputs.SecretsMountCassandraArgs;
import com.pulumi.vault.database.inputs.SecretsMountCouchbaseArgs;
import com.pulumi.vault.database.inputs.SecretsMountElasticsearchArgs;
import com.pulumi.vault.database.inputs.SecretsMountHanaArgs;
import com.pulumi.vault.database.inputs.SecretsMountInfluxdbArgs;
import com.pulumi.vault.database.inputs.SecretsMountMongodbArgs;
import com.pulumi.vault.database.inputs.SecretsMountMongodbatlaArgs;
import com.pulumi.vault.database.inputs.SecretsMountMssqlArgs;
import com.pulumi.vault.database.inputs.SecretsMountMysqlArgs;
import com.pulumi.vault.database.inputs.SecretsMountMysqlAuroraArgs;
import com.pulumi.vault.database.inputs.SecretsMountMysqlLegacyArgs;
import com.pulumi.vault.database.inputs.SecretsMountMysqlRdArgs;
import com.pulumi.vault.database.inputs.SecretsMountOracleArgs;
import com.pulumi.vault.database.inputs.SecretsMountPostgresqlArgs;
import com.pulumi.vault.database.inputs.SecretsMountRediArgs;
import com.pulumi.vault.database.inputs.SecretsMountRedisElasticachArgs;
import com.pulumi.vault.database.inputs.SecretsMountRedshiftArgs;
import com.pulumi.vault.database.inputs.SecretsMountSnowflakeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretsMountState extends com.pulumi.resources.ResourceArgs {

    public static final SecretsMountState Empty = new SecretsMountState();

    /**
     * Accessor of the mount
     * 
     */
    @Import(name="accessor")
    private @Nullable Output<String> accessor;

    /**
     * @return Accessor of the mount
     * 
     */
    public Optional<Output<String>> accessor() {
        return Optional.ofNullable(this.accessor);
    }

    /**
     * Set of managed key registry entry names that the mount in question is allowed to access
     * 
     * The following arguments are common to all database engines:
     * 
     */
    @Import(name="allowedManagedKeys")
    private @Nullable Output<List<String>> allowedManagedKeys;

    /**
     * @return Set of managed key registry entry names that the mount in question is allowed to access
     * 
     * The following arguments are common to all database engines:
     * 
     */
    public Optional<Output<List<String>>> allowedManagedKeys() {
        return Optional.ofNullable(this.allowedManagedKeys);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    @Import(name="auditNonHmacRequestKeys")
    private @Nullable Output<List<String>> auditNonHmacRequestKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacRequestKeys() {
        return Optional.ofNullable(this.auditNonHmacRequestKeys);
    }

    /**
     * Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    @Import(name="auditNonHmacResponseKeys")
    private @Nullable Output<List<String>> auditNonHmacResponseKeys;

    /**
     * @return Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
     * 
     */
    public Optional<Output<List<String>>> auditNonHmacResponseKeys() {
        return Optional.ofNullable(this.auditNonHmacResponseKeys);
    }

    /**
     * A nested block containing configuration options for Cassandra connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="cassandras")
    private @Nullable Output<List<SecretsMountCassandraArgs>> cassandras;

    /**
     * @return A nested block containing configuration options for Cassandra connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountCassandraArgs>>> cassandras() {
        return Optional.ofNullable(this.cassandras);
    }

    /**
     * A nested block containing configuration options for Couchbase connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="couchbases")
    private @Nullable Output<List<SecretsMountCouchbaseArgs>> couchbases;

    /**
     * @return A nested block containing configuration options for Couchbase connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountCouchbaseArgs>>> couchbases() {
        return Optional.ofNullable(this.couchbases);
    }

    /**
     * Default lease duration for tokens and secrets in seconds
     * 
     */
    @Import(name="defaultLeaseTtlSeconds")
    private @Nullable Output<Integer> defaultLeaseTtlSeconds;

    /**
     * @return Default lease duration for tokens and secrets in seconds
     * 
     */
    public Optional<Output<Integer>> defaultLeaseTtlSeconds() {
        return Optional.ofNullable(this.defaultLeaseTtlSeconds);
    }

    /**
     * Human-friendly description of the mount
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-friendly description of the mount
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A nested block containing configuration options for Elasticsearch connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="elasticsearches")
    private @Nullable Output<List<SecretsMountElasticsearchArgs>> elasticsearches;

    /**
     * @return A nested block containing configuration options for Elasticsearch connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountElasticsearchArgs>>> elasticsearches() {
        return Optional.ofNullable(this.elasticsearches);
    }

    /**
     * The total number of database secrets engines configured.
     * 
     */
    @Import(name="engineCount")
    private @Nullable Output<Integer> engineCount;

    /**
     * @return The total number of database secrets engines configured.
     * 
     */
    public Optional<Output<Integer>> engineCount() {
        return Optional.ofNullable(this.engineCount);
    }

    /**
     * Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    @Import(name="externalEntropyAccess")
    private @Nullable Output<Boolean> externalEntropyAccess;

    /**
     * @return Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault&#39;s external entropy source
     * 
     */
    public Optional<Output<Boolean>> externalEntropyAccess() {
        return Optional.ofNullable(this.externalEntropyAccess);
    }

    /**
     * A nested block containing configuration options for SAP HanaDB connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="hanas")
    private @Nullable Output<List<SecretsMountHanaArgs>> hanas;

    /**
     * @return A nested block containing configuration options for SAP HanaDB connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountHanaArgs>>> hanas() {
        return Optional.ofNullable(this.hanas);
    }

    /**
     * A nested block containing configuration options for InfluxDB connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="influxdbs")
    private @Nullable Output<List<SecretsMountInfluxdbArgs>> influxdbs;

    /**
     * @return A nested block containing configuration options for InfluxDB connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountInfluxdbArgs>>> influxdbs() {
        return Optional.ofNullable(this.influxdbs);
    }

    /**
     * Boolean flag that can be explicitly set to true to enforce local mount in HA environment
     * 
     */
    @Import(name="local")
    private @Nullable Output<Boolean> local;

    /**
     * @return Boolean flag that can be explicitly set to true to enforce local mount in HA environment
     * 
     */
    public Optional<Output<Boolean>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     * 
     */
    @Import(name="maxLeaseTtlSeconds")
    private @Nullable Output<Integer> maxLeaseTtlSeconds;

    /**
     * @return Maximum possible lease duration for tokens and secrets in seconds
     * 
     */
    public Optional<Output<Integer>> maxLeaseTtlSeconds() {
        return Optional.ofNullable(this.maxLeaseTtlSeconds);
    }

    /**
     * A nested block containing configuration options for MongoDB Atlas connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="mongodbatlas")
    private @Nullable Output<List<SecretsMountMongodbatlaArgs>> mongodbatlas;

    /**
     * @return A nested block containing configuration options for MongoDB Atlas connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountMongodbatlaArgs>>> mongodbatlas() {
        return Optional.ofNullable(this.mongodbatlas);
    }

    /**
     * A nested block containing configuration options for MongoDB connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="mongodbs")
    private @Nullable Output<List<SecretsMountMongodbArgs>> mongodbs;

    /**
     * @return A nested block containing configuration options for MongoDB connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountMongodbArgs>>> mongodbs() {
        return Optional.ofNullable(this.mongodbs);
    }

    /**
     * A nested block containing configuration options for MSSQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="mssqls")
    private @Nullable Output<List<SecretsMountMssqlArgs>> mssqls;

    /**
     * @return A nested block containing configuration options for MSSQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountMssqlArgs>>> mssqls() {
        return Optional.ofNullable(this.mssqls);
    }

    /**
     * A nested block containing configuration options for Aurora MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="mysqlAuroras")
    private @Nullable Output<List<SecretsMountMysqlAuroraArgs>> mysqlAuroras;

    /**
     * @return A nested block containing configuration options for Aurora MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountMysqlAuroraArgs>>> mysqlAuroras() {
        return Optional.ofNullable(this.mysqlAuroras);
    }

    /**
     * A nested block containing configuration options for legacy MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="mysqlLegacies")
    private @Nullable Output<List<SecretsMountMysqlLegacyArgs>> mysqlLegacies;

    /**
     * @return A nested block containing configuration options for legacy MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountMysqlLegacyArgs>>> mysqlLegacies() {
        return Optional.ofNullable(this.mysqlLegacies);
    }

    /**
     * A nested block containing configuration options for RDS MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="mysqlRds")
    private @Nullable Output<List<SecretsMountMysqlRdArgs>> mysqlRds;

    /**
     * @return A nested block containing configuration options for RDS MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountMysqlRdArgs>>> mysqlRds() {
        return Optional.ofNullable(this.mysqlRds);
    }

    /**
     * A nested block containing configuration options for MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="mysqls")
    private @Nullable Output<List<SecretsMountMysqlArgs>> mysqls;

    /**
     * @return A nested block containing configuration options for MySQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountMysqlArgs>>> mysqls() {
        return Optional.ofNullable(this.mysqls);
    }

    /**
     * Target namespace. (requires Enterprise)
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Target namespace. (requires Enterprise)
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Specifies mount type specific options that are passed to the backend
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,Object>> options;

    /**
     * @return Specifies mount type specific options that are passed to the backend
     * 
     */
    public Optional<Output<Map<String,Object>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * A nested block containing configuration options for Oracle connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="oracles")
    private @Nullable Output<List<SecretsMountOracleArgs>> oracles;

    /**
     * @return A nested block containing configuration options for Oracle connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountOracleArgs>>> oracles() {
        return Optional.ofNullable(this.oracles);
    }

    /**
     * Where the secret backend will be mounted
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Where the secret backend will be mounted
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * A nested block containing configuration options for PostgreSQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="postgresqls")
    private @Nullable Output<List<SecretsMountPostgresqlArgs>> postgresqls;

    /**
     * @return A nested block containing configuration options for PostgreSQL connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountPostgresqlArgs>>> postgresqls() {
        return Optional.ofNullable(this.postgresqls);
    }

    /**
     * A nested block containing configuration options for Redis connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="redis")
    private @Nullable Output<List<SecretsMountRediArgs>> redis;

    /**
     * @return A nested block containing configuration options for Redis connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountRediArgs>>> redis() {
        return Optional.ofNullable(this.redis);
    }

    /**
     * A nested block containing configuration options for Redis ElastiCache connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="redisElasticaches")
    private @Nullable Output<List<SecretsMountRedisElasticachArgs>> redisElasticaches;

    /**
     * @return A nested block containing configuration options for Redis ElastiCache connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountRedisElasticachArgs>>> redisElasticaches() {
        return Optional.ofNullable(this.redisElasticaches);
    }

    /**
     * A nested block containing configuration options for AWS Redshift connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="redshifts")
    private @Nullable Output<List<SecretsMountRedshiftArgs>> redshifts;

    /**
     * @return A nested block containing configuration options for AWS Redshift connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountRedshiftArgs>>> redshifts() {
        return Optional.ofNullable(this.redshifts);
    }

    /**
     * Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    @Import(name="sealWrap")
    private @Nullable Output<Boolean> sealWrap;

    /**
     * @return Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
     * 
     */
    public Optional<Output<Boolean>> sealWrap() {
        return Optional.ofNullable(this.sealWrap);
    }

    /**
     * A nested block containing configuration options for Snowflake connections.\
     * *See Configuration Options for more info*
     * 
     */
    @Import(name="snowflakes")
    private @Nullable Output<List<SecretsMountSnowflakeArgs>> snowflakes;

    /**
     * @return A nested block containing configuration options for Snowflake connections.\
     * *See Configuration Options for more info*
     * 
     */
    public Optional<Output<List<SecretsMountSnowflakeArgs>>> snowflakes() {
        return Optional.ofNullable(this.snowflakes);
    }

    private SecretsMountState() {}

    private SecretsMountState(SecretsMountState $) {
        this.accessor = $.accessor;
        this.allowedManagedKeys = $.allowedManagedKeys;
        this.auditNonHmacRequestKeys = $.auditNonHmacRequestKeys;
        this.auditNonHmacResponseKeys = $.auditNonHmacResponseKeys;
        this.cassandras = $.cassandras;
        this.couchbases = $.couchbases;
        this.defaultLeaseTtlSeconds = $.defaultLeaseTtlSeconds;
        this.description = $.description;
        this.elasticsearches = $.elasticsearches;
        this.engineCount = $.engineCount;
        this.externalEntropyAccess = $.externalEntropyAccess;
        this.hanas = $.hanas;
        this.influxdbs = $.influxdbs;
        this.local = $.local;
        this.maxLeaseTtlSeconds = $.maxLeaseTtlSeconds;
        this.mongodbatlas = $.mongodbatlas;
        this.mongodbs = $.mongodbs;
        this.mssqls = $.mssqls;
        this.mysqlAuroras = $.mysqlAuroras;
        this.mysqlLegacies = $.mysqlLegacies;
        this.mysqlRds = $.mysqlRds;
        this.mysqls = $.mysqls;
        this.namespace = $.namespace;
        this.options = $.options;
        this.oracles = $.oracles;
        this.path = $.path;
        this.postgresqls = $.postgresqls;
        this.redis = $.redis;
        this.redisElasticaches = $.redisElasticaches;
        this.redshifts = $.redshifts;
        this.sealWrap = $.sealWrap;
        this.snowflakes = $.snowflakes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretsMountState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretsMountState $;

        public Builder() {
            $ = new SecretsMountState();
        }

        public Builder(SecretsMountState defaults) {
            $ = new SecretsMountState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessor Accessor of the mount
         * 
         * @return builder
         * 
         */
        public Builder accessor(@Nullable Output<String> accessor) {
            $.accessor = accessor;
            return this;
        }

        /**
         * @param accessor Accessor of the mount
         * 
         * @return builder
         * 
         */
        public Builder accessor(String accessor) {
            return accessor(Output.of(accessor));
        }

        /**
         * @param allowedManagedKeys Set of managed key registry entry names that the mount in question is allowed to access
         * 
         * The following arguments are common to all database engines:
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(@Nullable Output<List<String>> allowedManagedKeys) {
            $.allowedManagedKeys = allowedManagedKeys;
            return this;
        }

        /**
         * @param allowedManagedKeys Set of managed key registry entry names that the mount in question is allowed to access
         * 
         * The following arguments are common to all database engines:
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(List<String> allowedManagedKeys) {
            return allowedManagedKeys(Output.of(allowedManagedKeys));
        }

        /**
         * @param allowedManagedKeys Set of managed key registry entry names that the mount in question is allowed to access
         * 
         * The following arguments are common to all database engines:
         * 
         * @return builder
         * 
         */
        public Builder allowedManagedKeys(String... allowedManagedKeys) {
            return allowedManagedKeys(List.of(allowedManagedKeys));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(@Nullable Output<List<String>> auditNonHmacRequestKeys) {
            $.auditNonHmacRequestKeys = auditNonHmacRequestKeys;
            return this;
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(List<String> auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(Output.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacRequestKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the request data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacRequestKeys(String... auditNonHmacRequestKeys) {
            return auditNonHmacRequestKeys(List.of(auditNonHmacRequestKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(@Nullable Output<List<String>> auditNonHmacResponseKeys) {
            $.auditNonHmacResponseKeys = auditNonHmacResponseKeys;
            return this;
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(List<String> auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(Output.of(auditNonHmacResponseKeys));
        }

        /**
         * @param auditNonHmacResponseKeys Specifies the list of keys that will not be HMAC&#39;d by audit devices in the response data object.
         * 
         * @return builder
         * 
         */
        public Builder auditNonHmacResponseKeys(String... auditNonHmacResponseKeys) {
            return auditNonHmacResponseKeys(List.of(auditNonHmacResponseKeys));
        }

        /**
         * @param cassandras A nested block containing configuration options for Cassandra connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder cassandras(@Nullable Output<List<SecretsMountCassandraArgs>> cassandras) {
            $.cassandras = cassandras;
            return this;
        }

        /**
         * @param cassandras A nested block containing configuration options for Cassandra connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder cassandras(List<SecretsMountCassandraArgs> cassandras) {
            return cassandras(Output.of(cassandras));
        }

        /**
         * @param cassandras A nested block containing configuration options for Cassandra connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder cassandras(SecretsMountCassandraArgs... cassandras) {
            return cassandras(List.of(cassandras));
        }

        /**
         * @param couchbases A nested block containing configuration options for Couchbase connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder couchbases(@Nullable Output<List<SecretsMountCouchbaseArgs>> couchbases) {
            $.couchbases = couchbases;
            return this;
        }

        /**
         * @param couchbases A nested block containing configuration options for Couchbase connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder couchbases(List<SecretsMountCouchbaseArgs> couchbases) {
            return couchbases(Output.of(couchbases));
        }

        /**
         * @param couchbases A nested block containing configuration options for Couchbase connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder couchbases(SecretsMountCouchbaseArgs... couchbases) {
            return couchbases(List.of(couchbases));
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(@Nullable Output<Integer> defaultLeaseTtlSeconds) {
            $.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            return this;
        }

        /**
         * @param defaultLeaseTtlSeconds Default lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder defaultLeaseTtlSeconds(Integer defaultLeaseTtlSeconds) {
            return defaultLeaseTtlSeconds(Output.of(defaultLeaseTtlSeconds));
        }

        /**
         * @param description Human-friendly description of the mount
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-friendly description of the mount
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param elasticsearches A nested block containing configuration options for Elasticsearch connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder elasticsearches(@Nullable Output<List<SecretsMountElasticsearchArgs>> elasticsearches) {
            $.elasticsearches = elasticsearches;
            return this;
        }

        /**
         * @param elasticsearches A nested block containing configuration options for Elasticsearch connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder elasticsearches(List<SecretsMountElasticsearchArgs> elasticsearches) {
            return elasticsearches(Output.of(elasticsearches));
        }

        /**
         * @param elasticsearches A nested block containing configuration options for Elasticsearch connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder elasticsearches(SecretsMountElasticsearchArgs... elasticsearches) {
            return elasticsearches(List.of(elasticsearches));
        }

        /**
         * @param engineCount The total number of database secrets engines configured.
         * 
         * @return builder
         * 
         */
        public Builder engineCount(@Nullable Output<Integer> engineCount) {
            $.engineCount = engineCount;
            return this;
        }

        /**
         * @param engineCount The total number of database secrets engines configured.
         * 
         * @return builder
         * 
         */
        public Builder engineCount(Integer engineCount) {
            return engineCount(Output.of(engineCount));
        }

        /**
         * @param externalEntropyAccess Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(@Nullable Output<Boolean> externalEntropyAccess) {
            $.externalEntropyAccess = externalEntropyAccess;
            return this;
        }

        /**
         * @param externalEntropyAccess Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault&#39;s external entropy source
         * 
         * @return builder
         * 
         */
        public Builder externalEntropyAccess(Boolean externalEntropyAccess) {
            return externalEntropyAccess(Output.of(externalEntropyAccess));
        }

        /**
         * @param hanas A nested block containing configuration options for SAP HanaDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder hanas(@Nullable Output<List<SecretsMountHanaArgs>> hanas) {
            $.hanas = hanas;
            return this;
        }

        /**
         * @param hanas A nested block containing configuration options for SAP HanaDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder hanas(List<SecretsMountHanaArgs> hanas) {
            return hanas(Output.of(hanas));
        }

        /**
         * @param hanas A nested block containing configuration options for SAP HanaDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder hanas(SecretsMountHanaArgs... hanas) {
            return hanas(List.of(hanas));
        }

        /**
         * @param influxdbs A nested block containing configuration options for InfluxDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder influxdbs(@Nullable Output<List<SecretsMountInfluxdbArgs>> influxdbs) {
            $.influxdbs = influxdbs;
            return this;
        }

        /**
         * @param influxdbs A nested block containing configuration options for InfluxDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder influxdbs(List<SecretsMountInfluxdbArgs> influxdbs) {
            return influxdbs(Output.of(influxdbs));
        }

        /**
         * @param influxdbs A nested block containing configuration options for InfluxDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder influxdbs(SecretsMountInfluxdbArgs... influxdbs) {
            return influxdbs(List.of(influxdbs));
        }

        /**
         * @param local Boolean flag that can be explicitly set to true to enforce local mount in HA environment
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<Boolean> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local Boolean flag that can be explicitly set to true to enforce local mount in HA environment
         * 
         * @return builder
         * 
         */
        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(@Nullable Output<Integer> maxLeaseTtlSeconds) {
            $.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            return this;
        }

        /**
         * @param maxLeaseTtlSeconds Maximum possible lease duration for tokens and secrets in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxLeaseTtlSeconds(Integer maxLeaseTtlSeconds) {
            return maxLeaseTtlSeconds(Output.of(maxLeaseTtlSeconds));
        }

        /**
         * @param mongodbatlas A nested block containing configuration options for MongoDB Atlas connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mongodbatlas(@Nullable Output<List<SecretsMountMongodbatlaArgs>> mongodbatlas) {
            $.mongodbatlas = mongodbatlas;
            return this;
        }

        /**
         * @param mongodbatlas A nested block containing configuration options for MongoDB Atlas connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mongodbatlas(List<SecretsMountMongodbatlaArgs> mongodbatlas) {
            return mongodbatlas(Output.of(mongodbatlas));
        }

        /**
         * @param mongodbatlas A nested block containing configuration options for MongoDB Atlas connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mongodbatlas(SecretsMountMongodbatlaArgs... mongodbatlas) {
            return mongodbatlas(List.of(mongodbatlas));
        }

        /**
         * @param mongodbs A nested block containing configuration options for MongoDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mongodbs(@Nullable Output<List<SecretsMountMongodbArgs>> mongodbs) {
            $.mongodbs = mongodbs;
            return this;
        }

        /**
         * @param mongodbs A nested block containing configuration options for MongoDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mongodbs(List<SecretsMountMongodbArgs> mongodbs) {
            return mongodbs(Output.of(mongodbs));
        }

        /**
         * @param mongodbs A nested block containing configuration options for MongoDB connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mongodbs(SecretsMountMongodbArgs... mongodbs) {
            return mongodbs(List.of(mongodbs));
        }

        /**
         * @param mssqls A nested block containing configuration options for MSSQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mssqls(@Nullable Output<List<SecretsMountMssqlArgs>> mssqls) {
            $.mssqls = mssqls;
            return this;
        }

        /**
         * @param mssqls A nested block containing configuration options for MSSQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mssqls(List<SecretsMountMssqlArgs> mssqls) {
            return mssqls(Output.of(mssqls));
        }

        /**
         * @param mssqls A nested block containing configuration options for MSSQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mssqls(SecretsMountMssqlArgs... mssqls) {
            return mssqls(List.of(mssqls));
        }

        /**
         * @param mysqlAuroras A nested block containing configuration options for Aurora MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlAuroras(@Nullable Output<List<SecretsMountMysqlAuroraArgs>> mysqlAuroras) {
            $.mysqlAuroras = mysqlAuroras;
            return this;
        }

        /**
         * @param mysqlAuroras A nested block containing configuration options for Aurora MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlAuroras(List<SecretsMountMysqlAuroraArgs> mysqlAuroras) {
            return mysqlAuroras(Output.of(mysqlAuroras));
        }

        /**
         * @param mysqlAuroras A nested block containing configuration options for Aurora MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlAuroras(SecretsMountMysqlAuroraArgs... mysqlAuroras) {
            return mysqlAuroras(List.of(mysqlAuroras));
        }

        /**
         * @param mysqlLegacies A nested block containing configuration options for legacy MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlLegacies(@Nullable Output<List<SecretsMountMysqlLegacyArgs>> mysqlLegacies) {
            $.mysqlLegacies = mysqlLegacies;
            return this;
        }

        /**
         * @param mysqlLegacies A nested block containing configuration options for legacy MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlLegacies(List<SecretsMountMysqlLegacyArgs> mysqlLegacies) {
            return mysqlLegacies(Output.of(mysqlLegacies));
        }

        /**
         * @param mysqlLegacies A nested block containing configuration options for legacy MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlLegacies(SecretsMountMysqlLegacyArgs... mysqlLegacies) {
            return mysqlLegacies(List.of(mysqlLegacies));
        }

        /**
         * @param mysqlRds A nested block containing configuration options for RDS MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlRds(@Nullable Output<List<SecretsMountMysqlRdArgs>> mysqlRds) {
            $.mysqlRds = mysqlRds;
            return this;
        }

        /**
         * @param mysqlRds A nested block containing configuration options for RDS MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlRds(List<SecretsMountMysqlRdArgs> mysqlRds) {
            return mysqlRds(Output.of(mysqlRds));
        }

        /**
         * @param mysqlRds A nested block containing configuration options for RDS MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqlRds(SecretsMountMysqlRdArgs... mysqlRds) {
            return mysqlRds(List.of(mysqlRds));
        }

        /**
         * @param mysqls A nested block containing configuration options for MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqls(@Nullable Output<List<SecretsMountMysqlArgs>> mysqls) {
            $.mysqls = mysqls;
            return this;
        }

        /**
         * @param mysqls A nested block containing configuration options for MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqls(List<SecretsMountMysqlArgs> mysqls) {
            return mysqls(Output.of(mysqls));
        }

        /**
         * @param mysqls A nested block containing configuration options for MySQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder mysqls(SecretsMountMysqlArgs... mysqls) {
            return mysqls(List.of(mysqls));
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<Map<String,Object>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Specifies mount type specific options that are passed to the backend
         * 
         * @return builder
         * 
         */
        public Builder options(Map<String,Object> options) {
            return options(Output.of(options));
        }

        /**
         * @param oracles A nested block containing configuration options for Oracle connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder oracles(@Nullable Output<List<SecretsMountOracleArgs>> oracles) {
            $.oracles = oracles;
            return this;
        }

        /**
         * @param oracles A nested block containing configuration options for Oracle connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder oracles(List<SecretsMountOracleArgs> oracles) {
            return oracles(Output.of(oracles));
        }

        /**
         * @param oracles A nested block containing configuration options for Oracle connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder oracles(SecretsMountOracleArgs... oracles) {
            return oracles(List.of(oracles));
        }

        /**
         * @param path Where the secret backend will be mounted
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Where the secret backend will be mounted
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param postgresqls A nested block containing configuration options for PostgreSQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder postgresqls(@Nullable Output<List<SecretsMountPostgresqlArgs>> postgresqls) {
            $.postgresqls = postgresqls;
            return this;
        }

        /**
         * @param postgresqls A nested block containing configuration options for PostgreSQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder postgresqls(List<SecretsMountPostgresqlArgs> postgresqls) {
            return postgresqls(Output.of(postgresqls));
        }

        /**
         * @param postgresqls A nested block containing configuration options for PostgreSQL connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder postgresqls(SecretsMountPostgresqlArgs... postgresqls) {
            return postgresqls(List.of(postgresqls));
        }

        /**
         * @param redis A nested block containing configuration options for Redis connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redis(@Nullable Output<List<SecretsMountRediArgs>> redis) {
            $.redis = redis;
            return this;
        }

        /**
         * @param redis A nested block containing configuration options for Redis connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redis(List<SecretsMountRediArgs> redis) {
            return redis(Output.of(redis));
        }

        /**
         * @param redis A nested block containing configuration options for Redis connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redis(SecretsMountRediArgs... redis) {
            return redis(List.of(redis));
        }

        /**
         * @param redisElasticaches A nested block containing configuration options for Redis ElastiCache connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redisElasticaches(@Nullable Output<List<SecretsMountRedisElasticachArgs>> redisElasticaches) {
            $.redisElasticaches = redisElasticaches;
            return this;
        }

        /**
         * @param redisElasticaches A nested block containing configuration options for Redis ElastiCache connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redisElasticaches(List<SecretsMountRedisElasticachArgs> redisElasticaches) {
            return redisElasticaches(Output.of(redisElasticaches));
        }

        /**
         * @param redisElasticaches A nested block containing configuration options for Redis ElastiCache connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redisElasticaches(SecretsMountRedisElasticachArgs... redisElasticaches) {
            return redisElasticaches(List.of(redisElasticaches));
        }

        /**
         * @param redshifts A nested block containing configuration options for AWS Redshift connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redshifts(@Nullable Output<List<SecretsMountRedshiftArgs>> redshifts) {
            $.redshifts = redshifts;
            return this;
        }

        /**
         * @param redshifts A nested block containing configuration options for AWS Redshift connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redshifts(List<SecretsMountRedshiftArgs> redshifts) {
            return redshifts(Output.of(redshifts));
        }

        /**
         * @param redshifts A nested block containing configuration options for AWS Redshift connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder redshifts(SecretsMountRedshiftArgs... redshifts) {
            return redshifts(List.of(redshifts));
        }

        /**
         * @param sealWrap Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(@Nullable Output<Boolean> sealWrap) {
            $.sealWrap = sealWrap;
            return this;
        }

        /**
         * @param sealWrap Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal&#39;s encryption capability
         * 
         * @return builder
         * 
         */
        public Builder sealWrap(Boolean sealWrap) {
            return sealWrap(Output.of(sealWrap));
        }

        /**
         * @param snowflakes A nested block containing configuration options for Snowflake connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder snowflakes(@Nullable Output<List<SecretsMountSnowflakeArgs>> snowflakes) {
            $.snowflakes = snowflakes;
            return this;
        }

        /**
         * @param snowflakes A nested block containing configuration options for Snowflake connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder snowflakes(List<SecretsMountSnowflakeArgs> snowflakes) {
            return snowflakes(Output.of(snowflakes));
        }

        /**
         * @param snowflakes A nested block containing configuration options for Snowflake connections.\
         * *See Configuration Options for more info*
         * 
         * @return builder
         * 
         */
        public Builder snowflakes(SecretsMountSnowflakeArgs... snowflakes) {
            return snowflakes(List.of(snowflakes));
        }

        public SecretsMountState build() {
            return $;
        }
    }

}
