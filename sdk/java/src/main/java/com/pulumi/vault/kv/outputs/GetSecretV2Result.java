// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.kv.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecretV2Result {
    /**
     * @return Time at which secret was created.
     * 
     */
    private String createdTime;
    /**
     * @return Custom metadata for the secret.
     * 
     */
    private Map<String,Object> customMetadata;
    /**
     * @return A mapping whose keys are the top-level data keys returned from
     * Vault and whose values are the corresponding values. This map can only
     * represent string data, so any non-string values returned from Vault are
     * serialized as JSON.
     * 
     */
    private Map<String,Object> data;
    /**
     * @return JSON-encoded string that that is
     * read as the secret data at the given path.
     * 
     */
    private String dataJson;
    /**
     * @return Deletion time for the secret.
     * 
     */
    private String deletionTime;
    /**
     * @return Indicates whether the secret has been destroyed.
     * 
     */
    private Boolean destroyed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String mount;
    private String name;
    private @Nullable String namespace;
    /**
     * @return Full path where the KVV2 secret is written.
     * 
     */
    private String path;
    private @Nullable Integer version;

    private GetSecretV2Result() {}
    /**
     * @return Time at which secret was created.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return Custom metadata for the secret.
     * 
     */
    public Map<String,Object> customMetadata() {
        return this.customMetadata;
    }
    /**
     * @return A mapping whose keys are the top-level data keys returned from
     * Vault and whose values are the corresponding values. This map can only
     * represent string data, so any non-string values returned from Vault are
     * serialized as JSON.
     * 
     */
    public Map<String,Object> data() {
        return this.data;
    }
    /**
     * @return JSON-encoded string that that is
     * read as the secret data at the given path.
     * 
     */
    public String dataJson() {
        return this.dataJson;
    }
    /**
     * @return Deletion time for the secret.
     * 
     */
    public String deletionTime() {
        return this.deletionTime;
    }
    /**
     * @return Indicates whether the secret has been destroyed.
     * 
     */
    public Boolean destroyed() {
        return this.destroyed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String mount() {
        return this.mount;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Full path where the KVV2 secret is written.
     * 
     */
    public String path() {
        return this.path;
    }
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdTime;
        private Map<String,Object> customMetadata;
        private Map<String,Object> data;
        private String dataJson;
        private String deletionTime;
        private Boolean destroyed;
        private String id;
        private String mount;
        private String name;
        private @Nullable String namespace;
        private String path;
        private @Nullable Integer version;
        public Builder() {}
        public Builder(GetSecretV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdTime = defaults.createdTime;
    	      this.customMetadata = defaults.customMetadata;
    	      this.data = defaults.data;
    	      this.dataJson = defaults.dataJson;
    	      this.deletionTime = defaults.deletionTime;
    	      this.destroyed = defaults.destroyed;
    	      this.id = defaults.id;
    	      this.mount = defaults.mount;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.path = defaults.path;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder customMetadata(Map<String,Object> customMetadata) {
            if (customMetadata == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "customMetadata");
            }
            this.customMetadata = customMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder data(Map<String,Object> data) {
            if (data == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "data");
            }
            this.data = data;
            return this;
        }
        @CustomType.Setter
        public Builder dataJson(String dataJson) {
            if (dataJson == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "dataJson");
            }
            this.dataJson = dataJson;
            return this;
        }
        @CustomType.Setter
        public Builder deletionTime(String deletionTime) {
            if (deletionTime == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "deletionTime");
            }
            this.deletionTime = deletionTime;
            return this;
        }
        @CustomType.Setter
        public Builder destroyed(Boolean destroyed) {
            if (destroyed == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "destroyed");
            }
            this.destroyed = destroyed;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mount(String mount) {
            if (mount == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "mount");
            }
            this.mount = mount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetSecretV2Result", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {

            this.version = version;
            return this;
        }
        public GetSecretV2Result build() {
            final var _resultValue = new GetSecretV2Result();
            _resultValue.createdTime = createdTime;
            _resultValue.customMetadata = customMetadata;
            _resultValue.data = data;
            _resultValue.dataJson = dataJson;
            _resultValue.deletionTime = deletionTime;
            _resultValue.destroyed = destroyed;
            _resultValue.id = id;
            _resultValue.mount = mount;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.path = path;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
