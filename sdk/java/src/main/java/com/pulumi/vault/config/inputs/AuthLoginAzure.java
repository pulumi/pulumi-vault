// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.config.inputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthLoginAzure {
    /**
     * @return The identity&#39;s client ID.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return A signed JSON Web Token. If not specified on will be created automatically
     * 
     */
    private @Nullable String jwt;
    /**
     * @return The path where the authentication engine is mounted.
     * 
     */
    private @Nullable String mount;
    /**
     * @return The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    private @Nullable String namespace;
    /**
     * @return The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    private String resourceGroupName;
    /**
     * @return Name of the login role.
     * 
     */
    private String role;
    /**
     * @return The scopes to include in the token request.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    private String subscriptionId;
    /**
     * @return Provides the tenant ID to use in a multi-tenant authentication scenario.
     * 
     */
    private @Nullable String tenantId;
    /**
     * @return Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    private @Nullable Boolean useRootNamespace;
    /**
     * @return The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    private @Nullable String vmName;
    /**
     * @return The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    private @Nullable String vmssName;

    private AuthLoginAzure() {}
    /**
     * @return The identity&#39;s client ID.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return A signed JSON Web Token. If not specified on will be created automatically
     * 
     */
    public Optional<String> jwt() {
        return Optional.ofNullable(this.jwt);
    }
    /**
     * @return The path where the authentication engine is mounted.
     * 
     */
    public Optional<String> mount() {
        return Optional.ofNullable(this.mount);
    }
    /**
     * @return The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Name of the login role.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The scopes to include in the token request.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return Provides the tenant ID to use in a multi-tenant authentication scenario.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    public Optional<Boolean> useRootNamespace() {
        return Optional.ofNullable(this.useRootNamespace);
    }
    /**
     * @return The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public Optional<String> vmName() {
        return Optional.ofNullable(this.vmName);
    }
    /**
     * @return The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata.
     * 
     */
    public Optional<String> vmssName() {
        return Optional.ofNullable(this.vmssName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthLoginAzure defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientId;
        private @Nullable String jwt;
        private @Nullable String mount;
        private @Nullable String namespace;
        private String resourceGroupName;
        private String role;
        private @Nullable String scope;
        private String subscriptionId;
        private @Nullable String tenantId;
        private @Nullable Boolean useRootNamespace;
        private @Nullable String vmName;
        private @Nullable String vmssName;
        public Builder() {}
        public Builder(AuthLoginAzure defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientId = defaults.clientId;
    	      this.jwt = defaults.jwt;
    	      this.mount = defaults.mount;
    	      this.namespace = defaults.namespace;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.role = defaults.role;
    	      this.scope = defaults.scope;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tenantId = defaults.tenantId;
    	      this.useRootNamespace = defaults.useRootNamespace;
    	      this.vmName = defaults.vmName;
    	      this.vmssName = defaults.vmssName;
        }

        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder jwt(@Nullable String jwt) {

            this.jwt = jwt;
            return this;
        }
        @CustomType.Setter
        public Builder mount(@Nullable String mount) {

            this.mount = mount;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("AuthLoginAzure", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("AuthLoginAzure", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {

            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("AuthLoginAzure", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {

            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder useRootNamespace(@Nullable Boolean useRootNamespace) {

            this.useRootNamespace = useRootNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder vmName(@Nullable String vmName) {

            this.vmName = vmName;
            return this;
        }
        @CustomType.Setter
        public Builder vmssName(@Nullable String vmssName) {

            this.vmssName = vmssName;
            return this;
        }
        public AuthLoginAzure build() {
            final var _resultValue = new AuthLoginAzure();
            _resultValue.clientId = clientId;
            _resultValue.jwt = jwt;
            _resultValue.mount = mount;
            _resultValue.namespace = namespace;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.role = role;
            _resultValue.scope = scope;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.tenantId = tenantId;
            _resultValue.useRootNamespace = useRootNamespace;
            _resultValue.vmName = vmName;
            _resultValue.vmssName = vmssName;
            return _resultValue;
        }
    }
}
