// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.azure;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.vault.azure.inputs.BackendRoleAzureGroupArgs;
import com.pulumi.vault.azure.inputs.BackendRoleAzureRoleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendRoleArgs Empty = new BackendRoleArgs();

    /**
     * Application Object ID for an existing service principal that will
     * be used instead of creating dynamic service principals. If present, `azure_roles` and `permanently_delete` will be ignored.
     * 
     */
    @Import(name="applicationObjectId")
    private @Nullable Output<String> applicationObjectId;

    /**
     * @return Application Object ID for an existing service principal that will
     * be used instead of creating dynamic service principals. If present, `azure_roles` and `permanently_delete` will be ignored.
     * 
     */
    public Optional<Output<String>> applicationObjectId() {
        return Optional.ofNullable(this.applicationObjectId);
    }

    /**
     * List of Azure groups to be assigned to the generated service principal.
     * 
     */
    @Import(name="azureGroups")
    private @Nullable Output<List<BackendRoleAzureGroupArgs>> azureGroups;

    /**
     * @return List of Azure groups to be assigned to the generated service principal.
     * 
     */
    public Optional<Output<List<BackendRoleAzureGroupArgs>>> azureGroups() {
        return Optional.ofNullable(this.azureGroups);
    }

    /**
     * List of Azure roles to be assigned to the generated service principal.
     * 
     */
    @Import(name="azureRoles")
    private @Nullable Output<List<BackendRoleAzureRoleArgs>> azureRoles;

    /**
     * @return List of Azure roles to be assigned to the generated service principal.
     * 
     */
    public Optional<Output<List<BackendRoleAzureRoleArgs>>> azureRoles() {
        return Optional.ofNullable(this.azureRoles);
    }

    /**
     * Path to the mounted Azure auth backend
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return Path to the mounted Azure auth backend
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * Human-friendly description of the mount for the backend.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Human-friendly description of the mount for the backend.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the maximum TTL for service principals generated using this role. Accepts time
     * suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine max TTL time.
     * 
     */
    @Import(name="maxTtl")
    private @Nullable Output<String> maxTtl;

    /**
     * @return Specifies the maximum TTL for service principals generated using this role. Accepts time
     * suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine max TTL time.
     * 
     */
    public Optional<Output<String>> maxTtl() {
        return Optional.ofNullable(this.maxTtl);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Indicates whether the applications and service principals created by Vault will be permanently
     * deleted when the corresponding leases expire. Defaults to `false`. For Vault v1.12+.
     * 
     */
    @Import(name="permanentlyDelete")
    private @Nullable Output<Boolean> permanentlyDelete;

    /**
     * @return Indicates whether the applications and service principals created by Vault will be permanently
     * deleted when the corresponding leases expire. Defaults to `false`. For Vault v1.12+.
     * 
     */
    public Optional<Output<Boolean>> permanentlyDelete() {
        return Optional.ofNullable(this.permanentlyDelete);
    }

    /**
     * Name of the Azure role
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return Name of the Azure role
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * Specifies the default TTL for service principals generated using this role.
     * Accepts time suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine default TTL time.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return Specifies the default TTL for service principals generated using this role.
     * Accepts time suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine default TTL time.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private BackendRoleArgs() {}

    private BackendRoleArgs(BackendRoleArgs $) {
        this.applicationObjectId = $.applicationObjectId;
        this.azureGroups = $.azureGroups;
        this.azureRoles = $.azureRoles;
        this.backend = $.backend;
        this.description = $.description;
        this.maxTtl = $.maxTtl;
        this.namespace = $.namespace;
        this.permanentlyDelete = $.permanentlyDelete;
        this.role = $.role;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendRoleArgs $;

        public Builder() {
            $ = new BackendRoleArgs();
        }

        public Builder(BackendRoleArgs defaults) {
            $ = new BackendRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationObjectId Application Object ID for an existing service principal that will
         * be used instead of creating dynamic service principals. If present, `azure_roles` and `permanently_delete` will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder applicationObjectId(@Nullable Output<String> applicationObjectId) {
            $.applicationObjectId = applicationObjectId;
            return this;
        }

        /**
         * @param applicationObjectId Application Object ID for an existing service principal that will
         * be used instead of creating dynamic service principals. If present, `azure_roles` and `permanently_delete` will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder applicationObjectId(String applicationObjectId) {
            return applicationObjectId(Output.of(applicationObjectId));
        }

        /**
         * @param azureGroups List of Azure groups to be assigned to the generated service principal.
         * 
         * @return builder
         * 
         */
        public Builder azureGroups(@Nullable Output<List<BackendRoleAzureGroupArgs>> azureGroups) {
            $.azureGroups = azureGroups;
            return this;
        }

        /**
         * @param azureGroups List of Azure groups to be assigned to the generated service principal.
         * 
         * @return builder
         * 
         */
        public Builder azureGroups(List<BackendRoleAzureGroupArgs> azureGroups) {
            return azureGroups(Output.of(azureGroups));
        }

        /**
         * @param azureGroups List of Azure groups to be assigned to the generated service principal.
         * 
         * @return builder
         * 
         */
        public Builder azureGroups(BackendRoleAzureGroupArgs... azureGroups) {
            return azureGroups(List.of(azureGroups));
        }

        /**
         * @param azureRoles List of Azure roles to be assigned to the generated service principal.
         * 
         * @return builder
         * 
         */
        public Builder azureRoles(@Nullable Output<List<BackendRoleAzureRoleArgs>> azureRoles) {
            $.azureRoles = azureRoles;
            return this;
        }

        /**
         * @param azureRoles List of Azure roles to be assigned to the generated service principal.
         * 
         * @return builder
         * 
         */
        public Builder azureRoles(List<BackendRoleAzureRoleArgs> azureRoles) {
            return azureRoles(Output.of(azureRoles));
        }

        /**
         * @param azureRoles List of Azure roles to be assigned to the generated service principal.
         * 
         * @return builder
         * 
         */
        public Builder azureRoles(BackendRoleAzureRoleArgs... azureRoles) {
            return azureRoles(List.of(azureRoles));
        }

        /**
         * @param backend Path to the mounted Azure auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend Path to the mounted Azure auth backend
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param description Human-friendly description of the mount for the backend.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Human-friendly description of the mount for the backend.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param maxTtl Specifies the maximum TTL for service principals generated using this role. Accepts time
         * suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine max TTL time.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(@Nullable Output<String> maxTtl) {
            $.maxTtl = maxTtl;
            return this;
        }

        /**
         * @param maxTtl Specifies the maximum TTL for service principals generated using this role. Accepts time
         * suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine max TTL time.
         * 
         * @return builder
         * 
         */
        public Builder maxTtl(String maxTtl) {
            return maxTtl(Output.of(maxTtl));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param permanentlyDelete Indicates whether the applications and service principals created by Vault will be permanently
         * deleted when the corresponding leases expire. Defaults to `false`. For Vault v1.12+.
         * 
         * @return builder
         * 
         */
        public Builder permanentlyDelete(@Nullable Output<Boolean> permanentlyDelete) {
            $.permanentlyDelete = permanentlyDelete;
            return this;
        }

        /**
         * @param permanentlyDelete Indicates whether the applications and service principals created by Vault will be permanently
         * deleted when the corresponding leases expire. Defaults to `false`. For Vault v1.12+.
         * 
         * @return builder
         * 
         */
        public Builder permanentlyDelete(Boolean permanentlyDelete) {
            return permanentlyDelete(Output.of(permanentlyDelete));
        }

        /**
         * @param role Name of the Azure role
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Name of the Azure role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param ttl Specifies the default TTL for service principals generated using this role.
         * Accepts time suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine default TTL time.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Specifies the default TTL for service principals generated using this role.
         * Accepts time suffixed strings (&#34;1h&#34;) or an integer number of seconds. Defaults to the system/engine default TTL time.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        public BackendRoleArgs build() {
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
