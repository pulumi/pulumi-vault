// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.database.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretBackendConnectionOracle {
    /**
     * @return Connection string to use to connect to the database.
     * 
     */
    private @Nullable String connectionUrl;
    /**
     * @return Set to true to disconnect any open sessions prior to running the revocation statements.
     * 
     */
    private @Nullable Boolean disconnectSessions;
    /**
     * @return Maximum number of seconds a connection may be reused.
     * 
     */
    private @Nullable Integer maxConnectionLifetime;
    /**
     * @return Maximum number of idle connections to the database.
     * 
     */
    private @Nullable Integer maxIdleConnections;
    /**
     * @return Maximum number of open connections to the database.
     * 
     */
    private @Nullable Integer maxOpenConnections;
    /**
     * @return The root credential password used in the connection URL
     * 
     */
    private @Nullable String password;
    /**
     * @return **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Write-only field for the root credential password used in the connection URL
     * 
     */
    private @Nullable String passwordWo;
    /**
     * @return Version counter for root credential password write-only field
     * 
     */
    private @Nullable Integer passwordWoVersion;
    /**
     * @return Set to true in order to split statements after semi-colons.
     * 
     */
    private @Nullable Boolean splitStatements;
    /**
     * @return The root credential username used in the connection URL
     * 
     */
    private @Nullable String username;
    /**
     * @return Username generation template.
     * 
     */
    private @Nullable String usernameTemplate;

    private SecretBackendConnectionOracle() {}
    /**
     * @return Connection string to use to connect to the database.
     * 
     */
    public Optional<String> connectionUrl() {
        return Optional.ofNullable(this.connectionUrl);
    }
    /**
     * @return Set to true to disconnect any open sessions prior to running the revocation statements.
     * 
     */
    public Optional<Boolean> disconnectSessions() {
        return Optional.ofNullable(this.disconnectSessions);
    }
    /**
     * @return Maximum number of seconds a connection may be reused.
     * 
     */
    public Optional<Integer> maxConnectionLifetime() {
        return Optional.ofNullable(this.maxConnectionLifetime);
    }
    /**
     * @return Maximum number of idle connections to the database.
     * 
     */
    public Optional<Integer> maxIdleConnections() {
        return Optional.ofNullable(this.maxIdleConnections);
    }
    /**
     * @return Maximum number of open connections to the database.
     * 
     */
    public Optional<Integer> maxOpenConnections() {
        return Optional.ofNullable(this.maxOpenConnections);
    }
    /**
     * @return The root credential password used in the connection URL
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Write-only field for the root credential password used in the connection URL
     * 
     */
    public Optional<String> passwordWo() {
        return Optional.ofNullable(this.passwordWo);
    }
    /**
     * @return Version counter for root credential password write-only field
     * 
     */
    public Optional<Integer> passwordWoVersion() {
        return Optional.ofNullable(this.passwordWoVersion);
    }
    /**
     * @return Set to true in order to split statements after semi-colons.
     * 
     */
    public Optional<Boolean> splitStatements() {
        return Optional.ofNullable(this.splitStatements);
    }
    /**
     * @return The root credential username used in the connection URL
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return Username generation template.
     * 
     */
    public Optional<String> usernameTemplate() {
        return Optional.ofNullable(this.usernameTemplate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretBackendConnectionOracle defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String connectionUrl;
        private @Nullable Boolean disconnectSessions;
        private @Nullable Integer maxConnectionLifetime;
        private @Nullable Integer maxIdleConnections;
        private @Nullable Integer maxOpenConnections;
        private @Nullable String password;
        private @Nullable String passwordWo;
        private @Nullable Integer passwordWoVersion;
        private @Nullable Boolean splitStatements;
        private @Nullable String username;
        private @Nullable String usernameTemplate;
        public Builder() {}
        public Builder(SecretBackendConnectionOracle defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionUrl = defaults.connectionUrl;
    	      this.disconnectSessions = defaults.disconnectSessions;
    	      this.maxConnectionLifetime = defaults.maxConnectionLifetime;
    	      this.maxIdleConnections = defaults.maxIdleConnections;
    	      this.maxOpenConnections = defaults.maxOpenConnections;
    	      this.password = defaults.password;
    	      this.passwordWo = defaults.passwordWo;
    	      this.passwordWoVersion = defaults.passwordWoVersion;
    	      this.splitStatements = defaults.splitStatements;
    	      this.username = defaults.username;
    	      this.usernameTemplate = defaults.usernameTemplate;
        }

        @CustomType.Setter
        public Builder connectionUrl(@Nullable String connectionUrl) {

            this.connectionUrl = connectionUrl;
            return this;
        }
        @CustomType.Setter
        public Builder disconnectSessions(@Nullable Boolean disconnectSessions) {

            this.disconnectSessions = disconnectSessions;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnectionLifetime(@Nullable Integer maxConnectionLifetime) {

            this.maxConnectionLifetime = maxConnectionLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder maxIdleConnections(@Nullable Integer maxIdleConnections) {

            this.maxIdleConnections = maxIdleConnections;
            return this;
        }
        @CustomType.Setter
        public Builder maxOpenConnections(@Nullable Integer maxOpenConnections) {

            this.maxOpenConnections = maxOpenConnections;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordWo(@Nullable String passwordWo) {

            this.passwordWo = passwordWo;
            return this;
        }
        @CustomType.Setter
        public Builder passwordWoVersion(@Nullable Integer passwordWoVersion) {

            this.passwordWoVersion = passwordWoVersion;
            return this;
        }
        @CustomType.Setter
        public Builder splitStatements(@Nullable Boolean splitStatements) {

            this.splitStatements = splitStatements;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder usernameTemplate(@Nullable String usernameTemplate) {

            this.usernameTemplate = usernameTemplate;
            return this;
        }
        public SecretBackendConnectionOracle build() {
            final var _resultValue = new SecretBackendConnectionOracle();
            _resultValue.connectionUrl = connectionUrl;
            _resultValue.disconnectSessions = disconnectSessions;
            _resultValue.maxConnectionLifetime = maxConnectionLifetime;
            _resultValue.maxIdleConnections = maxIdleConnections;
            _resultValue.maxOpenConnections = maxOpenConnections;
            _resultValue.password = password;
            _resultValue.passwordWo = passwordWo;
            _resultValue.passwordWoVersion = passwordWoVersion;
            _resultValue.splitStatements = splitStatements;
            _resultValue.username = username;
            _resultValue.usernameTemplate = usernameTemplate;
            return _resultValue;
        }
    }
}
