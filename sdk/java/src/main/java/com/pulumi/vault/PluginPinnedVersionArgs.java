// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PluginPinnedVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PluginPinnedVersionArgs Empty = new PluginPinnedVersionArgs();

    /**
     * Name of the plugin.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the plugin.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Type of plugin; one of &#34;auth&#34;, &#34;secret&#34;, or &#34;database&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of plugin; one of &#34;auth&#34;, &#34;secret&#34;, or &#34;database&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Semantic version of the plugin to pin.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return Semantic version of the plugin to pin.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private PluginPinnedVersionArgs() {}

    private PluginPinnedVersionArgs(PluginPinnedVersionArgs $) {
        this.name = $.name;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PluginPinnedVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PluginPinnedVersionArgs $;

        public Builder() {
            $ = new PluginPinnedVersionArgs();
        }

        public Builder(PluginPinnedVersionArgs defaults) {
            $ = new PluginPinnedVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the plugin.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the plugin.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Type of plugin; one of &#34;auth&#34;, &#34;secret&#34;, or &#34;database&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of plugin; one of &#34;auth&#34;, &#34;secret&#34;, or &#34;database&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version Semantic version of the plugin to pin.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Semantic version of the plugin to pin.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public PluginPinnedVersionArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("PluginPinnedVersionArgs", "type");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("PluginPinnedVersionArgs", "version");
            }
            return $;
        }
    }

}
