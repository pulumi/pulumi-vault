// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntityAliasArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntityAliasArgs Empty = new EntityAliasArgs();

    /**
     * Entity ID to which this alias belongs to.
     * 
     */
    @Import(name="canonicalId", required=true)
    private Output<String> canonicalId;

    /**
     * @return Entity ID to which this alias belongs to.
     * 
     */
    public Output<String> canonicalId() {
        return this.canonicalId;
    }

    /**
     * Custom metadata to be associated with this alias.
     * 
     */
    @Import(name="customMetadata")
    private @Nullable Output<Map<String,String>> customMetadata;

    /**
     * @return Custom metadata to be associated with this alias.
     * 
     */
    public Optional<Output<Map<String,String>>> customMetadata() {
        return Optional.ofNullable(this.customMetadata);
    }

    /**
     * Accessor of the mount to which the alias should belong to.
     * 
     */
    @Import(name="mountAccessor", required=true)
    private Output<String> mountAccessor;

    /**
     * @return Accessor of the mount to which the alias should belong to.
     * 
     */
    public Output<String> mountAccessor() {
        return this.mountAccessor;
    }

    /**
     * Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    private EntityAliasArgs() {}

    private EntityAliasArgs(EntityAliasArgs $) {
        this.canonicalId = $.canonicalId;
        this.customMetadata = $.customMetadata;
        this.mountAccessor = $.mountAccessor;
        this.name = $.name;
        this.namespace = $.namespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityAliasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityAliasArgs $;

        public Builder() {
            $ = new EntityAliasArgs();
        }

        public Builder(EntityAliasArgs defaults) {
            $ = new EntityAliasArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param canonicalId Entity ID to which this alias belongs to.
         * 
         * @return builder
         * 
         */
        public Builder canonicalId(Output<String> canonicalId) {
            $.canonicalId = canonicalId;
            return this;
        }

        /**
         * @param canonicalId Entity ID to which this alias belongs to.
         * 
         * @return builder
         * 
         */
        public Builder canonicalId(String canonicalId) {
            return canonicalId(Output.of(canonicalId));
        }

        /**
         * @param customMetadata Custom metadata to be associated with this alias.
         * 
         * @return builder
         * 
         */
        public Builder customMetadata(@Nullable Output<Map<String,String>> customMetadata) {
            $.customMetadata = customMetadata;
            return this;
        }

        /**
         * @param customMetadata Custom metadata to be associated with this alias.
         * 
         * @return builder
         * 
         */
        public Builder customMetadata(Map<String,String> customMetadata) {
            return customMetadata(Output.of(customMetadata));
        }

        /**
         * @param mountAccessor Accessor of the mount to which the alias should belong to.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(Output<String> mountAccessor) {
            $.mountAccessor = mountAccessor;
            return this;
        }

        /**
         * @param mountAccessor Accessor of the mount to which the alias should belong to.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(String mountAccessor) {
            return mountAccessor(Output.of(mountAccessor));
        }

        /**
         * @param name Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the alias. Name should be the identifier of the client in the authentication source. For example, if the alias belongs to userpass backend, the name should be a valid username within userpass backend. If alias belongs to GitHub, it should be the GitHub username.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public EntityAliasArgs build() {
            if ($.canonicalId == null) {
                throw new MissingRequiredPropertyException("EntityAliasArgs", "canonicalId");
            }
            if ($.mountAccessor == null) {
                throw new MissingRequiredPropertyException("EntityAliasArgs", "mountAccessor");
            }
            return $;
        }
    }

}
