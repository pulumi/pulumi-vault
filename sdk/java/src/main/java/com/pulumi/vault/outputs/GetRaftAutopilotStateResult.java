// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRaftAutopilotStateResult {
    /**
     * @return How many nodes could fail before the cluster becomes unhealthy.
     * 
     */
    private Integer failureTolerance;
    /**
     * @return Cluster health status.
     * 
     */
    private Boolean healthy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The current leader of Vault.
     * 
     */
    private String leader;
    private @Nullable String namespace;
    /**
     * @return The cluster-level optimistic failure tolerance.
     * 
     */
    private Integer optimisticFailureTolerance;
    /**
     * @return Additional output related to redundancy zones stored as a serialized map of strings.
     * 
     */
    private Map<String,Object> redundancyZones;
    /**
     * @return Additional output related to redundancy zones.
     * 
     */
    private String redundancyZonesJson;
    /**
     * @return Additionaly output related to servers in the cluster stored as a serialized map of strings.
     * 
     */
    private Map<String,Object> servers;
    /**
     * @return Additionaly output related to servers in the cluster.
     * 
     */
    private String serversJson;
    /**
     * @return Additional output related to upgrade information stored as a serialized map of strings.
     * 
     */
    private Map<String,Object> upgradeInfo;
    /**
     * @return Additional output related to upgrade information.
     * 
     */
    private String upgradeInfoJson;
    /**
     * @return The voters in the Vault cluster.
     * 
     */
    private List<String> voters;

    private GetRaftAutopilotStateResult() {}
    /**
     * @return How many nodes could fail before the cluster becomes unhealthy.
     * 
     */
    public Integer failureTolerance() {
        return this.failureTolerance;
    }
    /**
     * @return Cluster health status.
     * 
     */
    public Boolean healthy() {
        return this.healthy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current leader of Vault.
     * 
     */
    public String leader() {
        return this.leader;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return The cluster-level optimistic failure tolerance.
     * 
     */
    public Integer optimisticFailureTolerance() {
        return this.optimisticFailureTolerance;
    }
    /**
     * @return Additional output related to redundancy zones stored as a serialized map of strings.
     * 
     */
    public Map<String,Object> redundancyZones() {
        return this.redundancyZones;
    }
    /**
     * @return Additional output related to redundancy zones.
     * 
     */
    public String redundancyZonesJson() {
        return this.redundancyZonesJson;
    }
    /**
     * @return Additionaly output related to servers in the cluster stored as a serialized map of strings.
     * 
     */
    public Map<String,Object> servers() {
        return this.servers;
    }
    /**
     * @return Additionaly output related to servers in the cluster.
     * 
     */
    public String serversJson() {
        return this.serversJson;
    }
    /**
     * @return Additional output related to upgrade information stored as a serialized map of strings.
     * 
     */
    public Map<String,Object> upgradeInfo() {
        return this.upgradeInfo;
    }
    /**
     * @return Additional output related to upgrade information.
     * 
     */
    public String upgradeInfoJson() {
        return this.upgradeInfoJson;
    }
    /**
     * @return The voters in the Vault cluster.
     * 
     */
    public List<String> voters() {
        return this.voters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRaftAutopilotStateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer failureTolerance;
        private Boolean healthy;
        private String id;
        private String leader;
        private @Nullable String namespace;
        private Integer optimisticFailureTolerance;
        private Map<String,Object> redundancyZones;
        private String redundancyZonesJson;
        private Map<String,Object> servers;
        private String serversJson;
        private Map<String,Object> upgradeInfo;
        private String upgradeInfoJson;
        private List<String> voters;
        public Builder() {}
        public Builder(GetRaftAutopilotStateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureTolerance = defaults.failureTolerance;
    	      this.healthy = defaults.healthy;
    	      this.id = defaults.id;
    	      this.leader = defaults.leader;
    	      this.namespace = defaults.namespace;
    	      this.optimisticFailureTolerance = defaults.optimisticFailureTolerance;
    	      this.redundancyZones = defaults.redundancyZones;
    	      this.redundancyZonesJson = defaults.redundancyZonesJson;
    	      this.servers = defaults.servers;
    	      this.serversJson = defaults.serversJson;
    	      this.upgradeInfo = defaults.upgradeInfo;
    	      this.upgradeInfoJson = defaults.upgradeInfoJson;
    	      this.voters = defaults.voters;
        }

        @CustomType.Setter
        public Builder failureTolerance(Integer failureTolerance) {
            if (failureTolerance == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "failureTolerance");
            }
            this.failureTolerance = failureTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder healthy(Boolean healthy) {
            if (healthy == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "healthy");
            }
            this.healthy = healthy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder leader(String leader) {
            if (leader == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "leader");
            }
            this.leader = leader;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder optimisticFailureTolerance(Integer optimisticFailureTolerance) {
            if (optimisticFailureTolerance == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "optimisticFailureTolerance");
            }
            this.optimisticFailureTolerance = optimisticFailureTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder redundancyZones(Map<String,Object> redundancyZones) {
            if (redundancyZones == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "redundancyZones");
            }
            this.redundancyZones = redundancyZones;
            return this;
        }
        @CustomType.Setter
        public Builder redundancyZonesJson(String redundancyZonesJson) {
            if (redundancyZonesJson == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "redundancyZonesJson");
            }
            this.redundancyZonesJson = redundancyZonesJson;
            return this;
        }
        @CustomType.Setter
        public Builder servers(Map<String,Object> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "servers");
            }
            this.servers = servers;
            return this;
        }
        @CustomType.Setter
        public Builder serversJson(String serversJson) {
            if (serversJson == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "serversJson");
            }
            this.serversJson = serversJson;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeInfo(Map<String,Object> upgradeInfo) {
            if (upgradeInfo == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "upgradeInfo");
            }
            this.upgradeInfo = upgradeInfo;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeInfoJson(String upgradeInfoJson) {
            if (upgradeInfoJson == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "upgradeInfoJson");
            }
            this.upgradeInfoJson = upgradeInfoJson;
            return this;
        }
        @CustomType.Setter
        public Builder voters(List<String> voters) {
            if (voters == null) {
              throw new MissingRequiredPropertyException("GetRaftAutopilotStateResult", "voters");
            }
            this.voters = voters;
            return this;
        }
        public Builder voters(String... voters) {
            return voters(List.of(voters));
        }
        public GetRaftAutopilotStateResult build() {
            final var _resultValue = new GetRaftAutopilotStateResult();
            _resultValue.failureTolerance = failureTolerance;
            _resultValue.healthy = healthy;
            _resultValue.id = id;
            _resultValue.leader = leader;
            _resultValue.namespace = namespace;
            _resultValue.optimisticFailureTolerance = optimisticFailureTolerance;
            _resultValue.redundancyZones = redundancyZones;
            _resultValue.redundancyZonesJson = redundancyZonesJson;
            _resultValue.servers = servers;
            _resultValue.serversJson = serversJson;
            _resultValue.upgradeInfo = upgradeInfo;
            _resultValue.upgradeInfoJson = upgradeInfoJson;
            _resultValue.voters = voters;
            return _resultValue;
        }
    }
}
