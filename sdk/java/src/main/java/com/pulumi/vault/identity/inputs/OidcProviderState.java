// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OidcProviderState extends com.pulumi.resources.ResourceArgs {

    public static final OidcProviderState Empty = new OidcProviderState();

    /**
     * The client IDs that are permitted to use the provider.
     * If empty, no clients are allowed. If `*`, all clients are allowed.
     * 
     */
    @Import(name="allowedClientIds")
    private @Nullable Output<List<String>> allowedClientIds;

    /**
     * @return The client IDs that are permitted to use the provider.
     * If empty, no clients are allowed. If `*`, all clients are allowed.
     * 
     */
    public Optional<Output<List<String>>> allowedClientIds() {
        return Optional.ofNullable(this.allowedClientIds);
    }

    /**
     * Set to true if the issuer endpoint uses HTTPS.
     * 
     */
    @Import(name="httpsEnabled")
    private @Nullable Output<Boolean> httpsEnabled;

    /**
     * @return Set to true if the issuer endpoint uses HTTPS.
     * 
     */
    public Optional<Output<Boolean>> httpsEnabled() {
        return Optional.ofNullable(this.httpsEnabled);
    }

    /**
     * Specifies what will be used as the `scheme://host:port`
     * component for the `iss` claim of ID tokens. This value is computed using the
     * `issuer_host` and `https_enabled` fields.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return Specifies what will be used as the `scheme://host:port`
     * component for the `iss` claim of ID tokens. This value is computed using the
     * `issuer_host` and `https_enabled` fields.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * The host for the issuer. Can be either host or host:port.
     * 
     */
    @Import(name="issuerHost")
    private @Nullable Output<String> issuerHost;

    /**
     * @return The host for the issuer. Can be either host or host:port.
     * 
     */
    public Optional<Output<String>> issuerHost() {
        return Optional.ofNullable(this.issuerHost);
    }

    /**
     * The name of the provider.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the provider.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The scopes available for requesting on the provider.
     * 
     */
    @Import(name="scopesSupporteds")
    private @Nullable Output<List<String>> scopesSupporteds;

    /**
     * @return The scopes available for requesting on the provider.
     * 
     */
    public Optional<Output<List<String>>> scopesSupporteds() {
        return Optional.ofNullable(this.scopesSupporteds);
    }

    private OidcProviderState() {}

    private OidcProviderState(OidcProviderState $) {
        this.allowedClientIds = $.allowedClientIds;
        this.httpsEnabled = $.httpsEnabled;
        this.issuer = $.issuer;
        this.issuerHost = $.issuerHost;
        this.name = $.name;
        this.namespace = $.namespace;
        this.scopesSupporteds = $.scopesSupporteds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OidcProviderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OidcProviderState $;

        public Builder() {
            $ = new OidcProviderState();
        }

        public Builder(OidcProviderState defaults) {
            $ = new OidcProviderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedClientIds The client IDs that are permitted to use the provider.
         * If empty, no clients are allowed. If `*`, all clients are allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedClientIds(@Nullable Output<List<String>> allowedClientIds) {
            $.allowedClientIds = allowedClientIds;
            return this;
        }

        /**
         * @param allowedClientIds The client IDs that are permitted to use the provider.
         * If empty, no clients are allowed. If `*`, all clients are allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedClientIds(List<String> allowedClientIds) {
            return allowedClientIds(Output.of(allowedClientIds));
        }

        /**
         * @param allowedClientIds The client IDs that are permitted to use the provider.
         * If empty, no clients are allowed. If `*`, all clients are allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowedClientIds(String... allowedClientIds) {
            return allowedClientIds(List.of(allowedClientIds));
        }

        /**
         * @param httpsEnabled Set to true if the issuer endpoint uses HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder httpsEnabled(@Nullable Output<Boolean> httpsEnabled) {
            $.httpsEnabled = httpsEnabled;
            return this;
        }

        /**
         * @param httpsEnabled Set to true if the issuer endpoint uses HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder httpsEnabled(Boolean httpsEnabled) {
            return httpsEnabled(Output.of(httpsEnabled));
        }

        /**
         * @param issuer Specifies what will be used as the `scheme://host:port`
         * component for the `iss` claim of ID tokens. This value is computed using the
         * `issuer_host` and `https_enabled` fields.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer Specifies what will be used as the `scheme://host:port`
         * component for the `iss` claim of ID tokens. This value is computed using the
         * `issuer_host` and `https_enabled` fields.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param issuerHost The host for the issuer. Can be either host or host:port.
         * 
         * @return builder
         * 
         */
        public Builder issuerHost(@Nullable Output<String> issuerHost) {
            $.issuerHost = issuerHost;
            return this;
        }

        /**
         * @param issuerHost The host for the issuer. Can be either host or host:port.
         * 
         * @return builder
         * 
         */
        public Builder issuerHost(String issuerHost) {
            return issuerHost(Output.of(issuerHost));
        }

        /**
         * @param name The name of the provider.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the provider.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param scopesSupporteds The scopes available for requesting on the provider.
         * 
         * @return builder
         * 
         */
        public Builder scopesSupporteds(@Nullable Output<List<String>> scopesSupporteds) {
            $.scopesSupporteds = scopesSupporteds;
            return this;
        }

        /**
         * @param scopesSupporteds The scopes available for requesting on the provider.
         * 
         * @return builder
         * 
         */
        public Builder scopesSupporteds(List<String> scopesSupporteds) {
            return scopesSupporteds(Output.of(scopesSupporteds));
        }

        /**
         * @param scopesSupporteds The scopes available for requesting on the provider.
         * 
         * @return builder
         * 
         */
        public Builder scopesSupporteds(String... scopesSupporteds) {
            return scopesSupporteds(List.of(scopesSupporteds));
        }

        public OidcProviderState build() {
            return $;
        }
    }

}
