// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.vault.inputs.GetPolicyDocumentRuleAllowedParameter;
import com.pulumi.vault.inputs.GetPolicyDocumentRuleDeniedParameter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyDocumentRule extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicyDocumentRule Empty = new GetPolicyDocumentRule();

    /**
     * Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
     * 
     */
    @Import(name="allowedParameters")
    private @Nullable List<GetPolicyDocumentRuleAllowedParameter> allowedParameters;

    /**
     * @return Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
     * 
     */
    public Optional<List<GetPolicyDocumentRuleAllowedParameter>> allowedParameters() {
        return Optional.ofNullable(this.allowedParameters);
    }

    /**
     * A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
     * 
     */
    @Import(name="capabilities", required=true)
    private List<String> capabilities;

    /**
     * @return A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
     * 
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
     * 
     */
    @Import(name="deniedParameters")
    private @Nullable List<GetPolicyDocumentRuleDeniedParameter> deniedParameters;

    /**
     * @return Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
     * 
     */
    public Optional<List<GetPolicyDocumentRuleDeniedParameter>> deniedParameters() {
        return Optional.ofNullable(this.deniedParameters);
    }

    /**
     * Description of the rule. Will be added as a comment to rendered rule.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the rule. Will be added as a comment to rendered rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The maximum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    @Import(name="maxWrappingTtl")
    private @Nullable String maxWrappingTtl;

    /**
     * @return The maximum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    public Optional<String> maxWrappingTtl() {
        return Optional.ofNullable(this.maxWrappingTtl);
    }

    /**
     * The minimum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    @Import(name="minWrappingTtl")
    private @Nullable String minWrappingTtl;

    /**
     * @return The minimum allowed TTL that clients can specify for a wrapped response.
     * 
     */
    public Optional<String> minWrappingTtl() {
        return Optional.ofNullable(this.minWrappingTtl);
    }

    /**
     * A path in Vault that this rule applies to.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return A path in Vault that this rule applies to.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * A list of parameters that must be specified.
     * 
     */
    @Import(name="requiredParameters")
    private @Nullable List<String> requiredParameters;

    /**
     * @return A list of parameters that must be specified.
     * 
     */
    public Optional<List<String>> requiredParameters() {
        return Optional.ofNullable(this.requiredParameters);
    }

    private GetPolicyDocumentRule() {}

    private GetPolicyDocumentRule(GetPolicyDocumentRule $) {
        this.allowedParameters = $.allowedParameters;
        this.capabilities = $.capabilities;
        this.deniedParameters = $.deniedParameters;
        this.description = $.description;
        this.maxWrappingTtl = $.maxWrappingTtl;
        this.minWrappingTtl = $.minWrappingTtl;
        this.path = $.path;
        this.requiredParameters = $.requiredParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyDocumentRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyDocumentRule $;

        public Builder() {
            $ = new GetPolicyDocumentRule();
        }

        public Builder(GetPolicyDocumentRule defaults) {
            $ = new GetPolicyDocumentRule(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedParameters Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder allowedParameters(@Nullable List<GetPolicyDocumentRuleAllowedParameter> allowedParameters) {
            $.allowedParameters = allowedParameters;
            return this;
        }

        /**
         * @param allowedParameters Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder allowedParameters(GetPolicyDocumentRuleAllowedParameter... allowedParameters) {
            return allowedParameters(List.of(allowedParameters));
        }

        /**
         * @param capabilities A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<String> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities A list of capabilities that this rule apply to `path`. For example, [&#34;read&#34;, &#34;write&#34;].
         * 
         * @return builder
         * 
         */
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param deniedParameters Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder deniedParameters(@Nullable List<GetPolicyDocumentRuleDeniedParameter> deniedParameters) {
            $.deniedParameters = deniedParameters;
            return this;
        }

        /**
         * @param deniedParameters Blacklists a list of parameter and values. Any values specified here take precedence over `allowed_parameter`. See Parameters below.
         * 
         * @return builder
         * 
         */
        public Builder deniedParameters(GetPolicyDocumentRuleDeniedParameter... deniedParameters) {
            return deniedParameters(List.of(deniedParameters));
        }

        /**
         * @param description Description of the rule. Will be added as a comment to rendered rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param maxWrappingTtl The maximum allowed TTL that clients can specify for a wrapped response.
         * 
         * @return builder
         * 
         */
        public Builder maxWrappingTtl(@Nullable String maxWrappingTtl) {
            $.maxWrappingTtl = maxWrappingTtl;
            return this;
        }

        /**
         * @param minWrappingTtl The minimum allowed TTL that clients can specify for a wrapped response.
         * 
         * @return builder
         * 
         */
        public Builder minWrappingTtl(@Nullable String minWrappingTtl) {
            $.minWrappingTtl = minWrappingTtl;
            return this;
        }

        /**
         * @param path A path in Vault that this rule applies to.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param requiredParameters A list of parameters that must be specified.
         * 
         * @return builder
         * 
         */
        public Builder requiredParameters(@Nullable List<String> requiredParameters) {
            $.requiredParameters = requiredParameters;
            return this;
        }

        /**
         * @param requiredParameters A list of parameters that must be specified.
         * 
         * @return builder
         * 
         */
        public Builder requiredParameters(String... requiredParameters) {
            return requiredParameters(List.of(requiredParameters));
        }

        public GetPolicyDocumentRule build() {
            if ($.capabilities == null) {
                throw new MissingRequiredPropertyException("GetPolicyDocumentRule", "capabilities");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetPolicyDocumentRule", "path");
            }
            return $;
        }
    }

}
