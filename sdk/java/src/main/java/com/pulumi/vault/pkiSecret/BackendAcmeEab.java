// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.pkiSecret;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.pkiSecret.BackendAcmeEabArgs;
import com.pulumi.vault.pkiSecret.inputs.BackendAcmeEabState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows creating ACME EAB (External Account Binding) tokens and deleting unused ones.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.Mount;
 * import com.pulumi.vault.MountArgs;
 * import com.pulumi.vault.pkiSecret.BackendAcmeEab;
 * import com.pulumi.vault.pkiSecret.BackendAcmeEabArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Mount("test", MountArgs.builder()
 *             .path("pki")
 *             .type("pki")
 *             .description("PKI secret engine mount")
 *             .build());
 * 
 *         var testBackendAcmeEab = new BackendAcmeEab("testBackendAcmeEab", BackendAcmeEabArgs.builder()
 *             .backend(test.path())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * As EAB tokens are only available on initial creation there is no possibility to
 * 
 * import or update this resource.
 * 
 */
@ResourceType(type="vault:pkiSecret/backendAcmeEab:BackendAcmeEab")
public class BackendAcmeEab extends com.pulumi.resources.CustomResource {
    /**
     * The ACME directory to which the key belongs
     * 
     */
    @Export(name="acmeDirectory", refs={String.class}, tree="[0]")
    private Output<String> acmeDirectory;

    /**
     * @return The ACME directory to which the key belongs
     * 
     */
    public Output<String> acmeDirectory() {
        return this.acmeDirectory;
    }
    /**
     * The path to the PKI secret backend to
     * create the EAB token within, with no leading or trailing `/`s.
     * 
     */
    @Export(name="backend", refs={String.class}, tree="[0]")
    private Output<String> backend;

    /**
     * @return The path to the PKI secret backend to
     * create the EAB token within, with no leading or trailing `/`s.
     * 
     */
    public Output<String> backend() {
        return this.backend;
    }
    /**
     * An RFC3339 formatted date time when the EAB token was created
     * 
     */
    @Export(name="createdOn", refs={String.class}, tree="[0]")
    private Output<String> createdOn;

    /**
     * @return An RFC3339 formatted date time when the EAB token was created
     * 
     */
    public Output<String> createdOn() {
        return this.createdOn;
    }
    /**
     * The identifier of a specific ACME EAB token
     * 
     */
    @Export(name="eabId", refs={String.class}, tree="[0]")
    private Output<String> eabId;

    /**
     * @return The identifier of a specific ACME EAB token
     * 
     */
    public Output<String> eabId() {
        return this.eabId;
    }
    /**
     * Create an EAB token that is specific to an issuer&#39;s ACME directory.
     * 
     */
    @Export(name="issuer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> issuer;

    /**
     * @return Create an EAB token that is specific to an issuer&#39;s ACME directory.
     * 
     */
    public Output<Optional<String>> issuer() {
        return Codegen.optional(this.issuer);
    }
    /**
     * The EAB token
     * 
     */
    @Export(name="key", refs={String.class}, tree="[0]")
    private Output<String> key;

    /**
     * @return The EAB token
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * The key type of the EAB key
     * 
     */
    @Export(name="keyType", refs={String.class}, tree="[0]")
    private Output<String> keyType;

    /**
     * @return The key type of the EAB key
     * 
     */
    public Output<String> keyType() {
        return this.keyType;
    }
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Create an EAB token that is specific to a role&#39;s ACME directory.
     * 
     * **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
     * 
     * 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
     * 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
     * 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
     * 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> role;

    /**
     * @return Create an EAB token that is specific to a role&#39;s ACME directory.
     * 
     * **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
     * 
     * 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
     * 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
     * 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
     * 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
     * 
     */
    public Output<Optional<String>> role() {
        return Codegen.optional(this.role);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BackendAcmeEab(java.lang.String name) {
        this(name, BackendAcmeEabArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BackendAcmeEab(java.lang.String name, BackendAcmeEabArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BackendAcmeEab(java.lang.String name, BackendAcmeEabArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendAcmeEab:BackendAcmeEab", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BackendAcmeEab(java.lang.String name, Output<java.lang.String> id, @Nullable BackendAcmeEabState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:pkiSecret/backendAcmeEab:BackendAcmeEab", name, state, makeResourceOptions(options, id), false);
    }

    private static BackendAcmeEabArgs makeArgs(BackendAcmeEabArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BackendAcmeEabArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "key"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BackendAcmeEab get(java.lang.String name, Output<java.lang.String> id, @Nullable BackendAcmeEabState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BackendAcmeEab(name, id, state, options);
    }
}
