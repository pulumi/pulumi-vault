// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.PluginPinnedVersionArgs;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.inputs.PluginPinnedVersionState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.Plugin;
 * import com.pulumi.vault.PluginArgs;
 * import com.pulumi.vault.PluginPinnedVersion;
 * import com.pulumi.vault.PluginPinnedVersionArgs;
 * import com.pulumi.vault.AuthBackend;
 * import com.pulumi.vault.AuthBackendArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var jwt = new Plugin("jwt", PluginArgs.builder()
 *             .type("auth")
 *             .name("jwt")
 *             .command("vault-plugin-auth-jwt")
 *             .version("v0.17.0")
 *             .sha256("6bd0a803ed742aa3ce35e4fa23d2c8d550e6c1567bf63410cec489c28b68b0fc")
 *             .envs("HTTP_PROXY=http://proxy.example.com:8080")
 *             .build());
 * 
 *         var jwtPin = new PluginPinnedVersion("jwtPin", PluginPinnedVersionArgs.builder()
 *             .type(jwt.type())
 *             .name(jwt.name())
 *             .version(jwt.version())
 *             .build());
 * 
 *         var jwtAuth = new AuthBackend("jwtAuth", AuthBackendArgs.builder()
 *             .type(jwtPin.name())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Pinned plugin versions can be imported using `type/name` as the ID, e.g.
 * 
 * ```sh
 * $ pulumi import vault:index/pluginPinnedVersion:PluginPinnedVersion jwt_pin auth/jwt
 * ```
 * 
 */
@ResourceType(type="vault:index/pluginPinnedVersion:PluginPinnedVersion")
public class PluginPinnedVersion extends com.pulumi.resources.CustomResource {
    /**
     * Name of the plugin.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the plugin.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Type of plugin; one of &#34;auth&#34;, &#34;secret&#34;, or &#34;database&#34;.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of plugin; one of &#34;auth&#34;, &#34;secret&#34;, or &#34;database&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Semantic version of the plugin to pin.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Semantic version of the plugin to pin.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PluginPinnedVersion(String name) {
        this(name, PluginPinnedVersionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PluginPinnedVersion(String name, PluginPinnedVersionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PluginPinnedVersion(String name, PluginPinnedVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:index/pluginPinnedVersion:PluginPinnedVersion", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private PluginPinnedVersion(String name, Output<String> id, @Nullable PluginPinnedVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:index/pluginPinnedVersion:PluginPinnedVersion", name, state, makeResourceOptions(options, id));
    }

    private static PluginPinnedVersionArgs makeArgs(PluginPinnedVersionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PluginPinnedVersionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PluginPinnedVersion get(String name, Output<String> id, @Nullable PluginPinnedVersionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PluginPinnedVersion(name, id, state, options);
    }
}
