// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.ldap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDynamicCredentialsResult {
    private List<String> distinguishedNames;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Integer leaseDuration;
    private String leaseId;
    private Boolean leaseRenewable;
    private String mount;
    private @Nullable String namespace;
    private String password;
    private String roleName;
    private String username;

    private GetDynamicCredentialsResult() {}
    public List<String> distinguishedNames() {
        return this.distinguishedNames;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer leaseDuration() {
        return this.leaseDuration;
    }
    public String leaseId() {
        return this.leaseId;
    }
    public Boolean leaseRenewable() {
        return this.leaseRenewable;
    }
    public String mount() {
        return this.mount;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    public String password() {
        return this.password;
    }
    public String roleName() {
        return this.roleName;
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDynamicCredentialsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> distinguishedNames;
        private String id;
        private Integer leaseDuration;
        private String leaseId;
        private Boolean leaseRenewable;
        private String mount;
        private @Nullable String namespace;
        private String password;
        private String roleName;
        private String username;
        public Builder() {}
        public Builder(GetDynamicCredentialsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distinguishedNames = defaults.distinguishedNames;
    	      this.id = defaults.id;
    	      this.leaseDuration = defaults.leaseDuration;
    	      this.leaseId = defaults.leaseId;
    	      this.leaseRenewable = defaults.leaseRenewable;
    	      this.mount = defaults.mount;
    	      this.namespace = defaults.namespace;
    	      this.password = defaults.password;
    	      this.roleName = defaults.roleName;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder distinguishedNames(List<String> distinguishedNames) {
            if (distinguishedNames == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "distinguishedNames");
            }
            this.distinguishedNames = distinguishedNames;
            return this;
        }
        public Builder distinguishedNames(String... distinguishedNames) {
            return distinguishedNames(List.of(distinguishedNames));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder leaseDuration(Integer leaseDuration) {
            if (leaseDuration == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "leaseDuration");
            }
            this.leaseDuration = leaseDuration;
            return this;
        }
        @CustomType.Setter
        public Builder leaseId(String leaseId) {
            if (leaseId == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "leaseId");
            }
            this.leaseId = leaseId;
            return this;
        }
        @CustomType.Setter
        public Builder leaseRenewable(Boolean leaseRenewable) {
            if (leaseRenewable == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "leaseRenewable");
            }
            this.leaseRenewable = leaseRenewable;
            return this;
        }
        @CustomType.Setter
        public Builder mount(String mount) {
            if (mount == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "mount");
            }
            this.mount = mount;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetDynamicCredentialsResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetDynamicCredentialsResult build() {
            final var _resultValue = new GetDynamicCredentialsResult();
            _resultValue.distinguishedNames = distinguishedNames;
            _resultValue.id = id;
            _resultValue.leaseDuration = leaseDuration;
            _resultValue.leaseId = leaseId;
            _resultValue.leaseRenewable = leaseRenewable;
            _resultValue.mount = mount;
            _resultValue.namespace = namespace;
            _resultValue.password = password;
            _resultValue.roleName = roleName;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
