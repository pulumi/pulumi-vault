// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.appRole.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthBackendLoginState extends com.pulumi.resources.ResourceArgs {

    public static final AuthBackendLoginState Empty = new AuthBackendLoginState();

    /**
     * The accessor for the token.
     * 
     */
    @Import(name="accessor")
    private @Nullable Output<String> accessor;

    /**
     * @return The accessor for the token.
     * 
     */
    public Optional<Output<String>> accessor() {
        return Optional.ofNullable(this.accessor);
    }

    /**
     * The unique path of the Vault backend to log in with.
     * 
     */
    @Import(name="backend")
    private @Nullable Output<String> backend;

    /**
     * @return The unique path of the Vault backend to log in with.
     * 
     */
    public Optional<Output<String>> backend() {
        return Optional.ofNullable(this.backend);
    }

    /**
     * The Vault token created.
     * 
     */
    @Import(name="clientToken")
    private @Nullable Output<String> clientToken;

    /**
     * @return The Vault token created.
     * 
     */
    public Optional<Output<String>> clientToken() {
        return Optional.ofNullable(this.clientToken);
    }

    /**
     * How long the token is valid for, in seconds.
     * 
     */
    @Import(name="leaseDuration")
    private @Nullable Output<Integer> leaseDuration;

    /**
     * @return How long the token is valid for, in seconds.
     * 
     */
    public Optional<Output<Integer>> leaseDuration() {
        return Optional.ofNullable(this.leaseDuration);
    }

    /**
     * The date and time the lease started, in RFC 3339 format.
     * 
     */
    @Import(name="leaseStarted")
    private @Nullable Output<String> leaseStarted;

    /**
     * @return The date and time the lease started, in RFC 3339 format.
     * 
     */
    public Optional<Output<String>> leaseStarted() {
        return Optional.ofNullable(this.leaseStarted);
    }

    /**
     * The metadata associated with the token.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    /**
     * @return The metadata associated with the token.
     * 
     */
    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * A list of policies applied to the token.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return A list of policies applied to the token.
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Whether the token is renewable or not.
     * 
     */
    @Import(name="renewable")
    private @Nullable Output<Boolean> renewable;

    /**
     * @return Whether the token is renewable or not.
     * 
     */
    public Optional<Output<Boolean>> renewable() {
        return Optional.ofNullable(this.renewable);
    }

    /**
     * The ID of the role to log in with.
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<String> roleId;

    /**
     * @return The ID of the role to log in with.
     * 
     */
    public Optional<Output<String>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    /**
     * The secret ID of the role to log in with. Required
     * unless `bind_secret_id` is set to false on the role.
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return The secret ID of the role to log in with. Required
     * unless `bind_secret_id` is set to false on the role.
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    private AuthBackendLoginState() {}

    private AuthBackendLoginState(AuthBackendLoginState $) {
        this.accessor = $.accessor;
        this.backend = $.backend;
        this.clientToken = $.clientToken;
        this.leaseDuration = $.leaseDuration;
        this.leaseStarted = $.leaseStarted;
        this.metadata = $.metadata;
        this.namespace = $.namespace;
        this.policies = $.policies;
        this.renewable = $.renewable;
        this.roleId = $.roleId;
        this.secretId = $.secretId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthBackendLoginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthBackendLoginState $;

        public Builder() {
            $ = new AuthBackendLoginState();
        }

        public Builder(AuthBackendLoginState defaults) {
            $ = new AuthBackendLoginState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessor The accessor for the token.
         * 
         * @return builder
         * 
         */
        public Builder accessor(@Nullable Output<String> accessor) {
            $.accessor = accessor;
            return this;
        }

        /**
         * @param accessor The accessor for the token.
         * 
         * @return builder
         * 
         */
        public Builder accessor(String accessor) {
            return accessor(Output.of(accessor));
        }

        /**
         * @param backend The unique path of the Vault backend to log in with.
         * 
         * @return builder
         * 
         */
        public Builder backend(@Nullable Output<String> backend) {
            $.backend = backend;
            return this;
        }

        /**
         * @param backend The unique path of the Vault backend to log in with.
         * 
         * @return builder
         * 
         */
        public Builder backend(String backend) {
            return backend(Output.of(backend));
        }

        /**
         * @param clientToken The Vault token created.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(@Nullable Output<String> clientToken) {
            $.clientToken = clientToken;
            return this;
        }

        /**
         * @param clientToken The Vault token created.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(String clientToken) {
            return clientToken(Output.of(clientToken));
        }

        /**
         * @param leaseDuration How long the token is valid for, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder leaseDuration(@Nullable Output<Integer> leaseDuration) {
            $.leaseDuration = leaseDuration;
            return this;
        }

        /**
         * @param leaseDuration How long the token is valid for, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder leaseDuration(Integer leaseDuration) {
            return leaseDuration(Output.of(leaseDuration));
        }

        /**
         * @param leaseStarted The date and time the lease started, in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder leaseStarted(@Nullable Output<String> leaseStarted) {
            $.leaseStarted = leaseStarted;
            return this;
        }

        /**
         * @param leaseStarted The date and time the lease started, in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder leaseStarted(String leaseStarted) {
            return leaseStarted(Output.of(leaseStarted));
        }

        /**
         * @param metadata The metadata associated with the token.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata The metadata associated with the token.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace to provision the resource in.
         * The value should not contain leading or trailing forward slashes.
         * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
         * *Available only for Vault Enterprise*.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param policies A list of policies applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies A list of policies applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies A list of policies applied to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param renewable Whether the token is renewable or not.
         * 
         * @return builder
         * 
         */
        public Builder renewable(@Nullable Output<Boolean> renewable) {
            $.renewable = renewable;
            return this;
        }

        /**
         * @param renewable Whether the token is renewable or not.
         * 
         * @return builder
         * 
         */
        public Builder renewable(Boolean renewable) {
            return renewable(Output.of(renewable));
        }

        /**
         * @param roleId The ID of the role to log in with.
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The ID of the role to log in with.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param secretId The secret ID of the role to log in with. Required
         * unless `bind_secret_id` is set to false on the role.
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId The secret ID of the role to log in with. Required
         * unless `bind_secret_id` is set to false on the role.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        public AuthBackendLoginState build() {
            return $;
        }
    }

}
