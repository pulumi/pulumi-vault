// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.vault.CertAuthBackendRoleArgs;
import com.pulumi.vault.Utilities;
import com.pulumi.vault.inputs.CertAuthBackendRoleState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource to create a role in an [Cert auth backend within Vault](https://www.vaultproject.io/docs/auth/cert.html).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.vault.AuthBackend;
 * import com.pulumi.vault.AuthBackendArgs;
 * import com.pulumi.vault.CertAuthBackendRole;
 * import com.pulumi.vault.CertAuthBackendRoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cert = new AuthBackend(&#34;cert&#34;, AuthBackendArgs.builder()        
 *             .path(&#34;cert&#34;)
 *             .type(&#34;cert&#34;)
 *             .build());
 * 
 *         var certCertAuthBackendRole = new CertAuthBackendRole(&#34;certCertAuthBackendRole&#34;, CertAuthBackendRoleArgs.builder()        
 *             .name(&#34;foo&#34;)
 *             .certificate(StdFunctions.file(FileArgs.builder()
 *                 .input(&#34;/path/to/certs/ca-cert.pem&#34;)
 *                 .build()).result())
 *             .backend(cert.path())
 *             .allowedNames(            
 *                 &#34;foo.example.org&#34;,
 *                 &#34;baz.example.org&#34;)
 *             .tokenTtl(300)
 *             .tokenMaxTtl(600)
 *             .tokenPolicies(&#34;foo&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="vault:index/certAuthBackendRole:CertAuthBackendRole")
public class CertAuthBackendRole extends com.pulumi.resources.CustomResource {
    /**
     * Allowed the common names for authenticated client certificates
     * 
     */
    @Export(name="allowedCommonNames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedCommonNames;

    /**
     * @return Allowed the common names for authenticated client certificates
     * 
     */
    public Output<List<String>> allowedCommonNames() {
        return this.allowedCommonNames;
    }
    /**
     * Allowed alternative dns names for authenticated client certificates
     * 
     */
    @Export(name="allowedDnsSans", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedDnsSans;

    /**
     * @return Allowed alternative dns names for authenticated client certificates
     * 
     */
    public Output<List<String>> allowedDnsSans() {
        return this.allowedDnsSans;
    }
    /**
     * Allowed emails for authenticated client certificates
     * 
     */
    @Export(name="allowedEmailSans", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedEmailSans;

    /**
     * @return Allowed emails for authenticated client certificates
     * 
     */
    public Output<List<String>> allowedEmailSans() {
        return this.allowedEmailSans;
    }
    /**
     * DEPRECATED: Please use the individual `allowed_X_sans` parameters instead. Allowed subject names for authenticated client certificates
     * 
     */
    @Export(name="allowedNames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedNames;

    /**
     * @return DEPRECATED: Please use the individual `allowed_X_sans` parameters instead. Allowed subject names for authenticated client certificates
     * 
     */
    public Output<List<String>> allowedNames() {
        return this.allowedNames;
    }
    /**
     * Allowed organization units for authenticated client certificates.
     * 
     */
    @Export(name="allowedOrganizationalUnits", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> allowedOrganizationalUnits;

    /**
     * @return Allowed organization units for authenticated client certificates.
     * 
     */
    public Output<Optional<List<String>>> allowedOrganizationalUnits() {
        return Codegen.optional(this.allowedOrganizationalUnits);
    }
    /**
     * Allowed URIs for authenticated client certificates
     * 
     */
    @Export(name="allowedUriSans", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedUriSans;

    /**
     * @return Allowed URIs for authenticated client certificates
     * 
     */
    public Output<List<String>> allowedUriSans() {
        return this.allowedUriSans;
    }
    /**
     * Path to the mounted Cert auth backend
     * 
     */
    @Export(name="backend", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> backend;

    /**
     * @return Path to the mounted Cert auth backend
     * 
     */
    public Output<Optional<String>> backend() {
        return Codegen.optional(this.backend);
    }
    /**
     * CA certificate used to validate client certificates
     * 
     */
    @Export(name="certificate", refs={String.class}, tree="[0]")
    private Output<String> certificate;

    /**
     * @return CA certificate used to validate client certificates
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }
    /**
     * The name to display on tokens issued under this role.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The name to display on tokens issued under this role.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Name of the role
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the role
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    @Export(name="namespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> namespace;

    /**
     * @return The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider&#39;s configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     * 
     */
    public Output<Optional<String>> namespace() {
        return Codegen.optional(this.namespace);
    }
    /**
     * Any additional CA certificates
     * needed to verify OCSP responses. Provided as base64 encoded PEM data.
     * Requires Vault version 1.13+.
     * 
     */
    @Export(name="ocspCaCertificates", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ocspCaCertificates;

    /**
     * @return Any additional CA certificates
     * needed to verify OCSP responses. Provided as base64 encoded PEM data.
     * Requires Vault version 1.13+.
     * 
     */
    public Output<Optional<String>> ocspCaCertificates() {
        return Codegen.optional(this.ocspCaCertificates);
    }
    /**
     * If enabled, validate certificates&#39;
     * revocation status using OCSP. Requires Vault version 1.13+.
     * 
     */
    @Export(name="ocspEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ocspEnabled;

    /**
     * @return If enabled, validate certificates&#39;
     * revocation status using OCSP. Requires Vault version 1.13+.
     * 
     */
    public Output<Boolean> ocspEnabled() {
        return this.ocspEnabled;
    }
    /**
     * If true and an OCSP response cannot
     * be fetched or is of an unknown status, the login will proceed as if the
     * certificate has not been revoked.
     * Requires Vault version 1.13+.
     * 
     */
    @Export(name="ocspFailOpen", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ocspFailOpen;

    /**
     * @return If true and an OCSP response cannot
     * be fetched or is of an unknown status, the login will proceed as if the
     * certificate has not been revoked.
     * Requires Vault version 1.13+.
     * 
     */
    public Output<Boolean> ocspFailOpen() {
        return this.ocspFailOpen;
    }
    /**
     * If set to true, rather than
     * accepting the first successful OCSP response, query all servers and consider
     * the certificate valid only if all servers agree.
     * Requires Vault version 1.13+.
     * 
     */
    @Export(name="ocspQueryAllServers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ocspQueryAllServers;

    /**
     * @return If set to true, rather than
     * accepting the first successful OCSP response, query all servers and consider
     * the certificate valid only if all servers agree.
     * Requires Vault version 1.13+.
     * 
     */
    public Output<Boolean> ocspQueryAllServers() {
        return this.ocspQueryAllServers;
    }
    /**
     * : A comma-separated list of OCSP
     * server addresses. If unset, the OCSP server is determined from the
     * AuthorityInformationAccess extension on the certificate being inspected.
     * Requires Vault version 1.13+.
     * 
     */
    @Export(name="ocspServersOverrides", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> ocspServersOverrides;

    /**
     * @return : A comma-separated list of OCSP
     * server addresses. If unset, the OCSP server is determined from the
     * AuthorityInformationAccess extension on the certificate being inspected.
     * Requires Vault version 1.13+.
     * 
     */
    public Output<Optional<List<String>>> ocspServersOverrides() {
        return Codegen.optional(this.ocspServersOverrides);
    }
    /**
     * TLS extensions required on
     * client certificates
     * 
     */
    @Export(name="requiredExtensions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> requiredExtensions;

    /**
     * @return TLS extensions required on
     * client certificates
     * 
     */
    public Output<List<String>> requiredExtensions() {
        return this.requiredExtensions;
    }
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     * 
     */
    @Export(name="tokenBoundCidrs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tokenBoundCidrs;

    /**
     * @return Specifies the blocks of IP addresses which are allowed to use the generated token
     * 
     */
    public Output<Optional<List<String>>> tokenBoundCidrs() {
        return Codegen.optional(this.tokenBoundCidrs);
    }
    /**
     * Generated Token&#39;s Explicit Maximum TTL in seconds
     * 
     */
    @Export(name="tokenExplicitMaxTtl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tokenExplicitMaxTtl;

    /**
     * @return Generated Token&#39;s Explicit Maximum TTL in seconds
     * 
     */
    public Output<Optional<Integer>> tokenExplicitMaxTtl() {
        return Codegen.optional(this.tokenExplicitMaxTtl);
    }
    /**
     * The maximum lifetime of the generated token
     * 
     */
    @Export(name="tokenMaxTtl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tokenMaxTtl;

    /**
     * @return The maximum lifetime of the generated token
     * 
     */
    public Output<Optional<Integer>> tokenMaxTtl() {
        return Codegen.optional(this.tokenMaxTtl);
    }
    /**
     * If true, the &#39;default&#39; policy will not automatically be added to generated tokens
     * 
     */
    @Export(name="tokenNoDefaultPolicy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tokenNoDefaultPolicy;

    /**
     * @return If true, the &#39;default&#39; policy will not automatically be added to generated tokens
     * 
     */
    public Output<Optional<Boolean>> tokenNoDefaultPolicy() {
        return Codegen.optional(this.tokenNoDefaultPolicy);
    }
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     * 
     */
    @Export(name="tokenNumUses", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tokenNumUses;

    /**
     * @return The maximum number of times a token may be used, a value of zero means unlimited
     * 
     */
    public Output<Optional<Integer>> tokenNumUses() {
        return Codegen.optional(this.tokenNumUses);
    }
    /**
     * Generated Token&#39;s Period
     * 
     */
    @Export(name="tokenPeriod", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tokenPeriod;

    /**
     * @return Generated Token&#39;s Period
     * 
     */
    public Output<Optional<Integer>> tokenPeriod() {
        return Codegen.optional(this.tokenPeriod);
    }
    /**
     * Generated Token&#39;s Policies
     * 
     */
    @Export(name="tokenPolicies", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tokenPolicies;

    /**
     * @return Generated Token&#39;s Policies
     * 
     */
    public Output<Optional<List<String>>> tokenPolicies() {
        return Codegen.optional(this.tokenPolicies);
    }
    /**
     * The initial ttl of the token to generate in seconds
     * 
     */
    @Export(name="tokenTtl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tokenTtl;

    /**
     * @return The initial ttl of the token to generate in seconds
     * 
     */
    public Output<Optional<Integer>> tokenTtl() {
        return Codegen.optional(this.tokenTtl);
    }
    /**
     * The type of token to generate, service or batch
     * 
     */
    @Export(name="tokenType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tokenType;

    /**
     * @return The type of token to generate, service or batch
     * 
     */
    public Output<Optional<String>> tokenType() {
        return Codegen.optional(this.tokenType);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CertAuthBackendRole(String name) {
        this(name, CertAuthBackendRoleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CertAuthBackendRole(String name, CertAuthBackendRoleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CertAuthBackendRole(String name, CertAuthBackendRoleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:index/certAuthBackendRole:CertAuthBackendRole", name, args == null ? CertAuthBackendRoleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CertAuthBackendRole(String name, Output<String> id, @Nullable CertAuthBackendRoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("vault:index/certAuthBackendRole:CertAuthBackendRole", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CertAuthBackendRole get(String name, Output<String> id, @Nullable CertAuthBackendRoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CertAuthBackendRole(name, id, state, options);
    }
}
