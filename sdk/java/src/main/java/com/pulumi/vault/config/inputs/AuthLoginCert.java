// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.config.inputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthLoginCert {
    /**
     * @return Path to a file containing the client certificate.
     * 
     */
    private String certFile;
    /**
     * @return Path to a file containing the private key that the certificate was issued for.
     * 
     */
    private String keyFile;
    /**
     * @return The path where the authentication engine is mounted.
     * 
     */
    private @Nullable String mount;
    /**
     * @return Name of the certificate&#39;s role
     * 
     */
    private @Nullable String name;
    /**
     * @return The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    private @Nullable String namespace;
    /**
     * @return Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    private @Nullable Boolean useRootNamespace;

    private AuthLoginCert() {}
    /**
     * @return Path to a file containing the client certificate.
     * 
     */
    public String certFile() {
        return this.certFile;
    }
    /**
     * @return Path to a file containing the private key that the certificate was issued for.
     * 
     */
    public String keyFile() {
        return this.keyFile;
    }
    /**
     * @return The path where the authentication engine is mounted.
     * 
     */
    public Optional<String> mount() {
        return Optional.ofNullable(this.mount);
    }
    /**
     * @return Name of the certificate&#39;s role
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The authentication engine&#39;s namespace. Conflicts with use_root_namespace
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Authenticate to the root Vault namespace. Conflicts with namespace
     * 
     */
    public Optional<Boolean> useRootNamespace() {
        return Optional.ofNullable(this.useRootNamespace);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthLoginCert defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certFile;
        private String keyFile;
        private @Nullable String mount;
        private @Nullable String name;
        private @Nullable String namespace;
        private @Nullable Boolean useRootNamespace;
        public Builder() {}
        public Builder(AuthLoginCert defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certFile = defaults.certFile;
    	      this.keyFile = defaults.keyFile;
    	      this.mount = defaults.mount;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.useRootNamespace = defaults.useRootNamespace;
        }

        @CustomType.Setter
        public Builder certFile(String certFile) {
            if (certFile == null) {
              throw new MissingRequiredPropertyException("AuthLoginCert", "certFile");
            }
            this.certFile = certFile;
            return this;
        }
        @CustomType.Setter
        public Builder keyFile(String keyFile) {
            if (keyFile == null) {
              throw new MissingRequiredPropertyException("AuthLoginCert", "keyFile");
            }
            this.keyFile = keyFile;
            return this;
        }
        @CustomType.Setter
        public Builder mount(@Nullable String mount) {

            this.mount = mount;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder useRootNamespace(@Nullable Boolean useRootNamespace) {

            this.useRootNamespace = useRootNamespace;
            return this;
        }
        public AuthLoginCert build() {
            final var _resultValue = new AuthLoginCert();
            _resultValue.certFile = certFile;
            _resultValue.keyFile = keyFile;
            _resultValue.mount = mount;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.useRootNamespace = useRootNamespace;
            return _resultValue;
        }
    }
}
