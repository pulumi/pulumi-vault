// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNamespaceResult {
    /**
     * @return (Optional) A map of strings containing arbitrary metadata for the namespace.
     * Only fetched if `path` is specified.
     * *Requires Vault 1.12+.*
     * 
     */
    private Map<String,Object> customMetadata;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String namespace;
    /**
     * @return Vault server&#39;s internal ID of the namespace.
     * Only fetched if `path` is specified.
     * 
     */
    private String namespaceId;
    private @Nullable String path;
    /**
     * @return The fully qualified path to the namespace. Useful when provisioning resources in a child `namespace`.
     * The path is relative to the provider&#39;s `namespace` argument.
     * 
     */
    private String pathFq;

    private GetNamespaceResult() {}
    /**
     * @return (Optional) A map of strings containing arbitrary metadata for the namespace.
     * Only fetched if `path` is specified.
     * *Requires Vault 1.12+.*
     * 
     */
    public Map<String,Object> customMetadata() {
        return this.customMetadata;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return Vault server&#39;s internal ID of the namespace.
     * Only fetched if `path` is specified.
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The fully qualified path to the namespace. Useful when provisioning resources in a child `namespace`.
     * The path is relative to the provider&#39;s `namespace` argument.
     * 
     */
    public String pathFq() {
        return this.pathFq;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> customMetadata;
        private String id;
        private @Nullable String namespace;
        private String namespaceId;
        private @Nullable String path;
        private String pathFq;
        public Builder() {}
        public Builder(GetNamespaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customMetadata = defaults.customMetadata;
    	      this.id = defaults.id;
    	      this.namespace = defaults.namespace;
    	      this.namespaceId = defaults.namespaceId;
    	      this.path = defaults.path;
    	      this.pathFq = defaults.pathFq;
        }

        @CustomType.Setter
        public Builder customMetadata(Map<String,Object> customMetadata) {
            if (customMetadata == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "customMetadata");
            }
            this.customMetadata = customMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(String namespaceId) {
            if (namespaceId == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "namespaceId");
            }
            this.namespaceId = namespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pathFq(String pathFq) {
            if (pathFq == null) {
              throw new MissingRequiredPropertyException("GetNamespaceResult", "pathFq");
            }
            this.pathFq = pathFq;
            return this;
        }
        public GetNamespaceResult build() {
            final var _resultValue = new GetNamespaceResult();
            _resultValue.customMetadata = customMetadata;
            _resultValue.id = id;
            _resultValue.namespace = namespace;
            _resultValue.namespaceId = namespaceId;
            _resultValue.path = path;
            _resultValue.pathFq = pathFq;
            return _resultValue;
        }
    }
}
