// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAuthBackendResult {
    /**
     * @return The accessor for this auth method.
     * 
     */
    private String accessor;
    /**
     * @return The default lease duration in seconds.
     * 
     */
    private Integer defaultLeaseTtlSeconds;
    /**
     * @return A description of the auth method.
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Specifies whether to show this mount in the UI-specific listing endpoint.
     * 
     */
    private String listingVisibility;
    /**
     * @return Specifies if the auth method is local only.
     * 
     */
    private Boolean local;
    /**
     * @return The maximum lease duration in seconds.
     * 
     */
    private Integer maxLeaseTtlSeconds;
    private @Nullable String namespace;
    private String path;
    /**
     * @return The name of the auth method type.
     * 
     */
    private String type;

    private GetAuthBackendResult() {}
    /**
     * @return The accessor for this auth method.
     * 
     */
    public String accessor() {
        return this.accessor;
    }
    /**
     * @return The default lease duration in seconds.
     * 
     */
    public Integer defaultLeaseTtlSeconds() {
        return this.defaultLeaseTtlSeconds;
    }
    /**
     * @return A description of the auth method.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies whether to show this mount in the UI-specific listing endpoint.
     * 
     */
    public String listingVisibility() {
        return this.listingVisibility;
    }
    /**
     * @return Specifies if the auth method is local only.
     * 
     */
    public Boolean local() {
        return this.local;
    }
    /**
     * @return The maximum lease duration in seconds.
     * 
     */
    public Integer maxLeaseTtlSeconds() {
        return this.maxLeaseTtlSeconds;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    public String path() {
        return this.path;
    }
    /**
     * @return The name of the auth method type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthBackendResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessor;
        private Integer defaultLeaseTtlSeconds;
        private String description;
        private String id;
        private String listingVisibility;
        private Boolean local;
        private Integer maxLeaseTtlSeconds;
        private @Nullable String namespace;
        private String path;
        private String type;
        public Builder() {}
        public Builder(GetAuthBackendResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessor = defaults.accessor;
    	      this.defaultLeaseTtlSeconds = defaults.defaultLeaseTtlSeconds;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.listingVisibility = defaults.listingVisibility;
    	      this.local = defaults.local;
    	      this.maxLeaseTtlSeconds = defaults.maxLeaseTtlSeconds;
    	      this.namespace = defaults.namespace;
    	      this.path = defaults.path;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accessor(String accessor) {
            if (accessor == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "accessor");
            }
            this.accessor = accessor;
            return this;
        }
        @CustomType.Setter
        public Builder defaultLeaseTtlSeconds(Integer defaultLeaseTtlSeconds) {
            if (defaultLeaseTtlSeconds == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "defaultLeaseTtlSeconds");
            }
            this.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listingVisibility(String listingVisibility) {
            if (listingVisibility == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "listingVisibility");
            }
            this.listingVisibility = listingVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder local(Boolean local) {
            if (local == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "local");
            }
            this.local = local;
            return this;
        }
        @CustomType.Setter
        public Builder maxLeaseTtlSeconds(Integer maxLeaseTtlSeconds) {
            if (maxLeaseTtlSeconds == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "maxLeaseTtlSeconds");
            }
            this.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {

            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAuthBackendResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetAuthBackendResult build() {
            final var _resultValue = new GetAuthBackendResult();
            _resultValue.accessor = accessor;
            _resultValue.defaultLeaseTtlSeconds = defaultLeaseTtlSeconds;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.listingVisibility = listingVisibility;
            _resultValue.local = local;
            _resultValue.maxLeaseTtlSeconds = maxLeaseTtlSeconds;
            _resultValue.namespace = namespace;
            _resultValue.path = path;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
