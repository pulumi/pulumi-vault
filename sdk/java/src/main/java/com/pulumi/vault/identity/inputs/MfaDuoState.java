// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.vault.identity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MfaDuoState extends com.pulumi.resources.ResourceArgs {

    public static final MfaDuoState Empty = new MfaDuoState();

    /**
     * API hostname for Duo
     * 
     */
    @Import(name="apiHostname")
    private @Nullable Output<String> apiHostname;

    /**
     * @return API hostname for Duo
     * 
     */
    public Optional<Output<String>> apiHostname() {
        return Optional.ofNullable(this.apiHostname);
    }

    /**
     * Integration key for Duo
     * 
     */
    @Import(name="integrationKey")
    private @Nullable Output<String> integrationKey;

    /**
     * @return Integration key for Duo
     * 
     */
    public Optional<Output<String>> integrationKey() {
        return Optional.ofNullable(this.integrationKey);
    }

    /**
     * Method ID.
     * 
     */
    @Import(name="methodId")
    private @Nullable Output<String> methodId;

    /**
     * @return Method ID.
     * 
     */
    public Optional<Output<String>> methodId() {
        return Optional.ofNullable(this.methodId);
    }

    /**
     * Mount accessor.
     * 
     */
    @Import(name="mountAccessor")
    private @Nullable Output<String> mountAccessor;

    /**
     * @return Mount accessor.
     * 
     */
    public Optional<Output<String>> mountAccessor() {
        return Optional.ofNullable(this.mountAccessor);
    }

    /**
     * Method name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Method name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Target namespace. (requires Enterprise)
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Target namespace. (requires Enterprise)
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Method&#39;s namespace ID.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<String> namespaceId;

    /**
     * @return Method&#39;s namespace ID.
     * 
     */
    public Optional<Output<String>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * Method&#39;s namespace path.
     * 
     */
    @Import(name="namespacePath")
    private @Nullable Output<String> namespacePath;

    /**
     * @return Method&#39;s namespace path.
     * 
     */
    public Optional<Output<String>> namespacePath() {
        return Optional.ofNullable(this.namespacePath);
    }

    /**
     * Push information for Duo.
     * 
     */
    @Import(name="pushInfo")
    private @Nullable Output<String> pushInfo;

    /**
     * @return Push information for Duo.
     * 
     */
    public Optional<Output<String>> pushInfo() {
        return Optional.ofNullable(this.pushInfo);
    }

    /**
     * Secret key for Duo
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return Secret key for Duo
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * MFA type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return MFA type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Require passcode upon MFA validation.
     * 
     */
    @Import(name="usePasscode")
    private @Nullable Output<Boolean> usePasscode;

    /**
     * @return Require passcode upon MFA validation.
     * 
     */
    public Optional<Output<Boolean>> usePasscode() {
        return Optional.ofNullable(this.usePasscode);
    }

    /**
     * A template string for mapping Identity names to MFA methods.
     * 
     */
    @Import(name="usernameFormat")
    private @Nullable Output<String> usernameFormat;

    /**
     * @return A template string for mapping Identity names to MFA methods.
     * 
     */
    public Optional<Output<String>> usernameFormat() {
        return Optional.ofNullable(this.usernameFormat);
    }

    /**
     * Resource UUID.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Resource UUID.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private MfaDuoState() {}

    private MfaDuoState(MfaDuoState $) {
        this.apiHostname = $.apiHostname;
        this.integrationKey = $.integrationKey;
        this.methodId = $.methodId;
        this.mountAccessor = $.mountAccessor;
        this.name = $.name;
        this.namespace = $.namespace;
        this.namespaceId = $.namespaceId;
        this.namespacePath = $.namespacePath;
        this.pushInfo = $.pushInfo;
        this.secretKey = $.secretKey;
        this.type = $.type;
        this.usePasscode = $.usePasscode;
        this.usernameFormat = $.usernameFormat;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MfaDuoState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MfaDuoState $;

        public Builder() {
            $ = new MfaDuoState();
        }

        public Builder(MfaDuoState defaults) {
            $ = new MfaDuoState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiHostname API hostname for Duo
         * 
         * @return builder
         * 
         */
        public Builder apiHostname(@Nullable Output<String> apiHostname) {
            $.apiHostname = apiHostname;
            return this;
        }

        /**
         * @param apiHostname API hostname for Duo
         * 
         * @return builder
         * 
         */
        public Builder apiHostname(String apiHostname) {
            return apiHostname(Output.of(apiHostname));
        }

        /**
         * @param integrationKey Integration key for Duo
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(@Nullable Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        /**
         * @param integrationKey Integration key for Duo
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        /**
         * @param methodId Method ID.
         * 
         * @return builder
         * 
         */
        public Builder methodId(@Nullable Output<String> methodId) {
            $.methodId = methodId;
            return this;
        }

        /**
         * @param methodId Method ID.
         * 
         * @return builder
         * 
         */
        public Builder methodId(String methodId) {
            return methodId(Output.of(methodId));
        }

        /**
         * @param mountAccessor Mount accessor.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(@Nullable Output<String> mountAccessor) {
            $.mountAccessor = mountAccessor;
            return this;
        }

        /**
         * @param mountAccessor Mount accessor.
         * 
         * @return builder
         * 
         */
        public Builder mountAccessor(String mountAccessor) {
            return mountAccessor(Output.of(mountAccessor));
        }

        /**
         * @param name Method name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Method name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Target namespace. (requires Enterprise)
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param namespaceId Method&#39;s namespace ID.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId Method&#39;s namespace ID.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param namespacePath Method&#39;s namespace path.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(@Nullable Output<String> namespacePath) {
            $.namespacePath = namespacePath;
            return this;
        }

        /**
         * @param namespacePath Method&#39;s namespace path.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(String namespacePath) {
            return namespacePath(Output.of(namespacePath));
        }

        /**
         * @param pushInfo Push information for Duo.
         * 
         * @return builder
         * 
         */
        public Builder pushInfo(@Nullable Output<String> pushInfo) {
            $.pushInfo = pushInfo;
            return this;
        }

        /**
         * @param pushInfo Push information for Duo.
         * 
         * @return builder
         * 
         */
        public Builder pushInfo(String pushInfo) {
            return pushInfo(Output.of(pushInfo));
        }

        /**
         * @param secretKey Secret key for Duo
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Secret key for Duo
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param type MFA type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type MFA type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usePasscode Require passcode upon MFA validation.
         * 
         * @return builder
         * 
         */
        public Builder usePasscode(@Nullable Output<Boolean> usePasscode) {
            $.usePasscode = usePasscode;
            return this;
        }

        /**
         * @param usePasscode Require passcode upon MFA validation.
         * 
         * @return builder
         * 
         */
        public Builder usePasscode(Boolean usePasscode) {
            return usePasscode(Output.of(usePasscode));
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(@Nullable Output<String> usernameFormat) {
            $.usernameFormat = usernameFormat;
            return this;
        }

        /**
         * @param usernameFormat A template string for mapping Identity names to MFA methods.
         * 
         * @return builder
         * 
         */
        public Builder usernameFormat(String usernameFormat) {
            return usernameFormat(Output.of(usernameFormat));
        }

        /**
         * @param uuid Resource UUID.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Resource UUID.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public MfaDuoState build() {
            return $;
        }
    }

}
