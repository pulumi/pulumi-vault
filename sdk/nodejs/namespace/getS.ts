// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Child namespaces
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const children = vault.namespace.getS({});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Nested namespace
 *
 * To fetch the details of nested namespaces:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const children = vault.namespace.getS({
 *     namespace: "parent",
 * });
 * const child = .map(([, ]) => (vault.namespace.get({
 *     namespace: _arg0_.namespace,
 *     path: __key,
 * })));
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getS(args?: GetSArgs, opts?: pulumi.InvokeOptions): Promise<GetSResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:namespace/getS:getS", {
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getS.
 */
export interface GetSArgs {
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     */
    namespace?: string;
}

/**
 * A collection of values returned by getS.
 */
export interface GetSResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly namespace?: string;
    /**
     * Set of the paths of direct child namespaces.
     */
    readonly paths: string[];
}
/**
 * ## Example Usage
 *
 * ### Child namespaces
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const children = vault.namespace.getS({});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Nested namespace
 *
 * To fetch the details of nested namespaces:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const children = vault.namespace.getS({
 *     namespace: "parent",
 * });
 * const child = .map(([, ]) => (vault.namespace.get({
 *     namespace: _arg0_.namespace,
 *     path: __key,
 * })));
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getSOutput(args?: GetSOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSResult> {
    return pulumi.output(args).apply((a: any) => getS(a, opts))
}

/**
 * A collection of arguments for invoking getS.
 */
export interface GetSOutputArgs {
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     */
    namespace?: pulumi.Input<string>;
}
