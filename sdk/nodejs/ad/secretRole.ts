// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const config = new vault.ad.SecretBackend("config", {
 *     backend: "ad",
 *     binddn: "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
 *     bindpass: "SuperSecretPassw0rd",
 *     url: "ldaps://ad",
 *     insecureTls: true,
 *     userdn: "CN=Users,DC=corp,DC=example,DC=net",
 * });
 * const role = new vault.ad.SecretRole("role", {
 *     backend: config.backend,
 *     role: "bob",
 *     serviceAccountName: "Bob",
 *     ttl: 60,
 * });
 * ```
 *
 * ## Import
 *
 * AD secret backend roles can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:ad/secretRole:SecretRole role ad/roles/bob
 * ```
 */
export class SecretRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretRoleState, opts?: pulumi.CustomResourceOptions): SecretRole {
        return new SecretRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:ad/secretRole:SecretRole';

    /**
     * Returns true if the given object is an instance of SecretRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretRole.__pulumiType;
    }

    /**
     * The path the AD secret backend is mounted at,
     * with no leading or trailing `/`s.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * Timestamp of the last password rotation by Vault.
     */
    declare public /*out*/ readonly lastVaultRotation: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Timestamp of the last password set by Vault.
     */
    declare public /*out*/ readonly passwordLastSet: pulumi.Output<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    declare public readonly role: pulumi.Output<string>;
    /**
     * Specifies the name of the Active Directory service
     * account mapped to this role.
     */
    declare public readonly serviceAccountName: pulumi.Output<string>;
    /**
     * The password time-to-live in seconds. Defaults to the configuration
     * ttl if not provided.
     */
    declare public readonly ttl: pulumi.Output<number | undefined>;

    /**
     * Create a SecretRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretRoleArgs | SecretRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretRoleState | undefined;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["lastVaultRotation"] = state?.lastVaultRotation;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["passwordLastSet"] = state?.passwordLastSet;
            resourceInputs["role"] = state?.role;
            resourceInputs["serviceAccountName"] = state?.serviceAccountName;
            resourceInputs["ttl"] = state?.ttl;
        } else {
            const args = argsOrState as SecretRoleArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if (args?.serviceAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountName'");
            }
            resourceInputs["backend"] = args?.backend;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["role"] = args?.role;
            resourceInputs["serviceAccountName"] = args?.serviceAccountName;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["lastVaultRotation"] = undefined /*out*/;
            resourceInputs["passwordLastSet"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretRole resources.
 */
export interface SecretRoleState {
    /**
     * The path the AD secret backend is mounted at,
     * with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * Timestamp of the last password rotation by Vault.
     */
    lastVaultRotation?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Timestamp of the last password set by Vault.
     */
    passwordLastSet?: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    role?: pulumi.Input<string>;
    /**
     * Specifies the name of the Active Directory service
     * account mapped to this role.
     */
    serviceAccountName?: pulumi.Input<string>;
    /**
     * The password time-to-live in seconds. Defaults to the configuration
     * ttl if not provided.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SecretRole resource.
 */
export interface SecretRoleArgs {
    /**
     * The path the AD secret backend is mounted at,
     * with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    role: pulumi.Input<string>;
    /**
     * Specifies the name of the Active Directory service
     * account mapped to this role.
     */
    serviceAccountName: pulumi.Input<string>;
    /**
     * The password time-to-live in seconds. Defaults to the configuration
     * ttl if not provided.
     */
    ttl?: pulumi.Input<number>;
}
