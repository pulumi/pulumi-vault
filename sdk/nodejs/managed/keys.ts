// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A resource that manages the lifecycle of all [Managed Keys](https://www.vaultproject.io/docs/enterprise/managed-keys) in Vault.
 *
 * **Note** this feature is available only with Vault Enterprise.
 *
 * ## Import
 *
 * Mounts can be imported using the `id` of `default`, e.g.
 *
 * ```sh
 * $ pulumi import vault:managed/keys:Keys keys default
 * ```
 */
export class Keys extends pulumi.CustomResource {
    /**
     * Get an existing Keys resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeysState, opts?: pulumi.CustomResourceOptions): Keys {
        return new Keys(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:managed/keys:Keys';

    /**
     * Returns true if the given object is an instance of Keys.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Keys {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Keys.__pulumiType;
    }

    /**
     * Configuration block for AWS Managed Keys
     */
    public readonly aws!: pulumi.Output<outputs.managed.KeysAw[] | undefined>;
    /**
     * Configuration block for Azure Managed Keys
     */
    public readonly azures!: pulumi.Output<outputs.managed.KeysAzure[] | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Configuration block for PKCS Managed Keys
     */
    public readonly pkcs!: pulumi.Output<outputs.managed.KeysPkc[] | undefined>;

    /**
     * Create a Keys resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeysArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeysArgs | KeysState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeysState | undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["azures"] = state ? state.azures : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["pkcs"] = state ? state.pkcs : undefined;
        } else {
            const args = argsOrState as KeysArgs | undefined;
            resourceInputs["aws"] = args ? args.aws : undefined;
            resourceInputs["azures"] = args ? args.azures : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["pkcs"] = args ? args.pkcs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Keys.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Keys resources.
 */
export interface KeysState {
    /**
     * Configuration block for AWS Managed Keys
     */
    aws?: pulumi.Input<pulumi.Input<inputs.managed.KeysAw>[]>;
    /**
     * Configuration block for Azure Managed Keys
     */
    azures?: pulumi.Input<pulumi.Input<inputs.managed.KeysAzure>[]>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Configuration block for PKCS Managed Keys
     */
    pkcs?: pulumi.Input<pulumi.Input<inputs.managed.KeysPkc>[]>;
}

/**
 * The set of arguments for constructing a Keys resource.
 */
export interface KeysArgs {
    /**
     * Configuration block for AWS Managed Keys
     */
    aws?: pulumi.Input<pulumi.Input<inputs.managed.KeysAw>[]>;
    /**
     * Configuration block for Azure Managed Keys
     */
    azures?: pulumi.Input<pulumi.Input<inputs.managed.KeysAzure>[]>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Configuration block for PKCS Managed Keys
     */
    pkcs?: pulumi.Input<pulumi.Input<inputs.managed.KeysPkc>[]>;
}
