// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { SyncAssociationArgs, SyncAssociationState } from "./syncAssociation";
export type SyncAssociation = import("./syncAssociation").SyncAssociation;
export const SyncAssociation: typeof import("./syncAssociation").SyncAssociation = null as any;
utilities.lazyLoad(exports, ["SyncAssociation"], () => require("./syncAssociation"));

export { SyncAwsDestinationArgs, SyncAwsDestinationState } from "./syncAwsDestination";
export type SyncAwsDestination = import("./syncAwsDestination").SyncAwsDestination;
export const SyncAwsDestination: typeof import("./syncAwsDestination").SyncAwsDestination = null as any;
utilities.lazyLoad(exports, ["SyncAwsDestination"], () => require("./syncAwsDestination"));

export { SyncAzureDestinationArgs, SyncAzureDestinationState } from "./syncAzureDestination";
export type SyncAzureDestination = import("./syncAzureDestination").SyncAzureDestination;
export const SyncAzureDestination: typeof import("./syncAzureDestination").SyncAzureDestination = null as any;
utilities.lazyLoad(exports, ["SyncAzureDestination"], () => require("./syncAzureDestination"));

export { SyncConfigArgs, SyncConfigState } from "./syncConfig";
export type SyncConfig = import("./syncConfig").SyncConfig;
export const SyncConfig: typeof import("./syncConfig").SyncConfig = null as any;
utilities.lazyLoad(exports, ["SyncConfig"], () => require("./syncConfig"));

export { SyncGcpDestinationArgs, SyncGcpDestinationState } from "./syncGcpDestination";
export type SyncGcpDestination = import("./syncGcpDestination").SyncGcpDestination;
export const SyncGcpDestination: typeof import("./syncGcpDestination").SyncGcpDestination = null as any;
utilities.lazyLoad(exports, ["SyncGcpDestination"], () => require("./syncGcpDestination"));

export { SyncGhDestinationArgs, SyncGhDestinationState } from "./syncGhDestination";
export type SyncGhDestination = import("./syncGhDestination").SyncGhDestination;
export const SyncGhDestination: typeof import("./syncGhDestination").SyncGhDestination = null as any;
utilities.lazyLoad(exports, ["SyncGhDestination"], () => require("./syncGhDestination"));

export { SyncGithubAppsArgs, SyncGithubAppsState } from "./syncGithubApps";
export type SyncGithubApps = import("./syncGithubApps").SyncGithubApps;
export const SyncGithubApps: typeof import("./syncGithubApps").SyncGithubApps = null as any;
utilities.lazyLoad(exports, ["SyncGithubApps"], () => require("./syncGithubApps"));

export { SyncVercelDestinationArgs, SyncVercelDestinationState } from "./syncVercelDestination";
export type SyncVercelDestination = import("./syncVercelDestination").SyncVercelDestination;
export const SyncVercelDestination: typeof import("./syncVercelDestination").SyncVercelDestination = null as any;
utilities.lazyLoad(exports, ["SyncVercelDestination"], () => require("./syncVercelDestination"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vault:secrets/syncAssociation:SyncAssociation":
                return new SyncAssociation(name, <any>undefined, { urn })
            case "vault:secrets/syncAwsDestination:SyncAwsDestination":
                return new SyncAwsDestination(name, <any>undefined, { urn })
            case "vault:secrets/syncAzureDestination:SyncAzureDestination":
                return new SyncAzureDestination(name, <any>undefined, { urn })
            case "vault:secrets/syncConfig:SyncConfig":
                return new SyncConfig(name, <any>undefined, { urn })
            case "vault:secrets/syncGcpDestination:SyncGcpDestination":
                return new SyncGcpDestination(name, <any>undefined, { urn })
            case "vault:secrets/syncGhDestination:SyncGhDestination":
                return new SyncGhDestination(name, <any>undefined, { urn })
            case "vault:secrets/syncGithubApps:SyncGithubApps":
                return new SyncGithubApps(name, <any>undefined, { urn })
            case "vault:secrets/syncVercelDestination:SyncVercelDestination":
                return new SyncVercelDestination(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vault", "secrets/syncAssociation", _module)
pulumi.runtime.registerResourceModule("vault", "secrets/syncAwsDestination", _module)
pulumi.runtime.registerResourceModule("vault", "secrets/syncAzureDestination", _module)
pulumi.runtime.registerResourceModule("vault", "secrets/syncConfig", _module)
pulumi.runtime.registerResourceModule("vault", "secrets/syncGcpDestination", _module)
pulumi.runtime.registerResourceModule("vault", "secrets/syncGhDestination", _module)
pulumi.runtime.registerResourceModule("vault", "secrets/syncGithubApps", _module)
pulumi.runtime.registerResourceModule("vault", "secrets/syncVercelDestination", _module)
