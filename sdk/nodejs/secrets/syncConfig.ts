// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Configures the secret sync global config.
 * The config is global and can only be managed in the root namespace.
 *
 * > **Important** The config is global so the vault.secrets.SyncConfig resource must not be defined
 * multiple times for the same Vault server. If multiple definition exists, the last one applied will be
 * effective.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const globalConfig = new vault.secrets.SyncConfig("globalConfig", {
 *     disabled: true,
 *     queueCapacity: 500000,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import vault:secrets/syncConfig:SyncConfig config global_config
 * ```
 */
export class SyncConfig extends pulumi.CustomResource {
    /**
     * Get an existing SyncConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyncConfigState, opts?: pulumi.CustomResourceOptions): SyncConfig {
        return new SyncConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:secrets/syncConfig:SyncConfig';

    /**
     * Returns true if the given object is an instance of SyncConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyncConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncConfig.__pulumiType;
    }

    /**
     * Disables the syncing process between Vault and external destinations. Defaults to `false`.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The namespace to provision the resource in.
     * This resource can only be configured in the root namespace.
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
     */
    public readonly queueCapacity!: pulumi.Output<number | undefined>;

    /**
     * Create a SyncConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SyncConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyncConfigArgs | SyncConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyncConfigState | undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["queueCapacity"] = state ? state.queueCapacity : undefined;
        } else {
            const args = argsOrState as SyncConfigArgs | undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["queueCapacity"] = args ? args.queueCapacity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyncConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyncConfig resources.
 */
export interface SyncConfigState {
    /**
     * Disables the syncing process between Vault and external destinations. Defaults to `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The namespace to provision the resource in.
     * This resource can only be configured in the root namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
     */
    queueCapacity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SyncConfig resource.
 */
export interface SyncConfigArgs {
    /**
     * Disables the syncing process between Vault and external destinations. Defaults to `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The namespace to provision the resource in.
     * This resource can only be configured in the root namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
     */
    queueCapacity?: pulumi.Input<number>;
}
