// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const kvv2 = new vault.Mount("kvv2", {
 *     path: "kvv2",
 *     type: "kv",
 *     options: {
 *         version: "2",
 *     },
 *     description: "KV Version 2 secret engine mount",
 * });
 * const token = new vault.kv.SecretV2("token", {
 *     mount: kvv2.path,
 *     dataJson: JSON.stringify({
 *         dev: "B!gS3cr3t",
 *         prod: "S3cureP4$$",
 *     }),
 * });
 * const gh = new vault.secrets.SyncGhDestination("gh", {
 *     accessToken: _var.access_token,
 *     repositoryOwner: _var.repo_owner,
 *     repositoryName: "repo-name-example",
 *     secretNameTemplate: "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}",
 * });
 * const ghToken = new vault.secrets.SyncAssociation("ghToken", {
 *     type: gh.type,
 *     mount: kvv2.path,
 *     secretName: token.name,
 * });
 * ```
 */
export class SyncAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SyncAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyncAssociationState, opts?: pulumi.CustomResourceOptions): SyncAssociation {
        return new SyncAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:secrets/syncAssociation:SyncAssociation';

    /**
     * Returns true if the given object is an instance of SyncAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyncAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncAssociation.__pulumiType;
    }

    /**
     * Specifies the mount where the secret is located.
     */
    public readonly mount!: pulumi.Output<string>;
    /**
     * Specifies the name of the destination.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the secret to synchronize.
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * Specifies the status of the association (for eg. `SYNCED`).
     */
    public /*out*/ readonly syncStatus!: pulumi.Output<string>;
    /**
     * Specifies the destination type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Duration string specifying when the secret was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a SyncAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyncAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyncAssociationArgs | SyncAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyncAssociationState | undefined;
            resourceInputs["mount"] = state ? state.mount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["syncStatus"] = state ? state.syncStatus : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as SyncAssociationArgs | undefined;
            if ((!args || args.mount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mount'");
            }
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["mount"] = args ? args.mount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["syncStatus"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyncAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyncAssociation resources.
 */
export interface SyncAssociationState {
    /**
     * Specifies the mount where the secret is located.
     */
    mount?: pulumi.Input<string>;
    /**
     * Specifies the name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the name of the secret to synchronize.
     */
    secretName?: pulumi.Input<string>;
    /**
     * Specifies the status of the association (for eg. `SYNCED`).
     */
    syncStatus?: pulumi.Input<string>;
    /**
     * Specifies the destination type.
     */
    type?: pulumi.Input<string>;
    /**
     * Duration string specifying when the secret was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SyncAssociation resource.
 */
export interface SyncAssociationArgs {
    /**
     * Specifies the mount where the secret is located.
     */
    mount: pulumi.Input<string>;
    /**
     * Specifies the name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the name of the secret to synchronize.
     */
    secretName: pulumi.Input<string>;
    /**
     * Specifies the destination type.
     */
    type: pulumi.Input<string>;
}
