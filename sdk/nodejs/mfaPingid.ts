// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource to manage [PingID MFA](https://www.vaultproject.io/docs/enterprise/mfa/mfa-pingid).
 *
 * **Note** this feature is available only with Vault Enterprise.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const config = new pulumi.Config();
 * const settingsFile = config.requireObject("settingsFile");
 * const userpass = new vault.AuthBackend("userpass", {
 *     type: "userpass",
 *     path: "userpass",
 * });
 * const myPingid = new vault.MfaPingid("myPingid", {
 *     mountAccessor: userpass.accessor,
 *     usernameFormat: "user@example.com",
 *     settingsFileBase64: settingsFile,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Mounts can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:index/mfaPingid:MfaPingid my_pingid my_pingid
 * ```
 */
export class MfaPingid extends pulumi.CustomResource {
    /**
     * Get an existing MfaPingid resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaPingidState, opts?: pulumi.CustomResourceOptions): MfaPingid {
        return new MfaPingid(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/mfaPingid:MfaPingid';

    /**
     * Returns true if the given object is an instance of MfaPingid.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MfaPingid {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MfaPingid.__pulumiType;
    }

    /**
     * `(string)` – Admin URL computed by Vault
     */
    public /*out*/ readonly adminUrl!: pulumi.Output<string>;
    /**
     * `(string)` – Authenticator URL computed by Vault
     */
    public /*out*/ readonly authenticatorUrl!: pulumi.Output<string>;
    /**
     * `(string)` – IDP URL computed by Vault
     */
    public /*out*/ readonly idpUrl!: pulumi.Output<string>;
    /**
     * `(string: <required>)` - The mount to tie this method to for use in automatic mappings. 
     * The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
     */
    public readonly mountAccessor!: pulumi.Output<string>;
    /**
     * `(string: <required>)` – Name of the MFA method.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * `(string)` – Namespace ID computed by Vault
     */
    public /*out*/ readonly namespaceId!: pulumi.Output<string>;
    /**
     * `(string)` – Org Alias computed by Vault
     */
    public /*out*/ readonly orgAlias!: pulumi.Output<string>;
    /**
     * `(string: <required>)` - A base64-encoded third-party settings file retrieved
     * from PingID's configuration page.
     */
    public readonly settingsFileBase64!: pulumi.Output<string>;
    /**
     * `(string)` – Type of configuration computed by Vault
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * `(string)` – If set to true, enables use of PingID signature. Computed by Vault
     */
    public /*out*/ readonly useSignature!: pulumi.Output<boolean>;
    /**
     * `(string)` - A format string for mapping Identity names to MFA method names. 
     * Values to substitute should be placed in `{{}}`. For example, `"{{alias.name}}@example.com"`.
     * If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
     * - alias.name: The name returned by the mount configured via the `mountAccessor` parameter
     * - entity.name: The name configured for the Entity
     * - alias.metadata.`<key>`: The value of the Alias's metadata parameter
     * - entity.metadata.`<key>`: The value of the Entity's metadata parameter
     */
    public readonly usernameFormat!: pulumi.Output<string | undefined>;

    /**
     * Create a MfaPingid resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MfaPingidArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaPingidArgs | MfaPingidState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaPingidState | undefined;
            resourceInputs["adminUrl"] = state ? state.adminUrl : undefined;
            resourceInputs["authenticatorUrl"] = state ? state.authenticatorUrl : undefined;
            resourceInputs["idpUrl"] = state ? state.idpUrl : undefined;
            resourceInputs["mountAccessor"] = state ? state.mountAccessor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["orgAlias"] = state ? state.orgAlias : undefined;
            resourceInputs["settingsFileBase64"] = state ? state.settingsFileBase64 : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useSignature"] = state ? state.useSignature : undefined;
            resourceInputs["usernameFormat"] = state ? state.usernameFormat : undefined;
        } else {
            const args = argsOrState as MfaPingidArgs | undefined;
            if ((!args || args.mountAccessor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mountAccessor'");
            }
            if ((!args || args.settingsFileBase64 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settingsFileBase64'");
            }
            resourceInputs["mountAccessor"] = args ? args.mountAccessor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["settingsFileBase64"] = args ? args.settingsFileBase64 : undefined;
            resourceInputs["usernameFormat"] = args ? args.usernameFormat : undefined;
            resourceInputs["adminUrl"] = undefined /*out*/;
            resourceInputs["authenticatorUrl"] = undefined /*out*/;
            resourceInputs["idpUrl"] = undefined /*out*/;
            resourceInputs["namespaceId"] = undefined /*out*/;
            resourceInputs["orgAlias"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["useSignature"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MfaPingid.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MfaPingid resources.
 */
export interface MfaPingidState {
    /**
     * `(string)` – Admin URL computed by Vault
     */
    adminUrl?: pulumi.Input<string>;
    /**
     * `(string)` – Authenticator URL computed by Vault
     */
    authenticatorUrl?: pulumi.Input<string>;
    /**
     * `(string)` – IDP URL computed by Vault
     */
    idpUrl?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - The mount to tie this method to for use in automatic mappings. 
     * The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
     */
    mountAccessor?: pulumi.Input<string>;
    /**
     * `(string: <required>)` – Name of the MFA method.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `(string)` – Namespace ID computed by Vault
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `(string)` – Org Alias computed by Vault
     */
    orgAlias?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A base64-encoded third-party settings file retrieved
     * from PingID's configuration page.
     */
    settingsFileBase64?: pulumi.Input<string>;
    /**
     * `(string)` – Type of configuration computed by Vault
     */
    type?: pulumi.Input<string>;
    /**
     * `(string)` – If set to true, enables use of PingID signature. Computed by Vault
     */
    useSignature?: pulumi.Input<boolean>;
    /**
     * `(string)` - A format string for mapping Identity names to MFA method names. 
     * Values to substitute should be placed in `{{}}`. For example, `"{{alias.name}}@example.com"`.
     * If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
     * - alias.name: The name returned by the mount configured via the `mountAccessor` parameter
     * - entity.name: The name configured for the Entity
     * - alias.metadata.`<key>`: The value of the Alias's metadata parameter
     * - entity.metadata.`<key>`: The value of the Entity's metadata parameter
     */
    usernameFormat?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MfaPingid resource.
 */
export interface MfaPingidArgs {
    /**
     * `(string: <required>)` - The mount to tie this method to for use in automatic mappings. 
     * The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
     */
    mountAccessor: pulumi.Input<string>;
    /**
     * `(string: <required>)` – Name of the MFA method.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * `(string: <required>)` - A base64-encoded third-party settings file retrieved
     * from PingID's configuration page.
     */
    settingsFileBase64: pulumi.Input<string>;
    /**
     * `(string)` - A format string for mapping Identity names to MFA method names. 
     * Values to substitute should be placed in `{{}}`. For example, `"{{alias.name}}@example.com"`.
     * If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
     * - alias.name: The name returned by the mount configured via the `mountAccessor` parameter
     * - entity.name: The name configured for the Entity
     * - alias.metadata.`<key>`: The value of the Alias's metadata parameter
     * - entity.metadata.`<key>`: The value of the Entity's metadata parameter
     */
    usernameFormat?: pulumi.Input<string>;
}
