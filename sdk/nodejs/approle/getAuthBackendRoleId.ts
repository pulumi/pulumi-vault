// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Reads the Role ID of an AppRole from a Vault server.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * export = async () => {
 *     const role = await vault.appRole.getAuthBackendRoleId({
 *         backend: "my-approle-backend",
 *         roleName: "my-role",
 *     });
 *     return {
 *         "role-id": role.roleId,
 *     };
 * }
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getAuthBackendRoleId(args: GetAuthBackendRoleIdArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthBackendRoleIdResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:appRole/getAuthBackendRoleId:getAuthBackendRoleId", {
        "backend": args.backend,
        "namespace": args.namespace,
        "roleName": args.roleName,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthBackendRoleId.
 */
export interface GetAuthBackendRoleIdArgs {
    /**
     * The unique name for the AppRole backend the role to
     * retrieve a RoleID for resides in. Defaults to "approle".
     */
    backend?: string;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: string;
    /**
     * The name of the role to retrieve the Role ID for.
     */
    roleName: string;
}

/**
 * A collection of values returned by getAuthBackendRoleId.
 */
export interface GetAuthBackendRoleIdResult {
    readonly backend?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly namespace?: string;
    /**
     * The RoleID of the role.
     */
    readonly roleId: string;
    readonly roleName: string;
}
/**
 * Reads the Role ID of an AppRole from a Vault server.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * export = async () => {
 *     const role = await vault.appRole.getAuthBackendRoleId({
 *         backend: "my-approle-backend",
 *         roleName: "my-role",
 *     });
 *     return {
 *         "role-id": role.roleId,
 *     };
 * }
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getAuthBackendRoleIdOutput(args: GetAuthBackendRoleIdOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthBackendRoleIdResult> {
    return pulumi.output(args).apply((a: any) => getAuthBackendRoleId(a, opts))
}

/**
 * A collection of arguments for invoking getAuthBackendRoleId.
 */
export interface GetAuthBackendRoleIdOutputArgs {
    /**
     * The unique name for the AppRole backend the role to
     * retrieve a RoleID for resides in. Defaults to "approle".
     */
    backend?: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The name of the role to retrieve the Role ID for.
     */
    roleName: pulumi.Input<string>;
}
