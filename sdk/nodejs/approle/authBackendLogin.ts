// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Logs into Vault using the AppRole auth backend. See the [Vault
 * documentation](https://www.vaultproject.io/docs/auth/approle) for more
 * information.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const approle = new vault.AuthBackend("approle", {type: "approle"});
 * const example = new vault.approle.AuthBackendRole("example", {
 *     backend: approle.path,
 *     roleName: "test-role",
 *     tokenPolicies: [
 *         "default",
 *         "dev",
 *         "prod",
 *     ],
 * });
 * const id = new vault.approle.AuthBackendRoleSecretId("id", {
 *     backend: approle.path,
 *     roleName: example.roleName,
 * });
 * const login = new vault.approle.AuthBackendLogin("login", {
 *     backend: approle.path,
 *     roleId: example.roleId,
 *     secretId: id.secretId,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class AuthBackendLogin extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackendLogin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendLoginState, opts?: pulumi.CustomResourceOptions): AuthBackendLogin {
        return new AuthBackendLogin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:appRole/authBackendLogin:AuthBackendLogin';

    /**
     * Returns true if the given object is an instance of AuthBackendLogin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackendLogin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackendLogin.__pulumiType;
    }

    /**
     * The accessor for the token.
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * The unique path of the Vault backend to log in with.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * The Vault token created.
     */
    public /*out*/ readonly clientToken!: pulumi.Output<string>;
    /**
     * How long the token is valid for, in seconds.
     */
    public /*out*/ readonly leaseDuration!: pulumi.Output<number>;
    /**
     * The date and time the lease started, in RFC 3339 format.
     */
    public /*out*/ readonly leaseStarted!: pulumi.Output<string>;
    /**
     * The metadata associated with the token.
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * A list of policies applied to the token.
     */
    public /*out*/ readonly policies!: pulumi.Output<string[]>;
    /**
     * Whether the token is renewable or not.
     */
    public /*out*/ readonly renewable!: pulumi.Output<boolean>;
    /**
     * The ID of the role to log in with.
     */
    public readonly roleId!: pulumi.Output<string>;
    /**
     * The secret ID of the role to log in with. Required
     * unless `bindSecretId` is set to false on the role.
     */
    public readonly secretId!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthBackendLogin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendLoginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendLoginArgs | AuthBackendLoginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthBackendLoginState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["clientToken"] = state ? state.clientToken : undefined;
            resourceInputs["leaseDuration"] = state ? state.leaseDuration : undefined;
            resourceInputs["leaseStarted"] = state ? state.leaseStarted : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["renewable"] = state ? state.renewable : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
        } else {
            const args = argsOrState as AuthBackendLoginArgs | undefined;
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["secretId"] = args?.secretId ? pulumi.secret(args.secretId) : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
            resourceInputs["clientToken"] = undefined /*out*/;
            resourceInputs["leaseDuration"] = undefined /*out*/;
            resourceInputs["leaseStarted"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["renewable"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientToken", "secretId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthBackendLogin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackendLogin resources.
 */
export interface AuthBackendLoginState {
    /**
     * The accessor for the token.
     */
    accessor?: pulumi.Input<string>;
    /**
     * The unique path of the Vault backend to log in with.
     */
    backend?: pulumi.Input<string>;
    /**
     * The Vault token created.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * How long the token is valid for, in seconds.
     */
    leaseDuration?: pulumi.Input<number>;
    /**
     * The date and time the lease started, in RFC 3339 format.
     */
    leaseStarted?: pulumi.Input<string>;
    /**
     * The metadata associated with the token.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * A list of policies applied to the token.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the token is renewable or not.
     */
    renewable?: pulumi.Input<boolean>;
    /**
     * The ID of the role to log in with.
     */
    roleId?: pulumi.Input<string>;
    /**
     * The secret ID of the role to log in with. Required
     * unless `bindSecretId` is set to false on the role.
     */
    secretId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthBackendLogin resource.
 */
export interface AuthBackendLoginArgs {
    /**
     * The unique path of the Vault backend to log in with.
     */
    backend?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The ID of the role to log in with.
     */
    roleId: pulumi.Input<string>;
    /**
     * The secret ID of the role to log in with. Required
     * unless `bindSecretId` is set to false on the role.
     */
    secretId?: pulumi.Input<string>;
}
