// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const rabbitmq = new vault.rabbitmq.SecretBackend("rabbitmq", {
 *     connectionUri: "https://.....",
 *     username: "user",
 *     password: "password",
 * });
 * const role = new vault.rabbitmq.SecretBackendRole("role", {
 *     backend: rabbitmq.path,
 *     name: "deploy",
 *     tags: "tag1,tag2",
 *     vhosts: [{
 *         host: "/",
 *         configure: "",
 *         read: ".*",
 *         write: "",
 *     }],
 *     vhostTopics: [{
 *         vhosts: [{
 *             topic: "amq.topic",
 *             read: ".*",
 *             write: "",
 *         }],
 *         host: "/",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * RabbitMQ secret backend roles can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:rabbitMq/secretBackendRole:SecretBackendRole role rabbitmq/roles/deploy
 * ```
 */
export class SecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendRoleState, opts?: pulumi.CustomResourceOptions): SecretBackendRole {
        return new SecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:rabbitMq/secretBackendRole:SecretBackendRole';

    /**
     * Returns true if the given object is an instance of SecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendRole.__pulumiType;
    }

    /**
     * The path the RabbitMQ secret backend is mounted at,
     * with no leading or trailing `/`s.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Specifies a comma-separated RabbitMQ management tags.
     */
    declare public readonly tags: pulumi.Output<string | undefined>;
    /**
     * Specifies a map of virtual hosts and exchanges to topic permissions. This option requires RabbitMQ 3.7.0 or later.
     */
    declare public readonly vhostTopics: pulumi.Output<outputs.rabbitMq.SecretBackendRoleVhostTopic[] | undefined>;
    /**
     * Specifies a map of virtual hosts to permissions.
     */
    declare public readonly vhosts: pulumi.Output<outputs.rabbitMq.SecretBackendRoleVhost[] | undefined>;

    /**
     * Create a SecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendRoleArgs | SecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendRoleState | undefined;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vhostTopics"] = state?.vhostTopics;
            resourceInputs["vhosts"] = state?.vhosts;
        } else {
            const args = argsOrState as SecretBackendRoleArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["backend"] = args?.backend;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vhostTopics"] = args?.vhostTopics;
            resourceInputs["vhosts"] = args?.vhosts;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendRole resources.
 */
export interface SecretBackendRoleState {
    /**
     * The path the RabbitMQ secret backend is mounted at,
     * with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies a comma-separated RabbitMQ management tags.
     */
    tags?: pulumi.Input<string>;
    /**
     * Specifies a map of virtual hosts and exchanges to topic permissions. This option requires RabbitMQ 3.7.0 or later.
     */
    vhostTopics?: pulumi.Input<pulumi.Input<inputs.rabbitMq.SecretBackendRoleVhostTopic>[]>;
    /**
     * Specifies a map of virtual hosts to permissions.
     */
    vhosts?: pulumi.Input<pulumi.Input<inputs.rabbitMq.SecretBackendRoleVhost>[]>;
}

/**
 * The set of arguments for constructing a SecretBackendRole resource.
 */
export interface SecretBackendRoleArgs {
    /**
     * The path the RabbitMQ secret backend is mounted at,
     * with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies a comma-separated RabbitMQ management tags.
     */
    tags?: pulumi.Input<string>;
    /**
     * Specifies a map of virtual hosts and exchanges to topic permissions. This option requires RabbitMQ 3.7.0 or later.
     */
    vhostTopics?: pulumi.Input<pulumi.Input<inputs.rabbitMq.SecretBackendRoleVhostTopic>[]>;
    /**
     * Specifies a map of virtual hosts to permissions.
     */
    vhosts?: pulumi.Input<pulumi.Input<inputs.rabbitMq.SecretBackendRoleVhost>[]>;
}
