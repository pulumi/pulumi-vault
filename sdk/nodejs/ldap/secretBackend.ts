// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const config = new vault.ldap.SecretBackend("config", {
 *     binddn: "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
 *     bindpass: "SuperSecretPassw0rd",
 *     insecureTls: true,
 *     path: "my-custom-ldap",
 *     url: "ldaps://localhost",
 *     userdn: "CN=Users,DC=corp,DC=example,DC=net",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * LDAP secret backend can be imported using the `${mount}/config`, e.g.
 *
 * ```sh
 * $ pulumi import vault:ldap/secretBackend:SecretBackend config ldap/config
 * ```
 */
export class SecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendState, opts?: pulumi.CustomResourceOptions): SecretBackend {
        return new SecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:ldap/secretBackend:SecretBackend';

    /**
     * Returns true if the given object is an instance of SecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackend.__pulumiType;
    }

    /**
     * Accessor of the mount
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    public readonly allowedManagedKeys!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    public readonly auditNonHmacRequestKeys!: pulumi.Output<string[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    public readonly auditNonHmacResponseKeys!: pulumi.Output<string[]>;
    /**
     * Distinguished name of object to bind when performing user and group search.
     */
    public readonly binddn!: pulumi.Output<string>;
    /**
     * Password to use along with binddn when performing user search.
     */
    public readonly bindpass!: pulumi.Output<string>;
    /**
     * CA certificate to use when verifying LDAP server certificate, must be
     * x509 PEM encoded.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    /**
     * Client certificate to provide to the LDAP server, must be x509 PEM encoded.
     */
    public readonly clientTlsCert!: pulumi.Output<string | undefined>;
    /**
     * Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
     */
    public readonly clientTlsKey!: pulumi.Output<string | undefined>;
    /**
     * Timeout, in seconds, when attempting to connect to the LDAP server before trying
     * the next URL in the configuration.
     */
    public readonly connectionTimeout!: pulumi.Output<number | undefined>;
    /**
     * Default lease duration for secrets in seconds.
     */
    public readonly defaultLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * Human-friendly description of the mount for the Active Directory backend.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    public readonly externalEntropyAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Skip LDAP server SSL Certificate verification. This is not recommended for production.
     * Defaults to `false`.
     */
    public readonly insecureTls!: pulumi.Output<boolean | undefined>;
    /**
     * **Deprecated** use `passwordPolicy`. The desired length of passwords that Vault generates.
     * *Mutually exclusive with `passwordPolicy` on vault-1.11+*
     *
     * @deprecated Length is deprecated and passwordPolicy should be used with Vault >= 1.5.
     */
    public readonly length!: pulumi.Output<number>;
    /**
     * Mark the secrets engine as local-only. Local engines are not replicated or removed by
     * replication.Tolerance duration to use when checking the last rotation time.
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    public readonly maxLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    public readonly options!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Name of the password policy to use to generate passwords.
     */
    public readonly passwordPolicy!: pulumi.Output<string | undefined>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * Timeout, in seconds, for the connection when making requests against the server
     * before returning back an error.
     */
    public readonly requestTimeout!: pulumi.Output<number>;
    /**
     * The LDAP schema to use when storing entry passwords. Valid schemas include `openldap`, `ad`, and `racf`. Default is `openldap`.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    public readonly sealWrap!: pulumi.Output<boolean>;
    /**
     * Issue a StartTLS command after establishing unencrypted connection.
     */
    public readonly starttls!: pulumi.Output<boolean>;
    /**
     * Enables userPrincipalDomain login with [username]@UPNDomain.
     */
    public readonly upndomain!: pulumi.Output<string>;
    /**
     * LDAP URL to connect to. Multiple URLs can be specified by concatenating
     * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Attribute used when searching users. Defaults to `cn`.
     */
    public readonly userattr!: pulumi.Output<string>;
    /**
     * LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
     */
    public readonly userdn!: pulumi.Output<string | undefined>;

    /**
     * Create a SecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendArgs | SecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["allowedManagedKeys"] = state ? state.allowedManagedKeys : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = state ? state.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = state ? state.auditNonHmacResponseKeys : undefined;
            resourceInputs["binddn"] = state ? state.binddn : undefined;
            resourceInputs["bindpass"] = state ? state.bindpass : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["clientTlsCert"] = state ? state.clientTlsCert : undefined;
            resourceInputs["clientTlsKey"] = state ? state.clientTlsKey : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = state ? state.defaultLeaseTtlSeconds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["externalEntropyAccess"] = state ? state.externalEntropyAccess : undefined;
            resourceInputs["insecureTls"] = state ? state.insecureTls : undefined;
            resourceInputs["length"] = state ? state.length : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = state ? state.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["sealWrap"] = state ? state.sealWrap : undefined;
            resourceInputs["starttls"] = state ? state.starttls : undefined;
            resourceInputs["upndomain"] = state ? state.upndomain : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userattr"] = state ? state.userattr : undefined;
            resourceInputs["userdn"] = state ? state.userdn : undefined;
        } else {
            const args = argsOrState as SecretBackendArgs | undefined;
            if ((!args || args.binddn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'binddn'");
            }
            if ((!args || args.bindpass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindpass'");
            }
            resourceInputs["allowedManagedKeys"] = args ? args.allowedManagedKeys : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = args ? args.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = args ? args.auditNonHmacResponseKeys : undefined;
            resourceInputs["binddn"] = args ? args.binddn : undefined;
            resourceInputs["bindpass"] = args?.bindpass ? pulumi.secret(args.bindpass) : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["clientTlsCert"] = args?.clientTlsCert ? pulumi.secret(args.clientTlsCert) : undefined;
            resourceInputs["clientTlsKey"] = args?.clientTlsKey ? pulumi.secret(args.clientTlsKey) : undefined;
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = args ? args.defaultLeaseTtlSeconds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["externalEntropyAccess"] = args ? args.externalEntropyAccess : undefined;
            resourceInputs["insecureTls"] = args ? args.insecureTls : undefined;
            resourceInputs["length"] = args ? args.length : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = args ? args.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["sealWrap"] = args ? args.sealWrap : undefined;
            resourceInputs["starttls"] = args ? args.starttls : undefined;
            resourceInputs["upndomain"] = args ? args.upndomain : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["userattr"] = args ? args.userattr : undefined;
            resourceInputs["userdn"] = args ? args.userdn : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bindpass", "clientTlsCert", "clientTlsKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackend resources.
 */
export interface SecretBackendState {
    /**
     * Accessor of the mount
     */
    accessor?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Distinguished name of object to bind when performing user and group search.
     */
    binddn?: pulumi.Input<string>;
    /**
     * Password to use along with binddn when performing user search.
     */
    bindpass?: pulumi.Input<string>;
    /**
     * CA certificate to use when verifying LDAP server certificate, must be
     * x509 PEM encoded.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Client certificate to provide to the LDAP server, must be x509 PEM encoded.
     */
    clientTlsCert?: pulumi.Input<string>;
    /**
     * Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
     */
    clientTlsKey?: pulumi.Input<string>;
    /**
     * Timeout, in seconds, when attempting to connect to the LDAP server before trying
     * the next URL in the configuration.
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Default lease duration for secrets in seconds.
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Human-friendly description of the mount for the Active Directory backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * Skip LDAP server SSL Certificate verification. This is not recommended for production.
     * Defaults to `false`.
     */
    insecureTls?: pulumi.Input<boolean>;
    /**
     * **Deprecated** use `passwordPolicy`. The desired length of passwords that Vault generates.
     * *Mutually exclusive with `passwordPolicy` on vault-1.11+*
     *
     * @deprecated Length is deprecated and passwordPolicy should be used with Vault >= 1.5.
     */
    length?: pulumi.Input<number>;
    /**
     * Mark the secrets engine as local-only. Local engines are not replicated or removed by
     * replication.Tolerance duration to use when checking the last rotation time.
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of the password policy to use to generate passwords.
     */
    passwordPolicy?: pulumi.Input<string>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     */
    path?: pulumi.Input<string>;
    /**
     * Timeout, in seconds, for the connection when making requests against the server
     * before returning back an error.
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * The LDAP schema to use when storing entry passwords. Valid schemas include `openldap`, `ad`, and `racf`. Default is `openldap`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Issue a StartTLS command after establishing unencrypted connection.
     */
    starttls?: pulumi.Input<boolean>;
    /**
     * Enables userPrincipalDomain login with [username]@UPNDomain.
     */
    upndomain?: pulumi.Input<string>;
    /**
     * LDAP URL to connect to. Multiple URLs can be specified by concatenating
     * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
     */
    url?: pulumi.Input<string>;
    /**
     * Attribute used when searching users. Defaults to `cn`.
     */
    userattr?: pulumi.Input<string>;
    /**
     * LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
     */
    userdn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackend resource.
 */
export interface SecretBackendArgs {
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Distinguished name of object to bind when performing user and group search.
     */
    binddn: pulumi.Input<string>;
    /**
     * Password to use along with binddn when performing user search.
     */
    bindpass: pulumi.Input<string>;
    /**
     * CA certificate to use when verifying LDAP server certificate, must be
     * x509 PEM encoded.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Client certificate to provide to the LDAP server, must be x509 PEM encoded.
     */
    clientTlsCert?: pulumi.Input<string>;
    /**
     * Client certificate key to provide to the LDAP server, must be x509 PEM encoded.
     */
    clientTlsKey?: pulumi.Input<string>;
    /**
     * Timeout, in seconds, when attempting to connect to the LDAP server before trying
     * the next URL in the configuration.
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Default lease duration for secrets in seconds.
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Human-friendly description of the mount for the Active Directory backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * Skip LDAP server SSL Certificate verification. This is not recommended for production.
     * Defaults to `false`.
     */
    insecureTls?: pulumi.Input<boolean>;
    /**
     * **Deprecated** use `passwordPolicy`. The desired length of passwords that Vault generates.
     * *Mutually exclusive with `passwordPolicy` on vault-1.11+*
     *
     * @deprecated Length is deprecated and passwordPolicy should be used with Vault >= 1.5.
     */
    length?: pulumi.Input<number>;
    /**
     * Mark the secrets engine as local-only. Local engines are not replicated or removed by
     * replication.Tolerance duration to use when checking the last rotation time.
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of the password policy to use to generate passwords.
     */
    passwordPolicy?: pulumi.Input<string>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     */
    path?: pulumi.Input<string>;
    /**
     * Timeout, in seconds, for the connection when making requests against the server
     * before returning back an error.
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * The LDAP schema to use when storing entry passwords. Valid schemas include `openldap`, `ad`, and `racf`. Default is `openldap`.
     */
    schema?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Issue a StartTLS command after establishing unencrypted connection.
     */
    starttls?: pulumi.Input<boolean>;
    /**
     * Enables userPrincipalDomain login with [username]@UPNDomain.
     */
    upndomain?: pulumi.Input<string>;
    /**
     * LDAP URL to connect to. Multiple URLs can be specified by concatenating
     * them with commas; they will be tried in-order. Defaults to `ldap://127.0.0.1`.
     */
    url?: pulumi.Input<string>;
    /**
     * Attribute used when searching users. Defaults to `cn`.
     */
    userattr?: pulumi.Input<string>;
    /**
     * LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`.
     */
    userdn?: pulumi.Input<string>;
}
