// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const config = new vault.ldap.SecretBackend("config", {
 *     path: "my-custom-ldap",
 *     binddn: "CN=Administrator,CN=Users,DC=corp,DC=example,DC=net",
 *     bindpass: "SuperSecretPassw0rd",
 *     url: "ldaps://localhost",
 *     userdn: "CN=Users,DC=corp,DC=example,DC=net",
 * });
 * const role = new vault.ldap.SecretBackendDynamicRole("role", {
 *     mount: config.path,
 *     roleName: "alice",
 *     creationLdif: `dn: cn={{.Username}},ou=users,dc=learn,dc=example
 * objectClass: person
 * objectClass: top
 * cn: learn
 * sn: {{.Password | utf16le | base64}}
 * memberOf: cn=dev,ou=groups,dc=learn,dc=example
 * userPassword: {{.Password}}
 * `,
 *     deletionLdif: `dn: cn={{.Username}},ou=users,dc=learn,dc=example
 * changetype: delete
 *   rollback_ldif = <<EOT
 * dn: cn={{.Username}},ou=users,dc=learn,dc=example
 * changetype: delete
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * LDAP secret backend dynamic role can be imported using the full path to the role
 * of the form: `<mount_path>/dynamic-role/<role_name>` e.g.
 *
 * ```sh
 * $ pulumi import vault:ldap/secretBackendDynamicRole:SecretBackendDynamicRole role ldap/role/dynamic-role
 * ```
 */
export class SecretBackendDynamicRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendDynamicRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendDynamicRoleState, opts?: pulumi.CustomResourceOptions): SecretBackendDynamicRole {
        return new SecretBackendDynamicRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:ldap/secretBackendDynamicRole:SecretBackendDynamicRole';

    /**
     * Returns true if the given object is an instance of SecretBackendDynamicRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendDynamicRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendDynamicRole.__pulumiType;
    }

    /**
     * A templatized LDIF string used to create a user
     * account. This may contain multiple LDIF entries. The `creationLdif` can also
     * be used to add the user account to an existing group. All LDIF entries are
     * performed in order. If Vault encounters an error while executing the
     * `creationLdif` it will stop at the first error and not execute any remaining
     * LDIF entries. If an error occurs and `rollbackLdif` is specified, the LDIF
     * entries in `rollbackLdif` will be executed. See `rollbackLdif` for more
     * details. This field may optionally be provided as a base64 encoded string.
     */
    declare public readonly creationLdif: pulumi.Output<string>;
    /**
     * Specifies the TTL for the leases associated with this role.
     */
    declare public readonly defaultTtl: pulumi.Output<number | undefined>;
    /**
     * A templatized LDIF string used to delete the
     * user account once its TTL has expired. This may contain multiple LDIF
     * entries. All LDIF entries are performed in order. If Vault encounters an
     * error while executing an entry in the `deletionLdif` it will attempt to
     * continue executing any remaining entries. This field may optionally be
     * provided as a base64 encoded string.
     */
    declare public readonly deletionLdif: pulumi.Output<string>;
    /**
     * Specifies the maximum TTL for the leases associated with this role.
     */
    declare public readonly maxTtl: pulumi.Output<number | undefined>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     */
    declare public readonly mount: pulumi.Output<string | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Name of the role.
     */
    declare public readonly roleName: pulumi.Output<string>;
    /**
     * A templatized LDIF string used to attempt to
     * rollback any changes in the event that execution of the `creationLdif` results
     * in an error. This may contain multiple LDIF entries. All LDIF entries are
     * performed in order. If Vault encounters an error while executing an entry in
     * the `rollbackLdif` it will attempt to continue executing any remaining
     * entries. This field may optionally be provided as a base64 encoded string.
     */
    declare public readonly rollbackLdif: pulumi.Output<string | undefined>;
    /**
     * A template used to generate a dynamic
     * username. This will be used to fill in the `.Username` field within the
     * `creationLdif` string.
     */
    declare public readonly usernameTemplate: pulumi.Output<string | undefined>;

    /**
     * Create a SecretBackendDynamicRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendDynamicRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendDynamicRoleArgs | SecretBackendDynamicRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendDynamicRoleState | undefined;
            resourceInputs["creationLdif"] = state?.creationLdif;
            resourceInputs["defaultTtl"] = state?.defaultTtl;
            resourceInputs["deletionLdif"] = state?.deletionLdif;
            resourceInputs["maxTtl"] = state?.maxTtl;
            resourceInputs["mount"] = state?.mount;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["roleName"] = state?.roleName;
            resourceInputs["rollbackLdif"] = state?.rollbackLdif;
            resourceInputs["usernameTemplate"] = state?.usernameTemplate;
        } else {
            const args = argsOrState as SecretBackendDynamicRoleArgs | undefined;
            if (args?.creationLdif === undefined && !opts.urn) {
                throw new Error("Missing required property 'creationLdif'");
            }
            if (args?.deletionLdif === undefined && !opts.urn) {
                throw new Error("Missing required property 'deletionLdif'");
            }
            if (args?.roleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["creationLdif"] = args?.creationLdif;
            resourceInputs["defaultTtl"] = args?.defaultTtl;
            resourceInputs["deletionLdif"] = args?.deletionLdif;
            resourceInputs["maxTtl"] = args?.maxTtl;
            resourceInputs["mount"] = args?.mount;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["roleName"] = args?.roleName;
            resourceInputs["rollbackLdif"] = args?.rollbackLdif;
            resourceInputs["usernameTemplate"] = args?.usernameTemplate;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendDynamicRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendDynamicRole resources.
 */
export interface SecretBackendDynamicRoleState {
    /**
     * A templatized LDIF string used to create a user
     * account. This may contain multiple LDIF entries. The `creationLdif` can also
     * be used to add the user account to an existing group. All LDIF entries are
     * performed in order. If Vault encounters an error while executing the
     * `creationLdif` it will stop at the first error and not execute any remaining
     * LDIF entries. If an error occurs and `rollbackLdif` is specified, the LDIF
     * entries in `rollbackLdif` will be executed. See `rollbackLdif` for more
     * details. This field may optionally be provided as a base64 encoded string.
     */
    creationLdif?: pulumi.Input<string>;
    /**
     * Specifies the TTL for the leases associated with this role.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * A templatized LDIF string used to delete the
     * user account once its TTL has expired. This may contain multiple LDIF
     * entries. All LDIF entries are performed in order. If Vault encounters an
     * error while executing an entry in the `deletionLdif` it will attempt to
     * continue executing any remaining entries. This field may optionally be
     * provided as a base64 encoded string.
     */
    deletionLdif?: pulumi.Input<string>;
    /**
     * Specifies the maximum TTL for the leases associated with this role.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     */
    mount?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * A templatized LDIF string used to attempt to
     * rollback any changes in the event that execution of the `creationLdif` results
     * in an error. This may contain multiple LDIF entries. All LDIF entries are
     * performed in order. If Vault encounters an error while executing an entry in
     * the `rollbackLdif` it will attempt to continue executing any remaining
     * entries. This field may optionally be provided as a base64 encoded string.
     */
    rollbackLdif?: pulumi.Input<string>;
    /**
     * A template used to generate a dynamic
     * username. This will be used to fill in the `.Username` field within the
     * `creationLdif` string.
     */
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackendDynamicRole resource.
 */
export interface SecretBackendDynamicRoleArgs {
    /**
     * A templatized LDIF string used to create a user
     * account. This may contain multiple LDIF entries. The `creationLdif` can also
     * be used to add the user account to an existing group. All LDIF entries are
     * performed in order. If Vault encounters an error while executing the
     * `creationLdif` it will stop at the first error and not execute any remaining
     * LDIF entries. If an error occurs and `rollbackLdif` is specified, the LDIF
     * entries in `rollbackLdif` will be executed. See `rollbackLdif` for more
     * details. This field may optionally be provided as a base64 encoded string.
     */
    creationLdif: pulumi.Input<string>;
    /**
     * Specifies the TTL for the leases associated with this role.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * A templatized LDIF string used to delete the
     * user account once its TTL has expired. This may contain multiple LDIF
     * entries. All LDIF entries are performed in order. If Vault encounters an
     * error while executing an entry in the `deletionLdif` it will attempt to
     * continue executing any remaining entries. This field may optionally be
     * provided as a base64 encoded string.
     */
    deletionLdif: pulumi.Input<string>;
    /**
     * Specifies the maximum TTL for the leases associated with this role.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `ldap`.
     */
    mount?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName: pulumi.Input<string>;
    /**
     * A templatized LDIF string used to attempt to
     * rollback any changes in the event that execution of the `creationLdif` results
     * in an error. This may contain multiple LDIF entries. All LDIF entries are
     * performed in order. If Vault encounters an error while executing an entry in
     * the `rollbackLdif` it will attempt to continue executing any remaining
     * entries. This field may optionally be provided as a base64 encoded string.
     */
    rollbackLdif?: pulumi.Input<string>;
    /**
     * A template used to generate a dynamic
     * username. This will be used to fill in the `.Username` field within the
     * `creationLdif` string.
     */
    usernameTemplate?: pulumi.Input<string>;
}
