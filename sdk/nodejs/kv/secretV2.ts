// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Writes a KV-V2 secret to a given path in Vault.
 *
 * For more information on Vault's KV-V2 secret backend
 * [see here](https://www.vaultproject.io/docs/secrets/kv/kv-v2).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const kvv2 = new vault.Mount("kvv2", {
 *     path: "kvv2",
 *     type: "kv",
 *     options: {
 *         version: "2",
 *     },
 *     description: "KV Version 2 secret engine mount",
 * });
 * const example = new vault.kv.SecretV2("example", {
 *     mount: kvv2.path,
 *     cas: 1,
 *     deleteAllVersions: true,
 *     dataJson: JSON.stringify({
 *         zip: "zap",
 *         foo: "bar",
 *     }),
 *     customMetadata: {
 *         maxVersions: 5,
 *         data: {
 *             foo: "vault@example.com",
 *             bar: "12345",
 *         },
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Required Vault Capabilities
 *
 * Use of this resource requires the `create` or `update` capability
 * (depending on whether the resource already exists) on the given path,
 * the `delete` capability if the resource is removed from configuration,
 * and the `read` capability for drift detection (by default).
 *
 * ### Custom Metadata Configuration Options
 *
 * * `maxVersions` - (Optional) The number of versions to keep per key.
 *
 * * `casRequired` - (Optional) If true, all keys will require the cas
 * parameter to be set on all write requests.
 *
 * * `deleteVersionAfter` - (Optional) If set, specifies the length of time before
 * a version is deleted. Accepts duration in integer seconds.
 *
 * * `data` - (Optional) A string to string map describing the secret.
 *
 * ## Import
 *
 * KV-V2 secrets can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:kv/secretV2:SecretV2 example kvv2/data/secret
 * ```
 */
export class SecretV2 extends pulumi.CustomResource {
    /**
     * Get an existing SecretV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretV2State, opts?: pulumi.CustomResourceOptions): SecretV2 {
        return new SecretV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:kv/secretV2:SecretV2';

    /**
     * Returns true if the given object is an instance of SecretV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretV2.__pulumiType;
    }

    /**
     * This flag is required if `casRequired` is set to true
     * on either the secret or the engine's config. In order for a
     * write operation to be successful, cas must be set to the current version
     * of the secret.
     */
    public readonly cas!: pulumi.Output<number | undefined>;
    /**
     * A nested block that allows configuring metadata for the
     * KV secret. Refer to the
     * Configuration Options for more info.
     */
    public readonly customMetadata!: pulumi.Output<outputs.kv.SecretV2CustomMetadata>;
    /**
     * A mapping whose keys are the top-level data keys returned from
     * Vault and whose values are the corresponding values. This map can only
     * represent string data, so any non-string values returned from Vault are
     * serialized as JSON.
     */
    public /*out*/ readonly data!: pulumi.Output<{[key: string]: any}>;
    /**
     * JSON-encoded string that will be
     * written as the secret data at the given path.
     */
    public readonly dataJson!: pulumi.Output<string>;
    /**
     * If set to true, permanently deletes all
     * versions for the specified key.
     */
    public readonly deleteAllVersions!: pulumi.Output<boolean | undefined>;
    /**
     * If set to true, disables reading secret from Vault;
     * note: drift won't be detected.
     */
    public readonly disableRead!: pulumi.Output<boolean | undefined>;
    /**
     * Metadata associated with this secret read from Vault.
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: any}>;
    /**
     * Path where KV-V2 engine is mounted.
     */
    public readonly mount!: pulumi.Output<string>;
    /**
     * Full name of the secret. For a nested secret
     * the name is the nested path excluding the mount and data
     * prefix. For example, for a secret at `kvv2/data/foo/bar/baz`
     * the name is `foo/bar/baz`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * An object that holds option settings.
     */
    public readonly options!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Full path where the KV-V2 secret will be written.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;

    /**
     * Create a SecretV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretV2Args | SecretV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretV2State | undefined;
            resourceInputs["cas"] = state ? state.cas : undefined;
            resourceInputs["customMetadata"] = state ? state.customMetadata : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["dataJson"] = state ? state.dataJson : undefined;
            resourceInputs["deleteAllVersions"] = state ? state.deleteAllVersions : undefined;
            resourceInputs["disableRead"] = state ? state.disableRead : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["mount"] = state ? state.mount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
        } else {
            const args = argsOrState as SecretV2Args | undefined;
            if ((!args || args.dataJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataJson'");
            }
            if ((!args || args.mount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mount'");
            }
            resourceInputs["cas"] = args ? args.cas : undefined;
            resourceInputs["customMetadata"] = args ? args.customMetadata : undefined;
            resourceInputs["dataJson"] = args?.dataJson ? pulumi.secret(args.dataJson) : undefined;
            resourceInputs["deleteAllVersions"] = args ? args.deleteAllVersions : undefined;
            resourceInputs["disableRead"] = args ? args.disableRead : undefined;
            resourceInputs["mount"] = args ? args.mount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data", "dataJson"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretV2 resources.
 */
export interface SecretV2State {
    /**
     * This flag is required if `casRequired` is set to true
     * on either the secret or the engine's config. In order for a
     * write operation to be successful, cas must be set to the current version
     * of the secret.
     */
    cas?: pulumi.Input<number>;
    /**
     * A nested block that allows configuring metadata for the
     * KV secret. Refer to the
     * Configuration Options for more info.
     */
    customMetadata?: pulumi.Input<inputs.kv.SecretV2CustomMetadata>;
    /**
     * A mapping whose keys are the top-level data keys returned from
     * Vault and whose values are the corresponding values. This map can only
     * represent string data, so any non-string values returned from Vault are
     * serialized as JSON.
     */
    data?: pulumi.Input<{[key: string]: any}>;
    /**
     * JSON-encoded string that will be
     * written as the secret data at the given path.
     */
    dataJson?: pulumi.Input<string>;
    /**
     * If set to true, permanently deletes all
     * versions for the specified key.
     */
    deleteAllVersions?: pulumi.Input<boolean>;
    /**
     * If set to true, disables reading secret from Vault;
     * note: drift won't be detected.
     */
    disableRead?: pulumi.Input<boolean>;
    /**
     * Metadata associated with this secret read from Vault.
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Path where KV-V2 engine is mounted.
     */
    mount?: pulumi.Input<string>;
    /**
     * Full name of the secret. For a nested secret
     * the name is the nested path excluding the mount and data
     * prefix. For example, for a secret at `kvv2/data/foo/bar/baz`
     * the name is `foo/bar/baz`.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An object that holds option settings.
     */
    options?: pulumi.Input<{[key: string]: any}>;
    /**
     * Full path where the KV-V2 secret will be written.
     */
    path?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretV2 resource.
 */
export interface SecretV2Args {
    /**
     * This flag is required if `casRequired` is set to true
     * on either the secret or the engine's config. In order for a
     * write operation to be successful, cas must be set to the current version
     * of the secret.
     */
    cas?: pulumi.Input<number>;
    /**
     * A nested block that allows configuring metadata for the
     * KV secret. Refer to the
     * Configuration Options for more info.
     */
    customMetadata?: pulumi.Input<inputs.kv.SecretV2CustomMetadata>;
    /**
     * JSON-encoded string that will be
     * written as the secret data at the given path.
     */
    dataJson: pulumi.Input<string>;
    /**
     * If set to true, permanently deletes all
     * versions for the specified key.
     */
    deleteAllVersions?: pulumi.Input<boolean>;
    /**
     * If set to true, disables reading secret from Vault;
     * note: drift won't be detected.
     */
    disableRead?: pulumi.Input<boolean>;
    /**
     * Path where KV-V2 engine is mounted.
     */
    mount: pulumi.Input<string>;
    /**
     * Full name of the secret. For a nested secret
     * the name is the nested path excluding the mount and data
     * prefix. For example, for a secret at `kvv2/data/foo/bar/baz`
     * the name is `foo/bar/baz`.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * An object that holds option settings.
     */
    options?: pulumi.Input<{[key: string]: any}>;
}
