// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const config = new vault.NomadSecretBackend("config", {
 *     backend: "nomad",
 *     description: "test description",
 *     defaultLeaseTtlSeconds: 3600,
 *     maxLeaseTtlSeconds: 7200,
 *     maxTtl: 240,
 *     address: "https://127.0.0.1:4646",
 *     token: "ae20ceaa-...",
 *     ttl: 120,
 * });
 * ```
 *
 * ## Import
 *
 * Nomad secret backend can be imported using the `backend`, e.g.
 *
 * ```sh
 * $ pulumi import vault:index/nomadSecretBackend:NomadSecretBackend nomad nomad
 * ```
 */
export class NomadSecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing NomadSecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NomadSecretBackendState, opts?: pulumi.CustomResourceOptions): NomadSecretBackend {
        return new NomadSecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/nomadSecretBackend:NomadSecretBackend';

    /**
     * Returns true if the given object is an instance of NomadSecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NomadSecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NomadSecretBackend.__pulumiType;
    }

    /**
     * Accessor of the mount
     */
    declare public /*out*/ readonly accessor: pulumi.Output<string>;
    /**
     * Specifies the address of the Nomad instance, provided
     * as "protocol://host:port" like "http://127.0.0.1:4646".
     */
    declare public readonly address: pulumi.Output<string | undefined>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    declare public readonly allowedManagedKeys: pulumi.Output<string[] | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    declare public readonly allowedResponseHeaders: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    declare public readonly auditNonHmacRequestKeys: pulumi.Output<string[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    declare public readonly auditNonHmacResponseKeys: pulumi.Output<string[]>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `nomad`.
     */
    declare public readonly backend: pulumi.Output<string | undefined>;
    /**
     * CA certificate to use when verifying the Nomad server certificate, must be
     * x509 PEM encoded.
     */
    declare public readonly caCert: pulumi.Output<string | undefined>;
    /**
     * Client certificate to provide to the Nomad server, must be x509 PEM encoded.
     */
    declare public readonly clientCert: pulumi.Output<string | undefined>;
    /**
     * Client certificate key to provide to the Nomad server, must be x509 PEM encoded.
     */
    declare public readonly clientKey: pulumi.Output<string | undefined>;
    /**
     * Default lease duration for secrets in seconds.
     */
    declare public readonly defaultLeaseTtlSeconds: pulumi.Output<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    declare public readonly delegatedAuthAccessors: pulumi.Output<string[] | undefined>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    declare public readonly disableRemount: pulumi.Output<boolean | undefined>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    declare public readonly externalEntropyAccess: pulumi.Output<boolean | undefined>;
    /**
     * If set to true, disables caching.
     */
    declare public readonly forceNoCache: pulumi.Output<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    declare public readonly identityTokenKey: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    declare public readonly listingVisibility: pulumi.Output<string | undefined>;
    /**
     * Mark the secrets engine as local-only. Local engines are not replicated or removed by replication. Tolerance duration to use when checking the last rotation time.
     */
    declare public readonly local: pulumi.Output<boolean | undefined>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    declare public readonly maxLeaseTtlSeconds: pulumi.Output<number>;
    /**
     * Specifies the maximum length to use for the name of the Nomad token
     * generated with Generate Credential. If omitted, 0 is used and ignored, defaulting to the max value allowed
     * by the Nomad version.
     */
    declare public readonly maxTokenNameLength: pulumi.Output<number>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    declare public readonly maxTtl: pulumi.Output<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    declare public readonly options: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    declare public readonly passthroughRequestHeaders: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    declare public readonly pluginVersion: pulumi.Output<string | undefined>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    declare public readonly sealWrap: pulumi.Output<boolean>;
    /**
     * Specifies the Nomad Management token to use.
     */
    declare public readonly token: pulumi.Output<string | undefined>;
    /**
     * Specifies the ttl of the lease for the generated token.
     */
    declare public readonly ttl: pulumi.Output<number>;

    /**
     * Create a NomadSecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NomadSecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NomadSecretBackendArgs | NomadSecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NomadSecretBackendState | undefined;
            resourceInputs["accessor"] = state?.accessor;
            resourceInputs["address"] = state?.address;
            resourceInputs["allowedManagedKeys"] = state?.allowedManagedKeys;
            resourceInputs["allowedResponseHeaders"] = state?.allowedResponseHeaders;
            resourceInputs["auditNonHmacRequestKeys"] = state?.auditNonHmacRequestKeys;
            resourceInputs["auditNonHmacResponseKeys"] = state?.auditNonHmacResponseKeys;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["caCert"] = state?.caCert;
            resourceInputs["clientCert"] = state?.clientCert;
            resourceInputs["clientKey"] = state?.clientKey;
            resourceInputs["defaultLeaseTtlSeconds"] = state?.defaultLeaseTtlSeconds;
            resourceInputs["delegatedAuthAccessors"] = state?.delegatedAuthAccessors;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableRemount"] = state?.disableRemount;
            resourceInputs["externalEntropyAccess"] = state?.externalEntropyAccess;
            resourceInputs["forceNoCache"] = state?.forceNoCache;
            resourceInputs["identityTokenKey"] = state?.identityTokenKey;
            resourceInputs["listingVisibility"] = state?.listingVisibility;
            resourceInputs["local"] = state?.local;
            resourceInputs["maxLeaseTtlSeconds"] = state?.maxLeaseTtlSeconds;
            resourceInputs["maxTokenNameLength"] = state?.maxTokenNameLength;
            resourceInputs["maxTtl"] = state?.maxTtl;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["options"] = state?.options;
            resourceInputs["passthroughRequestHeaders"] = state?.passthroughRequestHeaders;
            resourceInputs["pluginVersion"] = state?.pluginVersion;
            resourceInputs["sealWrap"] = state?.sealWrap;
            resourceInputs["token"] = state?.token;
            resourceInputs["ttl"] = state?.ttl;
        } else {
            const args = argsOrState as NomadSecretBackendArgs | undefined;
            resourceInputs["address"] = args?.address;
            resourceInputs["allowedManagedKeys"] = args?.allowedManagedKeys;
            resourceInputs["allowedResponseHeaders"] = args?.allowedResponseHeaders;
            resourceInputs["auditNonHmacRequestKeys"] = args?.auditNonHmacRequestKeys;
            resourceInputs["auditNonHmacResponseKeys"] = args?.auditNonHmacResponseKeys;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["caCert"] = args?.caCert;
            resourceInputs["clientCert"] = args?.clientCert ? pulumi.secret(args.clientCert) : undefined;
            resourceInputs["clientKey"] = args?.clientKey ? pulumi.secret(args.clientKey) : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = args?.defaultLeaseTtlSeconds;
            resourceInputs["delegatedAuthAccessors"] = args?.delegatedAuthAccessors;
            resourceInputs["description"] = args?.description;
            resourceInputs["disableRemount"] = args?.disableRemount;
            resourceInputs["externalEntropyAccess"] = args?.externalEntropyAccess;
            resourceInputs["forceNoCache"] = args?.forceNoCache;
            resourceInputs["identityTokenKey"] = args?.identityTokenKey;
            resourceInputs["listingVisibility"] = args?.listingVisibility;
            resourceInputs["local"] = args?.local;
            resourceInputs["maxLeaseTtlSeconds"] = args?.maxLeaseTtlSeconds;
            resourceInputs["maxTokenNameLength"] = args?.maxTokenNameLength;
            resourceInputs["maxTtl"] = args?.maxTtl;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["options"] = args?.options;
            resourceInputs["passthroughRequestHeaders"] = args?.passthroughRequestHeaders;
            resourceInputs["pluginVersion"] = args?.pluginVersion;
            resourceInputs["sealWrap"] = args?.sealWrap;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientCert", "clientKey", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NomadSecretBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NomadSecretBackend resources.
 */
export interface NomadSecretBackendState {
    /**
     * Accessor of the mount
     */
    accessor?: pulumi.Input<string>;
    /**
     * Specifies the address of the Nomad instance, provided
     * as "protocol://host:port" like "http://127.0.0.1:4646".
     */
    address?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `nomad`.
     */
    backend?: pulumi.Input<string>;
    /**
     * CA certificate to use when verifying the Nomad server certificate, must be
     * x509 PEM encoded.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Client certificate to provide to the Nomad server, must be x509 PEM encoded.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Client certificate key to provide to the Nomad server, must be x509 PEM encoded.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Default lease duration for secrets in seconds.
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * If set to true, disables caching.
     */
    forceNoCache?: pulumi.Input<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Mark the secrets engine as local-only. Local engines are not replicated or removed by replication. Tolerance duration to use when checking the last rotation time.
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Specifies the maximum length to use for the name of the Nomad token
     * generated with Generate Credential. If omitted, 0 is used and ignored, defaulting to the max value allowed
     * by the Nomad version.
     */
    maxTokenNameLength?: pulumi.Input<number>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Specifies the Nomad Management token to use.
     */
    token?: pulumi.Input<string>;
    /**
     * Specifies the ttl of the lease for the generated token.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NomadSecretBackend resource.
 */
export interface NomadSecretBackendArgs {
    /**
     * Specifies the address of the Nomad instance, provided
     * as "protocol://host:port" like "http://127.0.0.1:4646".
     */
    address?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `nomad`.
     */
    backend?: pulumi.Input<string>;
    /**
     * CA certificate to use when verifying the Nomad server certificate, must be
     * x509 PEM encoded.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Client certificate to provide to the Nomad server, must be x509 PEM encoded.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Client certificate key to provide to the Nomad server, must be x509 PEM encoded.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Default lease duration for secrets in seconds.
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * If set to true, disables caching.
     */
    forceNoCache?: pulumi.Input<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Mark the secrets engine as local-only. Local engines are not replicated or removed by replication. Tolerance duration to use when checking the last rotation time.
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Specifies the maximum length to use for the name of the Nomad token
     * generated with Generate Credential. If omitted, 0 is used and ignored, defaulting to the max value allowed
     * by the Nomad version.
     */
    maxTokenNameLength?: pulumi.Input<number>;
    /**
     * Maximum possible lease duration for secrets in seconds.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Specifies the Nomad Management token to use.
     */
    token?: pulumi.Input<string>;
    /**
     * Specifies the ttl of the lease for the generated token.
     */
    ttl?: pulumi.Input<number>;
}
