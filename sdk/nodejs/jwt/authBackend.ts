// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource for managing an
 * [JWT auth backend within Vault](https://www.vaultproject.io/docs/auth/jwt.html).
 *
 * ## Example Usage
 *
 * Manage JWT auth backend:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const example = new vault.jwt.AuthBackend("example", {
 *     boundIssuer: "https://myco.auth0.com/",
 *     description: "Demonstration of the Terraform JWT auth backend",
 *     oidcDiscoveryUrl: "https://myco.auth0.com/",
 *     path: "jwt",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * Manage OIDC auth backend:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const example = new vault.jwt.AuthBackend("example", {
 *     boundIssuer: "https://myco.auth0.com/",
 *     description: "Demonstration of the Terraform JWT auth backend",
 *     oidcClientId: "1234567890",
 *     oidcClientSecret: "secret123456",
 *     oidcDiscoveryUrl: "https://myco.auth0.com/",
 *     path: "oidc",
 *     tune: {
 *         listingVisibility: "unauth",
 *     },
 *     type: "oidc",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * Configuring the auth backend with a `provider_config:
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const gsuite = new vault.jwt.AuthBackend("gsuite", {
 *     description: "OIDC backend",
 *     oidcDiscoveryUrl: "https://accounts.google.com",
 *     path: "oidc",
 *     providerConfig: {
 *         fetch_groups: "true",
 *         fetch_user_info: "true",
 *         groups_recurse_max_depth: "1",
 *         provider: "gsuite",
 *     },
 *     type: "oidc",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * JWT auth backend can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:jwt/authBackend:AuthBackend oidc oidc
 * ```
 * or
 *
 * ```sh
 * $ pulumi import vault:jwt/authBackend:AuthBackend jwt jwt
 * ```
 */
export class AuthBackend extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendState, opts?: pulumi.CustomResourceOptions): AuthBackend {
        return new AuthBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:jwt/authBackend:AuthBackend';

    /**
     * Returns true if the given object is an instance of AuthBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackend.__pulumiType;
    }

    /**
     * The accessor for this auth method
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * The value against which to match the iss claim in a JWT
     */
    public readonly boundIssuer!: pulumi.Output<string | undefined>;
    /**
     * The default role to use if none is provided during login
     */
    public readonly defaultRole!: pulumi.Output<string | undefined>;
    /**
     * The description of the auth backend
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
     */
    public readonly jwksCaPem!: pulumi.Output<string | undefined>;
    /**
     * JWKS URL to use to authenticate signatures. Cannot be used with "oidcDiscoveryUrl" or "jwtValidationPubkeys".
     */
    public readonly jwksUrl!: pulumi.Output<string | undefined>;
    /**
     * A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
     */
    public readonly jwtSupportedAlgs!: pulumi.Output<string[] | undefined>;
    /**
     * A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with `oidcDiscoveryUrl`
     */
    public readonly jwtValidationPubkeys!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies if the auth method is local only.
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs
     *
     * * tune - (Optional) Extra configuration block. Structure is documented below.
     *
     * The `tune` block is used to tune the auth backend:
     */
    public readonly namespaceInState!: pulumi.Output<boolean | undefined>;
    /**
     * Client ID used for OIDC backends
     */
    public readonly oidcClientId!: pulumi.Output<string | undefined>;
    /**
     * Client Secret used for OIDC backends
     */
    public readonly oidcClientSecret!: pulumi.Output<string | undefined>;
    /**
     * The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
     */
    public readonly oidcDiscoveryCaPem!: pulumi.Output<string | undefined>;
    /**
     * The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with `jwtValidationPubkeys`
     */
    public readonly oidcDiscoveryUrl!: pulumi.Output<string | undefined>;
    /**
     * The response mode to be used in the OAuth2 request. Allowed values are `query` and `formPost`. Defaults to `query`. If using Vault namespaces, and `oidcResponseMode` is `formPost`, then `namespaceInState` should be set to `false`.
     */
    public readonly oidcResponseMode!: pulumi.Output<string | undefined>;
    /**
     * List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to `["code"]`. Note: `idToken` may only be used if `oidcResponseMode` is set to `formPost`.
     */
    public readonly oidcResponseTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Path to mount the JWT/OIDC auth backend
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault.
     */
    public readonly providerConfig!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tune!: pulumi.Output<outputs.jwt.AuthBackendTune>;
    /**
     * Type of auth backend. Should be one of `jwt` or `oidc`. Default - `jwt`
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendArgs | AuthBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthBackendState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["boundIssuer"] = state ? state.boundIssuer : undefined;
            resourceInputs["defaultRole"] = state ? state.defaultRole : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["jwksCaPem"] = state ? state.jwksCaPem : undefined;
            resourceInputs["jwksUrl"] = state ? state.jwksUrl : undefined;
            resourceInputs["jwtSupportedAlgs"] = state ? state.jwtSupportedAlgs : undefined;
            resourceInputs["jwtValidationPubkeys"] = state ? state.jwtValidationPubkeys : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["namespaceInState"] = state ? state.namespaceInState : undefined;
            resourceInputs["oidcClientId"] = state ? state.oidcClientId : undefined;
            resourceInputs["oidcClientSecret"] = state ? state.oidcClientSecret : undefined;
            resourceInputs["oidcDiscoveryCaPem"] = state ? state.oidcDiscoveryCaPem : undefined;
            resourceInputs["oidcDiscoveryUrl"] = state ? state.oidcDiscoveryUrl : undefined;
            resourceInputs["oidcResponseMode"] = state ? state.oidcResponseMode : undefined;
            resourceInputs["oidcResponseTypes"] = state ? state.oidcResponseTypes : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["providerConfig"] = state ? state.providerConfig : undefined;
            resourceInputs["tune"] = state ? state.tune : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AuthBackendArgs | undefined;
            resourceInputs["boundIssuer"] = args ? args.boundIssuer : undefined;
            resourceInputs["defaultRole"] = args ? args.defaultRole : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["jwksCaPem"] = args ? args.jwksCaPem : undefined;
            resourceInputs["jwksUrl"] = args ? args.jwksUrl : undefined;
            resourceInputs["jwtSupportedAlgs"] = args ? args.jwtSupportedAlgs : undefined;
            resourceInputs["jwtValidationPubkeys"] = args ? args.jwtValidationPubkeys : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["namespaceInState"] = args ? args.namespaceInState : undefined;
            resourceInputs["oidcClientId"] = args ? args.oidcClientId : undefined;
            resourceInputs["oidcClientSecret"] = args?.oidcClientSecret ? pulumi.secret(args.oidcClientSecret) : undefined;
            resourceInputs["oidcDiscoveryCaPem"] = args ? args.oidcDiscoveryCaPem : undefined;
            resourceInputs["oidcDiscoveryUrl"] = args ? args.oidcDiscoveryUrl : undefined;
            resourceInputs["oidcResponseMode"] = args ? args.oidcResponseMode : undefined;
            resourceInputs["oidcResponseTypes"] = args ? args.oidcResponseTypes : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["providerConfig"] = args ? args.providerConfig : undefined;
            resourceInputs["tune"] = args ? args.tune : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["oidcClientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackend resources.
 */
export interface AuthBackendState {
    /**
     * The accessor for this auth method
     */
    accessor?: pulumi.Input<string>;
    /**
     * The value against which to match the iss claim in a JWT
     */
    boundIssuer?: pulumi.Input<string>;
    /**
     * The default role to use if none is provided during login
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * The description of the auth backend
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
     */
    jwksCaPem?: pulumi.Input<string>;
    /**
     * JWKS URL to use to authenticate signatures. Cannot be used with "oidcDiscoveryUrl" or "jwtValidationPubkeys".
     */
    jwksUrl?: pulumi.Input<string>;
    /**
     * A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
     */
    jwtSupportedAlgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with `oidcDiscoveryUrl`
     */
    jwtValidationPubkeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies if the auth method is local only.
     */
    local?: pulumi.Input<boolean>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs
     *
     * * tune - (Optional) Extra configuration block. Structure is documented below.
     *
     * The `tune` block is used to tune the auth backend:
     */
    namespaceInState?: pulumi.Input<boolean>;
    /**
     * Client ID used for OIDC backends
     */
    oidcClientId?: pulumi.Input<string>;
    /**
     * Client Secret used for OIDC backends
     */
    oidcClientSecret?: pulumi.Input<string>;
    /**
     * The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
     */
    oidcDiscoveryCaPem?: pulumi.Input<string>;
    /**
     * The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with `jwtValidationPubkeys`
     */
    oidcDiscoveryUrl?: pulumi.Input<string>;
    /**
     * The response mode to be used in the OAuth2 request. Allowed values are `query` and `formPost`. Defaults to `query`. If using Vault namespaces, and `oidcResponseMode` is `formPost`, then `namespaceInState` should be set to `false`.
     */
    oidcResponseMode?: pulumi.Input<string>;
    /**
     * List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to `["code"]`. Note: `idToken` may only be used if `oidcResponseMode` is set to `formPost`.
     */
    oidcResponseTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to mount the JWT/OIDC auth backend
     */
    path?: pulumi.Input<string>;
    /**
     * Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault.
     */
    providerConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tune?: pulumi.Input<inputs.jwt.AuthBackendTune>;
    /**
     * Type of auth backend. Should be one of `jwt` or `oidc`. Default - `jwt`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthBackend resource.
 */
export interface AuthBackendArgs {
    /**
     * The value against which to match the iss claim in a JWT
     */
    boundIssuer?: pulumi.Input<string>;
    /**
     * The default role to use if none is provided during login
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * The description of the auth backend
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
     */
    jwksCaPem?: pulumi.Input<string>;
    /**
     * JWKS URL to use to authenticate signatures. Cannot be used with "oidcDiscoveryUrl" or "jwtValidationPubkeys".
     */
    jwksUrl?: pulumi.Input<string>;
    /**
     * A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
     */
    jwtSupportedAlgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with `oidcDiscoveryUrl`
     */
    jwtValidationPubkeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies if the auth method is local only.
     */
    local?: pulumi.Input<boolean>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs
     *
     * * tune - (Optional) Extra configuration block. Structure is documented below.
     *
     * The `tune` block is used to tune the auth backend:
     */
    namespaceInState?: pulumi.Input<boolean>;
    /**
     * Client ID used for OIDC backends
     */
    oidcClientId?: pulumi.Input<string>;
    /**
     * Client Secret used for OIDC backends
     */
    oidcClientSecret?: pulumi.Input<string>;
    /**
     * The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
     */
    oidcDiscoveryCaPem?: pulumi.Input<string>;
    /**
     * The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with `jwtValidationPubkeys`
     */
    oidcDiscoveryUrl?: pulumi.Input<string>;
    /**
     * The response mode to be used in the OAuth2 request. Allowed values are `query` and `formPost`. Defaults to `query`. If using Vault namespaces, and `oidcResponseMode` is `formPost`, then `namespaceInState` should be set to `false`.
     */
    oidcResponseMode?: pulumi.Input<string>;
    /**
     * List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to `["code"]`. Note: `idToken` may only be used if `oidcResponseMode` is set to `formPost`.
     */
    oidcResponseTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to mount the JWT/OIDC auth backend
     */
    path?: pulumi.Input<string>;
    /**
     * Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault.
     */
    providerConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tune?: pulumi.Input<inputs.jwt.AuthBackendTune>;
    /**
     * Type of auth backend. Should be one of `jwt` or `oidc`. Default - `jwt`
     */
    type?: pulumi.Input<string>;
}
