// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const mongo = new vault.Mount("mongo", {
 *     path: "%s",
 *     type: "mongodbatlas",
 *     description: "MongoDB Atlas secret engine mount",
 * });
 * const config = new vault.mongodbatlas.SecretBackend("config", {
 *     mount: "vault_mount.mongo.path",
 *     privateKey: "privateKey",
 *     publicKey: "publicKey",
 * });
 * const role = new vault.mongodbatlas.SecretRole("role", {
 *     mount: mongo.path,
 *     organizationId: "7cf5a45a9ccf6400e60981b7",
 *     projectId: "5cf5a45a9ccf6400e60981b6",
 *     roles: "ORG_READ_ONLY",
 *     ipAddresses: "192.168.1.5, 192.168.1.6",
 *     cidrBlocks: "192.168.1.3/35",
 *     projectRoles: "GROUP_READ_ONLY",
 *     ttl: "60",
 *     maxTtl: "120",
 * });
 * ```
 *
 * ## Import
 *
 * The MongoDB Atlas secret role can be imported using the full path to the role of the form`<mount_path>/roles/<role_name>` e.g.
 *
 * ```sh
 *  $ pulumi import vault:mongodbatlas/secretRole:SecretRole example mongodbatlas/roles/example-role
 * ```
 */
export class SecretRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretRoleState, opts?: pulumi.CustomResourceOptions): SecretRole {
        return new SecretRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:mongodbatlas/secretRole:SecretRole';

    /**
     * Returns true if the given object is an instance of SecretRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretRole.__pulumiType;
    }

    /**
     * Whitelist entry in CIDR notation to be added for the API key.
     */
    public readonly cidrBlocks!: pulumi.Output<string[] | undefined>;
    /**
     * IP address to be added to the whitelist for the API key.
     */
    public readonly ipAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * The maximum allowed lifetime of credentials issued using this role.
     */
    public readonly maxTtl!: pulumi.Output<string | undefined>;
    /**
     * Path where the MongoDB Atlas Secrets Engine is mounted.
     */
    public readonly mount!: pulumi.Output<string>;
    /**
     * The name of the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier for the organization to which the target API Key belongs. 
     * Required if `projectId` is not set.
     */
    public readonly organizationId!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier for the project to which the target API Key belongs.
     * Required if `organizationId is` not set.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Roles assigned when an org API key is assigned to a project API key.
     */
    public readonly projectRoles!: pulumi.Output<string[] | undefined>;
    /**
     * List of roles that the API Key needs to have.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * Duration in seconds after which the issued credential should expire.
     */
    public readonly ttl!: pulumi.Output<string | undefined>;

    /**
     * Create a SecretRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretRoleArgs | SecretRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretRoleState | undefined;
            resourceInputs["cidrBlocks"] = state ? state.cidrBlocks : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["maxTtl"] = state ? state.maxTtl : undefined;
            resourceInputs["mount"] = state ? state.mount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectRoles"] = state ? state.projectRoles : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as SecretRoleArgs | undefined;
            if ((!args || args.mount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mount'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["cidrBlocks"] = args ? args.cidrBlocks : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["maxTtl"] = args ? args.maxTtl : undefined;
            resourceInputs["mount"] = args ? args.mount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectRoles"] = args ? args.projectRoles : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretRole resources.
 */
export interface SecretRoleState {
    /**
     * Whitelist entry in CIDR notation to be added for the API key.
     */
    cidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IP address to be added to the whitelist for the API key.
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum allowed lifetime of credentials issued using this role.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * Path where the MongoDB Atlas Secrets Engine is mounted.
     */
    mount?: pulumi.Input<string>;
    /**
     * The name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier for the organization to which the target API Key belongs. 
     * Required if `projectId` is not set.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Unique identifier for the project to which the target API Key belongs.
     * Required if `organizationId is` not set.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Roles assigned when an org API key is assigned to a project API key.
     */
    projectRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of roles that the API Key needs to have.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Duration in seconds after which the issued credential should expire.
     */
    ttl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretRole resource.
 */
export interface SecretRoleArgs {
    /**
     * Whitelist entry in CIDR notation to be added for the API key.
     */
    cidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IP address to be added to the whitelist for the API key.
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum allowed lifetime of credentials issued using this role.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * Path where the MongoDB Atlas Secrets Engine is mounted.
     */
    mount: pulumi.Input<string>;
    /**
     * The name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier for the organization to which the target API Key belongs. 
     * Required if `projectId` is not set.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Unique identifier for the project to which the target API Key belongs.
     * Required if `organizationId is` not set.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Roles assigned when an org API key is assigned to a project API key.
     */
    projectRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of roles that the API Key needs to have.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Duration in seconds after which the issued credential should expire.
     */
    ttl?: pulumi.Input<string>;
}
