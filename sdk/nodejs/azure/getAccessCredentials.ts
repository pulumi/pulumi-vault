// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getAccessCredentials(args: GetAccessCredentialsArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessCredentialsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vault:azure/getAccessCredentials:getAccessCredentials", {
        "backend": args.backend,
        "maxCredValidationSeconds": args.maxCredValidationSeconds,
        "numSecondsBetweenTests": args.numSecondsBetweenTests,
        "numSequentialSuccesses": args.numSequentialSuccesses,
        "role": args.role,
        "subscriptionId": args.subscriptionId,
        "tenantId": args.tenantId,
        "validateCreds": args.validateCreds,
    }, opts);
}

/**
 * A collection of arguments for invoking getAccessCredentials.
 */
export interface GetAccessCredentialsArgs {
    /**
     * The path to the Azure secret backend to
     * read credentials from, with no leading or trailing `/`s.
     */
    backend: string;
    /**
     * If 'validate_creds' is true, 
     * the number of seconds after which to give up validating credentials. Defaults
     * to 300.
     */
    maxCredValidationSeconds?: number;
    /**
     * If 'validate_creds' is true, 
     * the number of seconds to wait between each test of generated credentials.
     * Defaults to 1.
     */
    numSecondsBetweenTests?: number;
    /**
     * If 'validate_creds' is true, 
     * the number of sequential successes required to validate generated
     * credentials. Defaults to 8.
     */
    numSequentialSuccesses?: number;
    /**
     * The name of the Azure secret backend role to read
     * credentials from, with no leading or trailing `/`s.
     */
    role: string;
    /**
     * The subscription ID to use during credential
     * validation. Defaults to the subscription ID configured in the Vault `backend`.
     */
    subscriptionId?: string;
    /**
     * The tenant ID to use during credential validation.
     * Defaults to the tenant ID configured in the Vault `backend`.
     */
    tenantId?: string;
    /**
     * Whether generated credentials should be 
     * validated before being returned. Defaults to `false`, which returns
     * credentials without checking whether they have fully propagated throughout
     * Azure Active Directory. Designating `true` activates testing.
     */
    validateCreds?: boolean;
}

/**
 * A collection of values returned by getAccessCredentials.
 */
export interface GetAccessCredentialsResult {
    readonly backend: string;
    /**
     * The client id for credentials to query the Azure APIs.
     */
    readonly clientId: string;
    /**
     * The client secret for credentials to query the Azure APIs.
     */
    readonly clientSecret: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The duration of the secret lease, in seconds relative
     * to the time the data was requested. Once this time has passed any plan
     * generated with this data may fail to apply.
     */
    readonly leaseDuration: number;
    /**
     * The lease identifier assigned by Vault.
     */
    readonly leaseId: string;
    readonly leaseRenewable: boolean;
    readonly leaseStartTime: string;
    readonly maxCredValidationSeconds?: number;
    readonly numSecondsBetweenTests?: number;
    readonly numSequentialSuccesses?: number;
    readonly role: string;
    readonly subscriptionId?: string;
    readonly tenantId?: string;
    readonly validateCreds?: boolean;
}

export function getAccessCredentialsOutput(args: GetAccessCredentialsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccessCredentialsResult> {
    return pulumi.output(args).apply(a => getAccessCredentials(a, opts))
}

/**
 * A collection of arguments for invoking getAccessCredentials.
 */
export interface GetAccessCredentialsOutputArgs {
    /**
     * The path to the Azure secret backend to
     * read credentials from, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * If 'validate_creds' is true, 
     * the number of seconds after which to give up validating credentials. Defaults
     * to 300.
     */
    maxCredValidationSeconds?: pulumi.Input<number>;
    /**
     * If 'validate_creds' is true, 
     * the number of seconds to wait between each test of generated credentials.
     * Defaults to 1.
     */
    numSecondsBetweenTests?: pulumi.Input<number>;
    /**
     * If 'validate_creds' is true, 
     * the number of sequential successes required to validate generated
     * credentials. Defaults to 8.
     */
    numSequentialSuccesses?: pulumi.Input<number>;
    /**
     * The name of the Azure secret backend role to read
     * credentials from, with no leading or trailing `/`s.
     */
    role: pulumi.Input<string>;
    /**
     * The subscription ID to use during credential
     * validation. Defaults to the subscription ID configured in the Vault `backend`.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * The tenant ID to use during credential validation.
     * Defaults to the tenant ID configured in the Vault `backend`.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Whether generated credentials should be 
     * validated before being returned. Defaults to `false`, which returns
     * credentials without checking whether they have fully propagated throughout
     * Azure Active Directory. Designating `true` activates testing.
     */
    validateCreds?: pulumi.Input<boolean>;
}
