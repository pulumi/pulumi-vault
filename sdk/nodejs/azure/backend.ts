// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### *Vault-1.9 And Above*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const azure = new vault.azure.Backend("azure", {
 *     clientId: "11111111-2222-3333-4444-333333333333",
 *     clientSecret: "12345678901234567890",
 *     environment: "AzurePublicCloud",
 *     subscriptionId: "11111111-2222-3333-4444-111111111111",
 *     tenantId: "11111111-2222-3333-4444-222222222222",
 *     useMicrosoftGraphApi: true,
 * });
 * ```
 * ### *Vault-1.8 And Below*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const azure = new vault.azure.Backend("azure", {
 *     clientId: "11111111-2222-3333-4444-333333333333",
 *     clientSecret: "12345678901234567890",
 *     environment: "AzurePublicCloud",
 *     subscriptionId: "11111111-2222-3333-4444-111111111111",
 *     tenantId: "11111111-2222-3333-4444-222222222222",
 *     useMicrosoftGraphApi: false,
 * });
 * ```
 */
export class Backend extends pulumi.CustomResource {
    /**
     * Get an existing Backend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackendState, opts?: pulumi.CustomResourceOptions): Backend {
        return new Backend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:azure/backend:Backend';

    /**
     * Returns true if the given object is an instance of Backend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backend.__pulumiType;
    }

    /**
     * The OAuth2 client id to connect to Azure.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * The OAuth2 client secret to connect to Azure.
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * The Azure environment.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The unique path this backend should be mounted at. Defaults to `azure`.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * The subscription id for the Azure Active Directory.
     */
    public readonly subscriptionId!: pulumi.Output<string>;
    /**
     * The tenant id for the Azure Active Directory.
     */
    public readonly tenantId!: pulumi.Output<string>;
    /**
     * Indicates whether the secrets engine should use 
     * the Microsoft Graph API. This parameter has been deprecated and will be ignored in `vault-1.12+`.
     * For more information, please refer to the [Vault docs](https://developer.hashicorp.com/vault/api-docs/secret/azure#use_microsoft_graph_api)
     */
    public readonly useMicrosoftGraphApi!: pulumi.Output<boolean>;

    /**
     * Create a Backend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackendArgs | BackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackendState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["useMicrosoftGraphApi"] = state ? state.useMicrosoftGraphApi : undefined;
        } else {
            const args = argsOrState as BackendArgs | undefined;
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["clientId"] = args?.clientId ? pulumi.secret(args.clientId) : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["subscriptionId"] = args?.subscriptionId ? pulumi.secret(args.subscriptionId) : undefined;
            resourceInputs["tenantId"] = args?.tenantId ? pulumi.secret(args.tenantId) : undefined;
            resourceInputs["useMicrosoftGraphApi"] = args ? args.useMicrosoftGraphApi : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientId", "clientSecret", "subscriptionId", "tenantId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Backend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Backend resources.
 */
export interface BackendState {
    /**
     * The OAuth2 client id to connect to Azure.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The OAuth2 client secret to connect to Azure.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The Azure environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The unique path this backend should be mounted at. Defaults to `azure`.
     */
    path?: pulumi.Input<string>;
    /**
     * The subscription id for the Azure Active Directory.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * The tenant id for the Azure Active Directory.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Indicates whether the secrets engine should use 
     * the Microsoft Graph API. This parameter has been deprecated and will be ignored in `vault-1.12+`.
     * For more information, please refer to the [Vault docs](https://developer.hashicorp.com/vault/api-docs/secret/azure#use_microsoft_graph_api)
     */
    useMicrosoftGraphApi?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Backend resource.
 */
export interface BackendArgs {
    /**
     * The OAuth2 client id to connect to Azure.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The OAuth2 client secret to connect to Azure.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The Azure environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The unique path this backend should be mounted at. Defaults to `azure`.
     */
    path?: pulumi.Input<string>;
    /**
     * The subscription id for the Azure Active Directory.
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * The tenant id for the Azure Active Directory.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Indicates whether the secrets engine should use 
     * the Microsoft Graph API. This parameter has been deprecated and will be ignored in `vault-1.12+`.
     * For more information, please refer to the [Vault docs](https://developer.hashicorp.com/vault/api-docs/secret/azure#use_microsoft_graph_api)
     */
    useMicrosoftGraphApi?: pulumi.Input<boolean>;
}
