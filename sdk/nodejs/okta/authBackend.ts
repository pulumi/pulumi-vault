// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource for managing an
 * [Okta auth backend within Vault](https://www.vaultproject.io/docs/auth/okta.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const example = new vault.okta.AuthBackend("example", {
 *     description: "Demonstration of the Terraform Okta auth backend",
 *     groups: [{
 *         groupName: "foo",
 *         policies: [
 *             "one",
 *             "two",
 *         ],
 *     }],
 *     organization: "example",
 *     token: "something that should be kept secret",
 *     users: [{
 *         groups: ["foo"],
 *         username: "bar",
 *     }],
 * });
 * ```
 */
export class AuthBackend extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendState, opts?: pulumi.CustomResourceOptions): AuthBackend {
        return new AuthBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:okta/authBackend:AuthBackend';

    /**
     * Returns true if the given object is an instance of AuthBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackend.__pulumiType;
    }

    /**
     * The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * The Okta url. Examples: oktapreview.com, okta.com
     */
    public readonly baseUrl!: pulumi.Output<string | undefined>;
    /**
     * When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
     */
    public readonly bypassOktaMfa!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the auth backend
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Associate Okta groups with policies within Vault.
     * See below for more details.
     */
    public readonly groups!: pulumi.Output<outputs.okta.AuthBackendGroup[]>;
    /**
     * Maximum duration after which authentication will be expired
     * [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
     */
    public readonly maxTtl!: pulumi.Output<string | undefined>;
    /**
     * The Okta organization. This will be the first part of the url `https://XXX.okta.com`
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * Path to mount the Okta auth backend
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * The Okta API token. This is required to query Okta for user group membership.
     * If this is not supplied only locally configured groups will be enabled.
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * Duration after which authentication will be expired.
     * [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
     */
    public readonly ttl!: pulumi.Output<string | undefined>;
    /**
     * Associate Okta users with groups or policies within Vault.
     * See below for more details.
     */
    public readonly users!: pulumi.Output<outputs.okta.AuthBackendUser[]>;

    /**
     * Create a AuthBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendArgs | AuthBackendState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AuthBackendState | undefined;
            inputs["accessor"] = state ? state.accessor : undefined;
            inputs["baseUrl"] = state ? state.baseUrl : undefined;
            inputs["bypassOktaMfa"] = state ? state.bypassOktaMfa : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["groups"] = state ? state.groups : undefined;
            inputs["maxTtl"] = state ? state.maxTtl : undefined;
            inputs["organization"] = state ? state.organization : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["token"] = state ? state.token : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as AuthBackendArgs | undefined;
            if (!args || args.organization === undefined) {
                throw new Error("Missing required property 'organization'");
            }
            inputs["baseUrl"] = args ? args.baseUrl : undefined;
            inputs["bypassOktaMfa"] = args ? args.bypassOktaMfa : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["groups"] = args ? args.groups : undefined;
            inputs["maxTtl"] = args ? args.maxTtl : undefined;
            inputs["organization"] = args ? args.organization : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["token"] = args ? args.token : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["accessor"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AuthBackend.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackend resources.
 */
export interface AuthBackendState {
    /**
     * The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
     */
    readonly accessor?: pulumi.Input<string>;
    /**
     * The Okta url. Examples: oktapreview.com, okta.com
     */
    readonly baseUrl?: pulumi.Input<string>;
    /**
     * When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
     */
    readonly bypassOktaMfa?: pulumi.Input<boolean>;
    /**
     * The description of the auth backend
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Associate Okta groups with policies within Vault.
     * See below for more details.
     */
    readonly groups?: pulumi.Input<pulumi.Input<inputs.okta.AuthBackendGroup>[]>;
    /**
     * Maximum duration after which authentication will be expired
     * [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
     */
    readonly maxTtl?: pulumi.Input<string>;
    /**
     * The Okta organization. This will be the first part of the url `https://XXX.okta.com`
     */
    readonly organization?: pulumi.Input<string>;
    /**
     * Path to mount the Okta auth backend
     */
    readonly path?: pulumi.Input<string>;
    /**
     * The Okta API token. This is required to query Okta for user group membership.
     * If this is not supplied only locally configured groups will be enabled.
     */
    readonly token?: pulumi.Input<string>;
    /**
     * Duration after which authentication will be expired.
     * [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
     */
    readonly ttl?: pulumi.Input<string>;
    /**
     * Associate Okta users with groups or policies within Vault.
     * See below for more details.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.okta.AuthBackendUser>[]>;
}

/**
 * The set of arguments for constructing a AuthBackend resource.
 */
export interface AuthBackendArgs {
    /**
     * The Okta url. Examples: oktapreview.com, okta.com
     */
    readonly baseUrl?: pulumi.Input<string>;
    /**
     * When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
     */
    readonly bypassOktaMfa?: pulumi.Input<boolean>;
    /**
     * The description of the auth backend
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Associate Okta groups with policies within Vault.
     * See below for more details.
     */
    readonly groups?: pulumi.Input<pulumi.Input<inputs.okta.AuthBackendGroup>[]>;
    /**
     * Maximum duration after which authentication will be expired
     * [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
     */
    readonly maxTtl?: pulumi.Input<string>;
    /**
     * The Okta organization. This will be the first part of the url `https://XXX.okta.com`
     */
    readonly organization: pulumi.Input<string>;
    /**
     * Path to mount the Okta auth backend
     */
    readonly path?: pulumi.Input<string>;
    /**
     * The Okta API token. This is required to query Okta for user group membership.
     * If this is not supplied only locally configured groups will be enabled.
     */
    readonly token?: pulumi.Input<string>;
    /**
     * Duration after which authentication will be expired.
     * [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
     */
    readonly ttl?: pulumi.Input<string>;
    /**
     * Associate Okta users with groups or policies within Vault.
     * See below for more details.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.okta.AuthBackendUser>[]>;
}
