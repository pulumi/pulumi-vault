// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * AWS auth backend certificates can be imported using `auth/`, the `backend` path, `/config/certificate/`, and the `cert_name` e.g.
 *
 * ```sh
 *  $ pulumi import vault:aws/authBackendCert:AuthBackendCert example auth/aws/config/certificate/my-cert
 * ```
 */
export class AuthBackendCert extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackendCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendCertState, opts?: pulumi.CustomResourceOptions): AuthBackendCert {
        return new AuthBackendCert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:aws/authBackendCert:AuthBackendCert';

    /**
     * Returns true if the given object is an instance of AuthBackendCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackendCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackendCert.__pulumiType;
    }

    /**
     * The  Base64 encoded AWS Public key required to
     * verify PKCS7 signature of the EC2 instance metadata. You can find this key in
     * the [AWS
     * documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html).
     */
    public readonly awsPublicCert!: pulumi.Output<string>;
    /**
     * The path the AWS auth backend being configured was
     * mounted at.  Defaults to `aws`.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * The name of the certificate.
     */
    public readonly certName!: pulumi.Output<string>;
    /**
     * Either "pkcs7" or "identity", indicating the type of
     * document which can be verified using the given certificate. Defaults to
     * "pkcs7".
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthBackendCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendCertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendCertArgs | AuthBackendCertState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AuthBackendCertState | undefined;
            inputs["awsPublicCert"] = state ? state.awsPublicCert : undefined;
            inputs["backend"] = state ? state.backend : undefined;
            inputs["certName"] = state ? state.certName : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AuthBackendCertArgs | undefined;
            if (!args || args.awsPublicCert === undefined) {
                throw new Error("Missing required property 'awsPublicCert'");
            }
            if (!args || args.certName === undefined) {
                throw new Error("Missing required property 'certName'");
            }
            inputs["awsPublicCert"] = args ? args.awsPublicCert : undefined;
            inputs["backend"] = args ? args.backend : undefined;
            inputs["certName"] = args ? args.certName : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AuthBackendCert.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackendCert resources.
 */
export interface AuthBackendCertState {
    /**
     * The  Base64 encoded AWS Public key required to
     * verify PKCS7 signature of the EC2 instance metadata. You can find this key in
     * the [AWS
     * documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html).
     */
    readonly awsPublicCert?: pulumi.Input<string>;
    /**
     * The path the AWS auth backend being configured was
     * mounted at.  Defaults to `aws`.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     */
    readonly certName?: pulumi.Input<string>;
    /**
     * Either "pkcs7" or "identity", indicating the type of
     * document which can be verified using the given certificate. Defaults to
     * "pkcs7".
     */
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthBackendCert resource.
 */
export interface AuthBackendCertArgs {
    /**
     * The  Base64 encoded AWS Public key required to
     * verify PKCS7 signature of the EC2 instance metadata. You can find this key in
     * the [AWS
     * documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html).
     */
    readonly awsPublicCert: pulumi.Input<string>;
    /**
     * The path the AWS auth backend being configured was
     * mounted at.  Defaults to `aws`.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     */
    readonly certName: pulumi.Input<string>;
    /**
     * Either "pkcs7" or "identity", indicating the type of
     * document which can be verified using the given certificate. Defaults to
     * "pkcs7".
     */
    readonly type?: pulumi.Input<string>;
}
