// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * AWS secret backends can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:aws/secretBackend:SecretBackend aws aws
 * ```
 */
export class SecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendState, opts?: pulumi.CustomResourceOptions): SecretBackend {
        return new SecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:aws/secretBackend:SecretBackend';

    /**
     * Returns true if the given object is an instance of SecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackend.__pulumiType;
    }

    /**
     * The AWS Access Key ID this backend should use to
     * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
     */
    declare public readonly accessKey: pulumi.Output<string | undefined>;
    /**
     * Accessor of the mount
     */
    declare public /*out*/ readonly accessor: pulumi.Output<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    declare public readonly allowedManagedKeys: pulumi.Output<string[] | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    declare public readonly allowedResponseHeaders: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    declare public readonly auditNonHmacRequestKeys: pulumi.Output<string[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    declare public readonly auditNonHmacResponseKeys: pulumi.Output<string[]>;
    /**
     * Default lease duration for secrets in seconds
     */
    declare public readonly defaultLeaseTtlSeconds: pulumi.Output<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    declare public readonly delegatedAuthAccessors: pulumi.Output<string[] | undefined>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     */
    declare public readonly disableAutomatedRotation: pulumi.Output<boolean | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    declare public readonly disableRemount: pulumi.Output<boolean | undefined>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    declare public readonly externalEntropyAccess: pulumi.Output<boolean | undefined>;
    /**
     * If set to true, disables caching.
     */
    declare public readonly forceNoCache: pulumi.Output<boolean>;
    /**
     * Specifies a custom HTTP IAM endpoint to use.
     */
    declare public readonly iamEndpoint: pulumi.Output<string | undefined>;
    /**
     * The audience claim value. Requires Vault 1.16+.
     */
    declare public readonly identityTokenAudience: pulumi.Output<string | undefined>;
    /**
     * The key to use for signing identity tokens.
     */
    declare public readonly identityTokenKey: pulumi.Output<string | undefined>;
    /**
     * The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
     */
    declare public readonly identityTokenTtl: pulumi.Output<number>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    declare public readonly listingVisibility: pulumi.Output<string | undefined>;
    /**
     * Specifies if the secret backend is local only
     */
    declare public readonly local: pulumi.Output<boolean | undefined>;
    /**
     * Maximum possible lease duration for secrets in seconds
     */
    declare public readonly maxLeaseTtlSeconds: pulumi.Output<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    declare public readonly options: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    declare public readonly passthroughRequestHeaders: pulumi.Output<string[] | undefined>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`.
     */
    declare public readonly path: pulumi.Output<string | undefined>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    declare public readonly pluginVersion: pulumi.Output<string | undefined>;
    /**
     * The AWS region to make API calls against. Defaults to us-east-1.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
     */
    declare public readonly roleArn: pulumi.Output<string | undefined>;
    /**
     * The amount of time in seconds Vault should wait before rotating the root credential. 
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     */
    declare public readonly rotationPeriod: pulumi.Output<number | undefined>;
    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     */
    declare public readonly rotationSchedule: pulumi.Output<string | undefined>;
    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     */
    declare public readonly rotationWindow: pulumi.Output<number | undefined>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    declare public readonly sealWrap: pulumi.Output<boolean>;
    /**
     * The AWS Secret Access Key to use when generating new credentials.
     */
    declare public readonly secretKey: pulumi.Output<string | undefined>;
    /**
     * Specifies a custom HTTP STS endpoint to use.
     */
    declare public readonly stsEndpoint: pulumi.Output<string | undefined>;
    /**
     * Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
     */
    declare public readonly stsFallbackEndpoints: pulumi.Output<string[] | undefined>;
    /**
     * Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
     */
    declare public readonly stsFallbackRegions: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
     */
    declare public readonly stsRegion: pulumi.Output<string | undefined>;
    /**
     * Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
     *
     * ```
     * {{ if (eq .Type "STS") }}
     * {{ printf "vault-%s-%s" (unix_time) (random 20) | truncate 32 }}
     * {{ else }}
     * {{ printf "vault-%s-%s-%s" (printf "%s-%s" (.DisplayName) (.PolicyName) | truncate 42) (unix_time) (random 20) | truncate 64 }}
     * {{ end }}
     *
     * ```
     */
    declare public readonly usernameTemplate: pulumi.Output<string>;

    /**
     * Create a SecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendArgs | SecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["accessor"] = state?.accessor;
            resourceInputs["allowedManagedKeys"] = state?.allowedManagedKeys;
            resourceInputs["allowedResponseHeaders"] = state?.allowedResponseHeaders;
            resourceInputs["auditNonHmacRequestKeys"] = state?.auditNonHmacRequestKeys;
            resourceInputs["auditNonHmacResponseKeys"] = state?.auditNonHmacResponseKeys;
            resourceInputs["defaultLeaseTtlSeconds"] = state?.defaultLeaseTtlSeconds;
            resourceInputs["delegatedAuthAccessors"] = state?.delegatedAuthAccessors;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableAutomatedRotation"] = state?.disableAutomatedRotation;
            resourceInputs["disableRemount"] = state?.disableRemount;
            resourceInputs["externalEntropyAccess"] = state?.externalEntropyAccess;
            resourceInputs["forceNoCache"] = state?.forceNoCache;
            resourceInputs["iamEndpoint"] = state?.iamEndpoint;
            resourceInputs["identityTokenAudience"] = state?.identityTokenAudience;
            resourceInputs["identityTokenKey"] = state?.identityTokenKey;
            resourceInputs["identityTokenTtl"] = state?.identityTokenTtl;
            resourceInputs["listingVisibility"] = state?.listingVisibility;
            resourceInputs["local"] = state?.local;
            resourceInputs["maxLeaseTtlSeconds"] = state?.maxLeaseTtlSeconds;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["options"] = state?.options;
            resourceInputs["passthroughRequestHeaders"] = state?.passthroughRequestHeaders;
            resourceInputs["path"] = state?.path;
            resourceInputs["pluginVersion"] = state?.pluginVersion;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["rotationPeriod"] = state?.rotationPeriod;
            resourceInputs["rotationSchedule"] = state?.rotationSchedule;
            resourceInputs["rotationWindow"] = state?.rotationWindow;
            resourceInputs["sealWrap"] = state?.sealWrap;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["stsEndpoint"] = state?.stsEndpoint;
            resourceInputs["stsFallbackEndpoints"] = state?.stsFallbackEndpoints;
            resourceInputs["stsFallbackRegions"] = state?.stsFallbackRegions;
            resourceInputs["stsRegion"] = state?.stsRegion;
            resourceInputs["usernameTemplate"] = state?.usernameTemplate;
        } else {
            const args = argsOrState as SecretBackendArgs | undefined;
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["allowedManagedKeys"] = args?.allowedManagedKeys;
            resourceInputs["allowedResponseHeaders"] = args?.allowedResponseHeaders;
            resourceInputs["auditNonHmacRequestKeys"] = args?.auditNonHmacRequestKeys;
            resourceInputs["auditNonHmacResponseKeys"] = args?.auditNonHmacResponseKeys;
            resourceInputs["defaultLeaseTtlSeconds"] = args?.defaultLeaseTtlSeconds;
            resourceInputs["delegatedAuthAccessors"] = args?.delegatedAuthAccessors;
            resourceInputs["description"] = args?.description;
            resourceInputs["disableAutomatedRotation"] = args?.disableAutomatedRotation;
            resourceInputs["disableRemount"] = args?.disableRemount;
            resourceInputs["externalEntropyAccess"] = args?.externalEntropyAccess;
            resourceInputs["forceNoCache"] = args?.forceNoCache;
            resourceInputs["iamEndpoint"] = args?.iamEndpoint;
            resourceInputs["identityTokenAudience"] = args?.identityTokenAudience;
            resourceInputs["identityTokenKey"] = args?.identityTokenKey;
            resourceInputs["identityTokenTtl"] = args?.identityTokenTtl;
            resourceInputs["listingVisibility"] = args?.listingVisibility;
            resourceInputs["local"] = args?.local;
            resourceInputs["maxLeaseTtlSeconds"] = args?.maxLeaseTtlSeconds;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["options"] = args?.options;
            resourceInputs["passthroughRequestHeaders"] = args?.passthroughRequestHeaders;
            resourceInputs["path"] = args?.path;
            resourceInputs["pluginVersion"] = args?.pluginVersion;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["rotationPeriod"] = args?.rotationPeriod;
            resourceInputs["rotationSchedule"] = args?.rotationSchedule;
            resourceInputs["rotationWindow"] = args?.rotationWindow;
            resourceInputs["sealWrap"] = args?.sealWrap;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["stsEndpoint"] = args?.stsEndpoint;
            resourceInputs["stsFallbackEndpoints"] = args?.stsFallbackEndpoints;
            resourceInputs["stsFallbackRegions"] = args?.stsFallbackRegions;
            resourceInputs["stsRegion"] = args?.stsRegion;
            resourceInputs["usernameTemplate"] = args?.usernameTemplate;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackend resources.
 */
export interface SecretBackendState {
    /**
     * The AWS Access Key ID this backend should use to
     * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Accessor of the mount
     */
    accessor?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default lease duration for secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     */
    disableAutomatedRotation?: pulumi.Input<boolean>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * If set to true, disables caching.
     */
    forceNoCache?: pulumi.Input<boolean>;
    /**
     * Specifies a custom HTTP IAM endpoint to use.
     */
    iamEndpoint?: pulumi.Input<string>;
    /**
     * The audience claim value. Requires Vault 1.16+.
     */
    identityTokenAudience?: pulumi.Input<string>;
    /**
     * The key to use for signing identity tokens.
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
     */
    identityTokenTtl?: pulumi.Input<number>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Specifies if the secret backend is local only
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`.
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * The AWS region to make API calls against. Defaults to us-east-1.
     */
    region?: pulumi.Input<string>;
    /**
     * Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The amount of time in seconds Vault should wait before rotating the root credential. 
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * The AWS Secret Access Key to use when generating new credentials.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Specifies a custom HTTP STS endpoint to use.
     */
    stsEndpoint?: pulumi.Input<string>;
    /**
     * Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
     */
    stsFallbackEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
     */
    stsFallbackRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
     */
    stsRegion?: pulumi.Input<string>;
    /**
     * Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
     *
     * ```
     * {{ if (eq .Type "STS") }}
     * {{ printf "vault-%s-%s" (unix_time) (random 20) | truncate 32 }}
     * {{ else }}
     * {{ printf "vault-%s-%s-%s" (printf "%s-%s" (.DisplayName) (.PolicyName) | truncate 42) (unix_time) (random 20) | truncate 64 }}
     * {{ end }}
     *
     * ```
     */
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackend resource.
 */
export interface SecretBackendArgs {
    /**
     * The AWS Access Key ID this backend should use to
     * issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default lease duration for secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     */
    disableAutomatedRotation?: pulumi.Input<boolean>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * If set to true, disables caching.
     */
    forceNoCache?: pulumi.Input<boolean>;
    /**
     * Specifies a custom HTTP IAM endpoint to use.
     */
    iamEndpoint?: pulumi.Input<string>;
    /**
     * The audience claim value. Requires Vault 1.16+.
     */
    identityTokenAudience?: pulumi.Input<string>;
    /**
     * The key to use for signing identity tokens.
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
     */
    identityTokenTtl?: pulumi.Input<number>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Specifies if the secret backend is local only
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`.
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * The AWS region to make API calls against. Defaults to us-east-1.
     */
    region?: pulumi.Input<string>;
    /**
     * Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The amount of time in seconds Vault should wait before rotating the root credential. 
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * The AWS Secret Access Key to use when generating new credentials.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Specifies a custom HTTP STS endpoint to use.
     */
    stsEndpoint?: pulumi.Input<string>;
    /**
     * Ordered list of `stsEndpoint`s to try if the defined one fails. Requires Vault 1.19+
     */
    stsFallbackEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ordered list of `stsRegion`s matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
     */
    stsFallbackRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region of the STS endpoint. Should be included if `stsEndpoint` is supplied. Requires Vault 1.19+
     */
    stsRegion?: pulumi.Input<string>;
    /**
     * Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
     *
     * ```
     * {{ if (eq .Type "STS") }}
     * {{ printf "vault-%s-%s" (unix_time) (random 20) | truncate 32 }}
     * {{ else }}
     * {{ printf "vault-%s-%s-%s" (printf "%s-%s" (.DisplayName) (.PolicyName) | truncate 42) (unix_time) (random 20) | truncate 64 }}
     * {{ end }}
     *
     * ```
     */
    usernameTemplate?: pulumi.Input<string>;
}
