// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Logs into a Vault server using an AWS auth backend. Login can be
 * accomplished using a signed identity request from IAM or using ec2
 * instance metadata. For more information, see the [Vault
 * documentation](https://www.vaultproject.io/docs/auth/aws.html).
 */
export class AuthBackendLogin extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackendLogin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendLoginState, opts?: pulumi.CustomResourceOptions): AuthBackendLogin {
        return new AuthBackendLogin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:aws/authBackendLogin:AuthBackendLogin';

    /**
     * Returns true if the given object is an instance of AuthBackendLogin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackendLogin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackendLogin.__pulumiType;
    }

    /**
     * The token's accessor.
     */
    declare public /*out*/ readonly accessor: pulumi.Output<string>;
    /**
     * The authentication type used to generate this token.
     */
    declare public /*out*/ readonly authType: pulumi.Output<string>;
    /**
     * The unique name of the AWS auth backend. Defaults to
     * 'aws'.
     */
    declare public readonly backend: pulumi.Output<string | undefined>;
    /**
     * The token returned by Vault.
     */
    declare public /*out*/ readonly clientToken: pulumi.Output<string>;
    /**
     * The HTTP method used in the signed IAM
     * request.
     */
    declare public readonly iamHttpRequestMethod: pulumi.Output<string | undefined>;
    /**
     * The base64-encoded body of the signed
     * request.
     */
    declare public readonly iamRequestBody: pulumi.Output<string | undefined>;
    /**
     * The base64-encoded, JSON serialized
     * representation of the GetCallerIdentity HTTP request headers.
     */
    declare public readonly iamRequestHeaders: pulumi.Output<string | undefined>;
    /**
     * The base64-encoded HTTP URL used in the signed
     * request.
     */
    declare public readonly iamRequestUrl: pulumi.Output<string | undefined>;
    /**
     * The base64-encoded EC2 instance identity document to
     * authenticate with. Can be retrieved from the EC2 metadata server.
     */
    declare public readonly identity: pulumi.Output<string | undefined>;
    /**
     * The duration in seconds the token will be valid, relative
     * to the time in `leaseStartTime`.
     */
    declare public /*out*/ readonly leaseDuration: pulumi.Output<number>;
    declare public /*out*/ readonly leaseStartTime: pulumi.Output<string>;
    /**
     * A map of information returned by the Vault server about the
     * authentication used to generate this token.
     */
    declare public /*out*/ readonly metadata: pulumi.Output<{[key: string]: string}>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * The unique nonce to be used for login requests. Can be
     * set to a user-specified value, or will contain the server-generated value
     * once a token is issued. EC2 instances can only acquire a single token until
     * the whitelist is tidied again unless they keep track of this nonce.
     */
    declare public readonly nonce: pulumi.Output<string>;
    /**
     * The PKCS#7 signature of the identity document to
     * authenticate with, with all newline characters removed. Can be retrieved from
     * the EC2 metadata server.
     */
    declare public readonly pkcs7: pulumi.Output<string | undefined>;
    /**
     * The Vault policies assigned to this token.
     */
    declare public /*out*/ readonly policies: pulumi.Output<string[]>;
    /**
     * Set to true if the token can be extended through renewal.
     */
    declare public /*out*/ readonly renewable: pulumi.Output<boolean>;
    /**
     * The name of the AWS auth backend role to create tokens
     * against.
     */
    declare public readonly role: pulumi.Output<string>;
    /**
     * The base64-encoded SHA256 RSA signature of the
     * instance identity document to authenticate with, with all newline characters
     * removed. Can be retrieved from the EC2 metadata server.
     */
    declare public readonly signature: pulumi.Output<string | undefined>;

    /**
     * Create a AuthBackendLogin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthBackendLoginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendLoginArgs | AuthBackendLoginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthBackendLoginState | undefined;
            resourceInputs["accessor"] = state?.accessor;
            resourceInputs["authType"] = state?.authType;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["clientToken"] = state?.clientToken;
            resourceInputs["iamHttpRequestMethod"] = state?.iamHttpRequestMethod;
            resourceInputs["iamRequestBody"] = state?.iamRequestBody;
            resourceInputs["iamRequestHeaders"] = state?.iamRequestHeaders;
            resourceInputs["iamRequestUrl"] = state?.iamRequestUrl;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["leaseDuration"] = state?.leaseDuration;
            resourceInputs["leaseStartTime"] = state?.leaseStartTime;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["nonce"] = state?.nonce;
            resourceInputs["pkcs7"] = state?.pkcs7;
            resourceInputs["policies"] = state?.policies;
            resourceInputs["renewable"] = state?.renewable;
            resourceInputs["role"] = state?.role;
            resourceInputs["signature"] = state?.signature;
        } else {
            const args = argsOrState as AuthBackendLoginArgs | undefined;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["iamHttpRequestMethod"] = args?.iamHttpRequestMethod;
            resourceInputs["iamRequestBody"] = args?.iamRequestBody;
            resourceInputs["iamRequestHeaders"] = args?.iamRequestHeaders;
            resourceInputs["iamRequestUrl"] = args?.iamRequestUrl;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["nonce"] = args?.nonce;
            resourceInputs["pkcs7"] = args?.pkcs7;
            resourceInputs["role"] = args?.role;
            resourceInputs["signature"] = args?.signature;
            resourceInputs["accessor"] = undefined /*out*/;
            resourceInputs["authType"] = undefined /*out*/;
            resourceInputs["clientToken"] = undefined /*out*/;
            resourceInputs["leaseDuration"] = undefined /*out*/;
            resourceInputs["leaseStartTime"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["renewable"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthBackendLogin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackendLogin resources.
 */
export interface AuthBackendLoginState {
    /**
     * The token's accessor.
     */
    accessor?: pulumi.Input<string>;
    /**
     * The authentication type used to generate this token.
     */
    authType?: pulumi.Input<string>;
    /**
     * The unique name of the AWS auth backend. Defaults to
     * 'aws'.
     */
    backend?: pulumi.Input<string>;
    /**
     * The token returned by Vault.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The HTTP method used in the signed IAM
     * request.
     */
    iamHttpRequestMethod?: pulumi.Input<string>;
    /**
     * The base64-encoded body of the signed
     * request.
     */
    iamRequestBody?: pulumi.Input<string>;
    /**
     * The base64-encoded, JSON serialized
     * representation of the GetCallerIdentity HTTP request headers.
     */
    iamRequestHeaders?: pulumi.Input<string>;
    /**
     * The base64-encoded HTTP URL used in the signed
     * request.
     */
    iamRequestUrl?: pulumi.Input<string>;
    /**
     * The base64-encoded EC2 instance identity document to
     * authenticate with. Can be retrieved from the EC2 metadata server.
     */
    identity?: pulumi.Input<string>;
    /**
     * The duration in seconds the token will be valid, relative
     * to the time in `leaseStartTime`.
     */
    leaseDuration?: pulumi.Input<number>;
    leaseStartTime?: pulumi.Input<string>;
    /**
     * A map of information returned by the Vault server about the
     * authentication used to generate this token.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The unique nonce to be used for login requests. Can be
     * set to a user-specified value, or will contain the server-generated value
     * once a token is issued. EC2 instances can only acquire a single token until
     * the whitelist is tidied again unless they keep track of this nonce.
     */
    nonce?: pulumi.Input<string>;
    /**
     * The PKCS#7 signature of the identity document to
     * authenticate with, with all newline characters removed. Can be retrieved from
     * the EC2 metadata server.
     */
    pkcs7?: pulumi.Input<string>;
    /**
     * The Vault policies assigned to this token.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to true if the token can be extended through renewal.
     */
    renewable?: pulumi.Input<boolean>;
    /**
     * The name of the AWS auth backend role to create tokens
     * against.
     */
    role?: pulumi.Input<string>;
    /**
     * The base64-encoded SHA256 RSA signature of the
     * instance identity document to authenticate with, with all newline characters
     * removed. Can be retrieved from the EC2 metadata server.
     */
    signature?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthBackendLogin resource.
 */
export interface AuthBackendLoginArgs {
    /**
     * The unique name of the AWS auth backend. Defaults to
     * 'aws'.
     */
    backend?: pulumi.Input<string>;
    /**
     * The HTTP method used in the signed IAM
     * request.
     */
    iamHttpRequestMethod?: pulumi.Input<string>;
    /**
     * The base64-encoded body of the signed
     * request.
     */
    iamRequestBody?: pulumi.Input<string>;
    /**
     * The base64-encoded, JSON serialized
     * representation of the GetCallerIdentity HTTP request headers.
     */
    iamRequestHeaders?: pulumi.Input<string>;
    /**
     * The base64-encoded HTTP URL used in the signed
     * request.
     */
    iamRequestUrl?: pulumi.Input<string>;
    /**
     * The base64-encoded EC2 instance identity document to
     * authenticate with. Can be retrieved from the EC2 metadata server.
     */
    identity?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The unique nonce to be used for login requests. Can be
     * set to a user-specified value, or will contain the server-generated value
     * once a token is issued. EC2 instances can only acquire a single token until
     * the whitelist is tidied again unless they keep track of this nonce.
     */
    nonce?: pulumi.Input<string>;
    /**
     * The PKCS#7 signature of the identity document to
     * authenticate with, with all newline characters removed. Can be retrieved from
     * the EC2 metadata server.
     */
    pkcs7?: pulumi.Input<string>;
    /**
     * The name of the AWS auth backend role to create tokens
     * against.
     */
    role?: pulumi.Input<string>;
    /**
     * The base64-encoded SHA256 RSA signature of the
     * instance identity document to authenticate with, with all newline characters
     * removed. Can be retrieved from the EC2 metadata server.
     */
    signature?: pulumi.Input<string>;
}
