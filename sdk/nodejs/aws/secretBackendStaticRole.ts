// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const aws = new vault.aws.SecretBackend("aws", {
 *     path: "my-aws",
 *     description: "Obtain AWS credentials.",
 * });
 * const role = new vault.aws.SecretBackendStaticRole("role", {
 *     backend: aws.path,
 *     name: "test",
 *     username: "my-test-user",
 *     rotationPeriod: 3600,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const aws = new vault.aws.SecretBackend("aws", {
 *     path: "my-aws",
 *     description: "Obtain AWS credentials.",
 * });
 * const assume_role = new vault.aws.SecretBackendStaticRole("assume-role", {
 *     backend: aws.path,
 *     name: "assume-role-test",
 *     username: "my-assume-role-user",
 *     assumeRoleArn: "arn:aws:iam::123456789012:role/assume-role",
 *     assumeRoleSessionName: "assume-role-session",
 *     externalId: "test-id",
 *     rotationPeriod: 3600,
 * });
 * ```
 *
 * ## Import
 *
 * AWS secret backend static role can be imported using the full path to the role
 * of the form: `<mount_path>/static-roles/<role_name>` e.g.
 *
 * ```sh
 * $ pulumi import vault:aws/secretBackendStaticRole:SecretBackendStaticRole role aws/static-roles/example-role
 * ```
 */
export class SecretBackendStaticRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendStaticRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions): SecretBackendStaticRole {
        return new SecretBackendStaticRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:aws/secretBackendStaticRole:SecretBackendStaticRole';

    /**
     * Returns true if the given object is an instance of SecretBackendStaticRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendStaticRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendStaticRole.__pulumiType;
    }

    /**
     * Specifies the ARN of the role that Vault should assume.
     * When provided, Vault will use AWS STS to assume this role and generate temporary credentials.
     * If `assumeRoleArn` is provided, `assumeRoleSessionName` must also be provided.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    declare public readonly assumeRoleArn: pulumi.Output<string | undefined>;
    /**
     * Specifies the session name to use when assuming the role.
     * If `assumeRoleSessionName` is provided, `assumeRoleArn` must also be provided.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    declare public readonly assumeRoleSessionName: pulumi.Output<string | undefined>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`
     */
    declare public readonly backend: pulumi.Output<string | undefined>;
    /**
     * Specifies the external ID to use when assuming the role.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    declare public readonly externalId: pulumi.Output<string | undefined>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * How often Vault should rotate the password of the user entry.
     */
    declare public readonly rotationPeriod: pulumi.Output<number>;
    /**
     * The username of the existing AWS IAM to manage password rotation for.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a SecretBackendStaticRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendStaticRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendStaticRoleArgs | SecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendStaticRoleState | undefined;
            resourceInputs["assumeRoleArn"] = state?.assumeRoleArn;
            resourceInputs["assumeRoleSessionName"] = state?.assumeRoleSessionName;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["externalId"] = state?.externalId;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["rotationPeriod"] = state?.rotationPeriod;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as SecretBackendStaticRoleArgs | undefined;
            if (args?.rotationPeriod === undefined && !opts.urn) {
                throw new Error("Missing required property 'rotationPeriod'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["assumeRoleArn"] = args?.assumeRoleArn;
            resourceInputs["assumeRoleSessionName"] = args?.assumeRoleSessionName;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["externalId"] = args?.externalId;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["rotationPeriod"] = args?.rotationPeriod;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendStaticRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendStaticRole resources.
 */
export interface SecretBackendStaticRoleState {
    /**
     * Specifies the ARN of the role that Vault should assume.
     * When provided, Vault will use AWS STS to assume this role and generate temporary credentials.
     * If `assumeRoleArn` is provided, `assumeRoleSessionName` must also be provided.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    assumeRoleArn?: pulumi.Input<string>;
    /**
     * Specifies the session name to use when assuming the role.
     * If `assumeRoleSessionName` is provided, `assumeRoleArn` must also be provided.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    assumeRoleSessionName?: pulumi.Input<string>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`
     */
    backend?: pulumi.Input<string>;
    /**
     * Specifies the external ID to use when assuming the role.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    externalId?: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * How often Vault should rotate the password of the user entry.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The username of the existing AWS IAM to manage password rotation for.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackendStaticRole resource.
 */
export interface SecretBackendStaticRoleArgs {
    /**
     * Specifies the ARN of the role that Vault should assume.
     * When provided, Vault will use AWS STS to assume this role and generate temporary credentials.
     * If `assumeRoleArn` is provided, `assumeRoleSessionName` must also be provided.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    assumeRoleArn?: pulumi.Input<string>;
    /**
     * Specifies the session name to use when assuming the role.
     * If `assumeRoleSessionName` is provided, `assumeRoleArn` must also be provided.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    assumeRoleSessionName?: pulumi.Input<string>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `aws`
     */
    backend?: pulumi.Input<string>;
    /**
     * Specifies the external ID to use when assuming the role.
     * Requires Vault 1.19+. *Available only for Vault Enterprise*.
     */
    externalId?: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend.
     * Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * How often Vault should rotate the password of the user entry.
     */
    rotationPeriod: pulumi.Input<number>;
    /**
     * The username of the existing AWS IAM to manage password rotation for.
     */
    username: pulumi.Input<string>;
}
