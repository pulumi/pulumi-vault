// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AuthBackendTune {
    /**
     * List of headers to whitelist and allowing
     * a plugin to include them in the response.
     */
    allowedResponseHeaders?: string[];
    /**
     * Specifies the list of keys that will
     * not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: string[];
    /**
     * Specifies the list of keys that will
     * not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: string[];
    /**
     * Specifies the default time-to-live.
     * If set, this overrides the global default.
     * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
     */
    defaultLeaseTtl?: string;
    /**
     * Specifies whether to show this mount in
     * the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
     */
    listingVisibility?: string;
    /**
     * Specifies the maximum time-to-live.
     * If set, this overrides the global default.
     * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
     */
    maxLeaseTtl?: string;
    /**
     * List of headers to whitelist and
     * pass from the request to the backend.
     */
    passthroughRequestHeaders?: string[];
    /**
     * Specifies the type of tokens that should be returned by
     * the mount. Valid values are "default-service", "default-batch", "service", "batch".
     */
    tokenType?: string;
}

export interface GetPolicyDocumentRule {
    /**
     * Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
     */
    allowedParameters?: outputs.GetPolicyDocumentRuleAllowedParameter[];
    /**
     * A list of capabilities that this rule apply to `path`. For example, ["read", "write"].
     */
    capabilities: string[];
    /**
     * Blacklists a list of parameter and values. Any values specified here take precedence over `allowedParameter`. See Parameters below.
     */
    deniedParameters?: outputs.GetPolicyDocumentRuleDeniedParameter[];
    /**
     * Description of the rule. Will be added as a comment to rendered rule.
     */
    description?: string;
    /**
     * The maximum allowed TTL that clients can specify for a wrapped response.
     */
    maxWrappingTtl?: string;
    /**
     * The minimum allowed TTL that clients can specify for a wrapped response.
     */
    minWrappingTtl?: string;
    /**
     * A path in Vault that this rule applies to.
     */
    path: string;
    /**
     * A list of parameters that must be specified.
     */
    requiredParameters?: string[];
}

export interface GetPolicyDocumentRuleAllowedParameter {
    /**
     * name of permitted or denied parameter.
     */
    key: string;
    /**
     * list of values what are permitted or denied by policy rule.
     */
    values: string[];
}

export interface GetPolicyDocumentRuleDeniedParameter {
    /**
     * name of permitted or denied parameter.
     */
    key: string;
    /**
     * list of values what are permitted or denied by policy rule.
     */
    values: string[];
}

export namespace azure {
    export interface BackendRoleAzureGroup {
        groupName: string;
        objectId: string;
    }

    export interface BackendRoleAzureRole {
        roleId: string;
        roleName: string;
        scope: string;
    }

}

export namespace config {
    export interface AuthLogin {
        method?: string;
        namespace?: string;
        parameters?: {[key: string]: string};
        path: string;
    }

    export interface AuthLoginAws {
        awsAccessKeyId?: string;
        awsIamEndpoint?: string;
        awsProfile?: string;
        awsRegion?: string;
        awsRoleArn?: string;
        awsRoleSessionName?: string;
        awsSecretAccessKey?: string;
        awsSessionToken?: string;
        awsSharedCredentialsFile?: string;
        awsStsEndpoint?: string;
        awsWebIdentityTokenFile?: string;
        headerValue?: string;
        mount?: string;
        namespace?: string;
        role: string;
    }

    export interface AuthLoginAzure {
        clientId?: string;
        jwt?: string;
        mount?: string;
        namespace?: string;
        resourceGroupName: string;
        role: string;
        scope?: string;
        subscriptionId: string;
        tenantId?: string;
        vmName?: string;
        vmssName?: string;
    }

    export interface AuthLoginCert {
        certFile: string;
        keyFile: string;
        mount?: string;
        name?: string;
        namespace?: string;
    }

    export interface AuthLoginGcp {
        credentials?: string;
        jwt?: string;
        mount?: string;
        namespace?: string;
        role: string;
        serviceAccount?: string;
    }

    export interface AuthLoginJwt {
        jwt: string;
        mount?: string;
        namespace?: string;
        role: string;
    }

    export interface AuthLoginKerberos {
        disableFastNegotiation?: boolean;
        keytabPath?: string;
        krb5confPath?: string;
        mount?: string;
        namespace?: string;
        realm?: string;
        removeInstanceName?: boolean;
        service?: string;
        token?: string;
        username?: string;
    }

    export interface AuthLoginOci {
        authType: string;
        mount?: string;
        namespace?: string;
        role: string;
    }

    export interface AuthLoginOidc {
        callbackAddress?: string;
        callbackListenerAddress?: string;
        mount?: string;
        namespace?: string;
        role: string;
    }

    export interface AuthLoginRadius {
        mount?: string;
        namespace?: string;
        password: string;
        username: string;
    }

    export interface AuthLoginTokenFile {
        filename: string;
        namespace?: string;
    }

    export interface AuthLoginUserpass {
        mount?: string;
        namespace?: string;
        password?: string;
        passwordFile?: string;
        username: string;
    }

    export interface ClientAuth {
        certFile: string;
        keyFile: string;
    }

    export interface Headers {
        name: string;
        value: string;
    }

}

export namespace database {
    export interface SecretBackendConnectionCassandra {
        /**
         * The number of seconds to use as a connection
         * timeout.
         */
        connectTimeout?: number;
        /**
         * A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
         */
        hosts?: string[];
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * Concatenated PEM blocks configuring the certificate
         * chain.
         */
        pemBundle?: string;
        /**
         * A JSON structure configuring the certificate chain.
         */
        pemJson?: string;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: number;
        /**
         * The CQL protocol version to use.
         */
        protocolVersion?: number;
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
    }

    export interface SecretBackendConnectionCouchbase {
        /**
         * Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
         */
        base64Pem?: string;
        /**
         * Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
         */
        bucketName?: string;
        /**
         * A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
         */
        hosts: string[];
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        /**
         * The root credential password used in the connection URL.
         */
        password: string;
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The root credential username used in the connection URL.
         */
        username: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionElasticsearch {
        /**
         * The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
         */
        caCert?: string;
        /**
         * The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
         */
        caPath?: string;
        /**
         * The path to the certificate for the Elasticsearch client to present for communication.
         */
        clientCert?: string;
        /**
         * The path to the key for the Elasticsearch client to use for communication.
         */
        clientKey?: string;
        /**
         * Whether to disable certificate verification.
         */
        insecure?: boolean;
        /**
         * The root credential password used in the connection URL.
         */
        password: string;
        /**
         * This, if set, is used to set the SNI host when connecting via TLS.
         */
        tlsServerName?: string;
        /**
         * The URL for Elasticsearch's API. https requires certificate
         * by trusted CA if used.
         */
        url: string;
        /**
         * The root credential username used in the connection URL.
         */
        username: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionHana {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
    }

    export interface SecretBackendConnectionInfluxdb {
        /**
         * The number of seconds to use as a connection
         * timeout.
         */
        connectTimeout?: number;
        /**
         * The host to connect to.
         */
        host: string;
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        /**
         * The root credential password used in the connection URL.
         */
        password: string;
        /**
         * Concatenated PEM blocks configuring the certificate
         * chain.
         */
        pemBundle?: string;
        /**
         * A JSON structure configuring the certificate chain.
         */
        pemJson?: string;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: number;
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The root credential username used in the connection URL.
         */
        username: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionMongodb {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionMongodbatlas {
        /**
         * The Private Programmatic API Key used to connect with MongoDB Atlas API.
         */
        privateKey: string;
        /**
         * The Project ID the Database User should be created within.
         */
        projectId: string;
        /**
         * The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
         */
        publicKey: string;
    }

    export interface SecretBackendConnectionMssql {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * For Vault v1.9+. Set to true when the target is a
         * Contained Database, e.g. AzureSQL.
         * See the [Vault
         * docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
         */
        containedDb?: boolean;
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionMysql {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
         */
        tlsCa?: string;
        /**
         * x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
         */
        tlsCertificateKey?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionMysqlAurora {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionMysqlLegacy {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionMysqlRds {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionOracle {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionPostgresql {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionRedis {
        /**
         * The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
         */
        caCert?: string;
        /**
         * The host to connect to.
         */
        host: string;
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        /**
         * The root credential password used in the connection URL.
         */
        password: string;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: number;
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The root credential username used in the connection URL.
         */
        username: string;
    }

    export interface SecretBackendConnectionRedisElasticache {
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The region where the ElastiCache cluster is hosted. If omitted Vault tries to infer from the environment instead.
         */
        region?: string;
        /**
         * The URL for Elasticsearch's API. https requires certificate
         * by trusted CA if used.
         */
        url: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
    }

    export interface SecretBackendConnectionRedshift {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretBackendConnectionSnowflake {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: string;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: number;
        /**
         * The root credential password used in the connection URL.
         */
        password?: string;
        /**
         * The root credential username used in the connection URL.
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
    }

    export interface SecretsMountCassandra {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * The number of seconds to use as a connection
         * timeout.
         */
        connectTimeout?: number;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
         */
        hosts?: string[];
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Concatenated PEM blocks configuring the certificate
         * chain.
         */
        pemBundle?: string;
        /**
         * A JSON structure configuring the certificate chain.
         */
        pemJson?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: number;
        /**
         * The CQL protocol version to use.
         */
        protocolVersion?: number;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountCouchbase {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
         */
        base64Pem?: string;
        /**
         * Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
         */
        bucketName?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
         */
        hosts: string[];
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The username to be used in the connection (the account admin level).
         */
        username: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountElasticsearch {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
         */
        caCert?: string;
        /**
         * The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
         */
        caPath?: string;
        /**
         * The path to the certificate for the Elasticsearch client to present for communication.
         */
        clientCert?: string;
        /**
         * The path to the key for the Elasticsearch client to use for communication.
         */
        clientKey?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * Whether to disable certificate verification.
         */
        insecure?: boolean;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * This, if set, is used to set the SNI host when connecting via TLS.
         */
        tlsServerName?: string;
        /**
         * The configuration endpoint for the ElastiCache cluster to connect to.
         */
        url: string;
        /**
         * The username to be used in the connection (the account admin level).
         */
        username: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountHana {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountInfluxdb {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * The number of seconds to use as a connection
         * timeout.
         */
        connectTimeout?: number;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The host to connect to.
         */
        host: string;
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password: string;
        /**
         * Concatenated PEM blocks configuring the certificate
         * chain.
         */
        pemBundle?: string;
        /**
         * A JSON structure configuring the certificate chain.
         */
        pemJson?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: number;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The username to be used in the connection (the account admin level).
         */
        username: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountMongodb {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountMongodbatla {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        name: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * The Private Programmatic API Key used to connect with MongoDB Atlas API.
         */
        privateKey: string;
        /**
         * The Project ID the Database User should be created within.
         */
        projectId: string;
        /**
         * The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
         */
        publicKey: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountMssql {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * For Vault v1.9+. Set to true when the target is a
         * Contained Database, e.g. AzureSQL.
         * See [Vault docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
         */
        containedDb?: boolean;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountMysql {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
         */
        tlsCa?: string;
        /**
         * x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
         */
        tlsCertificateKey?: string;
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountMysqlAurora {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountMysqlLegacy {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountMysqlRd {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountOracle {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountPostgresql {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountRedi {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * The contents of a PEM-encoded CA cert file to use to verify the Redis server's identity.
         */
        caCert?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The host to connect to.
         */
        host: string;
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: boolean;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: number;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * Whether to use TLS when connecting to Redis.
         */
        tls?: boolean;
        /**
         * The username to be used in the connection (the account admin level).
         */
        username: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountRedisElasticach {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * The AWS region where the ElastiCache cluster is hosted.
         * If omitted the plugin tries to infer the region from the environment.
         */
        region?: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The configuration endpoint for the ElastiCache cluster to connect to.
         */
        url: string;
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountRedshift {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * Disable special character escaping in username and password.
         */
        disableEscaping?: boolean;
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

    export interface SecretsMountSnowflake {
        /**
         * A list of roles that are allowed to use this
         * connection.
         */
        allowedRoles?: string[];
        /**
         * A URL containing connection information.  
         * See [Vault docs](https://www.vaultproject.io/api-docs/secret/databases/snowflake#sample-payload)
         */
        connectionUrl?: string;
        /**
         * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
         */
        data?: {[key: string]: any};
        /**
         * The maximum number of seconds to keep
         * a connection alive for.
         */
        maxConnectionLifetime?: number;
        /**
         * The maximum number of idle connections to
         * maintain.
         */
        maxIdleConnections?: number;
        /**
         * The maximum number of open connections to
         * use.
         */
        maxOpenConnections?: number;
        name: string;
        /**
         * The password to be used in the connection.
         */
        password?: string;
        /**
         * Specifies the name of the plugin to use.
         */
        pluginName: string;
        /**
         * A list of database statements to be executed to rotate the root user's credentials.
         */
        rootRotationStatements?: string[];
        /**
         * The username to be used in the connection (the account admin level).
         */
        username?: string;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: string;
        /**
         * Whether the connection should be verified on
         * initial configuration or not.
         */
        verifyConnection?: boolean;
    }

}

export namespace gcp {
    export interface AuthBackendCustomEndpoint {
        /**
         * Replaces the service endpoint used in API requests to `https://www.googleapis.com`.
         */
        api?: string;
        /**
         * Replaces the service endpoint used in API requests to `https://compute.googleapis.com`.
         */
        compute?: string;
        /**
         * Replaces the service endpoint used in API requests to `https://cloudresourcemanager.googleapis.com`.
         */
        crm?: string;
        /**
         * Replaces the service endpoint used in API requests to `https://iam.googleapis.com`.
         */
        iam?: string;
    }

    export interface SecretRolesetBinding {
        /**
         * Resource or resource path for which IAM policy information will be bound. The resource path may be specified in a few different [formats](https://www.vaultproject.io/docs/secrets/gcp/index.html#roleset-bindings).
         */
        resource: string;
        /**
         * List of [GCP IAM roles](https://cloud.google.com/iam/docs/understanding-roles) for the resource.
         */
        roles: string[];
    }

    export interface SecretStaticAccountBinding {
        /**
         * Resource or resource path for which IAM policy information will be bound. The resource path may be specified in a few different [formats](https://www.vaultproject.io/docs/secrets/gcp/index.html#bindings).
         */
        resource: string;
        /**
         * List of [GCP IAM roles](https://cloud.google.com/iam/docs/understanding-roles) for the resource.
         */
        roles: string[];
    }

}

export namespace github {
    export interface AuthBackendTune {
        /**
         * List of headers to whitelist and allowing
         * a plugin to include them in the response.
         */
        allowedResponseHeaders?: string[];
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the request data object.
         */
        auditNonHmacRequestKeys?: string[];
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the response data object.
         */
        auditNonHmacResponseKeys?: string[];
        /**
         * Specifies the default time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        defaultLeaseTtl?: string;
        /**
         * Specifies whether to show this mount in
         * the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
         */
        listingVisibility?: string;
        /**
         * Specifies the maximum time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        maxLeaseTtl?: string;
        /**
         * List of headers to whitelist and
         * pass from the request to the backend.
         */
        passthroughRequestHeaders?: string[];
        /**
         * Specifies the type of tokens that should be returned by
         * the mount. Valid values are "default-service", "default-batch", "service", "batch".
         */
        tokenType?: string;
    }

}

export namespace identity {
    export interface GetEntityAlias {
        /**
         * Canonical ID of the Alias
         */
        canonicalId: string;
        /**
         * Creation time of the Alias
         */
        creationTime: string;
        /**
         * ID of the alias
         */
        id: string;
        /**
         * Last update time of the alias
         */
        lastUpdateTime: string;
        /**
         * List of canonical IDs merged with this alias
         */
        mergedFromCanonicalIds: string[];
        /**
         * Arbitrary metadata
         */
        metadata: {[key: string]: any};
        /**
         * Authentication mount acccessor which this alias belongs to
         */
        mountAccessor: string;
        /**
         * Authentication mount path which this alias belongs to
         */
        mountPath: string;
        /**
         * Authentication mount type which this alias belongs to
         */
        mountType: string;
        /**
         * Name of the alias
         */
        name: string;
    }

}

export namespace jwt {
    export interface AuthBackendTune {
        /**
         * List of headers to whitelist and allowing
         * a plugin to include them in the response.
         */
        allowedResponseHeaders?: string[];
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the request data object.
         */
        auditNonHmacRequestKeys?: string[];
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the response data object.
         */
        auditNonHmacResponseKeys?: string[];
        /**
         * Specifies the default time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        defaultLeaseTtl?: string;
        /**
         * Specifies whether to show this mount in
         * the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
         */
        listingVisibility?: string;
        /**
         * Specifies the maximum time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        maxLeaseTtl?: string;
        /**
         * List of headers to whitelist and
         * pass from the request to the backend.
         */
        passthroughRequestHeaders?: string[];
        /**
         * Specifies the type of tokens that should be returned by
         * the mount. Valid values are "default-service", "default-batch", "service", "batch".
         */
        tokenType?: string;
    }

}

export namespace kv {
    export interface SecretV2CustomMetadata {
        casRequired?: boolean;
        /**
         * A mapping whose keys are the top-level data keys returned from
         * Vault and whose values are the corresponding values. This map can only
         * represent string data, so any non-string values returned from Vault are
         * serialized as JSON.
         */
        data?: {[key: string]: any};
        deleteVersionAfter?: number;
        maxVersions?: number;
    }

}

export namespace managed {
    export interface KeysAw {
        /**
         * The AWS access key to use.
         */
        accessKey: string;
        /**
         * If no existing key can be found in 
         * the referenced backend, instructs Vault to generate a key within the backend.
         */
        allowGenerateKey: boolean;
        /**
         * Controls the ability for Vault to replace through
         * generation or importing a key into the configured backend even
         * if a key is present, if set to `false` those operations are forbidden
         * if a key exists.
         */
        allowReplaceKey: boolean;
        /**
         * Controls the ability for Vault to import a key to the
         * configured backend, if `false`, those operations will be forbidden.
         */
        allowStoreKey: boolean;
        /**
         * If `true`, allows usage from any mount point within the
         * namespace.
         */
        anyMount: boolean;
        /**
         * Supplies the curve value when using the `CKM_ECDSA` mechanism.
         * Required if `allowGenerateKey` is `true`.
         */
        curve?: string;
        /**
         * Used to specify a custom AWS endpoint.
         */
        endpoint?: string;
        /**
         * Supplies the size in bits of the key when using `CKM_RSA_PKCS_PSS`,
         * `CKM_RSA_PKCS_OAEP` or `CKM_RSA_PKCS` as a value for `mechanism`. Required if
         * `allowGenerateKey` is `true`.
         */
        keyBits: string;
        /**
         * The type of key to use.
         */
        keyType: string;
        /**
         * An identifier for the key.
         */
        kmsKey: string;
        /**
         * A unique lowercase name that serves as identifying the key.
         */
        name: string;
        /**
         * The AWS region where the keys are stored (or will be stored).
         */
        region: string;
        /**
         * The AWS access key to use.
         */
        secretKey: string;
        uuid: string;
    }

    export interface KeysAzure {
        /**
         * If no existing key can be found in 
         * the referenced backend, instructs Vault to generate a key within the backend.
         */
        allowGenerateKey: boolean;
        /**
         * Controls the ability for Vault to replace through
         * generation or importing a key into the configured backend even
         * if a key is present, if set to `false` those operations are forbidden
         * if a key exists.
         */
        allowReplaceKey: boolean;
        /**
         * Controls the ability for Vault to import a key to the
         * configured backend, if `false`, those operations will be forbidden.
         */
        allowStoreKey: boolean;
        /**
         * If `true`, allows usage from any mount point within the
         * namespace.
         */
        anyMount: boolean;
        /**
         * The client id for credentials to query the Azure APIs.
         */
        clientId: string;
        /**
         * The client secret for credentials to query the Azure APIs.
         */
        clientSecret: string;
        /**
         * The Azure Cloud environment API endpoints to use.
         */
        environment: string;
        /**
         * Supplies the size in bits of the key when using `CKM_RSA_PKCS_PSS`,
         * `CKM_RSA_PKCS_OAEP` or `CKM_RSA_PKCS` as a value for `mechanism`. Required if
         * `allowGenerateKey` is `true`.
         */
        keyBits?: string;
        /**
         * The Key Vault key to use for encryption and decryption.
         */
        keyName: string;
        /**
         * The type of key to use.
         */
        keyType: string;
        /**
         * A unique lowercase name that serves as identifying the key.
         */
        name: string;
        /**
         * The Azure Key Vault resource's DNS Suffix to connect to.
         */
        resource: string;
        /**
         * The tenant id for the Azure Active Directory organization.
         */
        tenantId: string;
        uuid: string;
        /**
         * The Key Vault vault to use for encryption and decryption.
         */
        vaultName: string;
    }

    export interface KeysPkc {
        /**
         * If no existing key can be found in 
         * the referenced backend, instructs Vault to generate a key within the backend.
         */
        allowGenerateKey: boolean;
        /**
         * Controls the ability for Vault to replace through
         * generation or importing a key into the configured backend even
         * if a key is present, if set to `false` those operations are forbidden
         * if a key exists.
         */
        allowReplaceKey: boolean;
        /**
         * Controls the ability for Vault to import a key to the
         * configured backend, if `false`, those operations will be forbidden.
         */
        allowStoreKey: boolean;
        /**
         * If `true`, allows usage from any mount point within the
         * namespace.
         */
        anyMount: boolean;
        /**
         * Supplies the curve value when using the `CKM_ECDSA` mechanism.
         * Required if `allowGenerateKey` is `true`.
         */
        curve?: string;
        /**
         * Force all operations to open up a read-write session to
         * the HSM.
         */
        forceRwSession?: string;
        /**
         * Supplies the size in bits of the key when using `CKM_RSA_PKCS_PSS`,
         * `CKM_RSA_PKCS_OAEP` or `CKM_RSA_PKCS` as a value for `mechanism`. Required if
         * `allowGenerateKey` is `true`.
         */
        keyBits?: string;
        /**
         * The id of a PKCS#11 key to use.
         */
        keyId: string;
        /**
         * The label of the key to use.
         */
        keyLabel: string;
        /**
         * The name of the kmsLibrary stanza to use from Vault's config
         * to lookup the local library path.
         */
        library: string;
        /**
         * The encryption/decryption mechanism to use, specified as a
         * hexadecimal (prefixed by 0x) string.
         */
        mechanism: string;
        /**
         * A unique lowercase name that serves as identifying the key.
         */
        name: string;
        /**
         * The PIN for login.
         */
        pin: string;
        /**
         * The slot number to use, specified as a string in a decimal format
         * (e.g. `2305843009213693953`).
         */
        slot?: string;
        /**
         * The slot token label to use.
         */
        tokenLabel?: string;
        uuid: string;
    }

}

export namespace okta {
    export interface AuthBackendGroup {
        /**
         * Name of the group within the Okta
         */
        groupName: string;
        /**
         * List of Vault policies to associate with this user
         */
        policies: string[];
    }

    export interface AuthBackendUser {
        /**
         * List of Okta groups to associate with this user
         */
        groups?: string[];
        /**
         * List of Vault policies to associate with this user
         */
        policies?: string[];
        /**
         * Name of the user within Okta
         */
        username: string;
    }

}

export namespace pkiSecret {
}

export namespace rabbitMq {
    export interface SecretBackendRoleVhost {
        configure: string;
        host: string;
        read: string;
        write: string;
    }

    export interface SecretBackendRoleVhostTopic {
        host: string;
        /**
         * Specifies a map of virtual hosts to permissions.
         */
        vhosts?: outputs.rabbitMq.SecretBackendRoleVhostTopicVhost[];
    }

    export interface SecretBackendRoleVhostTopicVhost {
        read: string;
        topic: string;
        write: string;
    }

}

export namespace ssh {
    export interface SecretBackendRoleAllowedUserKeyConfig {
        /**
         * A list of allowed key lengths as integers. 
         * For key types that do not support setting the length a value of `[0]` should be used.
         * Setting multiple lengths is only supported on Vault 1.10+. For prior releases `length`
         * must be set to a single element list.
         */
        lengths: number[];
        /**
         * The SSH public key type.  
         * *Supported key types are:*
         * `rsa`, `ecdsa`, `ec`, `dsa`, `ed25519`, `ssh-rsa`, `ssh-dss`, `ssh-ed25519`,
         * `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp521`
         */
        type: string;
    }

}
