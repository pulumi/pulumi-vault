// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AuthBackendTune {
    /**
     * List of headers to whitelist and allowing
     * a plugin to include them in the response.
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will
     * not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will
     * not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the default time-to-live.
     * If set, this overrides the global default.
     * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
     */
    defaultLeaseTtl?: pulumi.Input<string>;
    /**
     * Specifies whether to show this mount in
     * the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Specifies the maximum time-to-live.
     * If set, this overrides the global default.
     * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
     */
    maxLeaseTtl?: pulumi.Input<string>;
    /**
     * List of headers to whitelist and
     * pass from the request to the backend.
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the type of tokens that should be returned by
     * the mount. Valid values are "default-service", "default-batch", "service", "batch".
     */
    tokenType?: pulumi.Input<string>;
}

export interface GetPolicyDocumentRuleArgs {
    /**
     * Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
     */
    allowedParameters?: pulumi.Input<pulumi.Input<inputs.GetPolicyDocumentRuleAllowedParameterArgs>[]>;
    /**
     * A list of capabilities that this rule apply to `path`. For example, ["read", "write"].
     */
    capabilities: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Blacklists a list of parameter and values. Any values specified here take precedence over `allowedParameter`. See Parameters below.
     */
    deniedParameters?: pulumi.Input<pulumi.Input<inputs.GetPolicyDocumentRuleDeniedParameterArgs>[]>;
    /**
     * Description of the rule. Will be added as a comment to rendered rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The maximum allowed TTL that clients can specify for a wrapped response.
     */
    maxWrappingTtl?: pulumi.Input<string>;
    /**
     * The minimum allowed TTL that clients can specify for a wrapped response.
     */
    minWrappingTtl?: pulumi.Input<string>;
    /**
     * A path in Vault that this rule applies to.
     */
    path: pulumi.Input<string>;
    /**
     * A list of parameters that must be specified.
     */
    requiredParameters?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPolicyDocumentRule {
    /**
     * Whitelists a list of keys and values that are permitted on the given path. See Parameters below.
     */
    allowedParameters?: inputs.GetPolicyDocumentRuleAllowedParameter[];
    /**
     * A list of capabilities that this rule apply to `path`. For example, ["read", "write"].
     */
    capabilities: string[];
    /**
     * Blacklists a list of parameter and values. Any values specified here take precedence over `allowedParameter`. See Parameters below.
     */
    deniedParameters?: inputs.GetPolicyDocumentRuleDeniedParameter[];
    /**
     * Description of the rule. Will be added as a comment to rendered rule.
     */
    description?: string;
    /**
     * The maximum allowed TTL that clients can specify for a wrapped response.
     */
    maxWrappingTtl?: string;
    /**
     * The minimum allowed TTL that clients can specify for a wrapped response.
     */
    minWrappingTtl?: string;
    /**
     * A path in Vault that this rule applies to.
     */
    path: string;
    /**
     * A list of parameters that must be specified.
     */
    requiredParameters?: string[];
}

export interface GetPolicyDocumentRuleAllowedParameterArgs {
    /**
     * name of permitted or denied parameter.
     */
    key: pulumi.Input<string>;
    /**
     * list of values what are permitted or denied by policy rule.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPolicyDocumentRuleAllowedParameter {
    /**
     * name of permitted or denied parameter.
     */
    key: string;
    /**
     * list of values what are permitted or denied by policy rule.
     */
    values: string[];
}

export interface GetPolicyDocumentRuleDeniedParameter {
    /**
     * name of permitted or denied parameter.
     */
    key: string;
    /**
     * list of values what are permitted or denied by policy rule.
     */
    values: string[];
}

export interface GetPolicyDocumentRuleDeniedParameterArgs {
    /**
     * name of permitted or denied parameter.
     */
    key: pulumi.Input<string>;
    /**
     * list of values what are permitted or denied by policy rule.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProviderAuthLogin {
    method?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    path: pulumi.Input<string>;
}

export interface ProviderClientAuth {
    certFile: pulumi.Input<string>;
    keyFile: pulumi.Input<string>;
}

export interface ProviderHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
export namespace azure {
    export interface BackendRoleAzureGroup {
        groupName: pulumi.Input<string>;
        objectId?: pulumi.Input<string>;
    }

    export interface BackendRoleAzureRole {
        roleId?: pulumi.Input<string>;
        roleName: pulumi.Input<string>;
        scope: pulumi.Input<string>;
    }
}

export namespace config {
}

export namespace database {
    export interface SecretBackendConnectionCassandra {
        /**
         * The number of seconds to use as a connection
         * timeout.
         */
        connectTimeout?: pulumi.Input<number>;
        /**
         * A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
         */
        hosts?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: pulumi.Input<boolean>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * Concatenated PEM blocks configuring the certificate
         * chain.
         */
        pemBundle?: pulumi.Input<string>;
        /**
         * A JSON structure configuring the certificate chain.
         */
        pemJson?: pulumi.Input<string>;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: pulumi.Input<number>;
        /**
         * The CQL protocol version to use.
         */
        protocolVersion?: pulumi.Input<number>;
        /**
         * Whether to use TLS when connecting to Cassandra.
         */
        tls?: pulumi.Input<boolean>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionCouchbase {
        /**
         * Required if `tls` is `true`. Specifies the certificate authority of the Couchbase server, as a PEM certificate that has been base64 encoded.
         */
        base64Pem?: pulumi.Input<string>;
        /**
         * Required for Couchbase versions prior to 6.5.0. This is only used to verify vault's connection to the server.
         */
        bucketName?: pulumi.Input<string>;
        /**
         * A set of Couchbase URIs to connect to. Must use `couchbases://` scheme if `tls` is `true`.
         */
        hosts: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: pulumi.Input<boolean>;
        /**
         * The root credential password used in the connection URL.
         */
        password: pulumi.Input<string>;
        /**
         * Whether to use TLS when connecting to Cassandra.
         */
        tls?: pulumi.Input<boolean>;
        /**
         * The root credential username used in the connection URL.
         */
        username: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionElasticsearch {
        /**
         * The root credential password used in the connection URL.
         */
        password: pulumi.Input<string>;
        /**
         * The URL for Elasticsearch's API. https requires certificate
         * by trusted CA if used.
         */
        url: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionHana {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionInfluxdb {
        /**
         * The number of seconds to use as a connection
         * timeout.
         */
        connectTimeout?: pulumi.Input<number>;
        /**
         * The host to connect to.
         */
        host: pulumi.Input<string>;
        /**
         * Whether to skip verification of the server
         * certificate when using TLS.
         */
        insecureTls?: pulumi.Input<boolean>;
        /**
         * The root credential password used in the connection URL.
         */
        password: pulumi.Input<string>;
        /**
         * Concatenated PEM blocks configuring the certificate
         * chain.
         */
        pemBundle?: pulumi.Input<string>;
        /**
         * A JSON structure configuring the certificate chain.
         */
        pemJson?: pulumi.Input<string>;
        /**
         * The default port to connect to if no port is specified as
         * part of the host.
         */
        port?: pulumi.Input<number>;
        /**
         * Whether to use TLS when connecting to Cassandra.
         */
        tls?: pulumi.Input<boolean>;
        /**
         * The root credential username used in the connection URL.
         */
        username: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMongodb {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMongodbatlas {
        /**
         * The Private Programmatic API Key used to connect with MongoDB Atlas API.
         */
        privateKey: pulumi.Input<string>;
        /**
         * The Project ID the Database User should be created within.
         */
        projectId: pulumi.Input<string>;
        /**
         * The Public Programmatic API Key used to authenticate with the MongoDB Atlas API.
         */
        publicKey: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMssql {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * For Vault v1.9+. Set to true when the target is a
         * Contained Database, e.g. AzureSQL.
         * See the [Vault
         * docs](https://www.vaultproject.io/api/secret/databases/mssql#contained_db)
         */
        containedDb?: pulumi.Input<boolean>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMysql {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * x509 CA file for validating the certificate presented by the MySQL server. Must be PEM encoded.
         */
        tlsCa?: pulumi.Input<string>;
        /**
         * x509 certificate for connecting to the database. This must be a PEM encoded version of the private key and the certificate combined.
         */
        tlsCertificateKey?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMysqlAurora {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMysqlLegacy {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMysqlRds {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionOracle {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionPostgresql {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionRedshift {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionSnowflake {
        /**
         * Specifies the Redshift DSN. See
         * the [Vault
         * docs](https://www.vaultproject.io/api-docs/secret/databases/redshift#sample-payload)
         * for an example.
         */
        connectionUrl?: pulumi.Input<string>;
        /**
         * The maximum amount of time a connection may be reused.
         */
        maxConnectionLifetime?: pulumi.Input<number>;
        /**
         * The maximum number of idle connections to
         * the database.
         */
        maxIdleConnections?: pulumi.Input<number>;
        /**
         * The maximum number of open connections to
         * the database.
         */
        maxOpenConnections?: pulumi.Input<number>;
        /**
         * The root credential password used in the connection URL.
         */
        password?: pulumi.Input<string>;
        /**
         * The root credential username used in the connection URL.
         */
        username?: pulumi.Input<string>;
        /**
         * - [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
         */
        usernameTemplate?: pulumi.Input<string>;
    }
}

export namespace gcp {
    export interface SecretRolesetBinding {
        /**
         * Resource or resource path for which IAM policy information will be bound. The resource path may be specified in a few different [formats](https://www.vaultproject.io/docs/secrets/gcp/index.html#roleset-bindings).
         */
        resource: pulumi.Input<string>;
        /**
         * List of [GCP IAM roles](https://cloud.google.com/iam/docs/understanding-roles) for the resource.
         */
        roles: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SecretStaticAccountBinding {
        /**
         * Resource or resource path for which IAM policy information will be bound. The resource path may be specified in a few different [formats](https://www.vaultproject.io/docs/secrets/gcp/index.html#bindings).
         */
        resource: pulumi.Input<string>;
        /**
         * List of [GCP IAM roles](https://cloud.google.com/iam/docs/understanding-roles) for the resource.
         */
        roles: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace github {
    export interface AuthBackendTune {
        /**
         * List of headers to whitelist and allowing
         * a plugin to include them in the response.
         */
        allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the request data object.
         */
        auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the response data object.
         */
        auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the default time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        defaultLeaseTtl?: pulumi.Input<string>;
        /**
         * Specifies whether to show this mount in
         * the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
         */
        listingVisibility?: pulumi.Input<string>;
        /**
         * Specifies the maximum time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        maxLeaseTtl?: pulumi.Input<string>;
        /**
         * List of headers to whitelist and
         * pass from the request to the backend.
         */
        passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the type of tokens that should be returned by
         * the mount. Valid values are "default-service", "default-batch", "service", "batch".
         */
        tokenType?: pulumi.Input<string>;
    }
}

export namespace identity {
}

export namespace jwt {
    export interface AuthBackendTune {
        /**
         * List of headers to whitelist and allowing
         * a plugin to include them in the response.
         */
        allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the request data object.
         */
        auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the list of keys that will
         * not be HMAC'd by audit devices in the response data object.
         */
        auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the default time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        defaultLeaseTtl?: pulumi.Input<string>;
        /**
         * Specifies whether to show this mount in
         * the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
         */
        listingVisibility?: pulumi.Input<string>;
        /**
         * Specifies the maximum time-to-live.
         * If set, this overrides the global default.
         * Must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration)
         */
        maxLeaseTtl?: pulumi.Input<string>;
        /**
         * List of headers to whitelist and
         * pass from the request to the backend.
         */
        passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the type of tokens that should be returned by
         * the mount. Valid values are "default-service", "default-batch", "service", "batch".
         */
        tokenType?: pulumi.Input<string>;
    }
}

export namespace okta {
    export interface AuthBackendGroup {
        /**
         * Name of the group within the Okta
         */
        groupName: pulumi.Input<string>;
        /**
         * List of Vault policies to associate with this user
         */
        policies: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AuthBackendUser {
        /**
         * List of Okta groups to associate with this user
         */
        groups: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * List of Vault policies to associate with this user
         */
        policies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Name of the user within Okta
         */
        username: pulumi.Input<string>;
    }
}

export namespace rabbitMq {
    export interface SecretBackendRoleVhost {
        configure: pulumi.Input<string>;
        host: pulumi.Input<string>;
        read: pulumi.Input<string>;
        write: pulumi.Input<string>;
    }

    export interface SecretBackendRoleVhostTopic {
        host: pulumi.Input<string>;
        /**
         * Specifies a map of virtual hosts to permissions.
         */
        vhosts?: pulumi.Input<pulumi.Input<inputs.rabbitMq.SecretBackendRoleVhostTopicVhost>[]>;
    }

    export interface SecretBackendRoleVhostTopicVhost {
        read: pulumi.Input<string>;
        topic: pulumi.Input<string>;
        write: pulumi.Input<string>;
    }
}
