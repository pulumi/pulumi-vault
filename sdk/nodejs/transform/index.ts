// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlphabetArgs, AlphabetState } from "./alphabet";
export type Alphabet = import("./alphabet").Alphabet;
export const Alphabet: typeof import("./alphabet").Alphabet = null as any;
utilities.lazyLoad(exports, ["Alphabet"], () => require("./alphabet"));

export { GetDecodeArgs, GetDecodeResult, GetDecodeOutputArgs } from "./getDecode";
export const getDecode: typeof import("./getDecode").getDecode = null as any;
export const getDecodeOutput: typeof import("./getDecode").getDecodeOutput = null as any;
utilities.lazyLoad(exports, ["getDecode","getDecodeOutput"], () => require("./getDecode"));

export { GetEncodeArgs, GetEncodeResult, GetEncodeOutputArgs } from "./getEncode";
export const getEncode: typeof import("./getEncode").getEncode = null as any;
export const getEncodeOutput: typeof import("./getEncode").getEncodeOutput = null as any;
utilities.lazyLoad(exports, ["getEncode","getEncodeOutput"], () => require("./getEncode"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { TransformationArgs, TransformationState } from "./transformation";
export type Transformation = import("./transformation").Transformation;
export const Transformation: typeof import("./transformation").Transformation = null as any;
utilities.lazyLoad(exports, ["Transformation"], () => require("./transformation"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vault:transform/alphabet:Alphabet":
                return new Alphabet(name, <any>undefined, { urn })
            case "vault:transform/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "vault:transform/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "vault:transform/transformation:Transformation":
                return new Transformation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vault", "transform/alphabet", _module)
pulumi.runtime.registerResourceModule("vault", "transform/role", _module)
pulumi.runtime.registerResourceModule("vault", "transform/template", _module)
pulumi.runtime.registerResourceModule("vault", "transform/transformation", _module)
