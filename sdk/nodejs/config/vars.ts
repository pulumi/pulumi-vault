// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

let __config = new pulumi.Config("vault");

/**
 * If true, adds the value of the `address` argument to the Terraform process environment.
 */
export let addAddressToEnv: string | undefined = __config.get("addAddressToEnv");
/**
 * URL of the root of the target Vault server.
 */
export let address: string | undefined = __config.get("address") || utilities.getEnv("VAULT_ADDR");
/**
 * Login to vault with an existing auth method using auth/<mount>/login
 */
export let authLogins: outputs.config.AuthLogins[] | undefined = __config.getObject<outputs.config.AuthLogins[]>("authLogins");
/**
 * Path to directory containing CA certificate files to validate the server's certificate.
 */
export let caCertDir: string | undefined = __config.get("caCertDir") || utilities.getEnv("VAULT_CAPATH");
/**
 * Path to a CA certificate file to validate the server's certificate.
 */
export let caCertFile: string | undefined = __config.get("caCertFile") || utilities.getEnv("VAULT_CACERT");
/**
 * Client authentication credentials.
 */
export let clientAuths: outputs.config.ClientAuths[] | undefined = __config.getObject<outputs.config.ClientAuths[]>("clientAuths");
/**
 * The headers to send with each Vault request.
 */
export let headers: outputs.config.Headers[] | undefined = __config.getObject<outputs.config.Headers[]>("headers");
/**
 * Maximum TTL for secret leases requested by this provider
 */
export let maxLeaseTtlSeconds: number | undefined = __config.getObject<number>("maxLeaseTtlSeconds") || (<any>utilities.getEnvNumber("TERRAFORM_VAULT_MAX_TTL") || 1200);
/**
 * Maximum number of retries when a 5xx error code is encountered.
 */
export let maxRetries: number | undefined = __config.getObject<number>("maxRetries") || (<any>utilities.getEnvNumber("VAULT_MAX_RETRIES") || 2);
/**
 * The namespace to use. Available only for Vault Enterprise
 */
export let namespace: string | undefined = __config.get("namespace") || utilities.getEnv("VAULT_NAMESPACE");
/**
 * Set this to true only if the target Vault server is an insecure development instance.
 */
export let skipTlsVerify: boolean | undefined = __config.getObject<boolean>("skipTlsVerify") || <any>utilities.getEnvBoolean("VAULT_SKIP_VERIFY");
/**
 * Token to use to authenticate to Vault.
 */
export let token: string | undefined = __config.get("token") || utilities.getEnv("VAULT_TOKEN");
/**
 * Token name to use for creating the Vault child token.
 */
export let tokenName: string | undefined = __config.get("tokenName") || utilities.getEnv("VAULT_TOKEN_NAME");
