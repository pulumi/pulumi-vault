// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const jwt = new vault.Plugin("jwt", {
 *     type: "auth",
 *     name: "jwt",
 *     command: "vault-plugin-auth-jwt",
 *     version: "v0.17.0",
 *     sha256: "6bd0a803ed742aa3ce35e4fa23d2c8d550e6c1567bf63410cec489c28b68b0fc",
 *     envs: ["HTTP_PROXY=http://proxy.example.com:8080"],
 * });
 * const jwtAuth = new vault.AuthBackend("jwt_auth", {type: jwt.name});
 * ```
 *
 * ## Import
 *
 * Plugins can be imported using `:type/name/:name` or `:type/version/:version/name/:name` as the ID if the version is non-empty, e.g.
 *
 * ```sh
 * $ pulumi import vault:index/plugin:Plugin jwt auth/name/jwt
 * ```
 * ```sh
 * $ pulumi import vault:index/plugin:Plugin jwt auth/version/v0.17.0/name/jwt
 * ```
 */
export class Plugin extends pulumi.CustomResource {
    /**
     * Get an existing Plugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluginState, opts?: pulumi.CustomResourceOptions): Plugin {
        return new Plugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/plugin:Plugin';

    /**
     * Returns true if the given object is an instance of Plugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plugin.__pulumiType;
    }

    /**
     * List of additional args to pass to the plugin.
     */
    declare public readonly args: pulumi.Output<string[] | undefined>;
    /**
     * Command to execute the plugin, relative to the server's configured `pluginDirectory`.
     */
    declare public readonly command: pulumi.Output<string>;
    /**
     * List of additional environment variables to run the plugin with in KEY=VALUE form.
     */
    declare public readonly envs: pulumi.Output<string[] | undefined>;
    /**
     * Name of the plugin.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies OCI image to run. If specified, setting
     * `command`, `args`, and `env` will update the container's entrypoint, args, and
     * environment variables (append-only) respectively.
     */
    declare public readonly ociImage: pulumi.Output<string | undefined>;
    /**
     * Vault plugin runtime to use if `ociImage` is specified.
     */
    declare public readonly runtime: pulumi.Output<string | undefined>;
    /**
     * SHA256 sum of the plugin binary.
     */
    declare public readonly sha256: pulumi.Output<string>;
    /**
     * Type of plugin; one of "auth", "secret", or "database".
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Semantic version of the plugin.
     */
    declare public readonly version: pulumi.Output<string | undefined>;

    /**
     * Create a Plugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluginArgs | PluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluginState | undefined;
            resourceInputs["args"] = state?.args;
            resourceInputs["command"] = state?.command;
            resourceInputs["envs"] = state?.envs;
            resourceInputs["name"] = state?.name;
            resourceInputs["ociImage"] = state?.ociImage;
            resourceInputs["runtime"] = state?.runtime;
            resourceInputs["sha256"] = state?.sha256;
            resourceInputs["type"] = state?.type;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as PluginArgs | undefined;
            if (args?.command === undefined && !opts.urn) {
                throw new Error("Missing required property 'command'");
            }
            if (args?.sha256 === undefined && !opts.urn) {
                throw new Error("Missing required property 'sha256'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["args"] = args?.args;
            resourceInputs["command"] = args?.command;
            resourceInputs["envs"] = args?.envs ? pulumi.secret(args.envs) : undefined;
            resourceInputs["name"] = args?.name;
            resourceInputs["ociImage"] = args?.ociImage;
            resourceInputs["runtime"] = args?.runtime;
            resourceInputs["sha256"] = args?.sha256;
            resourceInputs["type"] = args?.type;
            resourceInputs["version"] = args?.version;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["envs"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Plugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Plugin resources.
 */
export interface PluginState {
    /**
     * List of additional args to pass to the plugin.
     */
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Command to execute the plugin, relative to the server's configured `pluginDirectory`.
     */
    command?: pulumi.Input<string>;
    /**
     * List of additional environment variables to run the plugin with in KEY=VALUE form.
     */
    envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the plugin.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies OCI image to run. If specified, setting
     * `command`, `args`, and `env` will update the container's entrypoint, args, and
     * environment variables (append-only) respectively.
     */
    ociImage?: pulumi.Input<string>;
    /**
     * Vault plugin runtime to use if `ociImage` is specified.
     */
    runtime?: pulumi.Input<string>;
    /**
     * SHA256 sum of the plugin binary.
     */
    sha256?: pulumi.Input<string>;
    /**
     * Type of plugin; one of "auth", "secret", or "database".
     */
    type?: pulumi.Input<string>;
    /**
     * Semantic version of the plugin.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Plugin resource.
 */
export interface PluginArgs {
    /**
     * List of additional args to pass to the plugin.
     */
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Command to execute the plugin, relative to the server's configured `pluginDirectory`.
     */
    command: pulumi.Input<string>;
    /**
     * List of additional environment variables to run the plugin with in KEY=VALUE form.
     */
    envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the plugin.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies OCI image to run. If specified, setting
     * `command`, `args`, and `env` will update the container's entrypoint, args, and
     * environment variables (append-only) respectively.
     */
    ociImage?: pulumi.Input<string>;
    /**
     * Vault plugin runtime to use if `ociImage` is specified.
     */
    runtime?: pulumi.Input<string>;
    /**
     * SHA256 sum of the plugin binary.
     */
    sha256: pulumi.Input<string>;
    /**
     * Type of plugin; one of "auth", "secret", or "database".
     */
    type: pulumi.Input<string>;
    /**
     * Semantic version of the plugin.
     */
    version?: pulumi.Input<string>;
}
