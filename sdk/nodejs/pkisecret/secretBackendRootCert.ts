// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SecretBackendRootCert extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendRootCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendRootCertState, opts?: pulumi.CustomResourceOptions): SecretBackendRootCert {
        return new SecretBackendRootCert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/secretBackendRootCert:SecretBackendRootCert';

    /**
     * Returns true if the given object is an instance of SecretBackendRootCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendRootCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendRootCert.__pulumiType;
    }

    /**
     * List of alternative names
     */
    public readonly altNames!: pulumi.Output<string[] | undefined>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * The certificate
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * CN of intermediate to create
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * The country
     */
    public readonly country!: pulumi.Output<string | undefined>;
    /**
     * Flag to exclude CN from SANs
     */
    public readonly excludeCnFromSans!: pulumi.Output<boolean | undefined>;
    /**
     * The format of data
     */
    public readonly format!: pulumi.Output<string | undefined>;
    /**
     * List of alternative IPs
     */
    public readonly ipSans!: pulumi.Output<string[] | undefined>;
    /**
     * The issuing CA
     */
    public /*out*/ readonly issuingCa!: pulumi.Output<string>;
    /**
     * The number of bits to use
     */
    public readonly keyBits!: pulumi.Output<number | undefined>;
    /**
     * The desired key type
     */
    public readonly keyType!: pulumi.Output<string | undefined>;
    /**
     * The locality
     */
    public readonly locality!: pulumi.Output<string | undefined>;
    /**
     * The maximum path length to encode in the generated certificate
     */
    public readonly maxPathLength!: pulumi.Output<number | undefined>;
    /**
     * The organization
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * List of other SANs
     */
    public readonly otherSans!: pulumi.Output<string[] | undefined>;
    /**
     * The organization unit
     */
    public readonly ou!: pulumi.Output<string | undefined>;
    /**
     * List of domains for which certificates are allowed to be issued
     */
    public readonly permittedDnsDomains!: pulumi.Output<string[] | undefined>;
    /**
     * The postal code
     */
    public readonly postalCode!: pulumi.Output<string | undefined>;
    /**
     * The private key format
     */
    public readonly privateKeyFormat!: pulumi.Output<string | undefined>;
    /**
     * The province
     */
    public readonly province!: pulumi.Output<string | undefined>;
    /**
     * The serial
     */
    public /*out*/ readonly serial!: pulumi.Output<string>;
    /**
     * The street address
     */
    public readonly streetAddress!: pulumi.Output<string | undefined>;
    /**
     * Time to live
     */
    public readonly ttl!: pulumi.Output<string | undefined>;
    /**
     * Type of intermediate to create. Must be either \"exported\" or \"internal\"
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * List of alternative URIs
     */
    public readonly uriSans!: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecretBackendRootCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendRootCertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendRootCertArgs | SecretBackendRootCertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendRootCertState | undefined;
            resourceInputs["altNames"] = state ? state.altNames : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["excludeCnFromSans"] = state ? state.excludeCnFromSans : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["ipSans"] = state ? state.ipSans : undefined;
            resourceInputs["issuingCa"] = state ? state.issuingCa : undefined;
            resourceInputs["keyBits"] = state ? state.keyBits : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["locality"] = state ? state.locality : undefined;
            resourceInputs["maxPathLength"] = state ? state.maxPathLength : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["otherSans"] = state ? state.otherSans : undefined;
            resourceInputs["ou"] = state ? state.ou : undefined;
            resourceInputs["permittedDnsDomains"] = state ? state.permittedDnsDomains : undefined;
            resourceInputs["postalCode"] = state ? state.postalCode : undefined;
            resourceInputs["privateKeyFormat"] = state ? state.privateKeyFormat : undefined;
            resourceInputs["province"] = state ? state.province : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["streetAddress"] = state ? state.streetAddress : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uriSans"] = state ? state.uriSans : undefined;
        } else {
            const args = argsOrState as SecretBackendRootCertArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["altNames"] = args ? args.altNames : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["excludeCnFromSans"] = args ? args.excludeCnFromSans : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["ipSans"] = args ? args.ipSans : undefined;
            resourceInputs["keyBits"] = args ? args.keyBits : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["locality"] = args ? args.locality : undefined;
            resourceInputs["maxPathLength"] = args ? args.maxPathLength : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["otherSans"] = args ? args.otherSans : undefined;
            resourceInputs["ou"] = args ? args.ou : undefined;
            resourceInputs["permittedDnsDomains"] = args ? args.permittedDnsDomains : undefined;
            resourceInputs["postalCode"] = args ? args.postalCode : undefined;
            resourceInputs["privateKeyFormat"] = args ? args.privateKeyFormat : undefined;
            resourceInputs["province"] = args ? args.province : undefined;
            resourceInputs["streetAddress"] = args ? args.streetAddress : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uriSans"] = args ? args.uriSans : undefined;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["issuingCa"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendRootCert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendRootCert resources.
 */
export interface SecretBackendRootCertState {
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * The certificate
     */
    certificate?: pulumi.Input<string>;
    /**
     * CN of intermediate to create
     */
    commonName?: pulumi.Input<string>;
    /**
     * The country
     */
    country?: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The issuing CA
     */
    issuingCa?: pulumi.Input<string>;
    /**
     * The number of bits to use
     */
    keyBits?: pulumi.Input<number>;
    /**
     * The desired key type
     */
    keyType?: pulumi.Input<string>;
    /**
     * The locality
     */
    locality?: pulumi.Input<string>;
    /**
     * The maximum path length to encode in the generated certificate
     */
    maxPathLength?: pulumi.Input<number>;
    /**
     * The organization
     */
    organization?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization unit
     */
    ou?: pulumi.Input<string>;
    /**
     * List of domains for which certificates are allowed to be issued
     */
    permittedDnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The postal code
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The private key format
     */
    privateKeyFormat?: pulumi.Input<string>;
    /**
     * The province
     */
    province?: pulumi.Input<string>;
    /**
     * The serial
     */
    serial?: pulumi.Input<string>;
    /**
     * The street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * Time to live
     */
    ttl?: pulumi.Input<string>;
    /**
     * Type of intermediate to create. Must be either \"exported\" or \"internal\"
     */
    type?: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecretBackendRootCert resource.
 */
export interface SecretBackendRootCertArgs {
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * CN of intermediate to create
     */
    commonName: pulumi.Input<string>;
    /**
     * The country
     */
    country?: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of bits to use
     */
    keyBits?: pulumi.Input<number>;
    /**
     * The desired key type
     */
    keyType?: pulumi.Input<string>;
    /**
     * The locality
     */
    locality?: pulumi.Input<string>;
    /**
     * The maximum path length to encode in the generated certificate
     */
    maxPathLength?: pulumi.Input<number>;
    /**
     * The organization
     */
    organization?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization unit
     */
    ou?: pulumi.Input<string>;
    /**
     * List of domains for which certificates are allowed to be issued
     */
    permittedDnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The postal code
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The private key format
     */
    privateKeyFormat?: pulumi.Input<string>;
    /**
     * The province
     */
    province?: pulumi.Input<string>;
    /**
     * The street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * Time to live
     */
    ttl?: pulumi.Input<string>;
    /**
     * Type of intermediate to create. Must be either \"exported\" or \"internal\"
     */
    type: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}
