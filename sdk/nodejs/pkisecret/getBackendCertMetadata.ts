// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const root = new vault.pkisecret.SecretBackendRootCert("root", {
 *     backend: pki.path,
 *     type: "internal",
 *     commonName: "example",
 *     ttl: "86400",
 *     issuerName: "example",
 * });
 * const testSecretBackendRole = new vault.pkisecret.SecretBackendRole("test", {
 *     backend: testVaultPkiSecretBackendRootCert.backend,
 *     name: "test",
 *     allowedDomains: ["test.my.domain"],
 *     allowSubdomains: true,
 *     maxTtl: "3600",
 *     keyUsages: [
 *         "DigitalSignature",
 *         "KeyAgreement",
 *         "KeyEncipherment",
 *     ],
 *     noStoreMetadata: false,
 * });
 * const testSecretBackendCert = new vault.pkisecret.SecretBackendCert("test", {
 *     backend: testSecretBackendRole.backend,
 *     name: testSecretBackendRole.name,
 *     commonName: "cert.test.my.domain",
 *     ttl: "720h",
 *     minSecondsRemaining: 60,
 *     certMetadata: "dGVzdCBtZXRhZGF0YQ==",
 * });
 * const test = testSecretBackendCert.serialNumber.apply(serialNumber => vault.pkiSecret.getBackendCertMetadataOutput({
 *     path: test_root.path,
 *     serial: serialNumber,
 * }));
 * ```
 */
export function getBackendCertMetadata(args: GetBackendCertMetadataArgs, opts?: pulumi.InvokeOptions): Promise<GetBackendCertMetadataResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:pkiSecret/getBackendCertMetadata:getBackendCertMetadata", {
        "namespace": args.namespace,
        "path": args.path,
        "serial": args.serial,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackendCertMetadata.
 */
export interface GetBackendCertMetadataArgs {
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: string;
    /**
     * The path to the PKI secret backend to
     * read the cert metadata from, with no leading or trailing `/`s.
     */
    path: string;
    /**
     * Specifies the serial of the certificate whose metadata to read.
     */
    serial: string;
}

/**
 * A collection of values returned by getBackendCertMetadata.
 */
export interface GetBackendCertMetadataResult {
    /**
     * The metadata associated with the certificate
     */
    readonly certMetadata: string;
    /**
     * The expiration date of the certificate in unix epoch format
     */
    readonly expiration: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ID of the issuer.
     */
    readonly issuerId: string;
    readonly namespace?: string;
    readonly path: string;
    /**
     * The role used to create the certificate
     */
    readonly role: string;
    readonly serial: string;
    /**
     * The serial number
     */
    readonly serialNumber: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const root = new vault.pkisecret.SecretBackendRootCert("root", {
 *     backend: pki.path,
 *     type: "internal",
 *     commonName: "example",
 *     ttl: "86400",
 *     issuerName: "example",
 * });
 * const testSecretBackendRole = new vault.pkisecret.SecretBackendRole("test", {
 *     backend: testVaultPkiSecretBackendRootCert.backend,
 *     name: "test",
 *     allowedDomains: ["test.my.domain"],
 *     allowSubdomains: true,
 *     maxTtl: "3600",
 *     keyUsages: [
 *         "DigitalSignature",
 *         "KeyAgreement",
 *         "KeyEncipherment",
 *     ],
 *     noStoreMetadata: false,
 * });
 * const testSecretBackendCert = new vault.pkisecret.SecretBackendCert("test", {
 *     backend: testSecretBackendRole.backend,
 *     name: testSecretBackendRole.name,
 *     commonName: "cert.test.my.domain",
 *     ttl: "720h",
 *     minSecondsRemaining: 60,
 *     certMetadata: "dGVzdCBtZXRhZGF0YQ==",
 * });
 * const test = testSecretBackendCert.serialNumber.apply(serialNumber => vault.pkiSecret.getBackendCertMetadataOutput({
 *     path: test_root.path,
 *     serial: serialNumber,
 * }));
 * ```
 */
export function getBackendCertMetadataOutput(args: GetBackendCertMetadataOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetBackendCertMetadataResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vault:pkiSecret/getBackendCertMetadata:getBackendCertMetadata", {
        "namespace": args.namespace,
        "path": args.path,
        "serial": args.serial,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackendCertMetadata.
 */
export interface GetBackendCertMetadataOutputArgs {
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The path to the PKI secret backend to
     * read the cert metadata from, with no leading or trailing `/`s.
     */
    path: pulumi.Input<string>;
    /**
     * Specifies the serial of the certificate whose metadata to read.
     */
    serial: pulumi.Input<string>;
}
