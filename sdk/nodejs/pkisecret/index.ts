// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackendAcmeEabArgs, BackendAcmeEabState } from "./backendAcmeEab";
export type BackendAcmeEab = import("./backendAcmeEab").BackendAcmeEab;
export const BackendAcmeEab: typeof import("./backendAcmeEab").BackendAcmeEab = null as any;
utilities.lazyLoad(exports, ["BackendAcmeEab"], () => require("./backendAcmeEab"));

export { BackendConfigAcmeArgs, BackendConfigAcmeState } from "./backendConfigAcme";
export type BackendConfigAcme = import("./backendConfigAcme").BackendConfigAcme;
export const BackendConfigAcme: typeof import("./backendConfigAcme").BackendConfigAcme = null as any;
utilities.lazyLoad(exports, ["BackendConfigAcme"], () => require("./backendConfigAcme"));

export { BackendConfigAutoTidyArgs, BackendConfigAutoTidyState } from "./backendConfigAutoTidy";
export type BackendConfigAutoTidy = import("./backendConfigAutoTidy").BackendConfigAutoTidy;
export const BackendConfigAutoTidy: typeof import("./backendConfigAutoTidy").BackendConfigAutoTidy = null as any;
utilities.lazyLoad(exports, ["BackendConfigAutoTidy"], () => require("./backendConfigAutoTidy"));

export { BackendConfigClusterArgs, BackendConfigClusterState } from "./backendConfigCluster";
export type BackendConfigCluster = import("./backendConfigCluster").BackendConfigCluster;
export const BackendConfigCluster: typeof import("./backendConfigCluster").BackendConfigCluster = null as any;
utilities.lazyLoad(exports, ["BackendConfigCluster"], () => require("./backendConfigCluster"));

export { BackendConfigCmpv2Args, BackendConfigCmpv2State } from "./backendConfigCmpv2";
export type BackendConfigCmpv2 = import("./backendConfigCmpv2").BackendConfigCmpv2;
export const BackendConfigCmpv2: typeof import("./backendConfigCmpv2").BackendConfigCmpv2 = null as any;
utilities.lazyLoad(exports, ["BackendConfigCmpv2"], () => require("./backendConfigCmpv2"));

export { BackendConfigEstArgs, BackendConfigEstState } from "./backendConfigEst";
export type BackendConfigEst = import("./backendConfigEst").BackendConfigEst;
export const BackendConfigEst: typeof import("./backendConfigEst").BackendConfigEst = null as any;
utilities.lazyLoad(exports, ["BackendConfigEst"], () => require("./backendConfigEst"));

export { BackendConfigScepArgs, BackendConfigScepState } from "./backendConfigScep";
export type BackendConfigScep = import("./backendConfigScep").BackendConfigScep;
export const BackendConfigScep: typeof import("./backendConfigScep").BackendConfigScep = null as any;
utilities.lazyLoad(exports, ["BackendConfigScep"], () => require("./backendConfigScep"));

export { GetBackendCertMetadataArgs, GetBackendCertMetadataResult, GetBackendCertMetadataOutputArgs } from "./getBackendCertMetadata";
export const getBackendCertMetadata: typeof import("./getBackendCertMetadata").getBackendCertMetadata = null as any;
export const getBackendCertMetadataOutput: typeof import("./getBackendCertMetadata").getBackendCertMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getBackendCertMetadata","getBackendCertMetadataOutput"], () => require("./getBackendCertMetadata"));

export { GetBackendConfigCmpv2Args, GetBackendConfigCmpv2Result, GetBackendConfigCmpv2OutputArgs } from "./getBackendConfigCmpv2";
export const getBackendConfigCmpv2: typeof import("./getBackendConfigCmpv2").getBackendConfigCmpv2 = null as any;
export const getBackendConfigCmpv2Output: typeof import("./getBackendConfigCmpv2").getBackendConfigCmpv2Output = null as any;
utilities.lazyLoad(exports, ["getBackendConfigCmpv2","getBackendConfigCmpv2Output"], () => require("./getBackendConfigCmpv2"));

export { GetBackendConfigEstArgs, GetBackendConfigEstResult, GetBackendConfigEstOutputArgs } from "./getBackendConfigEst";
export const getBackendConfigEst: typeof import("./getBackendConfigEst").getBackendConfigEst = null as any;
export const getBackendConfigEstOutput: typeof import("./getBackendConfigEst").getBackendConfigEstOutput = null as any;
utilities.lazyLoad(exports, ["getBackendConfigEst","getBackendConfigEstOutput"], () => require("./getBackendConfigEst"));

export { GetBackendConfigScepArgs, GetBackendConfigScepResult, GetBackendConfigScepOutputArgs } from "./getBackendConfigScep";
export const getBackendConfigScep: typeof import("./getBackendConfigScep").getBackendConfigScep = null as any;
export const getBackendConfigScepOutput: typeof import("./getBackendConfigScep").getBackendConfigScepOutput = null as any;
utilities.lazyLoad(exports, ["getBackendConfigScep","getBackendConfigScepOutput"], () => require("./getBackendConfigScep"));

export { GetBackendIssuerArgs, GetBackendIssuerResult, GetBackendIssuerOutputArgs } from "./getBackendIssuer";
export const getBackendIssuer: typeof import("./getBackendIssuer").getBackendIssuer = null as any;
export const getBackendIssuerOutput: typeof import("./getBackendIssuer").getBackendIssuerOutput = null as any;
utilities.lazyLoad(exports, ["getBackendIssuer","getBackendIssuerOutput"], () => require("./getBackendIssuer"));

export { GetBackendIssuersArgs, GetBackendIssuersResult, GetBackendIssuersOutputArgs } from "./getBackendIssuers";
export const getBackendIssuers: typeof import("./getBackendIssuers").getBackendIssuers = null as any;
export const getBackendIssuersOutput: typeof import("./getBackendIssuers").getBackendIssuersOutput = null as any;
utilities.lazyLoad(exports, ["getBackendIssuers","getBackendIssuersOutput"], () => require("./getBackendIssuers"));

export { GetBackendKeyArgs, GetBackendKeyResult, GetBackendKeyOutputArgs } from "./getBackendKey";
export const getBackendKey: typeof import("./getBackendKey").getBackendKey = null as any;
export const getBackendKeyOutput: typeof import("./getBackendKey").getBackendKeyOutput = null as any;
utilities.lazyLoad(exports, ["getBackendKey","getBackendKeyOutput"], () => require("./getBackendKey"));

export { GetBackendKeysArgs, GetBackendKeysResult, GetBackendKeysOutputArgs } from "./getBackendKeys";
export const getBackendKeys: typeof import("./getBackendKeys").getBackendKeys = null as any;
export const getBackendKeysOutput: typeof import("./getBackendKeys").getBackendKeysOutput = null as any;
utilities.lazyLoad(exports, ["getBackendKeys","getBackendKeysOutput"], () => require("./getBackendKeys"));

export { SecretBackendCertArgs, SecretBackendCertState } from "./secretBackendCert";
export type SecretBackendCert = import("./secretBackendCert").SecretBackendCert;
export const SecretBackendCert: typeof import("./secretBackendCert").SecretBackendCert = null as any;
utilities.lazyLoad(exports, ["SecretBackendCert"], () => require("./secretBackendCert"));

export { SecretBackendConfigCaArgs, SecretBackendConfigCaState } from "./secretBackendConfigCa";
export type SecretBackendConfigCa = import("./secretBackendConfigCa").SecretBackendConfigCa;
export const SecretBackendConfigCa: typeof import("./secretBackendConfigCa").SecretBackendConfigCa = null as any;
utilities.lazyLoad(exports, ["SecretBackendConfigCa"], () => require("./secretBackendConfigCa"));

export { SecretBackendConfigIssuersArgs, SecretBackendConfigIssuersState } from "./secretBackendConfigIssuers";
export type SecretBackendConfigIssuers = import("./secretBackendConfigIssuers").SecretBackendConfigIssuers;
export const SecretBackendConfigIssuers: typeof import("./secretBackendConfigIssuers").SecretBackendConfigIssuers = null as any;
utilities.lazyLoad(exports, ["SecretBackendConfigIssuers"], () => require("./secretBackendConfigIssuers"));

export { SecretBackendConfigUrlsArgs, SecretBackendConfigUrlsState } from "./secretBackendConfigUrls";
export type SecretBackendConfigUrls = import("./secretBackendConfigUrls").SecretBackendConfigUrls;
export const SecretBackendConfigUrls: typeof import("./secretBackendConfigUrls").SecretBackendConfigUrls = null as any;
utilities.lazyLoad(exports, ["SecretBackendConfigUrls"], () => require("./secretBackendConfigUrls"));

export { SecretBackendCrlConfigArgs, SecretBackendCrlConfigState } from "./secretBackendCrlConfig";
export type SecretBackendCrlConfig = import("./secretBackendCrlConfig").SecretBackendCrlConfig;
export const SecretBackendCrlConfig: typeof import("./secretBackendCrlConfig").SecretBackendCrlConfig = null as any;
utilities.lazyLoad(exports, ["SecretBackendCrlConfig"], () => require("./secretBackendCrlConfig"));

export { SecretBackendIntermediateCertRequestArgs, SecretBackendIntermediateCertRequestState } from "./secretBackendIntermediateCertRequest";
export type SecretBackendIntermediateCertRequest = import("./secretBackendIntermediateCertRequest").SecretBackendIntermediateCertRequest;
export const SecretBackendIntermediateCertRequest: typeof import("./secretBackendIntermediateCertRequest").SecretBackendIntermediateCertRequest = null as any;
utilities.lazyLoad(exports, ["SecretBackendIntermediateCertRequest"], () => require("./secretBackendIntermediateCertRequest"));

export { SecretBackendIntermediateSetSignedArgs, SecretBackendIntermediateSetSignedState } from "./secretBackendIntermediateSetSigned";
export type SecretBackendIntermediateSetSigned = import("./secretBackendIntermediateSetSigned").SecretBackendIntermediateSetSigned;
export const SecretBackendIntermediateSetSigned: typeof import("./secretBackendIntermediateSetSigned").SecretBackendIntermediateSetSigned = null as any;
utilities.lazyLoad(exports, ["SecretBackendIntermediateSetSigned"], () => require("./secretBackendIntermediateSetSigned"));

export { SecretBackendIssuerArgs, SecretBackendIssuerState } from "./secretBackendIssuer";
export type SecretBackendIssuer = import("./secretBackendIssuer").SecretBackendIssuer;
export const SecretBackendIssuer: typeof import("./secretBackendIssuer").SecretBackendIssuer = null as any;
utilities.lazyLoad(exports, ["SecretBackendIssuer"], () => require("./secretBackendIssuer"));

export { SecretBackendKeyArgs, SecretBackendKeyState } from "./secretBackendKey";
export type SecretBackendKey = import("./secretBackendKey").SecretBackendKey;
export const SecretBackendKey: typeof import("./secretBackendKey").SecretBackendKey = null as any;
utilities.lazyLoad(exports, ["SecretBackendKey"], () => require("./secretBackendKey"));

export { SecretBackendRoleArgs, SecretBackendRoleState } from "./secretBackendRole";
export type SecretBackendRole = import("./secretBackendRole").SecretBackendRole;
export const SecretBackendRole: typeof import("./secretBackendRole").SecretBackendRole = null as any;
utilities.lazyLoad(exports, ["SecretBackendRole"], () => require("./secretBackendRole"));

export { SecretBackendRootCertArgs, SecretBackendRootCertState } from "./secretBackendRootCert";
export type SecretBackendRootCert = import("./secretBackendRootCert").SecretBackendRootCert;
export const SecretBackendRootCert: typeof import("./secretBackendRootCert").SecretBackendRootCert = null as any;
utilities.lazyLoad(exports, ["SecretBackendRootCert"], () => require("./secretBackendRootCert"));

export { SecretBackendRootSignIntermediateArgs, SecretBackendRootSignIntermediateState } from "./secretBackendRootSignIntermediate";
export type SecretBackendRootSignIntermediate = import("./secretBackendRootSignIntermediate").SecretBackendRootSignIntermediate;
export const SecretBackendRootSignIntermediate: typeof import("./secretBackendRootSignIntermediate").SecretBackendRootSignIntermediate = null as any;
utilities.lazyLoad(exports, ["SecretBackendRootSignIntermediate"], () => require("./secretBackendRootSignIntermediate"));

export { SecretBackendSignArgs, SecretBackendSignState } from "./secretBackendSign";
export type SecretBackendSign = import("./secretBackendSign").SecretBackendSign;
export const SecretBackendSign: typeof import("./secretBackendSign").SecretBackendSign = null as any;
utilities.lazyLoad(exports, ["SecretBackendSign"], () => require("./secretBackendSign"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vault:pkiSecret/backendAcmeEab:BackendAcmeEab":
                return new BackendAcmeEab(name, <any>undefined, { urn })
            case "vault:pkiSecret/backendConfigAcme:BackendConfigAcme":
                return new BackendConfigAcme(name, <any>undefined, { urn })
            case "vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy":
                return new BackendConfigAutoTidy(name, <any>undefined, { urn })
            case "vault:pkiSecret/backendConfigCluster:BackendConfigCluster":
                return new BackendConfigCluster(name, <any>undefined, { urn })
            case "vault:pkiSecret/backendConfigCmpv2:BackendConfigCmpv2":
                return new BackendConfigCmpv2(name, <any>undefined, { urn })
            case "vault:pkiSecret/backendConfigEst:BackendConfigEst":
                return new BackendConfigEst(name, <any>undefined, { urn })
            case "vault:pkiSecret/backendConfigScep:BackendConfigScep":
                return new BackendConfigScep(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendCert:SecretBackendCert":
                return new SecretBackendCert(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendConfigCa:SecretBackendConfigCa":
                return new SecretBackendConfigCa(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendConfigIssuers:SecretBackendConfigIssuers":
                return new SecretBackendConfigIssuers(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendConfigUrls:SecretBackendConfigUrls":
                return new SecretBackendConfigUrls(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendCrlConfig:SecretBackendCrlConfig":
                return new SecretBackendCrlConfig(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendIntermediateCertRequest:SecretBackendIntermediateCertRequest":
                return new SecretBackendIntermediateCertRequest(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendIntermediateSetSigned:SecretBackendIntermediateSetSigned":
                return new SecretBackendIntermediateSetSigned(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendIssuer:SecretBackendIssuer":
                return new SecretBackendIssuer(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendKey:SecretBackendKey":
                return new SecretBackendKey(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendRole:SecretBackendRole":
                return new SecretBackendRole(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendRootCert:SecretBackendRootCert":
                return new SecretBackendRootCert(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendRootSignIntermediate:SecretBackendRootSignIntermediate":
                return new SecretBackendRootSignIntermediate(name, <any>undefined, { urn })
            case "vault:pkiSecret/secretBackendSign:SecretBackendSign":
                return new SecretBackendSign(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vault", "pkiSecret/backendAcmeEab", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/backendConfigAcme", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/backendConfigAutoTidy", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/backendConfigCluster", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/backendConfigCmpv2", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/backendConfigEst", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/backendConfigScep", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendCert", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendConfigCa", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendConfigIssuers", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendConfigUrls", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendCrlConfig", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendIntermediateCertRequest", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendIntermediateSetSigned", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendIssuer", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendKey", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendRootCert", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendRootSignIntermediate", _module)
pulumi.runtime.registerResourceModule("vault", "pkiSecret/secretBackendSign", _module)
