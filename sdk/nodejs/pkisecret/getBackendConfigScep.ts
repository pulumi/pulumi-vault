// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const scepConfig = vault.pkiSecret.getBackendConfigScepOutput({
 *     backend: pki.path,
 * });
 * ```
 */
export function getBackendConfigScep(args: GetBackendConfigScepArgs, opts?: pulumi.InvokeOptions): Promise<GetBackendConfigScepResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:pkiSecret/getBackendConfigScep:getBackendConfigScep", {
        "backend": args.backend,
        "logLevel": args.logLevel,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackendConfigScep.
 */
export interface GetBackendConfigScepArgs {
    /**
     * The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     */
    backend: string;
    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     */
    logLevel?: string;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: string;
}

/**
 * A collection of values returned by getBackendConfigScep.
 */
export interface GetBackendConfigScepResult {
    /**
     * List of allowed digest algorithms for SCEP requests.
     */
    readonly allowedDigestAlgorithms: string[];
    /**
     * List of allowed encryption algorithms for SCEP requests.
     */
    readonly allowedEncryptionAlgorithms: string[];
    /**
     * Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     */
    readonly authenticators: outputs.pkiSecret.GetBackendConfigScepAuthenticator[];
    readonly backend: string;
    /**
     * Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
     */
    readonly defaultPathPolicy: string;
    /**
     * Specifies whether SCEP is enabled.
     */
    readonly enabled: boolean;
    /**
     * Lists the 3rd party validation of SCEP requests (see below for nested schema).
     */
    readonly externalValidations: outputs.pkiSecret.GetBackendConfigScepExternalValidation[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A read-only timestamp representing the last time the configuration was updated.
     */
    readonly lastUpdated: string;
    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     */
    readonly logLevel?: string;
    readonly namespace?: string;
    /**
     * If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     */
    readonly restrictCaChainToIssuer: boolean;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const scepConfig = vault.pkiSecret.getBackendConfigScepOutput({
 *     backend: pki.path,
 * });
 * ```
 */
export function getBackendConfigScepOutput(args: GetBackendConfigScepOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetBackendConfigScepResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vault:pkiSecret/getBackendConfigScep:getBackendConfigScep", {
        "backend": args.backend,
        "logLevel": args.logLevel,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackendConfigScep.
 */
export interface GetBackendConfigScepOutputArgs {
    /**
     * The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
}
