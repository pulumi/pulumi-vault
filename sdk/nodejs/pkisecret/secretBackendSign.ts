// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const test = new vault.pkisecret.SecretBackendSign("test", {
 *     backend: pki.path,
 *     name: admin.name,
 *     csr: `-----BEGIN CERTIFICATE REQUEST-----
 * MIIEqDCCApACAQAwYzELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUx
 * ITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEcMBoGA1UEAwwTY2Vy
 * dC50ZXN0Lm15LmRvbWFpbjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
 * AJupYCQ8UVCWII1Zof1c6YcSSaM9hEaDU78cfKP5RoSeH10BvrWRfT+mzCONVpNP
 * CW9Iabtvk6hm0ot6ilnndEyVJbc0g7hdDLBX5BM25D+DGZGJRKUz1V+uBrWmXtIt
 * Vonj7JTDTe7ViH0GDsB7CvqXFGXO2a2cDYBchLkL6vQiFPshxvUsLtwxuy/qdYgy
 * X6ya+AUoZcoQGy1XxNjfH6cPtWSWQGEp1oPR6vL9hU3laTZb3C+VV4jZem+he8/0
 * V+qV6fLG92WTXm2hmf8nrtUqqJ+C7mW/RJod+TviviBadIX0OHXW7k5HVsZood01
 * te8vMRUNJNiZfa9EMIK5oncbQn0LcM3Wo9VrjpL7jREb/4HCS2gswYGv7hzk9cCS
 * kVY4rDucchKbApuI3kfzmO7GFOF5eiSkYZpY/czNn7VVM3WCu6dpOX4+3rhgrZQw
 * kY14L930DaLVRUgve/zKVP2D2GHdEOs+MbV7s96UgigT9pXly/yHPj+1sSYqmnaD
 * 5b7jSeJusmzO/nrwXVGLsnezR87VzHl9Ux9g5s6zh+R+PrZuVxYsLvoUpaasH47O
 * gIcBzSb/6pSGZKAUizmYsHsR1k88dAvsQ+FsUDaNokdi9VndEB4QPmiFmjyLV+0I
 * 1TFoXop4sW11NPz1YCq+IxnYrEaIN3PyhY0GvBJDFY1/AgMBAAGgADANBgkqhkiG
 * 9w0BAQsFAAOCAgEActuqnqS8Y9UF7e08w7tR3FPzGecWreuvxILrlFEZJxiLPFqL
 * It7uJvtypCVQvz6UQzKdBYO7tMpRaWViB8DrWzXNZjLMrg+QHcpveg8C0Ett4scG
 * fnvLk6fTDFYrnGvwHTqiHos5i0y3bFLyS1BGwSpdLAykGtvC+VM8mRyw/Y7CPcKN
 * 77kebY/9xduW1g2uxWLr0x90RuQDv9psPojT+59tRLGSp5Kt0IeD3QtnAZEFE4aN
 * vt+Pd69eg3BgZ8ZeDgoqAw3yppvOkpAFiE5pw2qPZaM4SRphl4d2Lek2zNIMyZqv
 * do5zh356HOgXtDaSg0POnRGrN/Ua+LMCRTg6GEPUnx9uQb/zt8Zu0hIexDGyykp1
 * OGqtWlv/Nc8UYuS38v0BeB6bMPeoqQUjkqs8nHlAEFn0KlgYdtDC+7SdQx6wS4te
 * dBKRNDfC4lS3jYJgs55jHqonZgkpSi3bamlxpfpW0ukGBcmq91wRe4bOw/4uD/vf
 * UwqMWOdCYcU3mdYNjTWy22ORW3SGFQxMBwpUEURCSoeqWr6aJeQ7KAYkx1PrB5T8
 * OTEc13lWf+B0PU9UJuGTsmpIuImPDVd0EVDayr3mT5dDbqTVDbe8ppf2IswABmf0
 * o3DybUeUmknYjl109rdSf+76nuREICHatxXgN3xCMFuBaN4WLO+ksd6Y1Ys=
 * -----END CERTIFICATE REQUEST-----
 * `,
 *     commonName: "test.my.domain",
 * }, {
 *     dependsOn: [admin],
 * });
 * ```
 */
export class SecretBackendSign extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendSign resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendSignState, opts?: pulumi.CustomResourceOptions): SecretBackendSign {
        return new SecretBackendSign(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/secretBackendSign:SecretBackendSign';

    /**
     * Returns true if the given object is an instance of SecretBackendSign.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendSign {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendSign.__pulumiType;
    }

    /**
     * List of alternative names
     */
    declare public readonly altNames: pulumi.Output<string[] | undefined>;
    /**
     * If set to `true`, certs will be renewed if the expiration is within `minSecondsRemaining`. Default `false`
     */
    declare public readonly autoRenew: pulumi.Output<boolean | undefined>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * The CA chain
     */
    declare public /*out*/ readonly caChains: pulumi.Output<string[]>;
    /**
     * A base 64 encoded value or an empty string to associate with the certificate's serial number. The role's noStoreMetadata must be set to false, otherwise an error is returned when specified.
     */
    declare public readonly certMetadata: pulumi.Output<string | undefined>;
    /**
     * The certificate
     */
    declare public /*out*/ readonly certificate: pulumi.Output<string>;
    /**
     * CN of certificate to create
     */
    declare public readonly commonName: pulumi.Output<string>;
    /**
     * The CSR
     */
    declare public readonly csr: pulumi.Output<string>;
    /**
     * Flag to exclude CN from SANs
     */
    declare public readonly excludeCnFromSans: pulumi.Output<boolean | undefined>;
    /**
     * The expiration date of the certificate in unix epoch format
     */
    declare public /*out*/ readonly expiration: pulumi.Output<number>;
    /**
     * The format of data
     */
    declare public readonly format: pulumi.Output<string | undefined>;
    /**
     * List of alternative IPs
     */
    declare public readonly ipSans: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the default issuer of this request. Can
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    declare public readonly issuerRef: pulumi.Output<string | undefined>;
    /**
     * The issuing CA
     */
    declare public /*out*/ readonly issuingCa: pulumi.Output<string>;
    /**
     * Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
     */
    declare public readonly minSecondsRemaining: pulumi.Output<number | undefined>;
    /**
     * Name of the role to create the certificate against
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    declare public readonly notAfter: pulumi.Output<string | undefined>;
    /**
     * List of other SANs
     */
    declare public readonly otherSans: pulumi.Output<string[] | undefined>;
    /**
     * `true` if the current time (during refresh) is after the start of the early renewal window declared by `minSecondsRemaining`, and `false` otherwise; if `autoRenew` is set to `true` then the provider will plan to replace the certificate once renewal is pending.
     */
    declare public /*out*/ readonly renewPending: pulumi.Output<boolean>;
    /**
     * The certificate's serial number, hex formatted.
     */
    declare public /*out*/ readonly serialNumber: pulumi.Output<string>;
    /**
     * Time to live
     */
    declare public readonly ttl: pulumi.Output<string | undefined>;
    /**
     * List of alternative URIs
     */
    declare public readonly uriSans: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecretBackendSign resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendSignArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendSignArgs | SecretBackendSignState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendSignState | undefined;
            resourceInputs["altNames"] = state?.altNames;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["caChains"] = state?.caChains;
            resourceInputs["certMetadata"] = state?.certMetadata;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["commonName"] = state?.commonName;
            resourceInputs["csr"] = state?.csr;
            resourceInputs["excludeCnFromSans"] = state?.excludeCnFromSans;
            resourceInputs["expiration"] = state?.expiration;
            resourceInputs["format"] = state?.format;
            resourceInputs["ipSans"] = state?.ipSans;
            resourceInputs["issuerRef"] = state?.issuerRef;
            resourceInputs["issuingCa"] = state?.issuingCa;
            resourceInputs["minSecondsRemaining"] = state?.minSecondsRemaining;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["notAfter"] = state?.notAfter;
            resourceInputs["otherSans"] = state?.otherSans;
            resourceInputs["renewPending"] = state?.renewPending;
            resourceInputs["serialNumber"] = state?.serialNumber;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["uriSans"] = state?.uriSans;
        } else {
            const args = argsOrState as SecretBackendSignArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.commonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if (args?.csr === undefined && !opts.urn) {
                throw new Error("Missing required property 'csr'");
            }
            resourceInputs["altNames"] = args?.altNames;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["certMetadata"] = args?.certMetadata;
            resourceInputs["commonName"] = args?.commonName;
            resourceInputs["csr"] = args?.csr;
            resourceInputs["excludeCnFromSans"] = args?.excludeCnFromSans;
            resourceInputs["format"] = args?.format;
            resourceInputs["ipSans"] = args?.ipSans;
            resourceInputs["issuerRef"] = args?.issuerRef;
            resourceInputs["minSecondsRemaining"] = args?.minSecondsRemaining;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["notAfter"] = args?.notAfter;
            resourceInputs["otherSans"] = args?.otherSans;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["uriSans"] = args?.uriSans;
            resourceInputs["caChains"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["expiration"] = undefined /*out*/;
            resourceInputs["issuingCa"] = undefined /*out*/;
            resourceInputs["renewPending"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendSign.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendSign resources.
 */
export interface SecretBackendSignState {
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set to `true`, certs will be renewed if the expiration is within `minSecondsRemaining`. Default `false`
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * The CA chain
     */
    caChains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A base 64 encoded value or an empty string to associate with the certificate's serial number. The role's noStoreMetadata must be set to false, otherwise an error is returned when specified.
     */
    certMetadata?: pulumi.Input<string>;
    /**
     * The certificate
     */
    certificate?: pulumi.Input<string>;
    /**
     * CN of certificate to create
     */
    commonName?: pulumi.Input<string>;
    /**
     * The CSR
     */
    csr?: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * The expiration date of the certificate in unix epoch format
     */
    expiration?: pulumi.Input<number>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the default issuer of this request. Can
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    issuerRef?: pulumi.Input<string>;
    /**
     * The issuing CA
     */
    issuingCa?: pulumi.Input<string>;
    /**
     * Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
     */
    minSecondsRemaining?: pulumi.Input<number>;
    /**
     * Name of the role to create the certificate against
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `true` if the current time (during refresh) is after the start of the early renewal window declared by `minSecondsRemaining`, and `false` otherwise; if `autoRenew` is set to `true` then the provider will plan to replace the certificate once renewal is pending.
     */
    renewPending?: pulumi.Input<boolean>;
    /**
     * The certificate's serial number, hex formatted.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * Time to live
     */
    ttl?: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecretBackendSign resource.
 */
export interface SecretBackendSignArgs {
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set to `true`, certs will be renewed if the expiration is within `minSecondsRemaining`. Default `false`
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * A base 64 encoded value or an empty string to associate with the certificate's serial number. The role's noStoreMetadata must be set to false, otherwise an error is returned when specified.
     */
    certMetadata?: pulumi.Input<string>;
    /**
     * CN of certificate to create
     */
    commonName: pulumi.Input<string>;
    /**
     * The CSR
     */
    csr: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the default issuer of this request. Can
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    issuerRef?: pulumi.Input<string>;
    /**
     * Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
     */
    minSecondsRemaining?: pulumi.Input<number>;
    /**
     * Name of the role to create the certificate against
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time to live
     */
    ttl?: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}
