// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Allows setting the SCEP configuration on a PKI Secret Backend.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const scep = new vault.AuthBackend("scep", {
 *     path: "scep-auth",
 *     type: "scep",
 * });
 * const scepChallenge = new vault.ScepAuthBackendRole("scep_challenge", {
 *     backend: scep.id,
 *     name: "scep-auth",
 *     displayName: "Static challenge for SCEP clients",
 *     authType: "static-challenge",
 *     challenge: "ac7e4ada-c8ef-4393-9098-d69d08736833",
 * });
 * const pki = new vault.Mount("pki", {
 *     path: "pki_scep",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const test = new vault.pkisecret.BackendConfigScep("test", {
 *     backend: pki.path,
 *     enabled: true,
 *     defaultPathPolicy: "sign-verbatim",
 *     restrictCaChainToIssuer: true,
 *     authenticators: {
 *         scep: {
 *             accessor: scep.accessor,
 *             scep_role: scepChallenge.name,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The PKI config cluster can be imported using the resource's `id`.
 * In the case of the example above the `id` would be `pki-root/config/scep`,
 * where the `pki-root` component is the resource's `backend`, e.g.
 *
 * ```sh
 * $ pulumi import vault:pkiSecret/backendConfigScep:BackendConfigScep example pki-root/config/scep
 * ```
 */
export class BackendConfigScep extends pulumi.CustomResource {
    /**
     * Get an existing BackendConfigScep resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackendConfigScepState, opts?: pulumi.CustomResourceOptions): BackendConfigScep {
        return new BackendConfigScep(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/backendConfigScep:BackendConfigScep';

    /**
     * Returns true if the given object is an instance of BackendConfigScep.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackendConfigScep {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackendConfigScep.__pulumiType;
    }

    /**
     * List of allowed digest algorithms for SCEP requests.
     */
    public readonly allowedDigestAlgorithms!: pulumi.Output<string[]>;
    /**
     * List of allowed encryption algorithms for SCEP requests.
     */
    public readonly allowedEncryptionAlgorithms!: pulumi.Output<string[]>;
    /**
     * Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     */
    public readonly authenticators!: pulumi.Output<outputs.pkiSecret.BackendConfigScepAuthenticators>;
    /**
     * The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
     */
    public readonly defaultPathPolicy!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether SCEP is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Lists the 3rd party validation of SCEP requests (see below for nested schema).
     */
    public readonly externalValidations!: pulumi.Output<outputs.pkiSecret.BackendConfigScepExternalValidation[]>;
    /**
     * A read-only timestamp representing the last time the configuration was updated.
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     *
     *
     * <a id="nestedatt--authenticators"></a>
     */
    public readonly logLevel!: pulumi.Output<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     */
    public readonly restrictCaChainToIssuer!: pulumi.Output<boolean | undefined>;

    /**
     * Create a BackendConfigScep resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackendConfigScepArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackendConfigScepArgs | BackendConfigScepState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackendConfigScepState | undefined;
            resourceInputs["allowedDigestAlgorithms"] = state ? state.allowedDigestAlgorithms : undefined;
            resourceInputs["allowedEncryptionAlgorithms"] = state ? state.allowedEncryptionAlgorithms : undefined;
            resourceInputs["authenticators"] = state ? state.authenticators : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["defaultPathPolicy"] = state ? state.defaultPathPolicy : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalValidations"] = state ? state.externalValidations : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["restrictCaChainToIssuer"] = state ? state.restrictCaChainToIssuer : undefined;
        } else {
            const args = argsOrState as BackendConfigScepArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["allowedDigestAlgorithms"] = args ? args.allowedDigestAlgorithms : undefined;
            resourceInputs["allowedEncryptionAlgorithms"] = args ? args.allowedEncryptionAlgorithms : undefined;
            resourceInputs["authenticators"] = args ? args.authenticators : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["defaultPathPolicy"] = args ? args.defaultPathPolicy : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalValidations"] = args ? args.externalValidations : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["restrictCaChainToIssuer"] = args ? args.restrictCaChainToIssuer : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackendConfigScep.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackendConfigScep resources.
 */
export interface BackendConfigScepState {
    /**
     * List of allowed digest algorithms for SCEP requests.
     */
    allowedDigestAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of allowed encryption algorithms for SCEP requests.
     */
    allowedEncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     */
    authenticators?: pulumi.Input<inputs.pkiSecret.BackendConfigScepAuthenticators>;
    /**
     * The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
     */
    defaultPathPolicy?: pulumi.Input<string>;
    /**
     * Specifies whether SCEP is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Lists the 3rd party validation of SCEP requests (see below for nested schema).
     */
    externalValidations?: pulumi.Input<pulumi.Input<inputs.pkiSecret.BackendConfigScepExternalValidation>[]>;
    /**
     * A read-only timestamp representing the last time the configuration was updated.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     *
     *
     * <a id="nestedatt--authenticators"></a>
     */
    logLevel?: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     */
    restrictCaChainToIssuer?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a BackendConfigScep resource.
 */
export interface BackendConfigScepArgs {
    /**
     * List of allowed digest algorithms for SCEP requests.
     */
    allowedDigestAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of allowed encryption algorithms for SCEP requests.
     */
    allowedEncryptionAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
     */
    authenticators?: pulumi.Input<inputs.pkiSecret.BackendConfigScepAuthenticators>;
    /**
     * The path to the PKI secret backend to
     * read the SCEP configuration from, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:<role_name>" to specify a role to use as this policy.
     */
    defaultPathPolicy?: pulumi.Input<string>;
    /**
     * Specifies whether SCEP is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Lists the 3rd party validation of SCEP requests (see below for nested schema).
     */
    externalValidations?: pulumi.Input<pulumi.Input<inputs.pkiSecret.BackendConfigScepExternalValidation>[]>;
    /**
     * The level of logging verbosity, affects only SCEP logs on this mount.
     *
     *
     * <a id="nestedatt--authenticators"></a>
     */
    logLevel?: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
     */
    restrictCaChainToIssuer?: pulumi.Input<boolean>;
}
