// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const root = new vault.pkisecret.SecretBackendRootCert("root", {
 *     backend: pki.path,
 *     type: "internal",
 *     commonName: "example",
 *     ttl: "86400",
 *     issuerName: "example",
 * });
 * const example = root.issuerId.apply(issuerId => vault.pkiSecret.getBackendIssuerOutput({
 *     backend: root.path,
 *     issuerRef: issuerId,
 * }));
 * ```
 */
export function getBackendIssuer(args: GetBackendIssuerArgs, opts?: pulumi.InvokeOptions): Promise<GetBackendIssuerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:pkiSecret/getBackendIssuer:getBackendIssuer", {
        "backend": args.backend,
        "disableCriticalExtensionChecks": args.disableCriticalExtensionChecks,
        "disableNameChecks": args.disableNameChecks,
        "disableNameConstraintChecks": args.disableNameConstraintChecks,
        "disablePathLengthChecks": args.disablePathLengthChecks,
        "issuerRef": args.issuerRef,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackendIssuer.
 */
export interface GetBackendIssuerArgs {
    /**
     * The path to the PKI secret backend to
     * read the issuer from, with no leading or trailing `/`s.
     */
    backend: string;
    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * issued certificate) contain critical extensions not processed by Vault.
     */
    disableCriticalExtensionChecks?: boolean;
    /**
     * This determines whether this issuer is able
     * to issue certificates where the chain of trust (including the final issued
     * certificate) contains a link in which the subject of the issuing certificate
     * does not match the named issuer of the certificate it signed.
     */
    disableNameChecks?: boolean;
    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * final issued certificate) violates the name constraints critical extension of
     * one of the issuer certificates in the chain.
     */
    disableNameConstraintChecks?: boolean;
    /**
     * This determines whether this issuer
     * is able to issue certificates where the chain of trust (including the final
     * issued certificate) is longer than allowed by a certificate authority in that
     * chain.
     */
    disablePathLengthChecks?: boolean;
    /**
     * Reference to an existing issuer.
     */
    issuerRef: string;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: string;
}

/**
 * A collection of values returned by getBackendIssuer.
 */
export interface GetBackendIssuerResult {
    readonly backend: string;
    /**
     * The CA chain as a list of format specific certificates.
     */
    readonly caChains: string[];
    /**
     * Certificate associated with this issuer.
     */
    readonly certificate: string;
    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * issued certificate) contain critical extensions not processed by Vault.
     */
    readonly disableCriticalExtensionChecks?: boolean;
    /**
     * This determines whether this issuer is able
     * to issue certificates where the chain of trust (including the final issued
     * certificate) contains a link in which the subject of the issuing certificate
     * does not match the named issuer of the certificate it signed.
     */
    readonly disableNameChecks?: boolean;
    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * final issued certificate) violates the name constraints critical extension of
     * one of the issuer certificates in the chain.
     */
    readonly disableNameConstraintChecks?: boolean;
    /**
     * This determines whether this issuer
     * is able to issue certificates where the chain of trust (including the final
     * issued certificate) is longer than allowed by a certificate authority in that
     * chain.
     */
    readonly disablePathLengthChecks?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ID of the issuer.
     */
    readonly issuerId: string;
    /**
     * Name of the issuer.
     */
    readonly issuerName: string;
    readonly issuerRef: string;
    /**
     * ID of the key used by the issuer.
     */
    readonly keyId: string;
    /**
     * Behavior of a leaf's NotAfter field during issuance.
     */
    readonly leafNotAfterBehavior: string;
    /**
     * Chain of issuer references to build this issuer's computed 
     * CAChain field from, when non-empty.
     */
    readonly manualChains: string[];
    readonly namespace?: string;
    /**
     * Allowed usages for this issuer.
     */
    readonly usage: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const root = new vault.pkisecret.SecretBackendRootCert("root", {
 *     backend: pki.path,
 *     type: "internal",
 *     commonName: "example",
 *     ttl: "86400",
 *     issuerName: "example",
 * });
 * const example = root.issuerId.apply(issuerId => vault.pkiSecret.getBackendIssuerOutput({
 *     backend: root.path,
 *     issuerRef: issuerId,
 * }));
 * ```
 */
export function getBackendIssuerOutput(args: GetBackendIssuerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetBackendIssuerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vault:pkiSecret/getBackendIssuer:getBackendIssuer", {
        "backend": args.backend,
        "disableCriticalExtensionChecks": args.disableCriticalExtensionChecks,
        "disableNameChecks": args.disableNameChecks,
        "disableNameConstraintChecks": args.disableNameConstraintChecks,
        "disablePathLengthChecks": args.disablePathLengthChecks,
        "issuerRef": args.issuerRef,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackendIssuer.
 */
export interface GetBackendIssuerOutputArgs {
    /**
     * The path to the PKI secret backend to
     * read the issuer from, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * issued certificate) contain critical extensions not processed by Vault.
     */
    disableCriticalExtensionChecks?: pulumi.Input<boolean>;
    /**
     * This determines whether this issuer is able
     * to issue certificates where the chain of trust (including the final issued
     * certificate) contains a link in which the subject of the issuing certificate
     * does not match the named issuer of the certificate it signed.
     */
    disableNameChecks?: pulumi.Input<boolean>;
    /**
     * This determines whether this
     * issuer is able to issue certificates where the chain of trust (including the
     * final issued certificate) violates the name constraints critical extension of
     * one of the issuer certificates in the chain.
     */
    disableNameConstraintChecks?: pulumi.Input<boolean>;
    /**
     * This determines whether this issuer
     * is able to issue certificates where the chain of trust (including the final
     * issued certificate) is longer than allowed by a certificate authority in that
     * chain.
     */
    disablePathLengthChecks?: pulumi.Input<boolean>;
    /**
     * Reference to an existing issuer.
     */
    issuerRef: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
}
