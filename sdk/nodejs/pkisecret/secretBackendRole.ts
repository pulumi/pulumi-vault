// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates a role on an PKI Secret Backend for Vault.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     defaultLeaseTtlSeconds: 3600,
 *     maxLeaseTtlSeconds: 86400,
 * });
 * const role = new vault.pkisecret.SecretBackendRole("role", {
 *     backend: pki.path,
 *     name: "my_role",
 *     ttl: "3600",
 *     allowIpSans: true,
 *     keyType: "rsa",
 *     keyBits: 4096,
 *     allowedDomains: [
 *         "example.com",
 *         "my.domain",
 *     ],
 *     allowSubdomains: true,
 * });
 * ```
 *
 * ## Import
 *
 * PKI secret backend roles can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:pkiSecret/secretBackendRole:SecretBackendRole role pki/roles/my_role
 * ```
 */
export class SecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendRoleState, opts?: pulumi.CustomResourceOptions): SecretBackendRole {
        return new SecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/secretBackendRole:SecretBackendRole';

    /**
     * Returns true if the given object is an instance of SecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendRole.__pulumiType;
    }

    /**
     * Flag to allow any name
     */
    declare public readonly allowAnyName: pulumi.Output<boolean | undefined>;
    /**
     * Flag to allow certificates matching the actual domain
     */
    declare public readonly allowBareDomains: pulumi.Output<boolean | undefined>;
    /**
     * Flag to allow names containing glob patterns.
     */
    declare public readonly allowGlobDomains: pulumi.Output<boolean | undefined>;
    /**
     * Flag to allow IP SANs
     */
    declare public readonly allowIpSans: pulumi.Output<boolean | undefined>;
    /**
     * Flag to allow certificates for localhost
     */
    declare public readonly allowLocalhost: pulumi.Output<boolean | undefined>;
    /**
     * Flag to allow certificates matching subdomains
     */
    declare public readonly allowSubdomains: pulumi.Output<boolean | undefined>;
    /**
     * Flag to allow wildcard certificates.
     */
    declare public readonly allowWildcardCertificates: pulumi.Output<boolean | undefined>;
    /**
     * List of allowed domains for certificates
     */
    declare public readonly allowedDomains: pulumi.Output<string[] | undefined>;
    /**
     * Flag, if set, `allowedDomains` can be specified using identity template expressions such as `{{identity.entity.aliases.<mount accessor>.name}}`.
     */
    declare public readonly allowedDomainsTemplate: pulumi.Output<boolean | undefined>;
    /**
     * Defines allowed custom SANs
     */
    declare public readonly allowedOtherSans: pulumi.Output<string[] | undefined>;
    /**
     * An array of allowed serial numbers to put in Subject
     */
    declare public readonly allowedSerialNumbers: pulumi.Output<string[] | undefined>;
    /**
     * Defines allowed URI SANs
     */
    declare public readonly allowedUriSans: pulumi.Output<string[] | undefined>;
    /**
     * Flag, if set, `allowedUriSans` can be specified using identity template expressions such as `{{identity.entity.aliases.<mount accessor>.name}}`.
     */
    declare public readonly allowedUriSansTemplate: pulumi.Output<boolean>;
    /**
     * Defines allowed User IDs
     */
    declare public readonly allowedUserIds: pulumi.Output<string[] | undefined>;
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * Flag to mark basic constraints valid when issuing non-CA certificates
     */
    declare public readonly basicConstraintsValidForNonCa: pulumi.Output<boolean | undefined>;
    /**
     * Flag to specify certificates for client use
     */
    declare public readonly clientFlag: pulumi.Output<boolean | undefined>;
    /**
     * Validations to run on the Common Name field of the certificate, choices: `email`, `hostname`, `disabled`
     */
    declare public readonly cnValidations: pulumi.Output<string[]>;
    /**
     * Flag to specify certificates for code signing use
     */
    declare public readonly codeSigningFlag: pulumi.Output<boolean | undefined>;
    /**
     * The country of generated certificates
     */
    declare public readonly countries: pulumi.Output<string[] | undefined>;
    /**
     * Flag to specify certificates for email protection use
     */
    declare public readonly emailProtectionFlag: pulumi.Output<boolean | undefined>;
    /**
     * Flag to allow only valid host names
     */
    declare public readonly enforceHostnames: pulumi.Output<boolean | undefined>;
    /**
     * Specify the allowed extended key usage OIDs constraint on issued certificates
     */
    declare public readonly extKeyUsageOids: pulumi.Output<string[] | undefined>;
    /**
     * Specify the allowed extended key usage constraint on issued certificates
     */
    declare public readonly extKeyUsages: pulumi.Output<string[] | undefined>;
    /**
     * Flag to generate leases with certificates
     */
    declare public readonly generateLease: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    declare public readonly issuerRef: pulumi.Output<string>;
    /**
     * The number of bits of generated keys
     */
    declare public readonly keyBits: pulumi.Output<number | undefined>;
    /**
     * The generated key type, choices: `rsa`, `ec`, `ed25519`, `any`
     * Defaults to `rsa`
     */
    declare public readonly keyType: pulumi.Output<string | undefined>;
    /**
     * Specify the allowed key usage constraint on issued
     * certificates. Defaults to `["DigitalSignature", "KeyAgreement", "KeyEncipherment"])`.
     * To specify no default key usage constraints, set this to an empty list `[]`.
     */
    declare public readonly keyUsages: pulumi.Output<string[]>;
    /**
     * The locality of generated certificates
     */
    declare public readonly localities: pulumi.Output<string[] | undefined>;
    /**
     * The maximum lease TTL, in seconds, for the role.
     */
    declare public readonly maxTtl: pulumi.Output<string>;
    /**
     * The name to identify this role within the backend. Must be unique within the backend.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Flag to not store certificates in the storage backend
     */
    declare public readonly noStore: pulumi.Output<boolean | undefined>;
    /**
     * Allows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs
     */
    declare public readonly noStoreMetadata: pulumi.Output<boolean | undefined>;
    /**
     * Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    declare public readonly notAfter: pulumi.Output<string | undefined>;
    /**
     * Specifies the duration by which to backdate the NotBefore property.
     */
    declare public readonly notBeforeDuration: pulumi.Output<string>;
    /**
     * The organization unit of generated certificates
     */
    declare public readonly organizationUnit: pulumi.Output<string[] | undefined>;
    /**
     * The organization of generated certificates
     */
    declare public readonly organizations: pulumi.Output<string[] | undefined>;
    /**
     * (Vault 1.11+ only) A block for specifying policy identifers. The `policyIdentifier` block can be repeated, and supports the following arguments:
     */
    declare public readonly policyIdentifier: pulumi.Output<outputs.pkiSecret.SecretBackendRolePolicyIdentifier[] | undefined>;
    /**
     * Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policyIdentifier` blocks instead
     */
    declare public readonly policyIdentifiers: pulumi.Output<string[] | undefined>;
    /**
     * The postal code of generated certificates
     */
    declare public readonly postalCodes: pulumi.Output<string[] | undefined>;
    /**
     * The province of generated certificates
     */
    declare public readonly provinces: pulumi.Output<string[] | undefined>;
    /**
     * Flag to force CN usage
     */
    declare public readonly requireCn: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serialNumber parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serialNumber parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.
     *
     * Example usage:
     */
    declare public readonly serialNumberSource: pulumi.Output<string>;
    /**
     * Flag to specify certificates for server use
     */
    declare public readonly serverFlag: pulumi.Output<boolean | undefined>;
    /**
     * The number of bits to use in the signature algorithm
     */
    declare public readonly signatureBits: pulumi.Output<number>;
    /**
     * The street address of generated certificates
     */
    declare public readonly streetAddresses: pulumi.Output<string[] | undefined>;
    /**
     * The TTL, in seconds, for any certificate issued against this role.
     */
    declare public readonly ttl: pulumi.Output<string>;
    /**
     * Flag to use the CN in the CSR
     */
    declare public readonly useCsrCommonName: pulumi.Output<boolean | undefined>;
    /**
     * Flag to use the SANs in the CSR
     */
    declare public readonly useCsrSans: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.
     */
    declare public readonly usePss: pulumi.Output<boolean | undefined>;

    /**
     * Create a SecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendRoleArgs | SecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendRoleState | undefined;
            resourceInputs["allowAnyName"] = state?.allowAnyName;
            resourceInputs["allowBareDomains"] = state?.allowBareDomains;
            resourceInputs["allowGlobDomains"] = state?.allowGlobDomains;
            resourceInputs["allowIpSans"] = state?.allowIpSans;
            resourceInputs["allowLocalhost"] = state?.allowLocalhost;
            resourceInputs["allowSubdomains"] = state?.allowSubdomains;
            resourceInputs["allowWildcardCertificates"] = state?.allowWildcardCertificates;
            resourceInputs["allowedDomains"] = state?.allowedDomains;
            resourceInputs["allowedDomainsTemplate"] = state?.allowedDomainsTemplate;
            resourceInputs["allowedOtherSans"] = state?.allowedOtherSans;
            resourceInputs["allowedSerialNumbers"] = state?.allowedSerialNumbers;
            resourceInputs["allowedUriSans"] = state?.allowedUriSans;
            resourceInputs["allowedUriSansTemplate"] = state?.allowedUriSansTemplate;
            resourceInputs["allowedUserIds"] = state?.allowedUserIds;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["basicConstraintsValidForNonCa"] = state?.basicConstraintsValidForNonCa;
            resourceInputs["clientFlag"] = state?.clientFlag;
            resourceInputs["cnValidations"] = state?.cnValidations;
            resourceInputs["codeSigningFlag"] = state?.codeSigningFlag;
            resourceInputs["countries"] = state?.countries;
            resourceInputs["emailProtectionFlag"] = state?.emailProtectionFlag;
            resourceInputs["enforceHostnames"] = state?.enforceHostnames;
            resourceInputs["extKeyUsageOids"] = state?.extKeyUsageOids;
            resourceInputs["extKeyUsages"] = state?.extKeyUsages;
            resourceInputs["generateLease"] = state?.generateLease;
            resourceInputs["issuerRef"] = state?.issuerRef;
            resourceInputs["keyBits"] = state?.keyBits;
            resourceInputs["keyType"] = state?.keyType;
            resourceInputs["keyUsages"] = state?.keyUsages;
            resourceInputs["localities"] = state?.localities;
            resourceInputs["maxTtl"] = state?.maxTtl;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["noStore"] = state?.noStore;
            resourceInputs["noStoreMetadata"] = state?.noStoreMetadata;
            resourceInputs["notAfter"] = state?.notAfter;
            resourceInputs["notBeforeDuration"] = state?.notBeforeDuration;
            resourceInputs["organizationUnit"] = state?.organizationUnit;
            resourceInputs["organizations"] = state?.organizations;
            resourceInputs["policyIdentifier"] = state?.policyIdentifier;
            resourceInputs["policyIdentifiers"] = state?.policyIdentifiers;
            resourceInputs["postalCodes"] = state?.postalCodes;
            resourceInputs["provinces"] = state?.provinces;
            resourceInputs["requireCn"] = state?.requireCn;
            resourceInputs["serialNumberSource"] = state?.serialNumberSource;
            resourceInputs["serverFlag"] = state?.serverFlag;
            resourceInputs["signatureBits"] = state?.signatureBits;
            resourceInputs["streetAddresses"] = state?.streetAddresses;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["useCsrCommonName"] = state?.useCsrCommonName;
            resourceInputs["useCsrSans"] = state?.useCsrSans;
            resourceInputs["usePss"] = state?.usePss;
        } else {
            const args = argsOrState as SecretBackendRoleArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["allowAnyName"] = args?.allowAnyName;
            resourceInputs["allowBareDomains"] = args?.allowBareDomains;
            resourceInputs["allowGlobDomains"] = args?.allowGlobDomains;
            resourceInputs["allowIpSans"] = args?.allowIpSans;
            resourceInputs["allowLocalhost"] = args?.allowLocalhost;
            resourceInputs["allowSubdomains"] = args?.allowSubdomains;
            resourceInputs["allowWildcardCertificates"] = args?.allowWildcardCertificates;
            resourceInputs["allowedDomains"] = args?.allowedDomains;
            resourceInputs["allowedDomainsTemplate"] = args?.allowedDomainsTemplate;
            resourceInputs["allowedOtherSans"] = args?.allowedOtherSans;
            resourceInputs["allowedSerialNumbers"] = args?.allowedSerialNumbers;
            resourceInputs["allowedUriSans"] = args?.allowedUriSans;
            resourceInputs["allowedUriSansTemplate"] = args?.allowedUriSansTemplate;
            resourceInputs["allowedUserIds"] = args?.allowedUserIds;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["basicConstraintsValidForNonCa"] = args?.basicConstraintsValidForNonCa;
            resourceInputs["clientFlag"] = args?.clientFlag;
            resourceInputs["cnValidations"] = args?.cnValidations;
            resourceInputs["codeSigningFlag"] = args?.codeSigningFlag;
            resourceInputs["countries"] = args?.countries;
            resourceInputs["emailProtectionFlag"] = args?.emailProtectionFlag;
            resourceInputs["enforceHostnames"] = args?.enforceHostnames;
            resourceInputs["extKeyUsageOids"] = args?.extKeyUsageOids;
            resourceInputs["extKeyUsages"] = args?.extKeyUsages;
            resourceInputs["generateLease"] = args?.generateLease;
            resourceInputs["issuerRef"] = args?.issuerRef;
            resourceInputs["keyBits"] = args?.keyBits;
            resourceInputs["keyType"] = args?.keyType;
            resourceInputs["keyUsages"] = args?.keyUsages;
            resourceInputs["localities"] = args?.localities;
            resourceInputs["maxTtl"] = args?.maxTtl;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["noStore"] = args?.noStore;
            resourceInputs["noStoreMetadata"] = args?.noStoreMetadata;
            resourceInputs["notAfter"] = args?.notAfter;
            resourceInputs["notBeforeDuration"] = args?.notBeforeDuration;
            resourceInputs["organizationUnit"] = args?.organizationUnit;
            resourceInputs["organizations"] = args?.organizations;
            resourceInputs["policyIdentifier"] = args?.policyIdentifier;
            resourceInputs["policyIdentifiers"] = args?.policyIdentifiers;
            resourceInputs["postalCodes"] = args?.postalCodes;
            resourceInputs["provinces"] = args?.provinces;
            resourceInputs["requireCn"] = args?.requireCn;
            resourceInputs["serialNumberSource"] = args?.serialNumberSource;
            resourceInputs["serverFlag"] = args?.serverFlag;
            resourceInputs["signatureBits"] = args?.signatureBits;
            resourceInputs["streetAddresses"] = args?.streetAddresses;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["useCsrCommonName"] = args?.useCsrCommonName;
            resourceInputs["useCsrSans"] = args?.useCsrSans;
            resourceInputs["usePss"] = args?.usePss;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendRole resources.
 */
export interface SecretBackendRoleState {
    /**
     * Flag to allow any name
     */
    allowAnyName?: pulumi.Input<boolean>;
    /**
     * Flag to allow certificates matching the actual domain
     */
    allowBareDomains?: pulumi.Input<boolean>;
    /**
     * Flag to allow names containing glob patterns.
     */
    allowGlobDomains?: pulumi.Input<boolean>;
    /**
     * Flag to allow IP SANs
     */
    allowIpSans?: pulumi.Input<boolean>;
    /**
     * Flag to allow certificates for localhost
     */
    allowLocalhost?: pulumi.Input<boolean>;
    /**
     * Flag to allow certificates matching subdomains
     */
    allowSubdomains?: pulumi.Input<boolean>;
    /**
     * Flag to allow wildcard certificates.
     */
    allowWildcardCertificates?: pulumi.Input<boolean>;
    /**
     * List of allowed domains for certificates
     */
    allowedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag, if set, `allowedDomains` can be specified using identity template expressions such as `{{identity.entity.aliases.<mount accessor>.name}}`.
     */
    allowedDomainsTemplate?: pulumi.Input<boolean>;
    /**
     * Defines allowed custom SANs
     */
    allowedOtherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of allowed serial numbers to put in Subject
     */
    allowedSerialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines allowed URI SANs
     */
    allowedUriSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag, if set, `allowedUriSans` can be specified using identity template expressions such as `{{identity.entity.aliases.<mount accessor>.name}}`.
     */
    allowedUriSansTemplate?: pulumi.Input<boolean>;
    /**
     * Defines allowed User IDs
     */
    allowedUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * Flag to mark basic constraints valid when issuing non-CA certificates
     */
    basicConstraintsValidForNonCa?: pulumi.Input<boolean>;
    /**
     * Flag to specify certificates for client use
     */
    clientFlag?: pulumi.Input<boolean>;
    /**
     * Validations to run on the Common Name field of the certificate, choices: `email`, `hostname`, `disabled`
     */
    cnValidations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to specify certificates for code signing use
     */
    codeSigningFlag?: pulumi.Input<boolean>;
    /**
     * The country of generated certificates
     */
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to specify certificates for email protection use
     */
    emailProtectionFlag?: pulumi.Input<boolean>;
    /**
     * Flag to allow only valid host names
     */
    enforceHostnames?: pulumi.Input<boolean>;
    /**
     * Specify the allowed extended key usage OIDs constraint on issued certificates
     */
    extKeyUsageOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify the allowed extended key usage constraint on issued certificates
     */
    extKeyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to generate leases with certificates
     */
    generateLease?: pulumi.Input<boolean>;
    /**
     * Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    issuerRef?: pulumi.Input<string>;
    /**
     * The number of bits of generated keys
     */
    keyBits?: pulumi.Input<number>;
    /**
     * The generated key type, choices: `rsa`, `ec`, `ed25519`, `any`
     * Defaults to `rsa`
     */
    keyType?: pulumi.Input<string>;
    /**
     * Specify the allowed key usage constraint on issued
     * certificates. Defaults to `["DigitalSignature", "KeyAgreement", "KeyEncipherment"])`.
     * To specify no default key usage constraints, set this to an empty list `[]`.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The locality of generated certificates
     */
    localities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum lease TTL, in seconds, for the role.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend. Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Flag to not store certificates in the storage backend
     */
    noStore?: pulumi.Input<boolean>;
    /**
     * Allows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs
     */
    noStoreMetadata?: pulumi.Input<boolean>;
    /**
     * Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * Specifies the duration by which to backdate the NotBefore property.
     */
    notBeforeDuration?: pulumi.Input<string>;
    /**
     * The organization unit of generated certificates
     */
    organizationUnit?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization of generated certificates
     */
    organizations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Vault 1.11+ only) A block for specifying policy identifers. The `policyIdentifier` block can be repeated, and supports the following arguments:
     */
    policyIdentifier?: pulumi.Input<pulumi.Input<inputs.pkiSecret.SecretBackendRolePolicyIdentifier>[]>;
    /**
     * Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policyIdentifier` blocks instead
     */
    policyIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The postal code of generated certificates
     */
    postalCodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The province of generated certificates
     */
    provinces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to force CN usage
     */
    requireCn?: pulumi.Input<boolean>;
    /**
     * Specifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serialNumber parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serialNumber parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.
     *
     * Example usage:
     */
    serialNumberSource?: pulumi.Input<string>;
    /**
     * Flag to specify certificates for server use
     */
    serverFlag?: pulumi.Input<boolean>;
    /**
     * The number of bits to use in the signature algorithm
     */
    signatureBits?: pulumi.Input<number>;
    /**
     * The street address of generated certificates
     */
    streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The TTL, in seconds, for any certificate issued against this role.
     */
    ttl?: pulumi.Input<string>;
    /**
     * Flag to use the CN in the CSR
     */
    useCsrCommonName?: pulumi.Input<boolean>;
    /**
     * Flag to use the SANs in the CSR
     */
    useCsrSans?: pulumi.Input<boolean>;
    /**
     * Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.
     */
    usePss?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SecretBackendRole resource.
 */
export interface SecretBackendRoleArgs {
    /**
     * Flag to allow any name
     */
    allowAnyName?: pulumi.Input<boolean>;
    /**
     * Flag to allow certificates matching the actual domain
     */
    allowBareDomains?: pulumi.Input<boolean>;
    /**
     * Flag to allow names containing glob patterns.
     */
    allowGlobDomains?: pulumi.Input<boolean>;
    /**
     * Flag to allow IP SANs
     */
    allowIpSans?: pulumi.Input<boolean>;
    /**
     * Flag to allow certificates for localhost
     */
    allowLocalhost?: pulumi.Input<boolean>;
    /**
     * Flag to allow certificates matching subdomains
     */
    allowSubdomains?: pulumi.Input<boolean>;
    /**
     * Flag to allow wildcard certificates.
     */
    allowWildcardCertificates?: pulumi.Input<boolean>;
    /**
     * List of allowed domains for certificates
     */
    allowedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag, if set, `allowedDomains` can be specified using identity template expressions such as `{{identity.entity.aliases.<mount accessor>.name}}`.
     */
    allowedDomainsTemplate?: pulumi.Input<boolean>;
    /**
     * Defines allowed custom SANs
     */
    allowedOtherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of allowed serial numbers to put in Subject
     */
    allowedSerialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines allowed URI SANs
     */
    allowedUriSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag, if set, `allowedUriSans` can be specified using identity template expressions such as `{{identity.entity.aliases.<mount accessor>.name}}`.
     */
    allowedUriSansTemplate?: pulumi.Input<boolean>;
    /**
     * Defines allowed User IDs
     */
    allowedUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * Flag to mark basic constraints valid when issuing non-CA certificates
     */
    basicConstraintsValidForNonCa?: pulumi.Input<boolean>;
    /**
     * Flag to specify certificates for client use
     */
    clientFlag?: pulumi.Input<boolean>;
    /**
     * Validations to run on the Common Name field of the certificate, choices: `email`, `hostname`, `disabled`
     */
    cnValidations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to specify certificates for code signing use
     */
    codeSigningFlag?: pulumi.Input<boolean>;
    /**
     * The country of generated certificates
     */
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to specify certificates for email protection use
     */
    emailProtectionFlag?: pulumi.Input<boolean>;
    /**
     * Flag to allow only valid host names
     */
    enforceHostnames?: pulumi.Input<boolean>;
    /**
     * Specify the allowed extended key usage OIDs constraint on issued certificates
     */
    extKeyUsageOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify the allowed extended key usage constraint on issued certificates
     */
    extKeyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to generate leases with certificates
     */
    generateLease?: pulumi.Input<boolean>;
    /**
     * Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    issuerRef?: pulumi.Input<string>;
    /**
     * The number of bits of generated keys
     */
    keyBits?: pulumi.Input<number>;
    /**
     * The generated key type, choices: `rsa`, `ec`, `ed25519`, `any`
     * Defaults to `rsa`
     */
    keyType?: pulumi.Input<string>;
    /**
     * Specify the allowed key usage constraint on issued
     * certificates. Defaults to `["DigitalSignature", "KeyAgreement", "KeyEncipherment"])`.
     * To specify no default key usage constraints, set this to an empty list `[]`.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The locality of generated certificates
     */
    localities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum lease TTL, in seconds, for the role.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * The name to identify this role within the backend. Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Flag to not store certificates in the storage backend
     */
    noStore?: pulumi.Input<boolean>;
    /**
     * Allows metadata to be stored keyed on the certificate's serial number. The field is independent of no_store, allowing metadata storage regardless of whether certificates are stored. If true, metadata is not stored and an error is returned if the metadata field is specified on issuance APIs
     */
    noStoreMetadata?: pulumi.Input<boolean>;
    /**
     * Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * Specifies the duration by which to backdate the NotBefore property.
     */
    notBeforeDuration?: pulumi.Input<string>;
    /**
     * The organization unit of generated certificates
     */
    organizationUnit?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization of generated certificates
     */
    organizations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Vault 1.11+ only) A block for specifying policy identifers. The `policyIdentifier` block can be repeated, and supports the following arguments:
     */
    policyIdentifier?: pulumi.Input<pulumi.Input<inputs.pkiSecret.SecretBackendRolePolicyIdentifier>[]>;
    /**
     * Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use `policyIdentifier` blocks instead
     */
    policyIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The postal code of generated certificates
     */
    postalCodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The province of generated certificates
     */
    provinces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag to force CN usage
     */
    requireCn?: pulumi.Input<boolean>;
    /**
     * Specifies the source of the subject serial number. Valid values are json-csr (default) or json. When set to json-csr, the subject serial number is taken from the serialNumber parameter and falls back to the serial number in the CSR. When set to json, the subject serial number is taken from the serialNumber parameter but will ignore any value in the CSR. For backwards compatibility an empty value for this field will default to the json-csr behavior.
     *
     * Example usage:
     */
    serialNumberSource?: pulumi.Input<string>;
    /**
     * Flag to specify certificates for server use
     */
    serverFlag?: pulumi.Input<boolean>;
    /**
     * The number of bits to use in the signature algorithm
     */
    signatureBits?: pulumi.Input<number>;
    /**
     * The street address of generated certificates
     */
    streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The TTL, in seconds, for any certificate issued against this role.
     */
    ttl?: pulumi.Input<string>;
    /**
     * Flag to use the CN in the CSR
     */
    useCsrCommonName?: pulumi.Input<boolean>;
    /**
     * Flag to use the SANs in the CSR
     */
    useCsrSans?: pulumi.Input<boolean>;
    /**
     * Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.
     */
    usePss?: pulumi.Input<boolean>;
}
