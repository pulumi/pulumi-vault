// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const estConfig = vault.pkiSecret.getBackendConfigEstOutput({
 *     backend: pki.path,
 * });
 * ```
 */
export function getBackendConfigEst(args: GetBackendConfigEstArgs, opts?: pulumi.InvokeOptions): Promise<GetBackendConfigEstResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:pkiSecret/getBackendConfigEst:getBackendConfigEst", {
        "backend": args.backend,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackendConfigEst.
 */
export interface GetBackendConfigEstArgs {
    /**
     * The path to the PKI secret backend to
     * read the EST configuration from, with no leading or trailing `/`s.
     */
    backend: string;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: string;
}

/**
 * A collection of values returned by getBackendConfigEst.
 */
export interface GetBackendConfigEstResult {
    /**
     * Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
     */
    readonly auditFields: string[];
    /**
     * Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
     */
    readonly authenticators: outputs.pkiSecret.GetBackendConfigEstAuthenticator[];
    readonly backend: string;
    /**
     * If set, this mount is registered as the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
     */
    readonly defaultMount: boolean;
    /**
     * Required to be set if defaultMount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:<role_name>.
     */
    readonly defaultPathPolicy: string;
    /**
     * If set, parse out fields from the provided CSR making them available for Sentinel policies.
     */
    readonly enableSentinelParsing: boolean;
    /**
     * Specifies whether EST is enabled.
     */
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:<role_name>. Labels must be unique across Vault cluster, and will register .well-known/est/<label> URL paths.
     */
    readonly labelToPathPolicy: {[key: string]: string};
    /**
     * A read-only timestamp representing the last time the configuration was updated.
     */
    readonly lastUpdated: string;
    readonly namespace?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const estConfig = vault.pkiSecret.getBackendConfigEstOutput({
 *     backend: pki.path,
 * });
 * ```
 */
export function getBackendConfigEstOutput(args: GetBackendConfigEstOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBackendConfigEstResult> {
    return pulumi.output(args).apply((a: any) => getBackendConfigEst(a, opts))
}

/**
 * A collection of arguments for invoking getBackendConfigEst.
 */
export interface GetBackendConfigEstOutputArgs {
    /**
     * The path to the PKI secret backend to
     * read the EST configuration from, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
}
