// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows creating ACME EAB (External Account Binding) tokens and deleting unused ones.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const test = new vault.Mount("test", {
 *     path: "pki",
 *     type: "pki",
 *     description: "PKI secret engine mount",
 * });
 * const testBackendAcmeEab = new vault.pkisecret.BackendAcmeEab("test", {backend: test.path});
 * ```
 *
 * ## Import
 *
 * As EAB tokens are only available on initial creation there is no possibility to
 *
 * import or update this resource.
 */
export class BackendAcmeEab extends pulumi.CustomResource {
    /**
     * Get an existing BackendAcmeEab resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackendAcmeEabState, opts?: pulumi.CustomResourceOptions): BackendAcmeEab {
        return new BackendAcmeEab(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/backendAcmeEab:BackendAcmeEab';

    /**
     * Returns true if the given object is an instance of BackendAcmeEab.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackendAcmeEab {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackendAcmeEab.__pulumiType;
    }

    /**
     * The ACME directory to which the key belongs
     */
    declare public /*out*/ readonly acmeDirectory: pulumi.Output<string>;
    /**
     * The path to the PKI secret backend to
     * create the EAB token within, with no leading or trailing `/`s.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * An RFC3339 formatted date time when the EAB token was created
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * The identifier of a specific ACME EAB token
     */
    declare public /*out*/ readonly eabId: pulumi.Output<string>;
    /**
     * Create an EAB token that is specific to an issuer's ACME directory.
     */
    declare public readonly issuer: pulumi.Output<string | undefined>;
    /**
     * The EAB token
     */
    declare public /*out*/ readonly key: pulumi.Output<string>;
    /**
     * The key type of the EAB key
     */
    declare public /*out*/ readonly keyType: pulumi.Output<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Create an EAB token that is specific to a role's ACME directory.
     *
     * **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
     *
     * 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
     * 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
     * 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
     * 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
     */
    declare public readonly role: pulumi.Output<string | undefined>;

    /**
     * Create a BackendAcmeEab resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackendAcmeEabArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackendAcmeEabArgs | BackendAcmeEabState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackendAcmeEabState | undefined;
            resourceInputs["acmeDirectory"] = state?.acmeDirectory;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["eabId"] = state?.eabId;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["key"] = state?.key;
            resourceInputs["keyType"] = state?.keyType;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["role"] = state?.role;
        } else {
            const args = argsOrState as BackendAcmeEabArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["backend"] = args?.backend;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["role"] = args?.role;
            resourceInputs["acmeDirectory"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["eabId"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["keyType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BackendAcmeEab.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackendAcmeEab resources.
 */
export interface BackendAcmeEabState {
    /**
     * The ACME directory to which the key belongs
     */
    acmeDirectory?: pulumi.Input<string>;
    /**
     * The path to the PKI secret backend to
     * create the EAB token within, with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * An RFC3339 formatted date time when the EAB token was created
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The identifier of a specific ACME EAB token
     */
    eabId?: pulumi.Input<string>;
    /**
     * Create an EAB token that is specific to an issuer's ACME directory.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The EAB token
     */
    key?: pulumi.Input<string>;
    /**
     * The key type of the EAB key
     */
    keyType?: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Create an EAB token that is specific to a role's ACME directory.
     *
     * **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
     *
     * 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
     * 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
     * 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
     * 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
     */
    role?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackendAcmeEab resource.
 */
export interface BackendAcmeEabArgs {
    /**
     * The path to the PKI secret backend to
     * create the EAB token within, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * Create an EAB token that is specific to an issuer's ACME directory.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The namespace of the target resource.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Create an EAB token that is specific to a role's ACME directory.
     *
     * **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
     *
     * 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
     * 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
     * 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
     * 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
     */
    role?: pulumi.Input<string>;
}
