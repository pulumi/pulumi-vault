// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const test = new vault.pkisecret.SecretBackendIntermediateCertRequest("test", {
 *     backend: pki.path,
 *     type: "internal",
 *     commonName: "app.my.domain",
 * }, {
 *     dependsOn: [pki],
 * });
 * ```
 */
export class SecretBackendIntermediateCertRequest extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendIntermediateCertRequest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendIntermediateCertRequestState, opts?: pulumi.CustomResourceOptions): SecretBackendIntermediateCertRequest {
        return new SecretBackendIntermediateCertRequest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/secretBackendIntermediateCertRequest:SecretBackendIntermediateCertRequest';

    /**
     * Returns true if the given object is an instance of SecretBackendIntermediateCertRequest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendIntermediateCertRequest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendIntermediateCertRequest.__pulumiType;
    }

    /**
     * Adds a Basic Constraints extension with 'CA: true'.
     * Only needed as a workaround in some compatibility scenarios with Active Directory
     * Certificate Services
     */
    declare public readonly addBasicConstraints: pulumi.Output<boolean | undefined>;
    /**
     * List of alternative names
     */
    declare public readonly altNames: pulumi.Output<string[] | undefined>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * CN of intermediate to create
     */
    declare public readonly commonName: pulumi.Output<string>;
    /**
     * The country
     */
    declare public readonly country: pulumi.Output<string | undefined>;
    /**
     * The CSR
     */
    declare public /*out*/ readonly csr: pulumi.Output<string>;
    /**
     * Flag to exclude CN from SANs
     */
    declare public readonly excludeCnFromSans: pulumi.Output<boolean | undefined>;
    /**
     * The format of data
     */
    declare public readonly format: pulumi.Output<string | undefined>;
    /**
     * List of alternative IPs
     */
    declare public readonly ipSans: pulumi.Output<string[] | undefined>;
    /**
     * The number of bits to use
     */
    declare public readonly keyBits: pulumi.Output<number | undefined>;
    /**
     * The ID of the generated key.
     */
    declare public /*out*/ readonly keyId: pulumi.Output<string>;
    /**
     * When a new key is created with this request, optionally specifies
     * the name for this. The global ref `default` may not be used as a name.
     */
    declare public readonly keyName: pulumi.Output<string>;
    /**
     * Specifies the key (either default, by name, or by identifier) to use
     * for generating this request. Only suitable for `type=existing` requests.
     */
    declare public readonly keyRef: pulumi.Output<string>;
    /**
     * The desired key type
     */
    declare public readonly keyType: pulumi.Output<string | undefined>;
    /**
     * Specifies keyUsage to encode in the generated certificate.
     */
    declare public readonly keyUsages: pulumi.Output<string[] | undefined>;
    /**
     * The locality
     */
    declare public readonly locality: pulumi.Output<string | undefined>;
    /**
     * The ID of the previously configured managed key. This field is
     * required if `type` is `kms` and it conflicts with `managedKeyName`
     */
    declare public readonly managedKeyId: pulumi.Output<string | undefined>;
    /**
     * The name of the previously configured managed key. This field is
     * required if `type` is `kms`  and it conflicts with `managedKeyId`
     */
    declare public readonly managedKeyName: pulumi.Output<string | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * The organization
     */
    declare public readonly organization: pulumi.Output<string | undefined>;
    /**
     * List of other SANs
     */
    declare public readonly otherSans: pulumi.Output<string[] | undefined>;
    /**
     * The organization unit
     */
    declare public readonly ou: pulumi.Output<string | undefined>;
    /**
     * The postal code
     */
    declare public readonly postalCode: pulumi.Output<string | undefined>;
    /**
     * The private key
     */
    declare public /*out*/ readonly privateKey: pulumi.Output<string>;
    /**
     * The private key format
     */
    declare public readonly privateKeyFormat: pulumi.Output<string | undefined>;
    /**
     * The private key type
     */
    declare public /*out*/ readonly privateKeyType: pulumi.Output<string>;
    /**
     * The province
     */
    declare public readonly province: pulumi.Output<string | undefined>;
    /**
     * The requested Subject's named Serial Number
     */
    declare public readonly serialNumber: pulumi.Output<string | undefined>;
    /**
     * The number of bits to use in the signature algorithm
     */
    declare public readonly signatureBits: pulumi.Output<number | undefined>;
    /**
     * The street address
     */
    declare public readonly streetAddress: pulumi.Output<string | undefined>;
    /**
     * Type of intermediate to create. Must be either \"exported\" or \"internal\"
     * or \"kms\"
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * List of alternative URIs
     */
    declare public readonly uriSans: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecretBackendIntermediateCertRequest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendIntermediateCertRequestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendIntermediateCertRequestArgs | SecretBackendIntermediateCertRequestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendIntermediateCertRequestState | undefined;
            resourceInputs["addBasicConstraints"] = state?.addBasicConstraints;
            resourceInputs["altNames"] = state?.altNames;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["commonName"] = state?.commonName;
            resourceInputs["country"] = state?.country;
            resourceInputs["csr"] = state?.csr;
            resourceInputs["excludeCnFromSans"] = state?.excludeCnFromSans;
            resourceInputs["format"] = state?.format;
            resourceInputs["ipSans"] = state?.ipSans;
            resourceInputs["keyBits"] = state?.keyBits;
            resourceInputs["keyId"] = state?.keyId;
            resourceInputs["keyName"] = state?.keyName;
            resourceInputs["keyRef"] = state?.keyRef;
            resourceInputs["keyType"] = state?.keyType;
            resourceInputs["keyUsages"] = state?.keyUsages;
            resourceInputs["locality"] = state?.locality;
            resourceInputs["managedKeyId"] = state?.managedKeyId;
            resourceInputs["managedKeyName"] = state?.managedKeyName;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["organization"] = state?.organization;
            resourceInputs["otherSans"] = state?.otherSans;
            resourceInputs["ou"] = state?.ou;
            resourceInputs["postalCode"] = state?.postalCode;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["privateKeyFormat"] = state?.privateKeyFormat;
            resourceInputs["privateKeyType"] = state?.privateKeyType;
            resourceInputs["province"] = state?.province;
            resourceInputs["serialNumber"] = state?.serialNumber;
            resourceInputs["signatureBits"] = state?.signatureBits;
            resourceInputs["streetAddress"] = state?.streetAddress;
            resourceInputs["type"] = state?.type;
            resourceInputs["uriSans"] = state?.uriSans;
        } else {
            const args = argsOrState as SecretBackendIntermediateCertRequestArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.commonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["addBasicConstraints"] = args?.addBasicConstraints;
            resourceInputs["altNames"] = args?.altNames;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["commonName"] = args?.commonName;
            resourceInputs["country"] = args?.country;
            resourceInputs["excludeCnFromSans"] = args?.excludeCnFromSans;
            resourceInputs["format"] = args?.format;
            resourceInputs["ipSans"] = args?.ipSans;
            resourceInputs["keyBits"] = args?.keyBits;
            resourceInputs["keyName"] = args?.keyName;
            resourceInputs["keyRef"] = args?.keyRef;
            resourceInputs["keyType"] = args?.keyType;
            resourceInputs["keyUsages"] = args?.keyUsages;
            resourceInputs["locality"] = args?.locality;
            resourceInputs["managedKeyId"] = args?.managedKeyId;
            resourceInputs["managedKeyName"] = args?.managedKeyName;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["otherSans"] = args?.otherSans;
            resourceInputs["ou"] = args?.ou;
            resourceInputs["postalCode"] = args?.postalCode;
            resourceInputs["privateKeyFormat"] = args?.privateKeyFormat;
            resourceInputs["province"] = args?.province;
            resourceInputs["serialNumber"] = args?.serialNumber;
            resourceInputs["signatureBits"] = args?.signatureBits;
            resourceInputs["streetAddress"] = args?.streetAddress;
            resourceInputs["type"] = args?.type;
            resourceInputs["uriSans"] = args?.uriSans;
            resourceInputs["csr"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["privateKeyType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretBackendIntermediateCertRequest.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendIntermediateCertRequest resources.
 */
export interface SecretBackendIntermediateCertRequestState {
    /**
     * Adds a Basic Constraints extension with 'CA: true'.
     * Only needed as a workaround in some compatibility scenarios with Active Directory
     * Certificate Services
     */
    addBasicConstraints?: pulumi.Input<boolean>;
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * CN of intermediate to create
     */
    commonName?: pulumi.Input<string>;
    /**
     * The country
     */
    country?: pulumi.Input<string>;
    /**
     * The CSR
     */
    csr?: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of bits to use
     */
    keyBits?: pulumi.Input<number>;
    /**
     * The ID of the generated key.
     */
    keyId?: pulumi.Input<string>;
    /**
     * When a new key is created with this request, optionally specifies
     * the name for this. The global ref `default` may not be used as a name.
     */
    keyName?: pulumi.Input<string>;
    /**
     * Specifies the key (either default, by name, or by identifier) to use
     * for generating this request. Only suitable for `type=existing` requests.
     */
    keyRef?: pulumi.Input<string>;
    /**
     * The desired key type
     */
    keyType?: pulumi.Input<string>;
    /**
     * Specifies keyUsage to encode in the generated certificate.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The locality
     */
    locality?: pulumi.Input<string>;
    /**
     * The ID of the previously configured managed key. This field is
     * required if `type` is `kms` and it conflicts with `managedKeyName`
     */
    managedKeyId?: pulumi.Input<string>;
    /**
     * The name of the previously configured managed key. This field is
     * required if `type` is `kms`  and it conflicts with `managedKeyId`
     */
    managedKeyName?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The organization
     */
    organization?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization unit
     */
    ou?: pulumi.Input<string>;
    /**
     * The postal code
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The private key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The private key format
     */
    privateKeyFormat?: pulumi.Input<string>;
    /**
     * The private key type
     */
    privateKeyType?: pulumi.Input<string>;
    /**
     * The province
     */
    province?: pulumi.Input<string>;
    /**
     * The requested Subject's named Serial Number
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The number of bits to use in the signature algorithm
     */
    signatureBits?: pulumi.Input<number>;
    /**
     * The street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * Type of intermediate to create. Must be either \"exported\" or \"internal\"
     * or \"kms\"
     */
    type?: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecretBackendIntermediateCertRequest resource.
 */
export interface SecretBackendIntermediateCertRequestArgs {
    /**
     * Adds a Basic Constraints extension with 'CA: true'.
     * Only needed as a workaround in some compatibility scenarios with Active Directory
     * Certificate Services
     */
    addBasicConstraints?: pulumi.Input<boolean>;
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * CN of intermediate to create
     */
    commonName: pulumi.Input<string>;
    /**
     * The country
     */
    country?: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of bits to use
     */
    keyBits?: pulumi.Input<number>;
    /**
     * When a new key is created with this request, optionally specifies
     * the name for this. The global ref `default` may not be used as a name.
     */
    keyName?: pulumi.Input<string>;
    /**
     * Specifies the key (either default, by name, or by identifier) to use
     * for generating this request. Only suitable for `type=existing` requests.
     */
    keyRef?: pulumi.Input<string>;
    /**
     * The desired key type
     */
    keyType?: pulumi.Input<string>;
    /**
     * Specifies keyUsage to encode in the generated certificate.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The locality
     */
    locality?: pulumi.Input<string>;
    /**
     * The ID of the previously configured managed key. This field is
     * required if `type` is `kms` and it conflicts with `managedKeyName`
     */
    managedKeyId?: pulumi.Input<string>;
    /**
     * The name of the previously configured managed key. This field is
     * required if `type` is `kms`  and it conflicts with `managedKeyId`
     */
    managedKeyName?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The organization
     */
    organization?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization unit
     */
    ou?: pulumi.Input<string>;
    /**
     * The postal code
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The private key format
     */
    privateKeyFormat?: pulumi.Input<string>;
    /**
     * The province
     */
    province?: pulumi.Input<string>;
    /**
     * The requested Subject's named Serial Number
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The number of bits to use in the signature algorithm
     */
    signatureBits?: pulumi.Input<number>;
    /**
     * The street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * Type of intermediate to create. Must be either \"exported\" or \"internal\"
     * or \"kms\"
     */
    type: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
}
