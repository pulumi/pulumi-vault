// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates PKI certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const root = new vault.pkisecret.SecretBackendRootSignIntermediate("root", {
 *     backend: rootVaultMount.path,
 *     csr: intermediate.csr,
 *     commonName: "Intermediate CA",
 *     excludeCnFromSans: true,
 *     ou: "My OU",
 *     organization: "My organization",
 * }, {
 *     dependsOn: [intermediate],
 * });
 * ```
 */
export class SecretBackendRootSignIntermediate extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendRootSignIntermediate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendRootSignIntermediateState, opts?: pulumi.CustomResourceOptions): SecretBackendRootSignIntermediate {
        return new SecretBackendRootSignIntermediate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/secretBackendRootSignIntermediate:SecretBackendRootSignIntermediate';

    /**
     * Returns true if the given object is an instance of SecretBackendRootSignIntermediate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendRootSignIntermediate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendRootSignIntermediate.__pulumiType;
    }

    /**
     * List of alternative names
     */
    declare public readonly altNames: pulumi.Output<string[] | undefined>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * A list of the issuing and intermediate CA certificates in the `format` specified.
     */
    declare public /*out*/ readonly caChains: pulumi.Output<string[]>;
    /**
     * The intermediate CA certificate in the `format` specified.
     */
    declare public /*out*/ readonly certificate: pulumi.Output<string>;
    /**
     * The concatenation of the intermediate CA and the issuing CA certificates (PEM encoded). 
     * Requires the `format` to be set to any of: pem, pem_bundle. The value will be empty for all other formats.
     */
    declare public /*out*/ readonly certificateBundle: pulumi.Output<string>;
    /**
     * CN of intermediate to create
     */
    declare public readonly commonName: pulumi.Output<string>;
    /**
     * The country
     */
    declare public readonly country: pulumi.Output<string | undefined>;
    /**
     * The CSR
     */
    declare public readonly csr: pulumi.Output<string>;
    /**
     * Flag to exclude CN from SANs
     */
    declare public readonly excludeCnFromSans: pulumi.Output<boolean | undefined>;
    /**
     * List of domains for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    declare public readonly excludedDnsDomains: pulumi.Output<string[] | undefined>;
    /**
     * List of email addresses for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    declare public readonly excludedEmailAddresses: pulumi.Output<string[] | undefined>;
    /**
     * List of IP ranges for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    declare public readonly excludedIpRanges: pulumi.Output<string[] | undefined>;
    /**
     * List of URI domains for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    declare public readonly excludedUriDomains: pulumi.Output<string[] | undefined>;
    /**
     * The format of data
     */
    declare public readonly format: pulumi.Output<string | undefined>;
    /**
     * List of alternative IPs
     */
    declare public readonly ipSans: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    declare public readonly issuerRef: pulumi.Output<string | undefined>;
    /**
     * The issuing CA certificate in the `format` specified.
     */
    declare public /*out*/ readonly issuingCa: pulumi.Output<string>;
    /**
     * Specify the key usages to be added to the existing set of key usages ("CRL", "CertSign") on the generated certificate.
     */
    declare public readonly keyUsages: pulumi.Output<string[] | undefined>;
    /**
     * The locality
     */
    declare public readonly locality: pulumi.Output<string | undefined>;
    /**
     * The maximum path length to encode in the generated certificate
     */
    declare public readonly maxPathLength: pulumi.Output<number | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Set the Not After field of the certificate with specified date value. 
     * The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date
     * for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    declare public readonly notAfter: pulumi.Output<string | undefined>;
    /**
     * Specifies the duration by which to backdate the NotBefore property.
     */
    declare public readonly notBeforeDuration: pulumi.Output<string | undefined>;
    /**
     * The organization
     */
    declare public readonly organization: pulumi.Output<string | undefined>;
    /**
     * List of other SANs
     */
    declare public readonly otherSans: pulumi.Output<string[] | undefined>;
    /**
     * The organization unit
     */
    declare public readonly ou: pulumi.Output<string | undefined>;
    /**
     * List of domains for which certificates are allowed to be issued
     */
    declare public readonly permittedDnsDomains: pulumi.Output<string[] | undefined>;
    /**
     * List of email addresses for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    declare public readonly permittedEmailAddresses: pulumi.Output<string[] | undefined>;
    /**
     * List of IP ranges for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    declare public readonly permittedIpRanges: pulumi.Output<string[] | undefined>;
    /**
     * List of URI domains for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    declare public readonly permittedUriDomains: pulumi.Output<string[] | undefined>;
    /**
     * The postal code
     */
    declare public readonly postalCode: pulumi.Output<string | undefined>;
    /**
     * The province
     */
    declare public readonly province: pulumi.Output<string | undefined>;
    /**
     * If set to `true`, the certificate will be revoked on resource destruction.
     */
    declare public readonly revoke: pulumi.Output<boolean | undefined>;
    /**
     * The certificate's serial number, hex formatted.
     */
    declare public /*out*/ readonly serialNumber: pulumi.Output<string>;
    /**
     * The number of bits to use in the signature algorithm
     */
    declare public readonly signatureBits: pulumi.Output<number | undefined>;
    /**
     * Value for the Subject Key Identifier field (see https://tools.ietf.org/html/rfc5280#section-4.2.1.2). Specified as a string in hex format.
     */
    declare public readonly skid: pulumi.Output<string | undefined>;
    /**
     * The street address
     */
    declare public readonly streetAddress: pulumi.Output<string | undefined>;
    /**
     * Time to live
     */
    declare public readonly ttl: pulumi.Output<string | undefined>;
    /**
     * List of alternative URIs
     */
    declare public readonly uriSans: pulumi.Output<string[] | undefined>;
    /**
     * Preserve CSR values
     */
    declare public readonly useCsrValues: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.
     */
    declare public readonly usePss: pulumi.Output<boolean | undefined>;

    /**
     * Create a SecretBackendRootSignIntermediate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendRootSignIntermediateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendRootSignIntermediateArgs | SecretBackendRootSignIntermediateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendRootSignIntermediateState | undefined;
            resourceInputs["altNames"] = state?.altNames;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["caChains"] = state?.caChains;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["certificateBundle"] = state?.certificateBundle;
            resourceInputs["commonName"] = state?.commonName;
            resourceInputs["country"] = state?.country;
            resourceInputs["csr"] = state?.csr;
            resourceInputs["excludeCnFromSans"] = state?.excludeCnFromSans;
            resourceInputs["excludedDnsDomains"] = state?.excludedDnsDomains;
            resourceInputs["excludedEmailAddresses"] = state?.excludedEmailAddresses;
            resourceInputs["excludedIpRanges"] = state?.excludedIpRanges;
            resourceInputs["excludedUriDomains"] = state?.excludedUriDomains;
            resourceInputs["format"] = state?.format;
            resourceInputs["ipSans"] = state?.ipSans;
            resourceInputs["issuerRef"] = state?.issuerRef;
            resourceInputs["issuingCa"] = state?.issuingCa;
            resourceInputs["keyUsages"] = state?.keyUsages;
            resourceInputs["locality"] = state?.locality;
            resourceInputs["maxPathLength"] = state?.maxPathLength;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["notAfter"] = state?.notAfter;
            resourceInputs["notBeforeDuration"] = state?.notBeforeDuration;
            resourceInputs["organization"] = state?.organization;
            resourceInputs["otherSans"] = state?.otherSans;
            resourceInputs["ou"] = state?.ou;
            resourceInputs["permittedDnsDomains"] = state?.permittedDnsDomains;
            resourceInputs["permittedEmailAddresses"] = state?.permittedEmailAddresses;
            resourceInputs["permittedIpRanges"] = state?.permittedIpRanges;
            resourceInputs["permittedUriDomains"] = state?.permittedUriDomains;
            resourceInputs["postalCode"] = state?.postalCode;
            resourceInputs["province"] = state?.province;
            resourceInputs["revoke"] = state?.revoke;
            resourceInputs["serialNumber"] = state?.serialNumber;
            resourceInputs["signatureBits"] = state?.signatureBits;
            resourceInputs["skid"] = state?.skid;
            resourceInputs["streetAddress"] = state?.streetAddress;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["uriSans"] = state?.uriSans;
            resourceInputs["useCsrValues"] = state?.useCsrValues;
            resourceInputs["usePss"] = state?.usePss;
        } else {
            const args = argsOrState as SecretBackendRootSignIntermediateArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.commonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if (args?.csr === undefined && !opts.urn) {
                throw new Error("Missing required property 'csr'");
            }
            resourceInputs["altNames"] = args?.altNames;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["commonName"] = args?.commonName;
            resourceInputs["country"] = args?.country;
            resourceInputs["csr"] = args?.csr;
            resourceInputs["excludeCnFromSans"] = args?.excludeCnFromSans;
            resourceInputs["excludedDnsDomains"] = args?.excludedDnsDomains;
            resourceInputs["excludedEmailAddresses"] = args?.excludedEmailAddresses;
            resourceInputs["excludedIpRanges"] = args?.excludedIpRanges;
            resourceInputs["excludedUriDomains"] = args?.excludedUriDomains;
            resourceInputs["format"] = args?.format;
            resourceInputs["ipSans"] = args?.ipSans;
            resourceInputs["issuerRef"] = args?.issuerRef;
            resourceInputs["keyUsages"] = args?.keyUsages;
            resourceInputs["locality"] = args?.locality;
            resourceInputs["maxPathLength"] = args?.maxPathLength;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["notAfter"] = args?.notAfter;
            resourceInputs["notBeforeDuration"] = args?.notBeforeDuration;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["otherSans"] = args?.otherSans;
            resourceInputs["ou"] = args?.ou;
            resourceInputs["permittedDnsDomains"] = args?.permittedDnsDomains;
            resourceInputs["permittedEmailAddresses"] = args?.permittedEmailAddresses;
            resourceInputs["permittedIpRanges"] = args?.permittedIpRanges;
            resourceInputs["permittedUriDomains"] = args?.permittedUriDomains;
            resourceInputs["postalCode"] = args?.postalCode;
            resourceInputs["province"] = args?.province;
            resourceInputs["revoke"] = args?.revoke;
            resourceInputs["signatureBits"] = args?.signatureBits;
            resourceInputs["skid"] = args?.skid;
            resourceInputs["streetAddress"] = args?.streetAddress;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["uriSans"] = args?.uriSans;
            resourceInputs["useCsrValues"] = args?.useCsrValues;
            resourceInputs["usePss"] = args?.usePss;
            resourceInputs["caChains"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["certificateBundle"] = undefined /*out*/;
            resourceInputs["issuingCa"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendRootSignIntermediate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendRootSignIntermediate resources.
 */
export interface SecretBackendRootSignIntermediateState {
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * A list of the issuing and intermediate CA certificates in the `format` specified.
     */
    caChains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The intermediate CA certificate in the `format` specified.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The concatenation of the intermediate CA and the issuing CA certificates (PEM encoded). 
     * Requires the `format` to be set to any of: pem, pem_bundle. The value will be empty for all other formats.
     */
    certificateBundle?: pulumi.Input<string>;
    /**
     * CN of intermediate to create
     */
    commonName?: pulumi.Input<string>;
    /**
     * The country
     */
    country?: pulumi.Input<string>;
    /**
     * The CSR
     */
    csr?: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * List of domains for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedDnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedEmailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP ranges for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of URI domains for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedUriDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    issuerRef?: pulumi.Input<string>;
    /**
     * The issuing CA certificate in the `format` specified.
     */
    issuingCa?: pulumi.Input<string>;
    /**
     * Specify the key usages to be added to the existing set of key usages ("CRL", "CertSign") on the generated certificate.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The locality
     */
    locality?: pulumi.Input<string>;
    /**
     * The maximum path length to encode in the generated certificate
     */
    maxPathLength?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Set the Not After field of the certificate with specified date value. 
     * The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date
     * for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * Specifies the duration by which to backdate the NotBefore property.
     */
    notBeforeDuration?: pulumi.Input<string>;
    /**
     * The organization
     */
    organization?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization unit
     */
    ou?: pulumi.Input<string>;
    /**
     * List of domains for which certificates are allowed to be issued
     */
    permittedDnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    permittedEmailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP ranges for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    permittedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of URI domains for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    permittedUriDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The postal code
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The province
     */
    province?: pulumi.Input<string>;
    /**
     * If set to `true`, the certificate will be revoked on resource destruction.
     */
    revoke?: pulumi.Input<boolean>;
    /**
     * The certificate's serial number, hex formatted.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The number of bits to use in the signature algorithm
     */
    signatureBits?: pulumi.Input<number>;
    /**
     * Value for the Subject Key Identifier field (see https://tools.ietf.org/html/rfc5280#section-4.2.1.2). Specified as a string in hex format.
     */
    skid?: pulumi.Input<string>;
    /**
     * The street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * Time to live
     */
    ttl?: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Preserve CSR values
     */
    useCsrValues?: pulumi.Input<boolean>;
    /**
     * Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.
     */
    usePss?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SecretBackendRootSignIntermediate resource.
 */
export interface SecretBackendRootSignIntermediateArgs {
    /**
     * List of alternative names
     */
    altNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PKI secret backend the resource belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * CN of intermediate to create
     */
    commonName: pulumi.Input<string>;
    /**
     * The country
     */
    country?: pulumi.Input<string>;
    /**
     * The CSR
     */
    csr: pulumi.Input<string>;
    /**
     * Flag to exclude CN from SANs
     */
    excludeCnFromSans?: pulumi.Input<boolean>;
    /**
     * List of domains for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedDnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedEmailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP ranges for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of URI domains for which certificates are not allowed to be issued. Requires Vault version 1.19+.
     */
    excludedUriDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The format of data
     */
    format?: pulumi.Input<string>;
    /**
     * List of alternative IPs
     */
    ipSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the default issuer of this request. May
     * be the value `default`, a name, or an issuer ID. Use ACLs to prevent access to
     * the `/pki/issuer/:issuer_ref/{issue,sign}/:name` paths to prevent users
     * overriding the role's `issuerRef` value.
     */
    issuerRef?: pulumi.Input<string>;
    /**
     * Specify the key usages to be added to the existing set of key usages ("CRL", "CertSign") on the generated certificate.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The locality
     */
    locality?: pulumi.Input<string>;
    /**
     * The maximum path length to encode in the generated certificate
     */
    maxPathLength?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Set the Not After field of the certificate with specified date value. 
     * The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date
     * for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * Specifies the duration by which to backdate the NotBefore property.
     */
    notBeforeDuration?: pulumi.Input<string>;
    /**
     * The organization
     */
    organization?: pulumi.Input<string>;
    /**
     * List of other SANs
     */
    otherSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The organization unit
     */
    ou?: pulumi.Input<string>;
    /**
     * List of domains for which certificates are allowed to be issued
     */
    permittedDnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of email addresses for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    permittedEmailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IP ranges for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    permittedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of URI domains for which certificates are allowed to be issued. Requires Vault version 1.19+.
     */
    permittedUriDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The postal code
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The province
     */
    province?: pulumi.Input<string>;
    /**
     * If set to `true`, the certificate will be revoked on resource destruction.
     */
    revoke?: pulumi.Input<boolean>;
    /**
     * The number of bits to use in the signature algorithm
     */
    signatureBits?: pulumi.Input<number>;
    /**
     * Value for the Subject Key Identifier field (see https://tools.ietf.org/html/rfc5280#section-4.2.1.2). Specified as a string in hex format.
     */
    skid?: pulumi.Input<string>;
    /**
     * The street address
     */
    streetAddress?: pulumi.Input<string>;
    /**
     * Time to live
     */
    ttl?: pulumi.Input<string>;
    /**
     * List of alternative URIs
     */
    uriSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Preserve CSR values
     */
    useCsrValues?: pulumi.Input<boolean>;
    /**
     * Specifies whether or not to use PSS signatures over PKCS#1v1.5 signatures when a RSA-type issuer is used. Ignored for ECDSA/Ed25519 issuers.
     */
    usePss?: pulumi.Input<boolean>;
}
