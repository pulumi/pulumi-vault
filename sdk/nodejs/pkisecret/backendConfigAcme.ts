// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows setting the ACME server configuration used by specified mount.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const pki = new vault.Mount("pki", {
 *     path: "pki",
 *     type: "pki",
 *     defaultLeaseTtlSeconds: 3600,
 *     maxLeaseTtlSeconds: 86400,
 * });
 * const pkiConfigCluster = new vault.pkisecret.BackendConfigCluster("pki_config_cluster", {
 *     backend: pki.path,
 *     path: "http://127.0.0.1:8200/v1/pki",
 *     aiaPath: "http://127.0.0.1:8200/v1/pki",
 * });
 * const example = new vault.pkisecret.BackendConfigAcme("example", {
 *     backend: pki.path,
 *     enabled: true,
 *     allowedIssuers: ["*"],
 *     allowedRoles: ["*"],
 *     allowRoleExtKeyUsage: false,
 *     defaultDirectoryPolicy: "sign-verbatim",
 *     dnsResolver: "",
 *     eabPolicy: "not-required",
 * });
 * ```
 *
 * ## Import
 *
 * The ACME configuration can be imported using the resource's `id`.
 * In the case of the example above the `id` would be `pki/config/acme`,
 * where the `pki` component is the resource's `backend`, e.g.
 *
 * ```sh
 * $ pulumi import vault:pkiSecret/backendConfigAcme:BackendConfigAcme example pki/config/acme
 * ```
 */
export class BackendConfigAcme extends pulumi.CustomResource {
    /**
     * Get an existing BackendConfigAcme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackendConfigAcmeState, opts?: pulumi.CustomResourceOptions): BackendConfigAcme {
        return new BackendConfigAcme(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/backendConfigAcme:BackendConfigAcme';

    /**
     * Returns true if the given object is an instance of BackendConfigAcme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackendConfigAcme {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackendConfigAcme.__pulumiType;
    }

    /**
     * Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
     */
    declare public readonly allowRoleExtKeyUsage: pulumi.Output<boolean | undefined>;
    /**
     * Specifies which issuers are allowed for use with ACME.
     */
    declare public readonly allowedIssuers: pulumi.Output<string[]>;
    /**
     * Specifies which roles are allowed for use with ACME.
     */
    declare public readonly allowedRoles: pulumi.Output<string[]>;
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * Specifies the policy to be used for non-role-qualified ACME requests.
     * Allowed values are `forbid`, `sign-verbatim`, `role:<role_name>`, `external-policy` or `external-policy:<policy>`.
     */
    declare public readonly defaultDirectoryPolicy: pulumi.Output<string>;
    /**
     * DNS resolver to use for domain resolution on this mount.
     * Must be in the format `<host>:<port>`, with both parts mandatory.
     */
    declare public readonly dnsResolver: pulumi.Output<string | undefined>;
    /**
     * Specifies the policy to use for external account binding behaviour.
     * Allowed values are `not-required`, `new-account-required` or `always-required`.
     */
    declare public readonly eabPolicy: pulumi.Output<string>;
    /**
     * Specifies whether ACME is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
     */
    declare public readonly maxTtl: pulumi.Output<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;

    /**
     * Create a BackendConfigAcme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackendConfigAcmeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackendConfigAcmeArgs | BackendConfigAcmeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackendConfigAcmeState | undefined;
            resourceInputs["allowRoleExtKeyUsage"] = state?.allowRoleExtKeyUsage;
            resourceInputs["allowedIssuers"] = state?.allowedIssuers;
            resourceInputs["allowedRoles"] = state?.allowedRoles;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["defaultDirectoryPolicy"] = state?.defaultDirectoryPolicy;
            resourceInputs["dnsResolver"] = state?.dnsResolver;
            resourceInputs["eabPolicy"] = state?.eabPolicy;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["maxTtl"] = state?.maxTtl;
            resourceInputs["namespace"] = state?.namespace;
        } else {
            const args = argsOrState as BackendConfigAcmeArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["allowRoleExtKeyUsage"] = args?.allowRoleExtKeyUsage;
            resourceInputs["allowedIssuers"] = args?.allowedIssuers;
            resourceInputs["allowedRoles"] = args?.allowedRoles;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["defaultDirectoryPolicy"] = args?.defaultDirectoryPolicy;
            resourceInputs["dnsResolver"] = args?.dnsResolver;
            resourceInputs["eabPolicy"] = args?.eabPolicy;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["maxTtl"] = args?.maxTtl;
            resourceInputs["namespace"] = args?.namespace;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackendConfigAcme.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackendConfigAcme resources.
 */
export interface BackendConfigAcmeState {
    /**
     * Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
     */
    allowRoleExtKeyUsage?: pulumi.Input<boolean>;
    /**
     * Specifies which issuers are allowed for use with ACME.
     */
    allowedIssuers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which roles are allowed for use with ACME.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * Specifies the policy to be used for non-role-qualified ACME requests.
     * Allowed values are `forbid`, `sign-verbatim`, `role:<role_name>`, `external-policy` or `external-policy:<policy>`.
     */
    defaultDirectoryPolicy?: pulumi.Input<string>;
    /**
     * DNS resolver to use for domain resolution on this mount.
     * Must be in the format `<host>:<port>`, with both parts mandatory.
     */
    dnsResolver?: pulumi.Input<string>;
    /**
     * Specifies the policy to use for external account binding behaviour.
     * Allowed values are `not-required`, `new-account-required` or `always-required`.
     */
    eabPolicy?: pulumi.Input<string>;
    /**
     * Specifies whether ACME is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackendConfigAcme resource.
 */
export interface BackendConfigAcmeArgs {
    /**
     * Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
     */
    allowRoleExtKeyUsage?: pulumi.Input<boolean>;
    /**
     * Specifies which issuers are allowed for use with ACME.
     */
    allowedIssuers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies which roles are allowed for use with ACME.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * Specifies the policy to be used for non-role-qualified ACME requests.
     * Allowed values are `forbid`, `sign-verbatim`, `role:<role_name>`, `external-policy` or `external-policy:<policy>`.
     */
    defaultDirectoryPolicy?: pulumi.Input<string>;
    /**
     * DNS resolver to use for domain resolution on this mount.
     * Must be in the format `<host>:<port>`, with both parts mandatory.
     */
    dnsResolver?: pulumi.Input<string>;
    /**
     * Specifies the policy to use for external account binding behaviour.
     * Allowed values are `not-required`, `new-account-required` or `always-required`.
     */
    eabPolicy?: pulumi.Input<string>;
    /**
     * Specifies whether ACME is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
}
