// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a key on a PKI Secret Backend for Vault.
 *
 * ## Import
 *
 * PKI secret backend key can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import vault:pkiSecret/secretBackendKey:SecretBackendKey key pki/key/bf9b0d48-d0dd-652c-30be-77d04fc7e94d
 * ```
 */
export class SecretBackendKey extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendKeyState, opts?: pulumi.CustomResourceOptions): SecretBackendKey {
        return new SecretBackendKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:pkiSecret/secretBackendKey:SecretBackendKey';

    /**
     * Returns true if the given object is an instance of SecretBackendKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendKey.__pulumiType;
    }

    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Specifies the number of bits to use for the generated keys. 
     * Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
     * 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
     * 384, or 521; ignored with `key_type=ed25519`.
     */
    public readonly keyBits!: pulumi.Output<number>;
    /**
     * ID of the generated key.
     */
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    /**
     * When a new key is created with this request, optionally specifies the name for this. 
     * The global ref `default` may not be used as a name.
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
     */
    public readonly keyType!: pulumi.Output<string>;
    /**
     * The managed key's UUID.
     */
    public readonly managedKeyId!: pulumi.Output<string | undefined>;
    /**
     * The managed key's configured name.
     */
    public readonly managedKeyName!: pulumi.Output<string | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SecretBackendKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendKeyArgs | SecretBackendKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendKeyState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["keyBits"] = state ? state.keyBits : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["managedKeyId"] = state ? state.managedKeyId : undefined;
            resourceInputs["managedKeyName"] = state ? state.managedKeyName : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SecretBackendKeyArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["keyBits"] = args ? args.keyBits : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["managedKeyId"] = args ? args.managedKeyId : undefined;
            resourceInputs["managedKeyName"] = args ? args.managedKeyName : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["keyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendKey resources.
 */
export interface SecretBackendKeyState {
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * Specifies the number of bits to use for the generated keys. 
     * Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
     * 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
     * 384, or 521; ignored with `key_type=ed25519`.
     */
    keyBits?: pulumi.Input<number>;
    /**
     * ID of the generated key.
     */
    keyId?: pulumi.Input<string>;
    /**
     * When a new key is created with this request, optionally specifies the name for this. 
     * The global ref `default` may not be used as a name.
     */
    keyName?: pulumi.Input<string>;
    /**
     * Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
     */
    keyType?: pulumi.Input<string>;
    /**
     * The managed key's UUID.
     */
    managedKeyId?: pulumi.Input<string>;
    /**
     * The managed key's configured name.
     */
    managedKeyName?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackendKey resource.
 */
export interface SecretBackendKeyArgs {
    /**
     * The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * Specifies the number of bits to use for the generated keys. 
     * Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
     * 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
     * 384, or 521; ignored with `key_type=ed25519`.
     */
    keyBits?: pulumi.Input<number>;
    /**
     * When a new key is created with this request, optionally specifies the name for this. 
     * The global ref `default` may not be used as a name.
     */
    keyName?: pulumi.Input<string>;
    /**
     * Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
     */
    keyType?: pulumi.Input<string>;
    /**
     * The managed key's UUID.
     */
    managedKeyId?: pulumi.Input<string>;
    /**
     * The managed key's configured name.
     */
    managedKeyName?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
     */
    type: pulumi.Input<string>;
}
