// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getOidcOpenidConfig(args: GetOidcOpenidConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetOidcOpenidConfigResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vault:identity/getOidcOpenidConfig:getOidcOpenidConfig", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getOidcOpenidConfig.
 */
export interface GetOidcOpenidConfigArgs {
    /**
     * The name of the OIDC Provider in Vault.
     */
    name: string;
}

/**
 * A collection of values returned by getOidcOpenidConfig.
 */
export interface GetOidcOpenidConfigResult {
    /**
     * The Authorization Endpoint for the provider.
     */
    readonly authorizationEndpoint: string;
    /**
     * The grant types supported by the provider.
     */
    readonly grantTypesSupporteds: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The signing algorithms supported by 
     * the provider.
     */
    readonly idTokenSigningAlgValuesSupporteds: string[];
    /**
     * The URL of the issuer for the provider.
     */
    readonly issuer: string;
    /**
     * The well known keys URI for the provider.
     */
    readonly jwksUri: string;
    readonly name: string;
    /**
     * Specifies whether Request URI Parameter is 
     * supported by the provider.
     */
    readonly requestUriParameterSupported: boolean;
    /**
     * The response types supported by the provider.
     */
    readonly responseTypesSupporteds: string[];
    /**
     * The scopes supported by the provider.
     */
    readonly scopesSupporteds: string[];
    /**
     * The subject types supported by the provider.
     */
    readonly subjectTypesSupporteds: string[];
    /**
     * The Token Endpoint for the provider.
     */
    readonly tokenEndpoint: string;
    /**
     * The token endpoint auth methods supported by the provider.
     */
    readonly tokenEndpointAuthMethodsSupporteds: string[];
    /**
     * The User Info Endpoint for the provider
     */
    readonly userinfoEndpoint: string;
}

export function getOidcOpenidConfigOutput(args: GetOidcOpenidConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOidcOpenidConfigResult> {
    return pulumi.output(args).apply(a => getOidcOpenidConfig(a, opts))
}

/**
 * A collection of arguments for invoking getOidcOpenidConfig.
 */
export interface GetOidcOpenidConfigOutputArgs {
    /**
     * The name of the OIDC Provider in Vault.
     */
    name: pulumi.Input<string>;
}
