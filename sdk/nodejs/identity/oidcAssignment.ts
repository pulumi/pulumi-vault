// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages OIDC Assignments in a Vault server. See the [Vault documentation](https://www.vaultproject.io/api-docs/secret/identity/oidc-provider#create-or-update-an-assignment)
 * for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const internal = new vault.identity.Group("internal", {
 *     type: "internal",
 *     policies: [
 *         "dev",
 *         "test",
 *     ],
 * });
 * const test = new vault.identity.Entity("test", {policies: ["test"]});
 * const _default = new vault.identity.OidcAssignment("default", {
 *     entityIds: [test.name],
 *     groupIds: [internal.name],
 * });
 * ```
 *
 * ## Import
 *
 * OIDC Assignments can be imported using the `name`, e.g.
 *
 * ```sh
 *  $ pulumi import vault:identity/oidcAssignment:OidcAssignment default assignment
 * ```
 */
export class OidcAssignment extends pulumi.CustomResource {
    /**
     * Get an existing OidcAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcAssignmentState, opts?: pulumi.CustomResourceOptions): OidcAssignment {
        return new OidcAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:identity/oidcAssignment:OidcAssignment';

    /**
     * Returns true if the given object is an instance of OidcAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OidcAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OidcAssignment.__pulumiType;
    }

    /**
     * A set of Vault entity IDs.
     */
    public readonly entityIds!: pulumi.Output<string[] | undefined>;
    /**
     * A set of Vault group IDs.
     */
    public readonly groupIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the assignment.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a OidcAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OidcAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcAssignmentArgs | OidcAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OidcAssignmentState | undefined;
            resourceInputs["entityIds"] = state ? state.entityIds : undefined;
            resourceInputs["groupIds"] = state ? state.groupIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as OidcAssignmentArgs | undefined;
            resourceInputs["entityIds"] = args ? args.entityIds : undefined;
            resourceInputs["groupIds"] = args ? args.groupIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OidcAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OidcAssignment resources.
 */
export interface OidcAssignmentState {
    /**
     * A set of Vault entity IDs.
     */
    entityIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of Vault group IDs.
     */
    groupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the assignment.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OidcAssignment resource.
 */
export interface OidcAssignmentArgs {
    /**
     * A set of Vault entity IDs.
     */
    entityIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of Vault group IDs.
     */
    groupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the assignment.
     */
    name?: pulumi.Input<string>;
}
