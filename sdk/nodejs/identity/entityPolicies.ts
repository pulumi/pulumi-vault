// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages policies for an Identity Entity for Vault. The [Identity secrets engine](https://www.vaultproject.io/docs/secrets/identity/index.html) is the identity management solution for Vault.
 * 
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/identity_entity_policies.html.md.
 */
export class EntityPolicies extends pulumi.CustomResource {
    /**
     * Get an existing EntityPolicies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityPoliciesState, opts?: pulumi.CustomResourceOptions): EntityPolicies {
        return new EntityPolicies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:identity/entityPolicies:EntityPolicies';

    /**
     * Returns true if the given object is an instance of EntityPolicies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntityPolicies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntityPolicies.__pulumiType;
    }

    /**
     * Entity ID to assign policies to.
     */
    public readonly entityId!: pulumi.Output<string>;
    /**
     * The name of the entity that are assigned the policies.
     */
    public /*out*/ readonly entityName!: pulumi.Output<string>;
    /**
     * Defaults to `true`.
     */
    public readonly exclusive!: pulumi.Output<boolean | undefined>;
    /**
     * List of policies to assign to the entity
     */
    public readonly policies!: pulumi.Output<string[]>;

    /**
     * Create a EntityPolicies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityPoliciesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityPoliciesArgs | EntityPoliciesState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as EntityPoliciesState | undefined;
            inputs["entityId"] = state ? state.entityId : undefined;
            inputs["entityName"] = state ? state.entityName : undefined;
            inputs["exclusive"] = state ? state.exclusive : undefined;
            inputs["policies"] = state ? state.policies : undefined;
        } else {
            const args = argsOrState as EntityPoliciesArgs | undefined;
            if (!args || args.entityId === undefined) {
                throw new Error("Missing required property 'entityId'");
            }
            if (!args || args.policies === undefined) {
                throw new Error("Missing required property 'policies'");
            }
            inputs["entityId"] = args ? args.entityId : undefined;
            inputs["exclusive"] = args ? args.exclusive : undefined;
            inputs["policies"] = args ? args.policies : undefined;
            inputs["entityName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(EntityPolicies.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EntityPolicies resources.
 */
export interface EntityPoliciesState {
    /**
     * Entity ID to assign policies to.
     */
    readonly entityId?: pulumi.Input<string>;
    /**
     * The name of the entity that are assigned the policies.
     */
    readonly entityName?: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    readonly exclusive?: pulumi.Input<boolean>;
    /**
     * List of policies to assign to the entity
     */
    readonly policies?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EntityPolicies resource.
 */
export interface EntityPoliciesArgs {
    /**
     * Entity ID to assign policies to.
     */
    readonly entityId: pulumi.Input<string>;
    /**
     * Defaults to `true`.
     */
    readonly exclusive?: pulumi.Input<boolean>;
    /**
     * List of policies to assign to the entity
     */
    readonly policies: pulumi.Input<pulumi.Input<string>[]>;
}
