// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const test = new vault.identity.Entity("test", {
 *     metadata: {
 *         foo: "bar",
 *     },
 *     policies: ["test"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Identity entity can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import vault:identity/entity:Entity test "ae6f8ued-0f1a-9f6b-2915-1a2be20dc053"
 * ```
 */
export class Entity extends pulumi.CustomResource {
    /**
     * Get an existing Entity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityState, opts?: pulumi.CustomResourceOptions): Entity {
        return new Entity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:identity/entity:Entity';

    /**
     * Returns true if the given object is an instance of Entity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Entity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Entity.__pulumiType;
    }

    /**
     * True/false Is this entity currently disabled. Defaults to `false`
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * `false` by default. If set to `true`, this resource will ignore any policies return from Vault or specified in the resource. You can use `vault.identity.EntityPolicies` to manage policies for this entity in a decoupled manner.
     */
    public readonly externalPolicies!: pulumi.Output<boolean | undefined>;
    /**
     * A Map of additional metadata to associate with the user.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the identity entity to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * A list of policies to apply to the entity.
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Entity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EntityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityArgs | EntityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityState | undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["externalPolicies"] = state ? state.externalPolicies : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
        } else {
            const args = argsOrState as EntityArgs | undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["externalPolicies"] = args ? args.externalPolicies : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Entity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Entity resources.
 */
export interface EntityState {
    /**
     * True/false Is this entity currently disabled. Defaults to `false`
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * `false` by default. If set to `true`, this resource will ignore any policies return from Vault or specified in the resource. You can use `vault.identity.EntityPolicies` to manage policies for this entity in a decoupled manner.
     */
    externalPolicies?: pulumi.Input<boolean>;
    /**
     * A Map of additional metadata to associate with the user.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the identity entity to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * A list of policies to apply to the entity.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Entity resource.
 */
export interface EntityArgs {
    /**
     * True/false Is this entity currently disabled. Defaults to `false`
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * `false` by default. If set to `true`, this resource will ignore any policies return from Vault or specified in the resource. You can use `vault.identity.EntityPolicies` to manage policies for this entity in a decoupled manner.
     */
    externalPolicies?: pulumi.Input<boolean>;
    /**
     * A Map of additional metadata to associate with the user.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the identity entity to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * A list of policies to apply to the entity.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
}
