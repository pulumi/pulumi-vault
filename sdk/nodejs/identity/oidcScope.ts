// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages OIDC Scopes in a Vault server. See the [Vault documentation](https://www.vaultproject.io/api-docs/secret/identity/oidc-provider#create-or-update-a-scope)
 * for more information.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const groups = new vault.identity.OidcScope("groups", {
 *     description: "Vault OIDC Groups Scope",
 *     template: "{\"groups\":{{identity.entity.groups.names}}}",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * OIDC Scopes can be imported using the `name`, e.g.
 *
 * ```sh
 * $ pulumi import vault:identity/oidcScope:OidcScope groups groups
 * ```
 */
export class OidcScope extends pulumi.CustomResource {
    /**
     * Get an existing OidcScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcScopeState, opts?: pulumi.CustomResourceOptions): OidcScope {
        return new OidcScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:identity/oidcScope:OidcScope';

    /**
     * Returns true if the given object is an instance of OidcScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OidcScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OidcScope.__pulumiType;
    }

    /**
     * A description of the scope.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the scope. The `openid` scope name is reserved.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
     */
    public readonly template!: pulumi.Output<string | undefined>;

    /**
     * Create a OidcScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OidcScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcScopeArgs | OidcScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OidcScopeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as OidcScopeArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OidcScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OidcScope resources.
 */
export interface OidcScopeState {
    /**
     * A description of the scope.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the scope. The `openid` scope name is reserved.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OidcScope resource.
 */
export interface OidcScopeArgs {
    /**
     * A description of the scope.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the scope. The `openid` scope name is reserved.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
     */
    template?: pulumi.Input<string>;
}
