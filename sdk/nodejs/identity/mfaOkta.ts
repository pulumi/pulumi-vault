// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for configuring the okta MFA method.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const example = new vault.identity.MfaOkta("example", {
 *     apiToken: "token1",
 *     baseUrl: "qux.baz.com",
 *     orgName: "org1",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Resource can be imported using its `uuid` field, e.g.
 *
 * ```sh
 * $ pulumi import vault:identity/mfaOkta:MfaOkta example 0d89c36a-4ff5-4d70-8749-bb6a5598aeec
 * ```
 */
export class MfaOkta extends pulumi.CustomResource {
    /**
     * Get an existing MfaOkta resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaOktaState, opts?: pulumi.CustomResourceOptions): MfaOkta {
        return new MfaOkta(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:identity/mfaOkta:MfaOkta';

    /**
     * Returns true if the given object is an instance of MfaOkta.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MfaOkta {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MfaOkta.__pulumiType;
    }

    /**
     * Okta API token.
     */
    public readonly apiToken!: pulumi.Output<string>;
    /**
     * The base domain to use for API requests.
     */
    public readonly baseUrl!: pulumi.Output<string | undefined>;
    /**
     * Method ID.
     */
    public /*out*/ readonly methodId!: pulumi.Output<string>;
    /**
     * Mount accessor.
     */
    public /*out*/ readonly mountAccessor!: pulumi.Output<string>;
    /**
     * Method name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Method's namespace ID.
     */
    public /*out*/ readonly namespaceId!: pulumi.Output<string>;
    /**
     * Method's namespace path.
     */
    public /*out*/ readonly namespacePath!: pulumi.Output<string>;
    /**
     * Name of the organization to be used in the Okta API.
     */
    public readonly orgName!: pulumi.Output<string>;
    /**
     * Only match the primary email for the account.
     */
    public readonly primaryEmail!: pulumi.Output<boolean | undefined>;
    /**
     * MFA type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * A template string for mapping Identity names to MFA methods.
     */
    public readonly usernameFormat!: pulumi.Output<string | undefined>;
    /**
     * Resource UUID.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a MfaOkta resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MfaOktaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaOktaArgs | MfaOktaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaOktaState | undefined;
            resourceInputs["apiToken"] = state ? state.apiToken : undefined;
            resourceInputs["baseUrl"] = state ? state.baseUrl : undefined;
            resourceInputs["methodId"] = state ? state.methodId : undefined;
            resourceInputs["mountAccessor"] = state ? state.mountAccessor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["namespacePath"] = state ? state.namespacePath : undefined;
            resourceInputs["orgName"] = state ? state.orgName : undefined;
            resourceInputs["primaryEmail"] = state ? state.primaryEmail : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usernameFormat"] = state ? state.usernameFormat : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as MfaOktaArgs | undefined;
            if ((!args || args.apiToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiToken'");
            }
            if ((!args || args.orgName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgName'");
            }
            resourceInputs["apiToken"] = args?.apiToken ? pulumi.secret(args.apiToken) : undefined;
            resourceInputs["baseUrl"] = args ? args.baseUrl : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["orgName"] = args ? args.orgName : undefined;
            resourceInputs["primaryEmail"] = args ? args.primaryEmail : undefined;
            resourceInputs["usernameFormat"] = args ? args.usernameFormat : undefined;
            resourceInputs["methodId"] = undefined /*out*/;
            resourceInputs["mountAccessor"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["namespaceId"] = undefined /*out*/;
            resourceInputs["namespacePath"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MfaOkta.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MfaOkta resources.
 */
export interface MfaOktaState {
    /**
     * Okta API token.
     */
    apiToken?: pulumi.Input<string>;
    /**
     * The base domain to use for API requests.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Method ID.
     */
    methodId?: pulumi.Input<string>;
    /**
     * Mount accessor.
     */
    mountAccessor?: pulumi.Input<string>;
    /**
     * Method name.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Method's namespace ID.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * Method's namespace path.
     */
    namespacePath?: pulumi.Input<string>;
    /**
     * Name of the organization to be used in the Okta API.
     */
    orgName?: pulumi.Input<string>;
    /**
     * Only match the primary email for the account.
     */
    primaryEmail?: pulumi.Input<boolean>;
    /**
     * MFA type.
     */
    type?: pulumi.Input<string>;
    /**
     * A template string for mapping Identity names to MFA methods.
     */
    usernameFormat?: pulumi.Input<string>;
    /**
     * Resource UUID.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MfaOkta resource.
 */
export interface MfaOktaArgs {
    /**
     * Okta API token.
     */
    apiToken: pulumi.Input<string>;
    /**
     * The base domain to use for API requests.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the organization to be used in the Okta API.
     */
    orgName: pulumi.Input<string>;
    /**
     * Only match the primary email for the account.
     */
    primaryEmail?: pulumi.Input<boolean>;
    /**
     * A template string for mapping Identity names to MFA methods.
     */
    usernameFormat?: pulumi.Input<string>;
}
