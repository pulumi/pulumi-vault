// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class OidcKeyAllowedClientID extends pulumi.CustomResource {
    /**
     * Get an existing OidcKeyAllowedClientID resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcKeyAllowedClientIDState, opts?: pulumi.CustomResourceOptions): OidcKeyAllowedClientID {
        return new OidcKeyAllowedClientID(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:identity/oidcKeyAllowedClientID:OidcKeyAllowedClientID';

    /**
     * Returns true if the given object is an instance of OidcKeyAllowedClientID.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OidcKeyAllowedClientID {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OidcKeyAllowedClientID.__pulumiType;
    }

    /**
     * Role Client ID allowed to use the key for signing.
     */
    public readonly allowedClientId!: pulumi.Output<string>;
    /**
     * Name of the key.
     */
    public readonly keyName!: pulumi.Output<string>;

    /**
     * Create a OidcKeyAllowedClientID resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OidcKeyAllowedClientIDArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcKeyAllowedClientIDArgs | OidcKeyAllowedClientIDState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as OidcKeyAllowedClientIDState | undefined;
            inputs["allowedClientId"] = state ? state.allowedClientId : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
        } else {
            const args = argsOrState as OidcKeyAllowedClientIDArgs | undefined;
            if (!args || args.allowedClientId === undefined) {
                throw new Error("Missing required property 'allowedClientId'");
            }
            if (!args || args.keyName === undefined) {
                throw new Error("Missing required property 'keyName'");
            }
            inputs["allowedClientId"] = args ? args.allowedClientId : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(OidcKeyAllowedClientID.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OidcKeyAllowedClientID resources.
 */
export interface OidcKeyAllowedClientIDState {
    /**
     * Role Client ID allowed to use the key for signing.
     */
    readonly allowedClientId?: pulumi.Input<string>;
    /**
     * Name of the key.
     */
    readonly keyName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OidcKeyAllowedClientID resource.
 */
export interface OidcKeyAllowedClientIDArgs {
    /**
     * Role Client ID allowed to use the key for signing.
     */
    readonly allowedClientId: pulumi.Input<string>;
    /**
     * Name of the key.
     */
    readonly keyName: pulumi.Input<string>;
}
