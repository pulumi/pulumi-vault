// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const example = new vault.OciAuthBackend("example", {
 *     path: exampleVaultAuthBackend.path,
 *     homeTenancyId: "ocid1.tenancy.oc1..aaaaaaaah7zkvaffv26pzyauoe2zbnionqvhvsexamplee557wakiofi4ysgqq",
 * });
 * ```
 *
 * ## Import
 *
 * OCI auth backends can be imported using the backend's `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:index/ociAuthBackend:OciAuthBackend example oci
 * ```
 */
export class OciAuthBackend extends pulumi.CustomResource {
    /**
     * Get an existing OciAuthBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OciAuthBackendState, opts?: pulumi.CustomResourceOptions): OciAuthBackend {
        return new OciAuthBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/ociAuthBackend:OciAuthBackend';

    /**
     * Returns true if the given object is an instance of OciAuthBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OciAuthBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OciAuthBackend.__pulumiType;
    }

    /**
     * The accessor of the auth backend
     */
    declare public /*out*/ readonly accessor: pulumi.Output<string>;
    /**
     * A description of the auth backend.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Stops rotation of the root credential until set to false.
     */
    declare public readonly disableAutomatedRotation: pulumi.Output<boolean | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    declare public readonly disableRemount: pulumi.Output<boolean | undefined>;
    /**
     * The Tenancy OCID of your OCI account.
     */
    declare public readonly homeTenancyId: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Unique name of the auth backend to configure.
     */
    declare public readonly path: pulumi.Output<string | undefined>;
    /**
     * The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
     */
    declare public readonly rotationPeriod: pulumi.Output<number | undefined>;
    /**
     * The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
     */
    declare public readonly rotationSchedule: pulumi.Output<string | undefined>;
    /**
     * The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
     */
    declare public readonly rotationWindow: pulumi.Output<number | undefined>;
    /**
     * Extra configuration block. Structure is documented below.
     *
     * The `tune` block is used to tune the auth backend:
     */
    declare public readonly tune: pulumi.Output<outputs.OciAuthBackendTune>;

    /**
     * Create a OciAuthBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OciAuthBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OciAuthBackendArgs | OciAuthBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OciAuthBackendState | undefined;
            resourceInputs["accessor"] = state?.accessor;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableAutomatedRotation"] = state?.disableAutomatedRotation;
            resourceInputs["disableRemount"] = state?.disableRemount;
            resourceInputs["homeTenancyId"] = state?.homeTenancyId;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["path"] = state?.path;
            resourceInputs["rotationPeriod"] = state?.rotationPeriod;
            resourceInputs["rotationSchedule"] = state?.rotationSchedule;
            resourceInputs["rotationWindow"] = state?.rotationWindow;
            resourceInputs["tune"] = state?.tune;
        } else {
            const args = argsOrState as OciAuthBackendArgs | undefined;
            if (args?.homeTenancyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'homeTenancyId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["disableAutomatedRotation"] = args?.disableAutomatedRotation;
            resourceInputs["disableRemount"] = args?.disableRemount;
            resourceInputs["homeTenancyId"] = args?.homeTenancyId ? pulumi.secret(args.homeTenancyId) : undefined;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["path"] = args?.path;
            resourceInputs["rotationPeriod"] = args?.rotationPeriod;
            resourceInputs["rotationSchedule"] = args?.rotationSchedule;
            resourceInputs["rotationWindow"] = args?.rotationWindow;
            resourceInputs["tune"] = args?.tune;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["homeTenancyId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OciAuthBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OciAuthBackend resources.
 */
export interface OciAuthBackendState {
    /**
     * The accessor of the auth backend
     */
    accessor?: pulumi.Input<string>;
    /**
     * A description of the auth backend.
     */
    description?: pulumi.Input<string>;
    /**
     * Stops rotation of the root credential until set to false.
     */
    disableAutomatedRotation?: pulumi.Input<boolean>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The Tenancy OCID of your OCI account.
     */
    homeTenancyId?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    path?: pulumi.Input<string>;
    /**
     * The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * Extra configuration block. Structure is documented below.
     *
     * The `tune` block is used to tune the auth backend:
     */
    tune?: pulumi.Input<inputs.OciAuthBackendTune>;
}

/**
 * The set of arguments for constructing a OciAuthBackend resource.
 */
export interface OciAuthBackendArgs {
    /**
     * A description of the auth backend.
     */
    description?: pulumi.Input<string>;
    /**
     * Stops rotation of the root credential until set to false.
     */
    disableAutomatedRotation?: pulumi.Input<boolean>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The Tenancy OCID of your OCI account.
     */
    homeTenancyId: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    path?: pulumi.Input<string>;
    /**
     * The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * Extra configuration block. Structure is documented below.
     *
     * The `tune` block is used to tune the auth backend:
     */
    tune?: pulumi.Input<inputs.OciAuthBackendTune>;
}
