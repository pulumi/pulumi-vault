// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a SAML Auth mount in a Vault server. See the [Vault
 * documentation](https://www.vaultproject.io/docs/auth/saml/) for more
 * information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const test = new vault.saml.AuthBackend("test", {
 *     path: "saml",
 *     idpMetadataUrl: "https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml/metadata",
 *     entityId: "https://my.vault/v1/auth/saml",
 *     acsUrls: ["https://my.vault.primary/v1/auth/saml/callback"],
 *     defaultRole: "admin",
 * });
 * ```
 *
 * ## Import
 *
 * SAML authentication mounts can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:saml/authBackend:AuthBackend example saml
 * ```
 */
export class AuthBackend extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendState, opts?: pulumi.CustomResourceOptions): AuthBackend {
        return new AuthBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:saml/authBackend:AuthBackend';

    /**
     * Returns true if the given object is an instance of AuthBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackend.__pulumiType;
    }

    /**
     * The well-formatted URLs of your Assertion Consumer Service (ACS)
     * that should receive a response from the identity provider.
     */
    declare public readonly acsUrls: pulumi.Output<string[]>;
    /**
     * The role to use if no role is provided during login.
     */
    declare public readonly defaultRole: pulumi.Output<string | undefined>;
    /**
     * If set to `true`, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    declare public readonly disableRemount: pulumi.Output<boolean | undefined>;
    /**
     * The entity ID of the SAML authentication service provider.
     */
    declare public readonly entityId: pulumi.Output<string>;
    /**
     * The PEM encoded certificate of the identity provider. Mutually exclusive
     * with `idpMetadataUrl`.
     */
    declare public readonly idpCert: pulumi.Output<string | undefined>;
    /**
     * The entity ID of the identity provider. Mutually exclusive with
     * `idpMetadataUrl`.
     */
    declare public readonly idpEntityId: pulumi.Output<string | undefined>;
    /**
     * The metadata URL of the identity provider.
     */
    declare public readonly idpMetadataUrl: pulumi.Output<string | undefined>;
    /**
     * The SSO URL of the identity provider. Mutually exclusive with 
     * `idpMetadataUrl`.
     */
    declare public readonly idpSsoUrl: pulumi.Output<string | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Path where the auth backend will be mounted. Defaults to `auth/saml`
     * if not specified.
     */
    declare public readonly path: pulumi.Output<string | undefined>;
    /**
     * If set to `true`, logs additional, potentially sensitive
     * information during the SAML exchange according to the current logging level. Not
     * recommended for production.
     */
    declare public readonly verboseLogging: pulumi.Output<boolean>;

    /**
     * Create a AuthBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendArgs | AuthBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthBackendState | undefined;
            resourceInputs["acsUrls"] = state?.acsUrls;
            resourceInputs["defaultRole"] = state?.defaultRole;
            resourceInputs["disableRemount"] = state?.disableRemount;
            resourceInputs["entityId"] = state?.entityId;
            resourceInputs["idpCert"] = state?.idpCert;
            resourceInputs["idpEntityId"] = state?.idpEntityId;
            resourceInputs["idpMetadataUrl"] = state?.idpMetadataUrl;
            resourceInputs["idpSsoUrl"] = state?.idpSsoUrl;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["path"] = state?.path;
            resourceInputs["verboseLogging"] = state?.verboseLogging;
        } else {
            const args = argsOrState as AuthBackendArgs | undefined;
            if (args?.acsUrls === undefined && !opts.urn) {
                throw new Error("Missing required property 'acsUrls'");
            }
            if (args?.entityId === undefined && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            resourceInputs["acsUrls"] = args?.acsUrls;
            resourceInputs["defaultRole"] = args?.defaultRole;
            resourceInputs["disableRemount"] = args?.disableRemount;
            resourceInputs["entityId"] = args?.entityId;
            resourceInputs["idpCert"] = args?.idpCert;
            resourceInputs["idpEntityId"] = args?.idpEntityId;
            resourceInputs["idpMetadataUrl"] = args?.idpMetadataUrl;
            resourceInputs["idpSsoUrl"] = args?.idpSsoUrl;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["path"] = args?.path;
            resourceInputs["verboseLogging"] = args?.verboseLogging;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackend resources.
 */
export interface AuthBackendState {
    /**
     * The well-formatted URLs of your Assertion Consumer Service (ACS)
     * that should receive a response from the identity provider.
     */
    acsUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The role to use if no role is provided during login.
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * If set to `true`, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The entity ID of the SAML authentication service provider.
     */
    entityId?: pulumi.Input<string>;
    /**
     * The PEM encoded certificate of the identity provider. Mutually exclusive
     * with `idpMetadataUrl`.
     */
    idpCert?: pulumi.Input<string>;
    /**
     * The entity ID of the identity provider. Mutually exclusive with
     * `idpMetadataUrl`.
     */
    idpEntityId?: pulumi.Input<string>;
    /**
     * The metadata URL of the identity provider.
     */
    idpMetadataUrl?: pulumi.Input<string>;
    /**
     * The SSO URL of the identity provider. Mutually exclusive with 
     * `idpMetadataUrl`.
     */
    idpSsoUrl?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Path where the auth backend will be mounted. Defaults to `auth/saml`
     * if not specified.
     */
    path?: pulumi.Input<string>;
    /**
     * If set to `true`, logs additional, potentially sensitive
     * information during the SAML exchange according to the current logging level. Not
     * recommended for production.
     */
    verboseLogging?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AuthBackend resource.
 */
export interface AuthBackendArgs {
    /**
     * The well-formatted URLs of your Assertion Consumer Service (ACS)
     * that should receive a response from the identity provider.
     */
    acsUrls: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The role to use if no role is provided during login.
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * If set to `true`, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The entity ID of the SAML authentication service provider.
     */
    entityId: pulumi.Input<string>;
    /**
     * The PEM encoded certificate of the identity provider. Mutually exclusive
     * with `idpMetadataUrl`.
     */
    idpCert?: pulumi.Input<string>;
    /**
     * The entity ID of the identity provider. Mutually exclusive with
     * `idpMetadataUrl`.
     */
    idpEntityId?: pulumi.Input<string>;
    /**
     * The metadata URL of the identity provider.
     */
    idpMetadataUrl?: pulumi.Input<string>;
    /**
     * The SSO URL of the identity provider. Mutually exclusive with 
     * `idpMetadataUrl`.
     */
    idpSsoUrl?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Path where the auth backend will be mounted. Defaults to `auth/saml`
     * if not specified.
     */
    path?: pulumi.Input<string>;
    /**
     * If set to `true`, logs additional, potentially sensitive
     * information during the SAML exchange according to the current logging level. Not
     * recommended for production.
     */
    verboseLogging?: pulumi.Input<boolean>;
}
