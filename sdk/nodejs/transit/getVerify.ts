// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This is a data source which can be used to verify a signature using a Vault Transit key.
 */
export function getVerify(args: GetVerifyArgs, opts?: pulumi.InvokeOptions): Promise<GetVerifyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:transit/getVerify:getVerify", {
        "batchInputs": args.batchInputs,
        "batchResults": args.batchResults,
        "cmac": args.cmac,
        "context": args.context,
        "hashAlgorithm": args.hashAlgorithm,
        "hmac": args.hmac,
        "input": args.input,
        "marshalingAlgorithm": args.marshalingAlgorithm,
        "name": args.name,
        "namespace": args.namespace,
        "path": args.path,
        "prehashed": args.prehashed,
        "reference": args.reference,
        "saltLength": args.saltLength,
        "signature": args.signature,
        "signatureAlgorithm": args.signatureAlgorithm,
        "signatureContext": args.signatureContext,
        "valid": args.valid,
    }, opts);
}

/**
 * A collection of arguments for invoking getVerify.
 */
export interface GetVerifyArgs {
    batchInputs?: {[key: string]: string}[];
    /**
     * The results returned from Vault if using `batchInput`
     */
    batchResults?: {[key: string]: string}[];
    cmac?: string;
    context?: string;
    hashAlgorithm?: string;
    hmac?: string;
    input?: string;
    marshalingAlgorithm?: string;
    name: string;
    namespace?: string;
    path: string;
    prehashed?: boolean;
    reference?: string;
    saltLength?: string;
    signature?: string;
    signatureAlgorithm?: string;
    signatureContext?: string;
    /**
     * Returns `true` if the signature verification succeeded and `false` otherwise
     */
    valid?: boolean;
}

/**
 * A collection of values returned by getVerify.
 */
export interface GetVerifyResult {
    readonly batchInputs?: {[key: string]: string}[];
    /**
     * The results returned from Vault if using `batchInput`
     */
    readonly batchResults: {[key: string]: string}[];
    readonly cmac?: string;
    readonly context?: string;
    readonly hashAlgorithm?: string;
    readonly hmac?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly input?: string;
    readonly marshalingAlgorithm?: string;
    readonly name: string;
    readonly namespace?: string;
    readonly path: string;
    readonly prehashed?: boolean;
    readonly reference?: string;
    readonly saltLength?: string;
    readonly signature?: string;
    readonly signatureAlgorithm?: string;
    readonly signatureContext?: string;
    /**
     * Returns `true` if the signature verification succeeded and `false` otherwise
     */
    readonly valid: boolean;
}
/**
 * This is a data source which can be used to verify a signature using a Vault Transit key.
 */
export function getVerifyOutput(args: GetVerifyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVerifyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vault:transit/getVerify:getVerify", {
        "batchInputs": args.batchInputs,
        "batchResults": args.batchResults,
        "cmac": args.cmac,
        "context": args.context,
        "hashAlgorithm": args.hashAlgorithm,
        "hmac": args.hmac,
        "input": args.input,
        "marshalingAlgorithm": args.marshalingAlgorithm,
        "name": args.name,
        "namespace": args.namespace,
        "path": args.path,
        "prehashed": args.prehashed,
        "reference": args.reference,
        "saltLength": args.saltLength,
        "signature": args.signature,
        "signatureAlgorithm": args.signatureAlgorithm,
        "signatureContext": args.signatureContext,
        "valid": args.valid,
    }, opts);
}

/**
 * A collection of arguments for invoking getVerify.
 */
export interface GetVerifyOutputArgs {
    batchInputs?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * The results returned from Vault if using `batchInput`
     */
    batchResults?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    cmac?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    hashAlgorithm?: pulumi.Input<string>;
    hmac?: pulumi.Input<string>;
    input?: pulumi.Input<string>;
    marshalingAlgorithm?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    prehashed?: pulumi.Input<boolean>;
    reference?: pulumi.Input<string>;
    saltLength?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    signatureContext?: pulumi.Input<string>;
    /**
     * Returns `true` if the signature verification succeeded and `false` otherwise
     */
    valid?: pulumi.Input<boolean>;
}
