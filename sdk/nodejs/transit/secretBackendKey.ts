// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an Encryption Keyring on a Transit Secret Backend for Vault.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const transit = new vault.Mount("transit", {
 *     path: "transit",
 *     type: "transit",
 *     description: "Example description",
 *     defaultLeaseTtlSeconds: 3600,
 *     maxLeaseTtlSeconds: 86400,
 * });
 * const key = new vault.transit.SecretBackendKey("key", {
 *     backend: transit.path,
 *     name: "my_key",
 * });
 * ```
 *
 * ## Import
 *
 * Transit secret backend keys can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:transit/secretBackendKey:SecretBackendKey key transit/keys/my_key
 * ```
 */
export class SecretBackendKey extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendKeyState, opts?: pulumi.CustomResourceOptions): SecretBackendKey {
        return new SecretBackendKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:transit/secretBackendKey:SecretBackendKey';

    /**
     * Returns true if the given object is an instance of SecretBackendKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendKey.__pulumiType;
    }

    /**
     * Enables taking backup of entire keyring in the plaintext format. Once set, this cannot be disabled.
     * * Refer to Vault API documentation on key backups for more information: [Backup Key](https://www.vaultproject.io/api-docs/secret/transit#backup-key)
     */
    declare public readonly allowPlaintextBackup: pulumi.Output<boolean | undefined>;
    /**
     * Amount of seconds the key should live before being automatically rotated.
     * A value of 0 disables automatic rotation for the key.
     */
    declare public readonly autoRotatePeriod: pulumi.Output<number>;
    /**
     * The path the transit secret backend is mounted at, with no leading or trailing `/`s.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires `derived` to be set to `true`.
     */
    declare public readonly convergentEncryption: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if the key is allowed to be deleted.
     */
    declare public readonly deletionAllowed: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
     */
    declare public readonly derived: pulumi.Output<boolean | undefined>;
    /**
     * Enables keys to be exportable. This allows for all valid private keys in the keyring to be exported. Once set, this cannot be disabled.
     */
    declare public readonly exportable: pulumi.Output<boolean | undefined>;
    /**
     * The elliptic curve algorithm to use for hybrid signatures.
     * Supported key types are `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, and `ed25519`.
     */
    declare public readonly hybridKeyTypeEc: pulumi.Output<string | undefined>;
    /**
     * The post-quantum algorithm to use for hybrid signatures.
     * Currently, ML-DSA is the only supported key type.
     */
    declare public readonly hybridKeyTypePqc: pulumi.Output<string | undefined>;
    /**
     * The key size in bytes for algorithms that allow variable key sizes. Currently only applicable to HMAC, where it must be between 32 and 512 bytes.
     */
    declare public readonly keySize: pulumi.Output<number | undefined>;
    /**
     * List of key versions in the keyring. This attribute is zero-indexed and will contain a map of values depending on the `type` of the encryption key.
     * * for key types `aes128-gcm96`, `aes256-gcm96` and `chacha20-poly1305`, each key version will be a map of a single value `id` which is just a hash of the key's metadata.
     * * for key types `ed25519`, `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, `rsa-2048`, `rsa-3072` and `rsa-4096`, each key version will be a map of the following:
     */
    declare public /*out*/ readonly keys: pulumi.Output<{[key: string]: string}[]>;
    /**
     * Latest key version available. This value is 1-indexed, so if `latestVersion` is `1`, then the key's information can be referenced from `keys` by selecting element `0`
     */
    declare public /*out*/ readonly latestVersion: pulumi.Output<number>;
    /**
     * Minimum key version available for use. If keys have been archived by increasing `minDecryptionVersion`, this attribute will reflect that change.
     */
    declare public /*out*/ readonly minAvailableVersion: pulumi.Output<number>;
    /**
     * Minimum key version to use for decryption.
     */
    declare public readonly minDecryptionVersion: pulumi.Output<number | undefined>;
    /**
     * Minimum key version to use for encryption
     */
    declare public readonly minEncryptionVersion: pulumi.Output<number | undefined>;
    /**
     * The name to identify this key within the backend. Must be unique within the backend.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * The parameter set to use for ML-DSA or SLH-DSA. Required for
     * ML-DSA, hybrid, and SLH-DSA keys.
     * Valid values for ML-DSA are `44`, `65`, and `87`.
     * Valid values for SLH-DSA are `slh-dsa-sha2-128s`, `slh-dsa-shake-128s`, `slh-dsa-sha2-128f`, `slh-dsa-shake-128`, `slh-dsa-sha2-192s`,
     * `slh-dsa-shake-192s`, `slh-dsa-sha2-192f`, `slh-dsa-shake-192f`, `slh-dsa-sha2-256s`, `slh-dsa-shake-256s`,
     * `slh-dsa-sha2-256f`, and `slh-dsa-shake-256f`.
     */
    declare public readonly parameterSet: pulumi.Output<string | undefined>;
    /**
     * Whether or not the key supports decryption, based on key type.
     */
    declare public /*out*/ readonly supportsDecryption: pulumi.Output<boolean>;
    /**
     * Whether or not the key supports derivation, based on key type.
     */
    declare public /*out*/ readonly supportsDerivation: pulumi.Output<boolean>;
    /**
     * Whether or not the key supports encryption, based on key type.
     */
    declare public /*out*/ readonly supportsEncryption: pulumi.Output<boolean>;
    /**
     * Whether or not the key supports signing, based on key type.
     */
    declare public /*out*/ readonly supportsSigning: pulumi.Output<boolean>;
    /**
     * Specifies the type of key to create. The currently-supported types are: `aes128-gcm96`, `aes256-gcm96` (default), `chacha20-poly1305`, `ed25519`, `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, `hmac`, `rsa-2048`, `rsa-3072`, `rsa-4096`, `managedKey`, `aes128-cmac`, `aes192-cmac`, `aes256-cmac`, `ml-dsa`, `hybrid`, and `slh-dsa`.
     * * Refer to the Vault documentation on transit key types for more information: [Key Types](https://www.vaultproject.io/docs/secrets/transit#key-types)
     */
    declare public readonly type: pulumi.Output<string | undefined>;

    /**
     * Create a SecretBackendKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendKeyArgs | SecretBackendKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendKeyState | undefined;
            resourceInputs["allowPlaintextBackup"] = state?.allowPlaintextBackup;
            resourceInputs["autoRotatePeriod"] = state?.autoRotatePeriod;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["convergentEncryption"] = state?.convergentEncryption;
            resourceInputs["deletionAllowed"] = state?.deletionAllowed;
            resourceInputs["derived"] = state?.derived;
            resourceInputs["exportable"] = state?.exportable;
            resourceInputs["hybridKeyTypeEc"] = state?.hybridKeyTypeEc;
            resourceInputs["hybridKeyTypePqc"] = state?.hybridKeyTypePqc;
            resourceInputs["keySize"] = state?.keySize;
            resourceInputs["keys"] = state?.keys;
            resourceInputs["latestVersion"] = state?.latestVersion;
            resourceInputs["minAvailableVersion"] = state?.minAvailableVersion;
            resourceInputs["minDecryptionVersion"] = state?.minDecryptionVersion;
            resourceInputs["minEncryptionVersion"] = state?.minEncryptionVersion;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["parameterSet"] = state?.parameterSet;
            resourceInputs["supportsDecryption"] = state?.supportsDecryption;
            resourceInputs["supportsDerivation"] = state?.supportsDerivation;
            resourceInputs["supportsEncryption"] = state?.supportsEncryption;
            resourceInputs["supportsSigning"] = state?.supportsSigning;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as SecretBackendKeyArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["allowPlaintextBackup"] = args?.allowPlaintextBackup;
            resourceInputs["autoRotatePeriod"] = args?.autoRotatePeriod;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["convergentEncryption"] = args?.convergentEncryption;
            resourceInputs["deletionAllowed"] = args?.deletionAllowed;
            resourceInputs["derived"] = args?.derived;
            resourceInputs["exportable"] = args?.exportable;
            resourceInputs["hybridKeyTypeEc"] = args?.hybridKeyTypeEc;
            resourceInputs["hybridKeyTypePqc"] = args?.hybridKeyTypePqc;
            resourceInputs["keySize"] = args?.keySize;
            resourceInputs["minDecryptionVersion"] = args?.minDecryptionVersion;
            resourceInputs["minEncryptionVersion"] = args?.minEncryptionVersion;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["parameterSet"] = args?.parameterSet;
            resourceInputs["type"] = args?.type;
            resourceInputs["keys"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["minAvailableVersion"] = undefined /*out*/;
            resourceInputs["supportsDecryption"] = undefined /*out*/;
            resourceInputs["supportsDerivation"] = undefined /*out*/;
            resourceInputs["supportsEncryption"] = undefined /*out*/;
            resourceInputs["supportsSigning"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendKey resources.
 */
export interface SecretBackendKeyState {
    /**
     * Enables taking backup of entire keyring in the plaintext format. Once set, this cannot be disabled.
     * * Refer to Vault API documentation on key backups for more information: [Backup Key](https://www.vaultproject.io/api-docs/secret/transit#backup-key)
     */
    allowPlaintextBackup?: pulumi.Input<boolean>;
    /**
     * Amount of seconds the key should live before being automatically rotated.
     * A value of 0 disables automatic rotation for the key.
     */
    autoRotatePeriod?: pulumi.Input<number>;
    /**
     * The path the transit secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend?: pulumi.Input<string>;
    /**
     * Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires `derived` to be set to `true`.
     */
    convergentEncryption?: pulumi.Input<boolean>;
    /**
     * Specifies if the key is allowed to be deleted.
     */
    deletionAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
     */
    derived?: pulumi.Input<boolean>;
    /**
     * Enables keys to be exportable. This allows for all valid private keys in the keyring to be exported. Once set, this cannot be disabled.
     */
    exportable?: pulumi.Input<boolean>;
    /**
     * The elliptic curve algorithm to use for hybrid signatures.
     * Supported key types are `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, and `ed25519`.
     */
    hybridKeyTypeEc?: pulumi.Input<string>;
    /**
     * The post-quantum algorithm to use for hybrid signatures.
     * Currently, ML-DSA is the only supported key type.
     */
    hybridKeyTypePqc?: pulumi.Input<string>;
    /**
     * The key size in bytes for algorithms that allow variable key sizes. Currently only applicable to HMAC, where it must be between 32 and 512 bytes.
     */
    keySize?: pulumi.Input<number>;
    /**
     * List of key versions in the keyring. This attribute is zero-indexed and will contain a map of values depending on the `type` of the encryption key.
     * * for key types `aes128-gcm96`, `aes256-gcm96` and `chacha20-poly1305`, each key version will be a map of a single value `id` which is just a hash of the key's metadata.
     * * for key types `ed25519`, `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, `rsa-2048`, `rsa-3072` and `rsa-4096`, each key version will be a map of the following:
     */
    keys?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Latest key version available. This value is 1-indexed, so if `latestVersion` is `1`, then the key's information can be referenced from `keys` by selecting element `0`
     */
    latestVersion?: pulumi.Input<number>;
    /**
     * Minimum key version available for use. If keys have been archived by increasing `minDecryptionVersion`, this attribute will reflect that change.
     */
    minAvailableVersion?: pulumi.Input<number>;
    /**
     * Minimum key version to use for decryption.
     */
    minDecryptionVersion?: pulumi.Input<number>;
    /**
     * Minimum key version to use for encryption
     */
    minEncryptionVersion?: pulumi.Input<number>;
    /**
     * The name to identify this key within the backend. Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The parameter set to use for ML-DSA or SLH-DSA. Required for
     * ML-DSA, hybrid, and SLH-DSA keys.
     * Valid values for ML-DSA are `44`, `65`, and `87`.
     * Valid values for SLH-DSA are `slh-dsa-sha2-128s`, `slh-dsa-shake-128s`, `slh-dsa-sha2-128f`, `slh-dsa-shake-128`, `slh-dsa-sha2-192s`,
     * `slh-dsa-shake-192s`, `slh-dsa-sha2-192f`, `slh-dsa-shake-192f`, `slh-dsa-sha2-256s`, `slh-dsa-shake-256s`,
     * `slh-dsa-sha2-256f`, and `slh-dsa-shake-256f`.
     */
    parameterSet?: pulumi.Input<string>;
    /**
     * Whether or not the key supports decryption, based on key type.
     */
    supportsDecryption?: pulumi.Input<boolean>;
    /**
     * Whether or not the key supports derivation, based on key type.
     */
    supportsDerivation?: pulumi.Input<boolean>;
    /**
     * Whether or not the key supports encryption, based on key type.
     */
    supportsEncryption?: pulumi.Input<boolean>;
    /**
     * Whether or not the key supports signing, based on key type.
     */
    supportsSigning?: pulumi.Input<boolean>;
    /**
     * Specifies the type of key to create. The currently-supported types are: `aes128-gcm96`, `aes256-gcm96` (default), `chacha20-poly1305`, `ed25519`, `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, `hmac`, `rsa-2048`, `rsa-3072`, `rsa-4096`, `managedKey`, `aes128-cmac`, `aes192-cmac`, `aes256-cmac`, `ml-dsa`, `hybrid`, and `slh-dsa`.
     * * Refer to the Vault documentation on transit key types for more information: [Key Types](https://www.vaultproject.io/docs/secrets/transit#key-types)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackendKey resource.
 */
export interface SecretBackendKeyArgs {
    /**
     * Enables taking backup of entire keyring in the plaintext format. Once set, this cannot be disabled.
     * * Refer to Vault API documentation on key backups for more information: [Backup Key](https://www.vaultproject.io/api-docs/secret/transit#backup-key)
     */
    allowPlaintextBackup?: pulumi.Input<boolean>;
    /**
     * Amount of seconds the key should live before being automatically rotated.
     * A value of 0 disables automatic rotation for the key.
     */
    autoRotatePeriod?: pulumi.Input<number>;
    /**
     * The path the transit secret backend is mounted at, with no leading or trailing `/`s.
     */
    backend: pulumi.Input<string>;
    /**
     * Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires `derived` to be set to `true`.
     */
    convergentEncryption?: pulumi.Input<boolean>;
    /**
     * Specifies if the key is allowed to be deleted.
     */
    deletionAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
     */
    derived?: pulumi.Input<boolean>;
    /**
     * Enables keys to be exportable. This allows for all valid private keys in the keyring to be exported. Once set, this cannot be disabled.
     */
    exportable?: pulumi.Input<boolean>;
    /**
     * The elliptic curve algorithm to use for hybrid signatures.
     * Supported key types are `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, and `ed25519`.
     */
    hybridKeyTypeEc?: pulumi.Input<string>;
    /**
     * The post-quantum algorithm to use for hybrid signatures.
     * Currently, ML-DSA is the only supported key type.
     */
    hybridKeyTypePqc?: pulumi.Input<string>;
    /**
     * The key size in bytes for algorithms that allow variable key sizes. Currently only applicable to HMAC, where it must be between 32 and 512 bytes.
     */
    keySize?: pulumi.Input<number>;
    /**
     * Minimum key version to use for decryption.
     */
    minDecryptionVersion?: pulumi.Input<number>;
    /**
     * Minimum key version to use for encryption
     */
    minEncryptionVersion?: pulumi.Input<number>;
    /**
     * The name to identify this key within the backend. Must be unique within the backend.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The parameter set to use for ML-DSA or SLH-DSA. Required for
     * ML-DSA, hybrid, and SLH-DSA keys.
     * Valid values for ML-DSA are `44`, `65`, and `87`.
     * Valid values for SLH-DSA are `slh-dsa-sha2-128s`, `slh-dsa-shake-128s`, `slh-dsa-sha2-128f`, `slh-dsa-shake-128`, `slh-dsa-sha2-192s`,
     * `slh-dsa-shake-192s`, `slh-dsa-sha2-192f`, `slh-dsa-shake-192f`, `slh-dsa-sha2-256s`, `slh-dsa-shake-256s`,
     * `slh-dsa-sha2-256f`, and `slh-dsa-shake-256f`.
     */
    parameterSet?: pulumi.Input<string>;
    /**
     * Specifies the type of key to create. The currently-supported types are: `aes128-gcm96`, `aes256-gcm96` (default), `chacha20-poly1305`, `ed25519`, `ecdsa-p256`, `ecdsa-p384`, `ecdsa-p521`, `hmac`, `rsa-2048`, `rsa-3072`, `rsa-4096`, `managedKey`, `aes128-cmac`, `aes192-cmac`, `aes256-cmac`, `ml-dsa`, `hybrid`, and `slh-dsa`.
     * * Refer to the Vault documentation on transit key types for more information: [Key Types](https://www.vaultproject.io/docs/secrets/transit#key-types)
     */
    type?: pulumi.Input<string>;
}
