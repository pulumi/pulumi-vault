// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const db = new vault.Mount("db", {
 *     path: "postgres",
 *     type: "database",
 * });
 * const postgres = new vault.database.SecretBackendConnection("postgres", {
 *     backend: db.path,
 *     name: "postgres",
 *     allowedRoles: [
 *         "dev",
 *         "prod",
 *     ],
 *     rotationSchedule: "0 * * * SAT",
 *     rotationWindow: 3600,
 *     postgresql: {
 *         connectionUrl: "postgres://username:password@host:port/database",
 *     },
 * });
 * ```
 *
 * ## Ephemeral Attributes Reference
 *
 * The following write-only attributes are supported for all DBs that support username/password:
 *
 * * `passwordWo` - (Optional) The password for the user. Can be updated.
 *   **Note**: This property is write-only and will not be read from the API.
 *
 * The following write-only attribute is supported only for Snowflake DB:
 *
 * * `privateKeyWo` - (Optional) The private key associated with the Snowflake user.
 *   **Note**: This property is write-only and will not be read from the API.
 *
 * ## Import
 *
 * Database secret backend connections can be imported using the `backend`, `/config/`, and the `name` e.g.
 *
 * ```sh
 * $ pulumi import vault:database/secretBackendConnection:SecretBackendConnection example postgres/config/postgres
 * ```
 */
export class SecretBackendConnection extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendConnectionState, opts?: pulumi.CustomResourceOptions): SecretBackendConnection {
        return new SecretBackendConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:database/secretBackendConnection:SecretBackendConnection';

    /**
     * Returns true if the given object is an instance of SecretBackendConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendConnection.__pulumiType;
    }

    /**
     * A list of roles that are allowed to use this
     * connection.
     */
    declare public readonly allowedRoles: pulumi.Output<string[] | undefined>;
    /**
     * The unique name of the Vault mount to configure.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * A nested block containing configuration options for Cassandra connections.
     */
    declare public readonly cassandra: pulumi.Output<outputs.database.SecretBackendConnectionCassandra | undefined>;
    /**
     * A nested block containing configuration options for Couchbase connections.
     */
    declare public readonly couchbase: pulumi.Output<outputs.database.SecretBackendConnectionCouchbase | undefined>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    declare public readonly data: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     */
    declare public readonly disableAutomatedRotation: pulumi.Output<boolean | undefined>;
    /**
     * A nested block containing configuration options for Elasticsearch connections.
     */
    declare public readonly elasticsearch: pulumi.Output<outputs.database.SecretBackendConnectionElasticsearch | undefined>;
    /**
     * A nested block containing configuration options for SAP HanaDB connections.
     */
    declare public readonly hana: pulumi.Output<outputs.database.SecretBackendConnectionHana | undefined>;
    /**
     * A nested block containing configuration options for InfluxDB connections.
     */
    declare public readonly influxdb: pulumi.Output<outputs.database.SecretBackendConnectionInfluxdb | undefined>;
    /**
     * A nested block containing configuration options for MongoDB connections.
     */
    declare public readonly mongodb: pulumi.Output<outputs.database.SecretBackendConnectionMongodb | undefined>;
    /**
     * A nested block containing configuration options for MongoDB Atlas connections.
     */
    declare public readonly mongodbatlas: pulumi.Output<outputs.database.SecretBackendConnectionMongodbatlas | undefined>;
    /**
     * A nested block containing configuration options for MSSQL connections.
     */
    declare public readonly mssql: pulumi.Output<outputs.database.SecretBackendConnectionMssql | undefined>;
    /**
     * A nested block containing configuration options for MySQL connections.
     */
    declare public readonly mysql: pulumi.Output<outputs.database.SecretBackendConnectionMysql | undefined>;
    /**
     * A nested block containing configuration options for Aurora MySQL connections.
     */
    declare public readonly mysqlAurora: pulumi.Output<outputs.database.SecretBackendConnectionMysqlAurora | undefined>;
    /**
     * A nested block containing configuration options for legacy MySQL connections.
     */
    declare public readonly mysqlLegacy: pulumi.Output<outputs.database.SecretBackendConnectionMysqlLegacy | undefined>;
    /**
     * A nested block containing configuration options for RDS MySQL connections.
     */
    declare public readonly mysqlRds: pulumi.Output<outputs.database.SecretBackendConnectionMysqlRds | undefined>;
    /**
     * A unique name to give the database connection.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * A nested block containing configuration options for Oracle connections.
     */
    declare public readonly oracle: pulumi.Output<outputs.database.SecretBackendConnectionOracle | undefined>;
    /**
     * Specifies the name of the plugin to use.
     */
    declare public readonly pluginName: pulumi.Output<string>;
    /**
     * A nested block containing configuration options for PostgreSQL connections.
     */
    declare public readonly postgresql: pulumi.Output<outputs.database.SecretBackendConnectionPostgresql | undefined>;
    /**
     * A nested block containing configuration options for Redis connections.
     */
    declare public readonly redis: pulumi.Output<outputs.database.SecretBackendConnectionRedis | undefined>;
    /**
     * A nested block containing configuration options for Redis ElastiCache connections.
     *
     * Exactly one of the nested blocks of configuration options must be supplied.
     */
    declare public readonly redisElasticache: pulumi.Output<outputs.database.SecretBackendConnectionRedisElasticache | undefined>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    declare public readonly redshift: pulumi.Output<outputs.database.SecretBackendConnectionRedshift | undefined>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    declare public readonly rootRotationStatements: pulumi.Output<string[] | undefined>;
    /**
     * The amount of time in seconds Vault should wait before rotating the root credential.
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     */
    declare public readonly rotationPeriod: pulumi.Output<number | undefined>;
    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     */
    declare public readonly rotationSchedule: pulumi.Output<string | undefined>;
    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     */
    declare public readonly rotationWindow: pulumi.Output<number | undefined>;
    /**
     * A nested block containing configuration options for Snowflake connections.
     */
    declare public readonly snowflake: pulumi.Output<outputs.database.SecretBackendConnectionSnowflake | undefined>;
    /**
     * Whether the connection should be verified on
     * initial configuration or not.
     */
    declare public readonly verifyConnection: pulumi.Output<boolean | undefined>;

    /**
     * Create a SecretBackendConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendConnectionArgs | SecretBackendConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendConnectionState | undefined;
            resourceInputs["allowedRoles"] = state?.allowedRoles;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["cassandra"] = state?.cassandra;
            resourceInputs["couchbase"] = state?.couchbase;
            resourceInputs["data"] = state?.data;
            resourceInputs["disableAutomatedRotation"] = state?.disableAutomatedRotation;
            resourceInputs["elasticsearch"] = state?.elasticsearch;
            resourceInputs["hana"] = state?.hana;
            resourceInputs["influxdb"] = state?.influxdb;
            resourceInputs["mongodb"] = state?.mongodb;
            resourceInputs["mongodbatlas"] = state?.mongodbatlas;
            resourceInputs["mssql"] = state?.mssql;
            resourceInputs["mysql"] = state?.mysql;
            resourceInputs["mysqlAurora"] = state?.mysqlAurora;
            resourceInputs["mysqlLegacy"] = state?.mysqlLegacy;
            resourceInputs["mysqlRds"] = state?.mysqlRds;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["oracle"] = state?.oracle;
            resourceInputs["pluginName"] = state?.pluginName;
            resourceInputs["postgresql"] = state?.postgresql;
            resourceInputs["redis"] = state?.redis;
            resourceInputs["redisElasticache"] = state?.redisElasticache;
            resourceInputs["redshift"] = state?.redshift;
            resourceInputs["rootRotationStatements"] = state?.rootRotationStatements;
            resourceInputs["rotationPeriod"] = state?.rotationPeriod;
            resourceInputs["rotationSchedule"] = state?.rotationSchedule;
            resourceInputs["rotationWindow"] = state?.rotationWindow;
            resourceInputs["snowflake"] = state?.snowflake;
            resourceInputs["verifyConnection"] = state?.verifyConnection;
        } else {
            const args = argsOrState as SecretBackendConnectionArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["allowedRoles"] = args?.allowedRoles;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["cassandra"] = args?.cassandra;
            resourceInputs["couchbase"] = args?.couchbase;
            resourceInputs["data"] = args?.data;
            resourceInputs["disableAutomatedRotation"] = args?.disableAutomatedRotation;
            resourceInputs["elasticsearch"] = args?.elasticsearch;
            resourceInputs["hana"] = args?.hana;
            resourceInputs["influxdb"] = args?.influxdb;
            resourceInputs["mongodb"] = args?.mongodb;
            resourceInputs["mongodbatlas"] = args?.mongodbatlas;
            resourceInputs["mssql"] = args?.mssql;
            resourceInputs["mysql"] = args?.mysql;
            resourceInputs["mysqlAurora"] = args?.mysqlAurora;
            resourceInputs["mysqlLegacy"] = args?.mysqlLegacy;
            resourceInputs["mysqlRds"] = args?.mysqlRds;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["oracle"] = args?.oracle;
            resourceInputs["pluginName"] = args?.pluginName;
            resourceInputs["postgresql"] = args?.postgresql;
            resourceInputs["redis"] = args?.redis;
            resourceInputs["redisElasticache"] = args?.redisElasticache;
            resourceInputs["redshift"] = args?.redshift;
            resourceInputs["rootRotationStatements"] = args?.rootRotationStatements;
            resourceInputs["rotationPeriod"] = args?.rotationPeriod;
            resourceInputs["rotationSchedule"] = args?.rotationSchedule;
            resourceInputs["rotationWindow"] = args?.rotationWindow;
            resourceInputs["snowflake"] = args?.snowflake;
            resourceInputs["verifyConnection"] = args?.verifyConnection;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendConnection resources.
 */
export interface SecretBackendConnectionState {
    /**
     * A list of roles that are allowed to use this
     * connection.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique name of the Vault mount to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * A nested block containing configuration options for Cassandra connections.
     */
    cassandra?: pulumi.Input<inputs.database.SecretBackendConnectionCassandra>;
    /**
     * A nested block containing configuration options for Couchbase connections.
     */
    couchbase?: pulumi.Input<inputs.database.SecretBackendConnectionCouchbase>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     */
    disableAutomatedRotation?: pulumi.Input<boolean>;
    /**
     * A nested block containing configuration options for Elasticsearch connections.
     */
    elasticsearch?: pulumi.Input<inputs.database.SecretBackendConnectionElasticsearch>;
    /**
     * A nested block containing configuration options for SAP HanaDB connections.
     */
    hana?: pulumi.Input<inputs.database.SecretBackendConnectionHana>;
    /**
     * A nested block containing configuration options for InfluxDB connections.
     */
    influxdb?: pulumi.Input<inputs.database.SecretBackendConnectionInfluxdb>;
    /**
     * A nested block containing configuration options for MongoDB connections.
     */
    mongodb?: pulumi.Input<inputs.database.SecretBackendConnectionMongodb>;
    /**
     * A nested block containing configuration options for MongoDB Atlas connections.
     */
    mongodbatlas?: pulumi.Input<inputs.database.SecretBackendConnectionMongodbatlas>;
    /**
     * A nested block containing configuration options for MSSQL connections.
     */
    mssql?: pulumi.Input<inputs.database.SecretBackendConnectionMssql>;
    /**
     * A nested block containing configuration options for MySQL connections.
     */
    mysql?: pulumi.Input<inputs.database.SecretBackendConnectionMysql>;
    /**
     * A nested block containing configuration options for Aurora MySQL connections.
     */
    mysqlAurora?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlAurora>;
    /**
     * A nested block containing configuration options for legacy MySQL connections.
     */
    mysqlLegacy?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlLegacy>;
    /**
     * A nested block containing configuration options for RDS MySQL connections.
     */
    mysqlRds?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlRds>;
    /**
     * A unique name to give the database connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * A nested block containing configuration options for Oracle connections.
     */
    oracle?: pulumi.Input<inputs.database.SecretBackendConnectionOracle>;
    /**
     * Specifies the name of the plugin to use.
     */
    pluginName?: pulumi.Input<string>;
    /**
     * A nested block containing configuration options for PostgreSQL connections.
     */
    postgresql?: pulumi.Input<inputs.database.SecretBackendConnectionPostgresql>;
    /**
     * A nested block containing configuration options for Redis connections.
     */
    redis?: pulumi.Input<inputs.database.SecretBackendConnectionRedis>;
    /**
     * A nested block containing configuration options for Redis ElastiCache connections.
     *
     * Exactly one of the nested blocks of configuration options must be supplied.
     */
    redisElasticache?: pulumi.Input<inputs.database.SecretBackendConnectionRedisElasticache>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    redshift?: pulumi.Input<inputs.database.SecretBackendConnectionRedshift>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    rootRotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time in seconds Vault should wait before rotating the root credential.
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * A nested block containing configuration options for Snowflake connections.
     */
    snowflake?: pulumi.Input<inputs.database.SecretBackendConnectionSnowflake>;
    /**
     * Whether the connection should be verified on
     * initial configuration or not.
     */
    verifyConnection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SecretBackendConnection resource.
 */
export interface SecretBackendConnectionArgs {
    /**
     * A list of roles that are allowed to use this
     * connection.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique name of the Vault mount to configure.
     */
    backend: pulumi.Input<string>;
    /**
     * A nested block containing configuration options for Cassandra connections.
     */
    cassandra?: pulumi.Input<inputs.database.SecretBackendConnectionCassandra>;
    /**
     * A nested block containing configuration options for Couchbase connections.
     */
    couchbase?: pulumi.Input<inputs.database.SecretBackendConnectionCouchbase>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
     */
    disableAutomatedRotation?: pulumi.Input<boolean>;
    /**
     * A nested block containing configuration options for Elasticsearch connections.
     */
    elasticsearch?: pulumi.Input<inputs.database.SecretBackendConnectionElasticsearch>;
    /**
     * A nested block containing configuration options for SAP HanaDB connections.
     */
    hana?: pulumi.Input<inputs.database.SecretBackendConnectionHana>;
    /**
     * A nested block containing configuration options for InfluxDB connections.
     */
    influxdb?: pulumi.Input<inputs.database.SecretBackendConnectionInfluxdb>;
    /**
     * A nested block containing configuration options for MongoDB connections.
     */
    mongodb?: pulumi.Input<inputs.database.SecretBackendConnectionMongodb>;
    /**
     * A nested block containing configuration options for MongoDB Atlas connections.
     */
    mongodbatlas?: pulumi.Input<inputs.database.SecretBackendConnectionMongodbatlas>;
    /**
     * A nested block containing configuration options for MSSQL connections.
     */
    mssql?: pulumi.Input<inputs.database.SecretBackendConnectionMssql>;
    /**
     * A nested block containing configuration options for MySQL connections.
     */
    mysql?: pulumi.Input<inputs.database.SecretBackendConnectionMysql>;
    /**
     * A nested block containing configuration options for Aurora MySQL connections.
     */
    mysqlAurora?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlAurora>;
    /**
     * A nested block containing configuration options for legacy MySQL connections.
     */
    mysqlLegacy?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlLegacy>;
    /**
     * A nested block containing configuration options for RDS MySQL connections.
     */
    mysqlRds?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlRds>;
    /**
     * A unique name to give the database connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * A nested block containing configuration options for Oracle connections.
     */
    oracle?: pulumi.Input<inputs.database.SecretBackendConnectionOracle>;
    /**
     * Specifies the name of the plugin to use.
     */
    pluginName?: pulumi.Input<string>;
    /**
     * A nested block containing configuration options for PostgreSQL connections.
     */
    postgresql?: pulumi.Input<inputs.database.SecretBackendConnectionPostgresql>;
    /**
     * A nested block containing configuration options for Redis connections.
     */
    redis?: pulumi.Input<inputs.database.SecretBackendConnectionRedis>;
    /**
     * A nested block containing configuration options for Redis ElastiCache connections.
     *
     * Exactly one of the nested blocks of configuration options must be supplied.
     */
    redisElasticache?: pulumi.Input<inputs.database.SecretBackendConnectionRedisElasticache>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    redshift?: pulumi.Input<inputs.database.SecretBackendConnectionRedshift>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    rootRotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time in seconds Vault should wait before rotating the root credential.
     * A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
     * defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds allowed to complete
     * a rotation when a scheduled token rotation occurs. The default rotation window is
     * unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * A nested block containing configuration options for Snowflake connections.
     */
    snowflake?: pulumi.Input<inputs.database.SecretBackendConnectionSnowflake>;
    /**
     * Whether the connection should be verified on
     * initial configuration or not.
     */
    verifyConnection?: pulumi.Input<boolean>;
}
