// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const db = new vault.Mount("db", {
 *     path: "postgres",
 *     type: "database",
 * });
 * const postgres = new vault.database.SecretBackendConnection("postgres", {
 *     backend: db.path,
 *     name: "postgres",
 *     allowedRoles: [
 *         "dev",
 *         "prod",
 *     ],
 *     postgresql: {
 *         connectionUrl: "postgres://username:password@host:port/database",
 *     },
 * });
 * const role = new vault.database.SecretBackendRole("role", {
 *     backend: db.path,
 *     name: "dev",
 *     dbName: postgres.name,
 *     creationStatements: ["CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';"],
 * });
 * ```
 *
 * ## Import
 *
 * Database secret backend roles can be imported using the `backend`, `/roles/`, and the `name` e.g.
 *
 * ```sh
 * $ pulumi import vault:database/secretBackendRole:SecretBackendRole example postgres/roles/my-role
 * ```
 */
export class SecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendRoleState, opts?: pulumi.CustomResourceOptions): SecretBackendRole {
        return new SecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:database/secretBackendRole:SecretBackendRole';

    /**
     * Returns true if the given object is an instance of SecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendRole.__pulumiType;
    }

    /**
     * The unique name of the Vault mount to configure.
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * The database statements to execute when
     * creating a user.
     */
    declare public readonly creationStatements: pulumi.Output<string[]>;
    /**
     * Specifies the configuration
     * for the given `credentialType`.
     *
     * The following options are available for each `credentialType` value:
     */
    declare public readonly credentialConfig: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the type of credential that
     * will be generated for the role. Options include: `password`, `rsaPrivateKey`, `clientCertificate`.
     * See the plugin's API page for credential types supported by individual databases.
     */
    declare public readonly credentialType: pulumi.Output<string>;
    /**
     * The unique name of the database connection to use for
     * the role.
     */
    declare public readonly dbName: pulumi.Output<string>;
    /**
     * The default number of seconds for leases for this
     * role.
     */
    declare public readonly defaultTtl: pulumi.Output<number | undefined>;
    /**
     * The maximum number of seconds for leases for this
     * role.
     */
    declare public readonly maxTtl: pulumi.Output<number | undefined>;
    /**
     * A unique name to give the role.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * The database statements to execute when
     * renewing a user.
     */
    declare public readonly renewStatements: pulumi.Output<string[] | undefined>;
    /**
     * The database statements to execute when
     * revoking a user.
     */
    declare public readonly revocationStatements: pulumi.Output<string[] | undefined>;
    /**
     * The database statements to execute when
     * rolling back creation due to an error.
     */
    declare public readonly rollbackStatements: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendRoleArgs | SecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendRoleState | undefined;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["creationStatements"] = state?.creationStatements;
            resourceInputs["credentialConfig"] = state?.credentialConfig;
            resourceInputs["credentialType"] = state?.credentialType;
            resourceInputs["dbName"] = state?.dbName;
            resourceInputs["defaultTtl"] = state?.defaultTtl;
            resourceInputs["maxTtl"] = state?.maxTtl;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["renewStatements"] = state?.renewStatements;
            resourceInputs["revocationStatements"] = state?.revocationStatements;
            resourceInputs["rollbackStatements"] = state?.rollbackStatements;
        } else {
            const args = argsOrState as SecretBackendRoleArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.creationStatements === undefined && !opts.urn) {
                throw new Error("Missing required property 'creationStatements'");
            }
            if (args?.dbName === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            resourceInputs["backend"] = args?.backend;
            resourceInputs["creationStatements"] = args?.creationStatements;
            resourceInputs["credentialConfig"] = args?.credentialConfig;
            resourceInputs["credentialType"] = args?.credentialType;
            resourceInputs["dbName"] = args?.dbName;
            resourceInputs["defaultTtl"] = args?.defaultTtl;
            resourceInputs["maxTtl"] = args?.maxTtl;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["renewStatements"] = args?.renewStatements;
            resourceInputs["revocationStatements"] = args?.revocationStatements;
            resourceInputs["rollbackStatements"] = args?.rollbackStatements;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendRole resources.
 */
export interface SecretBackendRoleState {
    /**
     * The unique name of the Vault mount to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * The database statements to execute when
     * creating a user.
     */
    creationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the configuration
     * for the given `credentialType`.
     *
     * The following options are available for each `credentialType` value:
     */
    credentialConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the type of credential that
     * will be generated for the role. Options include: `password`, `rsaPrivateKey`, `clientCertificate`.
     * See the plugin's API page for credential types supported by individual databases.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * The unique name of the database connection to use for
     * the role.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The default number of seconds for leases for this
     * role.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * The maximum number of seconds for leases for this
     * role.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * A unique name to give the role.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The database statements to execute when
     * renewing a user.
     */
    renewStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The database statements to execute when
     * revoking a user.
     */
    revocationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The database statements to execute when
     * rolling back creation due to an error.
     */
    rollbackStatements?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecretBackendRole resource.
 */
export interface SecretBackendRoleArgs {
    /**
     * The unique name of the Vault mount to configure.
     */
    backend: pulumi.Input<string>;
    /**
     * The database statements to execute when
     * creating a user.
     */
    creationStatements: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the configuration
     * for the given `credentialType`.
     *
     * The following options are available for each `credentialType` value:
     */
    credentialConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the type of credential that
     * will be generated for the role. Options include: `password`, `rsaPrivateKey`, `clientCertificate`.
     * See the plugin's API page for credential types supported by individual databases.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * The unique name of the database connection to use for
     * the role.
     */
    dbName: pulumi.Input<string>;
    /**
     * The default number of seconds for leases for this
     * role.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * The maximum number of seconds for leases for this
     * role.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * A unique name to give the role.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The database statements to execute when
     * renewing a user.
     */
    renewStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The database statements to execute when
     * revoking a user.
     */
    revocationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The database statements to execute when
     * rolling back creation due to an error.
     */
    rollbackStatements?: pulumi.Input<pulumi.Input<string>[]>;
}
