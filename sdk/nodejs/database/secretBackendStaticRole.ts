// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a Database Secret Backend static role in Vault. Database secret backend
 * static roles can be used to manage 1-to-1 mapping of a Vault Role to a user in a
 * database for the database.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const db = new vault.Mount("db", {
 *     path: "postgres",
 *     type: "database",
 * });
 * const postgres = new vault.database.SecretBackendConnection("postgres", {
 *     backend: db.path,
 *     allowedRoles: ["*"],
 *     postgresql: {
 *         connectionUrl: "postgres://username:password@host:port/database",
 *     },
 * });
 * // configure a static role with period-based rotations
 * const periodRole = new vault.database.SecretBackendStaticRole("periodRole", {
 *     backend: db.path,
 *     dbName: postgres.name,
 *     username: "example",
 *     rotationPeriod: 3600,
 *     rotationStatements: ["ALTER USER \"{{name}}\" WITH PASSWORD '{{password}}';"],
 * });
 * // configure a static role with schedule-based rotations
 * const scheduleRole = new vault.database.SecretBackendStaticRole("scheduleRole", {
 *     backend: db.path,
 *     dbName: postgres.name,
 *     username: "example",
 *     rotationSchedule: "0 0 * * SAT",
 *     rotationWindow: 172800,
 *     rotationStatements: ["ALTER USER \"{{name}}\" WITH PASSWORD '{{password}}';"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Database secret backend static roles can be imported using the `backend`, `/static-roles/`, and the `name` e.g.
 *
 * ```sh
 * $ pulumi import vault:database/secretBackendStaticRole:SecretBackendStaticRole example postgres/static-roles/my-role
 * ```
 */
export class SecretBackendStaticRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendStaticRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions): SecretBackendStaticRole {
        return new SecretBackendStaticRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:database/secretBackendStaticRole:SecretBackendStaticRole';

    /**
     * Returns true if the given object is an instance of SecretBackendStaticRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendStaticRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendStaticRole.__pulumiType;
    }

    /**
     * The unique name of the Vault mount to configure.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * The unique name of the database connection to use for the static role.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * A unique name to give the static role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The amount of time Vault should wait before rotating the password, in seconds.
     * Mutually exclusive with `rotationSchedule`.
     */
    public readonly rotationPeriod!: pulumi.Output<number | undefined>;
    /**
     * A cron-style string that will define the schedule on which rotations should occur.
     * Mutually exclusive with `rotationPeriod`.
     *
     * **Warning**: The `rotationPeriod` and `rotationSchedule` fields are
     * mutually exclusive. One of them must be set but not both.
     */
    public readonly rotationSchedule!: pulumi.Output<string | undefined>;
    /**
     * Database statements to execute to rotate the password for the configured database user.
     */
    public readonly rotationStatements!: pulumi.Output<string[] | undefined>;
    /**
     * The amount of time, in seconds, in which rotations are allowed to occur starting
     * from a given `rotationSchedule`.
     */
    public readonly rotationWindow!: pulumi.Output<number | undefined>;
    /**
     * The database username that this static role corresponds to.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a SecretBackendStaticRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendStaticRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendStaticRoleArgs | SecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendStaticRoleState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["rotationPeriod"] = state ? state.rotationPeriod : undefined;
            resourceInputs["rotationSchedule"] = state ? state.rotationSchedule : undefined;
            resourceInputs["rotationStatements"] = state ? state.rotationStatements : undefined;
            resourceInputs["rotationWindow"] = state ? state.rotationWindow : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as SecretBackendStaticRoleArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["rotationPeriod"] = args ? args.rotationPeriod : undefined;
            resourceInputs["rotationSchedule"] = args ? args.rotationSchedule : undefined;
            resourceInputs["rotationStatements"] = args ? args.rotationStatements : undefined;
            resourceInputs["rotationWindow"] = args ? args.rotationWindow : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackendStaticRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendStaticRole resources.
 */
export interface SecretBackendStaticRoleState {
    /**
     * The unique name of the Vault mount to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * The unique name of the database connection to use for the static role.
     */
    dbName?: pulumi.Input<string>;
    /**
     * A unique name to give the static role.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The amount of time Vault should wait before rotating the password, in seconds.
     * Mutually exclusive with `rotationSchedule`.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * A cron-style string that will define the schedule on which rotations should occur.
     * Mutually exclusive with `rotationPeriod`.
     *
     * **Warning**: The `rotationPeriod` and `rotationSchedule` fields are
     * mutually exclusive. One of them must be set but not both.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * Database statements to execute to rotate the password for the configured database user.
     */
    rotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time, in seconds, in which rotations are allowed to occur starting
     * from a given `rotationSchedule`.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * The database username that this static role corresponds to.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackendStaticRole resource.
 */
export interface SecretBackendStaticRoleArgs {
    /**
     * The unique name of the Vault mount to configure.
     */
    backend: pulumi.Input<string>;
    /**
     * The unique name of the database connection to use for the static role.
     */
    dbName: pulumi.Input<string>;
    /**
     * A unique name to give the static role.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured namespace.
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The amount of time Vault should wait before rotating the password, in seconds.
     * Mutually exclusive with `rotationSchedule`.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * A cron-style string that will define the schedule on which rotations should occur.
     * Mutually exclusive with `rotationPeriod`.
     *
     * **Warning**: The `rotationPeriod` and `rotationSchedule` fields are
     * mutually exclusive. One of them must be set but not both.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * Database statements to execute to rotate the password for the configured database user.
     */
    rotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time, in seconds, in which rotations are allowed to occur starting
     * from a given `rotationSchedule`.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * The database username that this static role corresponds to.
     */
    username: pulumi.Input<string>;
}
