// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages KMIP Secret backends in a Vault server. This feature requires
 * Vault Enterprise. See the [Vault documentation](https://www.vaultproject.io/docs/secrets/kmip)
 * for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const _default = new vault.kmip.SecretBackend("default", {
 *     path: "kmip",
 *     description: "Vault KMIP backend",
 *     listenAddrs: [
 *         "127.0.0.1:5696",
 *         "127.0.0.1:8080",
 *     ],
 *     tlsCaKeyType: "rsa",
 *     tlsCaKeyBits: 4096,
 *     defaultTlsClientKeyType: "rsa",
 *     defaultTlsClientKeyBits: 4096,
 *     defaultTlsClientTtl: 86400,
 * });
 * ```
 *
 * ## Import
 *
 * KMIP Secret backend can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:kmip/secretBackend:SecretBackend default kmip
 * ```
 */
export class SecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendState, opts?: pulumi.CustomResourceOptions): SecretBackend {
        return new SecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:kmip/secretBackend:SecretBackend';

    /**
     * Returns true if the given object is an instance of SecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackend.__pulumiType;
    }

    /**
     * Accessor of the mount
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    public readonly allowedManagedKeys!: pulumi.Output<string[] | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly allowedResponseHeaders!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    public readonly auditNonHmacRequestKeys!: pulumi.Output<string[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    public readonly auditNonHmacResponseKeys!: pulumi.Output<string[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    public readonly defaultLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * Client certificate key bits, valid values depend on key type.
     */
    public readonly defaultTlsClientKeyBits!: pulumi.Output<number>;
    /**
     * Client certificate key type, `rsa` or `ec`.
     */
    public readonly defaultTlsClientKeyType!: pulumi.Output<string>;
    /**
     * Client certificate TTL in seconds
     */
    public readonly defaultTlsClientTtl!: pulumi.Output<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly delegatedAuthAccessors!: pulumi.Output<string[] | undefined>;
    /**
     * Human-friendly description of the mount for the backend
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    public readonly externalEntropyAccess!: pulumi.Output<boolean | undefined>;
    /**
     * If set to true, disables caching.
     */
    public readonly forceNoCache!: pulumi.Output<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    public readonly identityTokenKey!: pulumi.Output<string | undefined>;
    /**
     * Addresses the KMIP server should listen on (`host:port`).
     */
    public readonly listenAddrs!: pulumi.Output<string[]>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    public readonly listingVisibility!: pulumi.Output<string | undefined>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    public readonly maxLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    public readonly options!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly passthroughRequestHeaders!: pulumi.Output<string[] | undefined>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `kmip`.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    public readonly pluginVersion!: pulumi.Output<string | undefined>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    public readonly sealWrap!: pulumi.Output<boolean>;
    /**
     * Hostnames to include in the server's TLS certificate as SAN DNS names. The first will be used as the common name (CN).
     */
    public readonly serverHostnames!: pulumi.Output<string[]>;
    /**
     * IPs to include in the server's TLS certificate as SAN IP addresses.
     */
    public readonly serverIps!: pulumi.Output<string[]>;
    /**
     * CA key bits, valid values depend on key type.
     */
    public readonly tlsCaKeyBits!: pulumi.Output<number>;
    /**
     * CA key type, rsa or ec.
     */
    public readonly tlsCaKeyType!: pulumi.Output<string>;
    /**
     * Minimum TLS version to accept.
     */
    public readonly tlsMinVersion!: pulumi.Output<string>;

    /**
     * Create a SecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendArgs | SecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretBackendState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["allowedManagedKeys"] = state ? state.allowedManagedKeys : undefined;
            resourceInputs["allowedResponseHeaders"] = state ? state.allowedResponseHeaders : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = state ? state.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = state ? state.auditNonHmacResponseKeys : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = state ? state.defaultLeaseTtlSeconds : undefined;
            resourceInputs["defaultTlsClientKeyBits"] = state ? state.defaultTlsClientKeyBits : undefined;
            resourceInputs["defaultTlsClientKeyType"] = state ? state.defaultTlsClientKeyType : undefined;
            resourceInputs["defaultTlsClientTtl"] = state ? state.defaultTlsClientTtl : undefined;
            resourceInputs["delegatedAuthAccessors"] = state ? state.delegatedAuthAccessors : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["externalEntropyAccess"] = state ? state.externalEntropyAccess : undefined;
            resourceInputs["forceNoCache"] = state ? state.forceNoCache : undefined;
            resourceInputs["identityTokenKey"] = state ? state.identityTokenKey : undefined;
            resourceInputs["listenAddrs"] = state ? state.listenAddrs : undefined;
            resourceInputs["listingVisibility"] = state ? state.listingVisibility : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = state ? state.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["passthroughRequestHeaders"] = state ? state.passthroughRequestHeaders : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["sealWrap"] = state ? state.sealWrap : undefined;
            resourceInputs["serverHostnames"] = state ? state.serverHostnames : undefined;
            resourceInputs["serverIps"] = state ? state.serverIps : undefined;
            resourceInputs["tlsCaKeyBits"] = state ? state.tlsCaKeyBits : undefined;
            resourceInputs["tlsCaKeyType"] = state ? state.tlsCaKeyType : undefined;
            resourceInputs["tlsMinVersion"] = state ? state.tlsMinVersion : undefined;
        } else {
            const args = argsOrState as SecretBackendArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["allowedManagedKeys"] = args ? args.allowedManagedKeys : undefined;
            resourceInputs["allowedResponseHeaders"] = args ? args.allowedResponseHeaders : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = args ? args.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = args ? args.auditNonHmacResponseKeys : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = args ? args.defaultLeaseTtlSeconds : undefined;
            resourceInputs["defaultTlsClientKeyBits"] = args ? args.defaultTlsClientKeyBits : undefined;
            resourceInputs["defaultTlsClientKeyType"] = args ? args.defaultTlsClientKeyType : undefined;
            resourceInputs["defaultTlsClientTtl"] = args ? args.defaultTlsClientTtl : undefined;
            resourceInputs["delegatedAuthAccessors"] = args ? args.delegatedAuthAccessors : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["externalEntropyAccess"] = args ? args.externalEntropyAccess : undefined;
            resourceInputs["forceNoCache"] = args ? args.forceNoCache : undefined;
            resourceInputs["identityTokenKey"] = args ? args.identityTokenKey : undefined;
            resourceInputs["listenAddrs"] = args ? args.listenAddrs : undefined;
            resourceInputs["listingVisibility"] = args ? args.listingVisibility : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = args ? args.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["passthroughRequestHeaders"] = args ? args.passthroughRequestHeaders : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["pluginVersion"] = args ? args.pluginVersion : undefined;
            resourceInputs["sealWrap"] = args ? args.sealWrap : undefined;
            resourceInputs["serverHostnames"] = args ? args.serverHostnames : undefined;
            resourceInputs["serverIps"] = args ? args.serverIps : undefined;
            resourceInputs["tlsCaKeyBits"] = args ? args.tlsCaKeyBits : undefined;
            resourceInputs["tlsCaKeyType"] = args ? args.tlsCaKeyType : undefined;
            resourceInputs["tlsMinVersion"] = args ? args.tlsMinVersion : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretBackend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackend resources.
 */
export interface SecretBackendState {
    /**
     * Accessor of the mount
     */
    accessor?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Client certificate key bits, valid values depend on key type.
     */
    defaultTlsClientKeyBits?: pulumi.Input<number>;
    /**
     * Client certificate key type, `rsa` or `ec`.
     */
    defaultTlsClientKeyType?: pulumi.Input<string>;
    /**
     * Client certificate TTL in seconds
     */
    defaultTlsClientTtl?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * If set to true, disables caching.
     */
    forceNoCache?: pulumi.Input<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * Addresses the KMIP server should listen on (`host:port`).
     */
    listenAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `kmip`.
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Hostnames to include in the server's TLS certificate as SAN DNS names. The first will be used as the common name (CN).
     */
    serverHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPs to include in the server's TLS certificate as SAN IP addresses.
     */
    serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CA key bits, valid values depend on key type.
     */
    tlsCaKeyBits?: pulumi.Input<number>;
    /**
     * CA key type, rsa or ec.
     */
    tlsCaKeyType?: pulumi.Input<string>;
    /**
     * Minimum TLS version to accept.
     */
    tlsMinVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackend resource.
 */
export interface SecretBackendArgs {
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Client certificate key bits, valid values depend on key type.
     */
    defaultTlsClientKeyBits?: pulumi.Input<number>;
    /**
     * Client certificate key type, `rsa` or `ec`.
     */
    defaultTlsClientKeyType?: pulumi.Input<string>;
    /**
     * Client certificate TTL in seconds
     */
    defaultTlsClientTtl?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     * See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * If set to true, disables caching.
     */
    forceNoCache?: pulumi.Input<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * Addresses the KMIP server should listen on (`host:port`).
     */
    listenAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique path this backend should be mounted at. Must
     * not begin or end with a `/`. Defaults to `kmip`.
     */
    path: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Hostnames to include in the server's TLS certificate as SAN DNS names. The first will be used as the common name (CN).
     */
    serverHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPs to include in the server's TLS certificate as SAN IP addresses.
     */
    serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CA key bits, valid values depend on key type.
     */
    tlsCaKeyBits?: pulumi.Input<number>;
    /**
     * CA key type, rsa or ec.
     */
    tlsCaKeyType?: pulumi.Input<string>;
    /**
     * Minimum TLS version to accept.
     */
    tlsMinVersion?: pulumi.Input<string>;
}
