// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Reads the Role of an Kubernetes from a Vault server. See the [Vault
 * documentation](https://www.vaultproject.io/api/auth/kubernetes/index.html#read-role) for more
 * information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const role = pulumi.output(vault.kubernetes.getAuthBackendRole({
 *     backend: "my-kubernetes-backend",
 *     roleName: "my-role",
 * }, { async: true }));
 *
 * export const policies = role.policies!;
 * ```
 */
export function getAuthBackendRole(args: GetAuthBackendRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthBackendRoleResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("vault:kubernetes/getAuthBackendRole:getAuthBackendRole", {
        "audience": args.audience,
        "backend": args.backend,
        "boundCidrs": args.boundCidrs,
        "maxTtl": args.maxTtl,
        "numUses": args.numUses,
        "period": args.period,
        "policies": args.policies,
        "roleName": args.roleName,
        "tokenBoundCidrs": args.tokenBoundCidrs,
        "tokenExplicitMaxTtl": args.tokenExplicitMaxTtl,
        "tokenMaxTtl": args.tokenMaxTtl,
        "tokenNoDefaultPolicy": args.tokenNoDefaultPolicy,
        "tokenNumUses": args.tokenNumUses,
        "tokenPeriod": args.tokenPeriod,
        "tokenPolicies": args.tokenPolicies,
        "tokenTtl": args.tokenTtl,
        "tokenType": args.tokenType,
        "ttl": args.ttl,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthBackendRole.
 */
export interface GetAuthBackendRoleArgs {
    readonly audience?: string;
    /**
     * The unique name for the Kubernetes backend the role to
     * retrieve Role attributes for resides in. Defaults to "kubernetes".
     */
    readonly backend?: string;
    /**
     * @deprecated use `token_bound_cidrs` instead if you are running Vault >= 1.2
     */
    readonly boundCidrs?: string[];
    /**
     * The maximum allowed lifetime of tokens issued in seconds using this role.
     *
     * @deprecated use `token_max_ttl` instead if you are running Vault >= 1.2
     */
    readonly maxTtl?: number;
    /**
     * Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.
     *
     * @deprecated use `token_num_uses` instead if you are running Vault >= 1.2
     */
    readonly numUses?: number;
    /**
     * If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this parameter.
     *
     * @deprecated use `token_period` instead if you are running Vault >= 1.2
     */
    readonly period?: number;
    /**
     * Policies to be set on tokens issued using this role.
     *
     * @deprecated use `token_policies` instead if you are running Vault >= 1.2
     */
    readonly policies?: string[];
    /**
     * The name of the role to retrieve the Role attributes for.
     */
    readonly roleName: string;
    readonly tokenBoundCidrs?: string[];
    readonly tokenExplicitMaxTtl?: number;
    readonly tokenMaxTtl?: number;
    readonly tokenNoDefaultPolicy?: boolean;
    readonly tokenNumUses?: number;
    readonly tokenPeriod?: number;
    readonly tokenPolicies?: string[];
    readonly tokenTtl?: number;
    readonly tokenType?: string;
    /**
     * The TTL period of tokens issued using this role in seconds.
     *
     * @deprecated use `token_ttl` instead if you are running Vault >= 1.2
     */
    readonly ttl?: number;
}

/**
 * A collection of values returned by getAuthBackendRole.
 */
export interface GetAuthBackendRoleResult {
    readonly audience?: string;
    readonly backend?: string;
    /**
     * @deprecated use `token_bound_cidrs` instead if you are running Vault >= 1.2
     */
    readonly boundCidrs?: string[];
    /**
     * List of service account names able to access this role. If set to "*" all names are allowed, both this and boundServiceAccountNamespaces can not be "*".
     */
    readonly boundServiceAccountNames: string[];
    /**
     * List of namespaces allowed to access this role. If set to "*" all namespaces are allowed, both this and boundServiceAccountNames can not be set to "*".
     */
    readonly boundServiceAccountNamespaces: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The maximum allowed lifetime of tokens issued in seconds using this role.
     *
     * @deprecated use `token_max_ttl` instead if you are running Vault >= 1.2
     */
    readonly maxTtl?: number;
    /**
     * Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.
     *
     * @deprecated use `token_num_uses` instead if you are running Vault >= 1.2
     */
    readonly numUses?: number;
    /**
     * If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this parameter.
     *
     * @deprecated use `token_period` instead if you are running Vault >= 1.2
     */
    readonly period?: number;
    /**
     * Policies to be set on tokens issued using this role.
     *
     * @deprecated use `token_policies` instead if you are running Vault >= 1.2
     */
    readonly policies?: string[];
    readonly roleName: string;
    readonly tokenBoundCidrs?: string[];
    readonly tokenExplicitMaxTtl?: number;
    readonly tokenMaxTtl?: number;
    readonly tokenNoDefaultPolicy?: boolean;
    readonly tokenNumUses?: number;
    readonly tokenPeriod?: number;
    readonly tokenPolicies?: string[];
    readonly tokenTtl?: number;
    readonly tokenType?: string;
    /**
     * The TTL period of tokens issued using this role in seconds.
     *
     * @deprecated use `token_ttl` instead if you are running Vault >= 1.2
     */
    readonly ttl?: number;
}
