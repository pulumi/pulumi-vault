// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a role in an [GCP auth backend within Vault](https://www.vaultproject.io/docs/auth/gcp.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vault from "@pulumi/vault";
 *
 * const gcp = new vault.AuthBackend("gcp", {
 *     path: "gcp",
 *     type: "gcp",
 * });
 * const test = new vault.gcp.AuthBackendRole("test", {
 *     backend: gcp.path,
 *     role: "test",
 *     type: "iam",
 *     boundServiceAccounts: ["test"],
 *     boundProjects: ["test"],
 *     tokenTtl: 300,
 *     tokenMaxTtl: 600,
 *     tokenPolicies: [
 *         "policy_a",
 *         "policy_b",
 *     ],
 *     addGroupAliases: true,
 * });
 * ```
 *
 * ## Import
 *
 * GCP authentication roles can be imported using the `path`, e.g.
 *
 * ```sh
 * $ pulumi import vault:gcp/authBackendRole:AuthBackendRole my_role auth/gcp/role/my_role
 * ```
 */
export class AuthBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendRoleState, opts?: pulumi.CustomResourceOptions): AuthBackendRole {
        return new AuthBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:gcp/authBackendRole:AuthBackendRole';

    /**
     * Returns true if the given object is an instance of AuthBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackendRole.__pulumiType;
    }

    declare public readonly addGroupAliases: pulumi.Output<boolean>;
    declare public readonly allowGceInference: pulumi.Output<boolean>;
    /**
     * Path to the mounted GCP auth backend
     */
    declare public readonly backend: pulumi.Output<string | undefined>;
    declare public readonly boundInstanceGroups: pulumi.Output<string[]>;
    declare public readonly boundLabels: pulumi.Output<string[]>;
    /**
     * An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
     */
    declare public readonly boundProjects: pulumi.Output<string[] | undefined>;
    declare public readonly boundRegions: pulumi.Output<string[]>;
    /**
     * GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
     */
    declare public readonly boundServiceAccounts: pulumi.Output<string[]>;
    declare public readonly boundZones: pulumi.Output<string[]>;
    declare public readonly maxJwtExp: pulumi.Output<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Name of the GCP role
     */
    declare public readonly role: pulumi.Output<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    declare public readonly tokenBoundCidrs: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    declare public readonly tokenExplicitMaxTtl: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    declare public readonly tokenMaxTtl: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    declare public readonly tokenNoDefaultPolicy: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    declare public readonly tokenNumUses: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    declare public readonly tokenPeriod: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    declare public readonly tokenPolicies: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    declare public readonly tokenTtl: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    declare public readonly tokenType: pulumi.Output<string | undefined>;
    /**
     * Type of GCP authentication role (either `gce` or `iam`)
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a AuthBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendRoleArgs | AuthBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthBackendRoleState | undefined;
            resourceInputs["addGroupAliases"] = state?.addGroupAliases;
            resourceInputs["allowGceInference"] = state?.allowGceInference;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["boundInstanceGroups"] = state?.boundInstanceGroups;
            resourceInputs["boundLabels"] = state?.boundLabels;
            resourceInputs["boundProjects"] = state?.boundProjects;
            resourceInputs["boundRegions"] = state?.boundRegions;
            resourceInputs["boundServiceAccounts"] = state?.boundServiceAccounts;
            resourceInputs["boundZones"] = state?.boundZones;
            resourceInputs["maxJwtExp"] = state?.maxJwtExp;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["role"] = state?.role;
            resourceInputs["tokenBoundCidrs"] = state?.tokenBoundCidrs;
            resourceInputs["tokenExplicitMaxTtl"] = state?.tokenExplicitMaxTtl;
            resourceInputs["tokenMaxTtl"] = state?.tokenMaxTtl;
            resourceInputs["tokenNoDefaultPolicy"] = state?.tokenNoDefaultPolicy;
            resourceInputs["tokenNumUses"] = state?.tokenNumUses;
            resourceInputs["tokenPeriod"] = state?.tokenPeriod;
            resourceInputs["tokenPolicies"] = state?.tokenPolicies;
            resourceInputs["tokenTtl"] = state?.tokenTtl;
            resourceInputs["tokenType"] = state?.tokenType;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as AuthBackendRoleArgs | undefined;
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["addGroupAliases"] = args?.addGroupAliases;
            resourceInputs["allowGceInference"] = args?.allowGceInference;
            resourceInputs["backend"] = args?.backend;
            resourceInputs["boundInstanceGroups"] = args?.boundInstanceGroups;
            resourceInputs["boundLabels"] = args?.boundLabels;
            resourceInputs["boundProjects"] = args?.boundProjects;
            resourceInputs["boundRegions"] = args?.boundRegions;
            resourceInputs["boundServiceAccounts"] = args?.boundServiceAccounts;
            resourceInputs["boundZones"] = args?.boundZones;
            resourceInputs["maxJwtExp"] = args?.maxJwtExp;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["role"] = args?.role;
            resourceInputs["tokenBoundCidrs"] = args?.tokenBoundCidrs;
            resourceInputs["tokenExplicitMaxTtl"] = args?.tokenExplicitMaxTtl;
            resourceInputs["tokenMaxTtl"] = args?.tokenMaxTtl;
            resourceInputs["tokenNoDefaultPolicy"] = args?.tokenNoDefaultPolicy;
            resourceInputs["tokenNumUses"] = args?.tokenNumUses;
            resourceInputs["tokenPeriod"] = args?.tokenPeriod;
            resourceInputs["tokenPolicies"] = args?.tokenPolicies;
            resourceInputs["tokenTtl"] = args?.tokenTtl;
            resourceInputs["tokenType"] = args?.tokenType;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthBackendRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackendRole resources.
 */
export interface AuthBackendRoleState {
    addGroupAliases?: pulumi.Input<boolean>;
    allowGceInference?: pulumi.Input<boolean>;
    /**
     * Path to the mounted GCP auth backend
     */
    backend?: pulumi.Input<string>;
    boundInstanceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    boundLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
     */
    boundProjects?: pulumi.Input<pulumi.Input<string>[]>;
    boundRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
     */
    boundServiceAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    boundZones?: pulumi.Input<pulumi.Input<string>[]>;
    maxJwtExp?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the GCP role
     */
    role?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
    /**
     * Type of GCP authentication role (either `gce` or `iam`)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthBackendRole resource.
 */
export interface AuthBackendRoleArgs {
    addGroupAliases?: pulumi.Input<boolean>;
    allowGceInference?: pulumi.Input<boolean>;
    /**
     * Path to the mounted GCP auth backend
     */
    backend?: pulumi.Input<string>;
    boundInstanceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    boundLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of GCP project IDs. Only entities belonging to this project can authenticate under the role.
     */
    boundProjects?: pulumi.Input<pulumi.Input<string>[]>;
    boundRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GCP Service Accounts allowed to issue tokens under this role. (Note: **Required** if role is `iam`)
     */
    boundServiceAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    boundZones?: pulumi.Input<pulumi.Input<string>[]>;
    maxJwtExp?: pulumi.Input<string>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the GCP role
     */
    role: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
    /**
     * Type of GCP authentication role (either `gce` or `iam`)
     */
    type: pulumi.Input<string>;
}
