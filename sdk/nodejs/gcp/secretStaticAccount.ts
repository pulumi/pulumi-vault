// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates a Static Account in the [GCP Secrets Engine](https://www.vaultproject.io/docs/secrets/gcp/index.html) for Vault.
 *
 * Each [static account](https://www.vaultproject.io/docs/secrets/gcp/index.html#static-accounts) is tied to a separately managed
 * Service Account, and can have one or more [bindings](https://www.vaultproject.io/docs/secrets/gcp/index.html#bindings) associated with it.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as google from "@pulumi/google";
 * import * as std from "@pulumi/std";
 * import * as vault from "@pulumi/vault";
 *
 * const _this = new google.index.ServiceAccount("this", {accountId: "my-awesome-account"});
 * const gcp = new vault.gcp.SecretBackend("gcp", {
 *     path: "gcp",
 *     credentials: std.file({
 *         input: "credentials.json",
 *     }).then(invoke => invoke.result),
 * });
 * const staticAccount = new vault.gcp.SecretStaticAccount("static_account", {
 *     backend: gcp.path,
 *     staticAccount: "project_viewer",
 *     secretType: "access_token",
 *     tokenScopes: ["https://www.googleapis.com/auth/cloud-platform"],
 *     serviceAccountEmail: _this.email,
 *     bindings: [{
 *         resource: `//cloudresourcemanager.googleapis.com/projects/${_this.project}`,
 *         roles: ["roles/viewer"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * A static account can be imported using its Vault Path. For example, referencing the example above,
 *
 * ```sh
 * $ pulumi import vault:gcp/secretStaticAccount:SecretStaticAccount static_account gcp/static-account/project_viewer
 * ```
 */
export class SecretStaticAccount extends pulumi.CustomResource {
    /**
     * Get an existing SecretStaticAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretStaticAccountState, opts?: pulumi.CustomResourceOptions): SecretStaticAccount {
        return new SecretStaticAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:gcp/secretStaticAccount:SecretStaticAccount';

    /**
     * Returns true if the given object is an instance of SecretStaticAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretStaticAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretStaticAccount.__pulumiType;
    }

    /**
     * Path where the GCP Secrets Engine is mounted
     */
    declare public readonly backend: pulumi.Output<string>;
    /**
     * Bindings to create for this static account. This can be specified multiple times for multiple bindings. Structure is documented below.
     */
    declare public readonly bindings: pulumi.Output<outputs.gcp.SecretStaticAccountBinding[] | undefined>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * Type of secret generated for this static account. Accepted values: `accessToken`, `serviceAccountKey`. Defaults to `accessToken`.
     */
    declare public readonly secretType: pulumi.Output<string>;
    /**
     * Email of the GCP service account to manage.
     */
    declare public readonly serviceAccountEmail: pulumi.Output<string>;
    /**
     * Project the service account belongs to.
     */
    declare public /*out*/ readonly serviceAccountProject: pulumi.Output<string>;
    /**
     * Name of the Static Account to create
     */
    declare public readonly staticAccount: pulumi.Output<string>;
    /**
     * List of OAuth scopes to assign to `accessToken` secrets generated under this static account (`accessToken` static accounts only).
     */
    declare public readonly tokenScopes: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecretStaticAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretStaticAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretStaticAccountArgs | SecretStaticAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretStaticAccountState | undefined;
            resourceInputs["backend"] = state?.backend;
            resourceInputs["bindings"] = state?.bindings;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["secretType"] = state?.secretType;
            resourceInputs["serviceAccountEmail"] = state?.serviceAccountEmail;
            resourceInputs["serviceAccountProject"] = state?.serviceAccountProject;
            resourceInputs["staticAccount"] = state?.staticAccount;
            resourceInputs["tokenScopes"] = state?.tokenScopes;
        } else {
            const args = argsOrState as SecretStaticAccountArgs | undefined;
            if (args?.backend === undefined && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if (args?.serviceAccountEmail === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountEmail'");
            }
            if (args?.staticAccount === undefined && !opts.urn) {
                throw new Error("Missing required property 'staticAccount'");
            }
            resourceInputs["backend"] = args?.backend;
            resourceInputs["bindings"] = args?.bindings;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["secretType"] = args?.secretType;
            resourceInputs["serviceAccountEmail"] = args?.serviceAccountEmail;
            resourceInputs["staticAccount"] = args?.staticAccount;
            resourceInputs["tokenScopes"] = args?.tokenScopes;
            resourceInputs["serviceAccountProject"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretStaticAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretStaticAccount resources.
 */
export interface SecretStaticAccountState {
    /**
     * Path where the GCP Secrets Engine is mounted
     */
    backend?: pulumi.Input<string>;
    /**
     * Bindings to create for this static account. This can be specified multiple times for multiple bindings. Structure is documented below.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.gcp.SecretStaticAccountBinding>[]>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Type of secret generated for this static account. Accepted values: `accessToken`, `serviceAccountKey`. Defaults to `accessToken`.
     */
    secretType?: pulumi.Input<string>;
    /**
     * Email of the GCP service account to manage.
     */
    serviceAccountEmail?: pulumi.Input<string>;
    /**
     * Project the service account belongs to.
     */
    serviceAccountProject?: pulumi.Input<string>;
    /**
     * Name of the Static Account to create
     */
    staticAccount?: pulumi.Input<string>;
    /**
     * List of OAuth scopes to assign to `accessToken` secrets generated under this static account (`accessToken` static accounts only).
     */
    tokenScopes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecretStaticAccount resource.
 */
export interface SecretStaticAccountArgs {
    /**
     * Path where the GCP Secrets Engine is mounted
     */
    backend: pulumi.Input<string>;
    /**
     * Bindings to create for this static account. This can be specified multiple times for multiple bindings. Structure is documented below.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.gcp.SecretStaticAccountBinding>[]>;
    /**
     * The namespace to provision the resource in.
     * The value should not contain leading or trailing forward slashes.
     * The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
     * *Available only for Vault Enterprise*.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Type of secret generated for this static account. Accepted values: `accessToken`, `serviceAccountKey`. Defaults to `accessToken`.
     */
    secretType?: pulumi.Input<string>;
    /**
     * Email of the GCP service account to manage.
     */
    serviceAccountEmail: pulumi.Input<string>;
    /**
     * Name of the Static Account to create
     */
    staticAccount: pulumi.Input<string>;
    /**
     * List of OAuth scopes to assign to `accessToken` secrets generated under this static account (`accessToken` static accounts only).
     */
    tokenScopes?: pulumi.Input<pulumi.Input<string>[]>;
}
