# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AuthBackendGroup',
    'AuthBackendUser',
]

@pulumi.output_type
class AuthBackendGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuthBackendGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuthBackendGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuthBackendGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: _builtins.str,
                 policies: Sequence[_builtins.str]):
        """
        :param _builtins.str group_name: Name of the Okta group
        :param Sequence[_builtins.str] policies: Policies to associate with this group
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "policies", policies)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Name of the Okta group
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence[_builtins.str]:
        """
        Policies to associate with this group
        """
        return pulumi.get(self, "policies")


@pulumi.output_type
class AuthBackendUser(dict):
    def __init__(__self__, *,
                 username: _builtins.str,
                 groups: Optional[Sequence[_builtins.str]] = None,
                 policies: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str username: Name of the user within Okta
        :param Sequence[_builtins.str] groups: Groups within the Okta auth backend to associate with this user
        :param Sequence[_builtins.str] policies: Policies to associate with this user
        """
        pulumi.set(__self__, "username", username)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Name of the user within Okta
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Groups within the Okta auth backend to associate with this user
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[_builtins.str]]:
        """
        Policies to associate with this user
        """
        return pulumi.get(self, "policies")


