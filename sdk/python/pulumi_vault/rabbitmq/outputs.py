# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SecretBackendRoleVhost',
    'SecretBackendRoleVhostTopic',
    'SecretBackendRoleVhostTopicVhost',
]

@pulumi.output_type
class SecretBackendRoleVhost(dict):
    def __init__(__self__, *,
                 configure: str,
                 host: str,
                 read: str,
                 write: str):
        """
        :param str configure: The configure permissions for this vhost.
        :param str host: The vhost to set permissions for.
        :param str read: The read permissions for this vhost.
        :param str write: The write permissions for this vhost.
        """
        pulumi.set(__self__, "configure", configure)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "read", read)
        pulumi.set(__self__, "write", write)

    @property
    @pulumi.getter
    def configure(self) -> str:
        """
        The configure permissions for this vhost.
        """
        return pulumi.get(self, "configure")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The vhost to set permissions for.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def read(self) -> str:
        """
        The read permissions for this vhost.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def write(self) -> str:
        """
        The write permissions for this vhost.
        """
        return pulumi.get(self, "write")


@pulumi.output_type
class SecretBackendRoleVhostTopic(dict):
    def __init__(__self__, *,
                 host: str,
                 vhosts: Optional[Sequence['outputs.SecretBackendRoleVhostTopicVhost']] = None):
        """
        :param str host: The vhost to set permissions for.
        :param Sequence['SecretBackendRoleVhostTopicVhostArgs'] vhosts: Specifies a map of virtual hosts to permissions.
        """
        pulumi.set(__self__, "host", host)
        if vhosts is not None:
            pulumi.set(__self__, "vhosts", vhosts)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The vhost to set permissions for.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def vhosts(self) -> Optional[Sequence['outputs.SecretBackendRoleVhostTopicVhost']]:
        """
        Specifies a map of virtual hosts to permissions.
        """
        return pulumi.get(self, "vhosts")


@pulumi.output_type
class SecretBackendRoleVhostTopicVhost(dict):
    def __init__(__self__, *,
                 read: str,
                 topic: str,
                 write: str):
        """
        :param str read: The read permissions for this vhost.
        :param str topic: The vhost to set permissions for.
        :param str write: The write permissions for this vhost.
        """
        pulumi.set(__self__, "read", read)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "write", write)

    @property
    @pulumi.getter
    def read(self) -> str:
        """
        The read permissions for this vhost.
        """
        return pulumi.get(self, "read")

    @property
    @pulumi.getter
    def topic(self) -> str:
        """
        The vhost to set permissions for.
        """
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter
    def write(self) -> str:
        """
        The write permissions for this vhost.
        """
        return pulumi.get(self, "write")


