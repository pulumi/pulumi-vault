# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SecretBackendRoleVhostArgs',
    'SecretBackendRoleVhostArgsDict',
    'SecretBackendRoleVhostTopicArgs',
    'SecretBackendRoleVhostTopicArgsDict',
    'SecretBackendRoleVhostTopicVhostArgs',
    'SecretBackendRoleVhostTopicVhostArgsDict',
]

MYPY = False

if not MYPY:
    class SecretBackendRoleVhostArgsDict(TypedDict):
        configure: pulumi.Input[_builtins.str]
        """
        The configure permissions for this vhost.
        """
        host: pulumi.Input[_builtins.str]
        """
        The vhost to set permissions for.
        """
        read: pulumi.Input[_builtins.str]
        """
        The read permissions for this vhost.
        """
        write: pulumi.Input[_builtins.str]
        """
        The write permissions for this vhost.
        """
elif False:
    SecretBackendRoleVhostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretBackendRoleVhostArgs:
    def __init__(__self__, *,
                 configure: pulumi.Input[_builtins.str],
                 host: pulumi.Input[_builtins.str],
                 read: pulumi.Input[_builtins.str],
                 write: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] configure: The configure permissions for this vhost.
        :param pulumi.Input[_builtins.str] host: The vhost to set permissions for.
        :param pulumi.Input[_builtins.str] read: The read permissions for this vhost.
        :param pulumi.Input[_builtins.str] write: The write permissions for this vhost.
        """
        pulumi.set(__self__, "configure", configure)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "read", read)
        pulumi.set(__self__, "write", write)

    @_builtins.property
    @pulumi.getter
    def configure(self) -> pulumi.Input[_builtins.str]:
        """
        The configure permissions for this vhost.
        """
        return pulumi.get(self, "configure")

    @configure.setter
    def configure(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "configure", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        The vhost to set permissions for.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def read(self) -> pulumi.Input[_builtins.str]:
        """
        The read permissions for this vhost.
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "read", value)

    @_builtins.property
    @pulumi.getter
    def write(self) -> pulumi.Input[_builtins.str]:
        """
        The write permissions for this vhost.
        """
        return pulumi.get(self, "write")

    @write.setter
    def write(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "write", value)


if not MYPY:
    class SecretBackendRoleVhostTopicArgsDict(TypedDict):
        host: pulumi.Input[_builtins.str]
        """
        The vhost to set permissions for.
        """
        vhosts: NotRequired[pulumi.Input[Sequence[pulumi.Input['SecretBackendRoleVhostTopicVhostArgsDict']]]]
        """
        Specifies a map of virtual hosts to permissions.
        """
elif False:
    SecretBackendRoleVhostTopicArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretBackendRoleVhostTopicArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[_builtins.str],
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input['SecretBackendRoleVhostTopicVhostArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] host: The vhost to set permissions for.
        :param pulumi.Input[Sequence[pulumi.Input['SecretBackendRoleVhostTopicVhostArgs']]] vhosts: Specifies a map of virtual hosts to permissions.
        """
        pulumi.set(__self__, "host", host)
        if vhosts is not None:
            pulumi.set(__self__, "vhosts", vhosts)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        The vhost to set permissions for.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def vhosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecretBackendRoleVhostTopicVhostArgs']]]]:
        """
        Specifies a map of virtual hosts to permissions.
        """
        return pulumi.get(self, "vhosts")

    @vhosts.setter
    def vhosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecretBackendRoleVhostTopicVhostArgs']]]]):
        pulumi.set(self, "vhosts", value)


if not MYPY:
    class SecretBackendRoleVhostTopicVhostArgsDict(TypedDict):
        read: pulumi.Input[_builtins.str]
        """
        The read permissions for this vhost.
        """
        topic: pulumi.Input[_builtins.str]
        """
        The vhost to set permissions for.
        """
        write: pulumi.Input[_builtins.str]
        """
        The write permissions for this vhost.
        """
elif False:
    SecretBackendRoleVhostTopicVhostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretBackendRoleVhostTopicVhostArgs:
    def __init__(__self__, *,
                 read: pulumi.Input[_builtins.str],
                 topic: pulumi.Input[_builtins.str],
                 write: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] read: The read permissions for this vhost.
        :param pulumi.Input[_builtins.str] topic: The vhost to set permissions for.
        :param pulumi.Input[_builtins.str] write: The write permissions for this vhost.
        """
        pulumi.set(__self__, "read", read)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "write", write)

    @_builtins.property
    @pulumi.getter
    def read(self) -> pulumi.Input[_builtins.str]:
        """
        The read permissions for this vhost.
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "read", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Input[_builtins.str]:
        """
        The vhost to set permissions for.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "topic", value)

    @_builtins.property
    @pulumi.getter
    def write(self) -> pulumi.Input[_builtins.str]:
        """
        The write permissions for this vhost.
        """
        return pulumi.get(self, "write")

    @write.setter
    def write(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "write", value)


