# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities, _tables

__all__ = [
    'SecretBackendConnectionCassandraArgs',
    'SecretBackendConnectionElasticsearchArgs',
    'SecretBackendConnectionHanaArgs',
    'SecretBackendConnectionMongodbArgs',
    'SecretBackendConnectionMongodbatlasArgs',
    'SecretBackendConnectionMssqlArgs',
    'SecretBackendConnectionMysqlArgs',
    'SecretBackendConnectionMysqlAuroraArgs',
    'SecretBackendConnectionMysqlLegacyArgs',
    'SecretBackendConnectionMysqlRdsArgs',
    'SecretBackendConnectionOracleArgs',
    'SecretBackendConnectionPostgresqlArgs',
]

@pulumi.input_type
class SecretBackendConnectionCassandraArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insecure_tls: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pem_bundle: Optional[pulumi.Input[str]] = None,
                 pem_json: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol_version: Optional[pulumi.Input[int]] = None,
                 tls: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] connect_timeout: The number of seconds to use as a connection
               timeout.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: The hosts to connect to.
        :param pulumi.Input[bool] insecure_tls: Whether to skip verification of the server
               certificate when using TLS.
        :param pulumi.Input[str] password: The password to be used in the connection.
        :param pulumi.Input[str] pem_bundle: Concatenated PEM blocks configuring the certificate
               chain.
        :param pulumi.Input[str] pem_json: A JSON structure configuring the certificate chain.
        :param pulumi.Input[int] port: The default port to connect to if no port is specified as
               part of the host.
        :param pulumi.Input[int] protocol_version: The CQL protocol version to use.
        :param pulumi.Input[bool] tls: Whether to use TLS when connecting to Cassandra.
        :param pulumi.Input[str] username: The username to be used in the connection.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if insecure_tls is not None:
            pulumi.set(__self__, "insecure_tls", insecure_tls)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pem_bundle is not None:
            pulumi.set(__self__, "pem_bundle", pem_bundle)
        if pem_json is not None:
            pulumi.set(__self__, "pem_json", pem_json)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol_version is not None:
            pulumi.set(__self__, "protocol_version", protocol_version)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds to use as a connection
        timeout.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The hosts to connect to.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="insecureTls")
    def insecure_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to skip verification of the server
        certificate when using TLS.
        """
        return pulumi.get(self, "insecure_tls")

    @insecure_tls.setter
    def insecure_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_tls", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password to be used in the connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pemBundle")
    def pem_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Concatenated PEM blocks configuring the certificate
        chain.
        """
        return pulumi.get(self, "pem_bundle")

    @pem_bundle.setter
    def pem_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pem_bundle", value)

    @property
    @pulumi.getter(name="pemJson")
    def pem_json(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON structure configuring the certificate chain.
        """
        return pulumi.get(self, "pem_json")

    @pem_json.setter
    def pem_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pem_json", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The default port to connect to if no port is specified as
        part of the host.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> Optional[pulumi.Input[int]]:
        """
        The CQL protocol version to use.
        """
        return pulumi.get(self, "protocol_version")

    @protocol_version.setter
    def protocol_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_version", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use TLS when connecting to Cassandra.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username to be used in the connection.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SecretBackendConnectionElasticsearchArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 url: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to be used in the connection.
        :param pulumi.Input[str] url: The URL for Elasticsearch's API. https requires certificate
               by trusted CA if used.
        :param pulumi.Input[str] username: The username to be used in the connection.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to be used in the connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL for Elasticsearch's API. https requires certificate
        by trusted CA if used.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to be used in the connection.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SecretBackendConnectionHanaArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionMongodbArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionMongodbatlasArgs:
    def __init__(__self__, *,
                 private_key: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 public_key: pulumi.Input[str]):
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class SecretBackendConnectionMssqlArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionMysqlArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionMysqlAuroraArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionMysqlLegacyArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionMysqlRdsArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionOracleArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


@pulumi.input_type
class SecretBackendConnectionPostgresqlArgs:
    def __init__(__self__, *,
                 connection_url: Optional[pulumi.Input[str]] = None,
                 max_connection_lifetime: Optional[pulumi.Input[int]] = None,
                 max_idle_connections: Optional[pulumi.Input[int]] = None,
                 max_open_connections: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] connection_url: A URL containing connection information. See
               the [Vault
               docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
               for an example.
        :param pulumi.Input[int] max_connection_lifetime: The maximum number of seconds to keep
               a connection alive for.
        :param pulumi.Input[int] max_idle_connections: The maximum number of idle connections to
               maintain.
        :param pulumi.Input[int] max_open_connections: The maximum number of open connections to
               use.
        """
        if connection_url is not None:
            pulumi.set(__self__, "connection_url", connection_url)
        if max_connection_lifetime is not None:
            pulumi.set(__self__, "max_connection_lifetime", max_connection_lifetime)
        if max_idle_connections is not None:
            pulumi.set(__self__, "max_idle_connections", max_idle_connections)
        if max_open_connections is not None:
            pulumi.set(__self__, "max_open_connections", max_open_connections)

    @property
    @pulumi.getter(name="connectionUrl")
    def connection_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL containing connection information. See
        the [Vault
        docs](https://www.vaultproject.io/api-docs/secret/databases/oracle.html#sample-payload)
        for an example.
        """
        return pulumi.get(self, "connection_url")

    @connection_url.setter
    def connection_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_url", value)

    @property
    @pulumi.getter(name="maxConnectionLifetime")
    def max_connection_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of seconds to keep
        a connection alive for.
        """
        return pulumi.get(self, "max_connection_lifetime")

    @max_connection_lifetime.setter
    def max_connection_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_lifetime", value)

    @property
    @pulumi.getter(name="maxIdleConnections")
    def max_idle_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of idle connections to
        maintain.
        """
        return pulumi.get(self, "max_idle_connections")

    @max_idle_connections.setter
    def max_idle_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_connections", value)

    @property
    @pulumi.getter(name="maxOpenConnections")
    def max_open_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of open connections to
        use.
        """
        return pulumi.get(self, "max_open_connections")

    @max_open_connections.setter
    def max_open_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_connections", value)


