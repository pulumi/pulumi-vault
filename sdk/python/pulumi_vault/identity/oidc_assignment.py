# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['OidcAssignmentArgs', 'OidcAssignment']

@pulumi.input_type
class OidcAssignmentArgs:
    def __init__(__self__, *,
                 entity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OidcAssignment resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_ids: A set of Vault entity IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: A set of Vault group IDs.
        :param pulumi.Input[str] name: The name of the assignment.
        """
        if entity_ids is not None:
            pulumi.set(__self__, "entity_ids", entity_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="entityIds")
    def entity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Vault entity IDs.
        """
        return pulumi.get(self, "entity_ids")

    @entity_ids.setter
    def entity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entity_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Vault group IDs.
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the assignment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _OidcAssignmentState:
    def __init__(__self__, *,
                 entity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OidcAssignment resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_ids: A set of Vault entity IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: A set of Vault group IDs.
        :param pulumi.Input[str] name: The name of the assignment.
        """
        if entity_ids is not None:
            pulumi.set(__self__, "entity_ids", entity_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="entityIds")
    def entity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Vault entity IDs.
        """
        return pulumi.get(self, "entity_ids")

    @entity_ids.setter
    def entity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entity_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Vault group IDs.
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the assignment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class OidcAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages OIDC Assignments in a Vault server. See the [Vault documentation](https://www.vaultproject.io/api-docs/secret/identity/oidc-provider#create-or-update-an-assignment)
        for more information.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vault as vault

        internal = vault.identity.Group("internal",
            type="internal",
            policies=[
                "dev",
                "test",
            ])
        test = vault.identity.Entity("test", policies=["test"])
        default = vault.identity.OidcAssignment("default",
            entity_ids=[test.name],
            group_ids=[internal.name])
        ```

        ## Import

        OIDC Assignments can be imported using the `name`, e.g.

        ```sh
         $ pulumi import vault:identity/oidcAssignment:OidcAssignment default assignment
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_ids: A set of Vault entity IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: A set of Vault group IDs.
        :param pulumi.Input[str] name: The name of the assignment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OidcAssignmentArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages OIDC Assignments in a Vault server. See the [Vault documentation](https://www.vaultproject.io/api-docs/secret/identity/oidc-provider#create-or-update-an-assignment)
        for more information.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_vault as vault

        internal = vault.identity.Group("internal",
            type="internal",
            policies=[
                "dev",
                "test",
            ])
        test = vault.identity.Entity("test", policies=["test"])
        default = vault.identity.OidcAssignment("default",
            entity_ids=[test.name],
            group_ids=[internal.name])
        ```

        ## Import

        OIDC Assignments can be imported using the `name`, e.g.

        ```sh
         $ pulumi import vault:identity/oidcAssignment:OidcAssignment default assignment
        ```

        :param str resource_name: The name of the resource.
        :param OidcAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OidcAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OidcAssignmentArgs.__new__(OidcAssignmentArgs)

            __props__.__dict__["entity_ids"] = entity_ids
            __props__.__dict__["group_ids"] = group_ids
            __props__.__dict__["name"] = name
        super(OidcAssignment, __self__).__init__(
            'vault:identity/oidcAssignment:OidcAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            entity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'OidcAssignment':
        """
        Get an existing OidcAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_ids: A set of Vault entity IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: A set of Vault group IDs.
        :param pulumi.Input[str] name: The name of the assignment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OidcAssignmentState.__new__(_OidcAssignmentState)

        __props__.__dict__["entity_ids"] = entity_ids
        __props__.__dict__["group_ids"] = group_ids
        __props__.__dict__["name"] = name
        return OidcAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="entityIds")
    def entity_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of Vault entity IDs.
        """
        return pulumi.get(self, "entity_ids")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of Vault group IDs.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the assignment.
        """
        return pulumi.get(self, "name")

