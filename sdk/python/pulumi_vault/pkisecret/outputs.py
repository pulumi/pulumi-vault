# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BackendConfigEstAuthenticators',
    'SecretBackendRolePolicyIdentifier',
    'GetBackendConfigEstAuthenticatorResult',
]

@pulumi.output_type
class BackendConfigEstAuthenticators(dict):
    def __init__(__self__, *,
                 cert: Optional[Mapping[str, str]] = None,
                 userpass: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] cert: "The accessor (required) and cert_role (optional) properties for cert auth backends".
        :param Mapping[str, str] userpass: "The accessor (required) property for user pass auth backends".
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if userpass is not None:
            pulumi.set(__self__, "userpass", userpass)

    @property
    @pulumi.getter
    def cert(self) -> Optional[Mapping[str, str]]:
        """
        "The accessor (required) and cert_role (optional) properties for cert auth backends".
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def userpass(self) -> Optional[Mapping[str, str]]:
        """
        "The accessor (required) property for user pass auth backends".
        """
        return pulumi.get(self, "userpass")


@pulumi.output_type
class SecretBackendRolePolicyIdentifier(dict):
    def __init__(__self__, *,
                 oid: str,
                 cps: Optional[str] = None,
                 notice: Optional[str] = None):
        """
        :param str oid: The OID for the policy identifier
        :param str cps: The URL of the CPS for the policy identifier
               
               Example usage:
        :param str notice: A notice for the policy identifier
        """
        pulumi.set(__self__, "oid", oid)
        if cps is not None:
            pulumi.set(__self__, "cps", cps)
        if notice is not None:
            pulumi.set(__self__, "notice", notice)

    @property
    @pulumi.getter
    def oid(self) -> str:
        """
        The OID for the policy identifier
        """
        return pulumi.get(self, "oid")

    @property
    @pulumi.getter
    def cps(self) -> Optional[str]:
        """
        The URL of the CPS for the policy identifier

        Example usage:
        """
        return pulumi.get(self, "cps")

    @property
    @pulumi.getter
    def notice(self) -> Optional[str]:
        """
        A notice for the policy identifier
        """
        return pulumi.get(self, "notice")


@pulumi.output_type
class GetBackendConfigEstAuthenticatorResult(dict):
    def __init__(__self__, *,
                 cert: Optional[Mapping[str, str]] = None,
                 userpass: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] cert: "The accessor and cert_role properties for cert auth backends".
        :param Mapping[str, str] userpass: "The accessor property for user pass auth backends".
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if userpass is not None:
            pulumi.set(__self__, "userpass", userpass)

    @property
    @pulumi.getter
    def cert(self) -> Optional[Mapping[str, str]]:
        """
        "The accessor and cert_role properties for cert auth backends".
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def userpass(self) -> Optional[Mapping[str, str]]:
        """
        "The accessor property for user pass auth backends".
        """
        return pulumi.get(self, "userpass")


