# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetAccessCredentialsResult:
    """
    A collection of values returned by getAccessCredentials.
    """
    def __init__(__self__, backend=None, client_id=None, client_secret=None, id=None, lease_duration=None, lease_id=None, lease_renewable=None, lease_start_time=None, max_cred_validation_seconds=None, num_seconds_between_tests=None, num_sequential_successes=None, role=None, validate_creds=None):
        if backend and not isinstance(backend, str):
            raise TypeError("Expected argument 'backend' to be a str")
        __self__.backend = backend
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        __self__.client_id = client_id
        """
        The client id for credentials to query the Azure APIs.
        """
        if client_secret and not isinstance(client_secret, str):
            raise TypeError("Expected argument 'client_secret' to be a str")
        __self__.client_secret = client_secret
        """
        The client secret for credentials to query the Azure APIs.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if lease_duration and not isinstance(lease_duration, float):
            raise TypeError("Expected argument 'lease_duration' to be a float")
        __self__.lease_duration = lease_duration
        """
        The duration of the secret lease, in seconds relative
        to the time the data was requested. Once this time has passed any plan
        generated with this data may fail to apply.
        """
        if lease_id and not isinstance(lease_id, str):
            raise TypeError("Expected argument 'lease_id' to be a str")
        __self__.lease_id = lease_id
        """
        The lease identifier assigned by Vault.
        """
        if lease_renewable and not isinstance(lease_renewable, bool):
            raise TypeError("Expected argument 'lease_renewable' to be a bool")
        __self__.lease_renewable = lease_renewable
        if lease_start_time and not isinstance(lease_start_time, str):
            raise TypeError("Expected argument 'lease_start_time' to be a str")
        __self__.lease_start_time = lease_start_time
        if max_cred_validation_seconds and not isinstance(max_cred_validation_seconds, float):
            raise TypeError("Expected argument 'max_cred_validation_seconds' to be a float")
        __self__.max_cred_validation_seconds = max_cred_validation_seconds
        if num_seconds_between_tests and not isinstance(num_seconds_between_tests, float):
            raise TypeError("Expected argument 'num_seconds_between_tests' to be a float")
        __self__.num_seconds_between_tests = num_seconds_between_tests
        if num_sequential_successes and not isinstance(num_sequential_successes, float):
            raise TypeError("Expected argument 'num_sequential_successes' to be a float")
        __self__.num_sequential_successes = num_sequential_successes
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        __self__.role = role
        if validate_creds and not isinstance(validate_creds, bool):
            raise TypeError("Expected argument 'validate_creds' to be a bool")
        __self__.validate_creds = validate_creds
class AwaitableGetAccessCredentialsResult(GetAccessCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessCredentialsResult(
            backend=self.backend,
            client_id=self.client_id,
            client_secret=self.client_secret,
            id=self.id,
            lease_duration=self.lease_duration,
            lease_id=self.lease_id,
            lease_renewable=self.lease_renewable,
            lease_start_time=self.lease_start_time,
            max_cred_validation_seconds=self.max_cred_validation_seconds,
            num_seconds_between_tests=self.num_seconds_between_tests,
            num_sequential_successes=self.num_sequential_successes,
            role=self.role,
            validate_creds=self.validate_creds)

def get_access_credentials(backend=None,max_cred_validation_seconds=None,num_seconds_between_tests=None,num_sequential_successes=None,role=None,validate_creds=None,opts=None):
    """
    Use this data source to access information about an existing resource.

    :param str backend: The path to the Azure secret backend to
           read credentials from, with no leading or trailing `/`s.
    :param float max_cred_validation_seconds: If 'validate_creds' is true, 
           the number of seconds after which to give up validating credentials. Defaults
           to 1,200 (20 minutes).
    :param float num_seconds_between_tests: If 'validate_creds' is true, 
           the number of seconds to wait between each test of generated credentials.
           Defaults to 7.
    :param float num_sequential_successes: If 'validate_creds' is true, 
           the number of sequential successes required to validate generated
           credentials. Defaults to 8.
    :param str role: The name of the Azure secret backend role to read
           credentials from, with no leading or trailing `/`s.
    :param bool validate_creds: Whether generated credentials should be 
           validated before being returned. Defaults to `false`, which returns
           credentials without checking whether they have fully propagated throughout
           Azure Active Directory. Designating `true` activates testing.
    """
    __args__ = dict()


    __args__['backend'] = backend
    __args__['maxCredValidationSeconds'] = max_cred_validation_seconds
    __args__['numSecondsBetweenTests'] = num_seconds_between_tests
    __args__['numSequentialSuccesses'] = num_sequential_successes
    __args__['role'] = role
    __args__['validateCreds'] = validate_creds
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('vault:azure/getAccessCredentials:getAccessCredentials', __args__, opts=opts).value

    return AwaitableGetAccessCredentialsResult(
        backend=__ret__.get('backend'),
        client_id=__ret__.get('clientId'),
        client_secret=__ret__.get('clientSecret'),
        id=__ret__.get('id'),
        lease_duration=__ret__.get('leaseDuration'),
        lease_id=__ret__.get('leaseId'),
        lease_renewable=__ret__.get('leaseRenewable'),
        lease_start_time=__ret__.get('leaseStartTime'),
        max_cred_validation_seconds=__ret__.get('maxCredValidationSeconds'),
        num_seconds_between_tests=__ret__.get('numSecondsBetweenTests'),
        num_sequential_successes=__ret__.get('numSequentialSuccesses'),
        role=__ret__.get('role'),
        validate_creds=__ret__.get('validateCreds'))
