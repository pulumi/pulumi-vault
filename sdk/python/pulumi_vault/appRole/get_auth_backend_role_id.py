# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetAuthBackendRoleIdResult:
    """
    A collection of values returned by getAuthBackendRoleId.
    """
    def __init__(__self__, backend=None, id=None, role_id=None, role_name=None):
        if backend and not isinstance(backend, str):
            raise TypeError("Expected argument 'backend' to be a str")
        __self__.backend = backend
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        __self__.role_id = role_id
        """
        The RoleID of the role.
        """
        if role_name and not isinstance(role_name, str):
            raise TypeError("Expected argument 'role_name' to be a str")
        __self__.role_name = role_name
class AwaitableGetAuthBackendRoleIdResult(GetAuthBackendRoleIdResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthBackendRoleIdResult(
            backend=self.backend,
            id=self.id,
            role_id=self.role_id,
            role_name=self.role_name)

def get_auth_backend_role_id(backend=None,role_name=None,opts=None):
    """
    Reads the Role ID of an AppRole from a Vault server.




    :param str backend: The unique name for the AppRole backend the role to
           retrieve a RoleID for resides in. Defaults to "approle".
    :param str role_name: The name of the role to retrieve the Role ID for.
    """
    __args__ = dict()


    __args__['backend'] = backend
    __args__['roleName'] = role_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('vault:appRole/getAuthBackendRoleId:getAuthBackendRoleId', __args__, opts=opts).value

    return AwaitableGetAuthBackendRoleIdResult(
        backend=__ret__.get('backend'),
        id=__ret__.get('id'),
        role_id=__ret__.get('roleId'),
        role_name=__ret__.get('roleName'))
