# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class AuthBackendLogin(pulumi.CustomResource):
    accessor: pulumi.Output[str]
    """
    The accessor for the token.
    """
    backend: pulumi.Output[str]
    """
    The unique path of the Vault backend to log in with.
    """
    client_token: pulumi.Output[str]
    """
    The Vault token created.
    """
    lease_duration: pulumi.Output[float]
    """
    How long the token is valid for, in seconds.
    """
    lease_started: pulumi.Output[str]
    """
    The date and time the lease started, in RFC 3339 format.
    """
    metadata: pulumi.Output[dict]
    """
    The metadata associated with the token.
    """
    policies: pulumi.Output[list]
    """
    A list of policies applied to the token.
    """
    renewable: pulumi.Output[bool]
    """
    Whether the token is renewable or not.
    """
    role_id: pulumi.Output[str]
    """
    The ID of the role to log in with.
    """
    secret_id: pulumi.Output[str]
    """
    The secret ID of the role to log in with. Required
    unless `bind_secret_id` is set to false on the role.
    """
    def __init__(__self__, resource_name, opts=None, backend=None, role_id=None, secret_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Logs into Vault using the AppRole auth backend. See the [Vault
        documentation](https://www.vaultproject.io/docs/auth/approle.html) for more
        information.



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backend: The unique path of the Vault backend to log in with.
        :param pulumi.Input[str] role_id: The ID of the role to log in with.
        :param pulumi.Input[str] secret_id: The secret ID of the role to log in with. Required
               unless `bind_secret_id` is set to false on the role.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['backend'] = backend
            if role_id is None:
                raise TypeError("Missing required property 'role_id'")
            __props__['role_id'] = role_id
            __props__['secret_id'] = secret_id
            __props__['accessor'] = None
            __props__['client_token'] = None
            __props__['lease_duration'] = None
            __props__['lease_started'] = None
            __props__['metadata'] = None
            __props__['policies'] = None
            __props__['renewable'] = None
        super(AuthBackendLogin, __self__).__init__(
            'vault:appRole/authBackendLogin:AuthBackendLogin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, accessor=None, backend=None, client_token=None, lease_duration=None, lease_started=None, metadata=None, policies=None, renewable=None, role_id=None, secret_id=None):
        """
        Get an existing AuthBackendLogin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accessor: The accessor for the token.
        :param pulumi.Input[str] backend: The unique path of the Vault backend to log in with.
        :param pulumi.Input[str] client_token: The Vault token created.
        :param pulumi.Input[float] lease_duration: How long the token is valid for, in seconds.
        :param pulumi.Input[str] lease_started: The date and time the lease started, in RFC 3339 format.
        :param pulumi.Input[dict] metadata: The metadata associated with the token.
        :param pulumi.Input[list] policies: A list of policies applied to the token.
        :param pulumi.Input[bool] renewable: Whether the token is renewable or not.
        :param pulumi.Input[str] role_id: The ID of the role to log in with.
        :param pulumi.Input[str] secret_id: The secret ID of the role to log in with. Required
               unless `bind_secret_id` is set to false on the role.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["accessor"] = accessor
        __props__["backend"] = backend
        __props__["client_token"] = client_token
        __props__["lease_duration"] = lease_duration
        __props__["lease_started"] = lease_started
        __props__["metadata"] = metadata
        __props__["policies"] = policies
        __props__["renewable"] = renewable
        __props__["role_id"] = role_id
        __props__["secret_id"] = secret_id
        return AuthBackendLogin(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

