# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetStaticCredentialsResult',
    'AwaitableGetStaticCredentialsResult',
    'get_static_credentials',
    'get_static_credentials_output',
]

@pulumi.output_type
class GetStaticCredentialsResult:
    """
    A collection of values returned by getStaticCredentials.
    """
    def __init__(__self__, dn=None, id=None, last_password=None, last_vault_rotation=None, mount=None, namespace=None, password=None, role_name=None, rotation_period=None, ttl=None, username=None):
        if dn and not isinstance(dn, str):
            raise TypeError("Expected argument 'dn' to be a str")
        pulumi.set(__self__, "dn", dn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_password and not isinstance(last_password, str):
            raise TypeError("Expected argument 'last_password' to be a str")
        pulumi.set(__self__, "last_password", last_password)
        if last_vault_rotation and not isinstance(last_vault_rotation, str):
            raise TypeError("Expected argument 'last_vault_rotation' to be a str")
        pulumi.set(__self__, "last_vault_rotation", last_vault_rotation)
        if mount and not isinstance(mount, str):
            raise TypeError("Expected argument 'mount' to be a str")
        pulumi.set(__self__, "mount", mount)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if role_name and not isinstance(role_name, str):
            raise TypeError("Expected argument 'role_name' to be a str")
        pulumi.set(__self__, "role_name", role_name)
        if rotation_period and not isinstance(rotation_period, int):
            raise TypeError("Expected argument 'rotation_period' to be a int")
        pulumi.set(__self__, "rotation_period", rotation_period)
        if ttl and not isinstance(ttl, int):
            raise TypeError("Expected argument 'ttl' to be a int")
        pulumi.set(__self__, "ttl", ttl)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def dn(self) -> _builtins.str:
        return pulumi.get(self, "dn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastPassword")
    def last_password(self) -> _builtins.str:
        return pulumi.get(self, "last_password")

    @_builtins.property
    @pulumi.getter(name="lastVaultRotation")
    def last_vault_rotation(self) -> _builtins.str:
        return pulumi.get(self, "last_vault_rotation")

    @_builtins.property
    @pulumi.getter
    def mount(self) -> _builtins.str:
        return pulumi.get(self, "mount")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> _builtins.str:
        return pulumi.get(self, "role_name")

    @_builtins.property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> _builtins.int:
        return pulumi.get(self, "rotation_period")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> _builtins.int:
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


class AwaitableGetStaticCredentialsResult(GetStaticCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStaticCredentialsResult(
            dn=self.dn,
            id=self.id,
            last_password=self.last_password,
            last_vault_rotation=self.last_vault_rotation,
            mount=self.mount,
            namespace=self.namespace,
            password=self.password,
            role_name=self.role_name,
            rotation_period=self.rotation_period,
            ttl=self.ttl,
            username=self.username)


def get_static_credentials(mount: Optional[_builtins.str] = None,
                           namespace: Optional[_builtins.str] = None,
                           role_name: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStaticCredentialsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['mount'] = mount
    __args__['namespace'] = namespace
    __args__['roleName'] = role_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vault:ldap/getStaticCredentials:getStaticCredentials', __args__, opts=opts, typ=GetStaticCredentialsResult).value

    return AwaitableGetStaticCredentialsResult(
        dn=pulumi.get(__ret__, 'dn'),
        id=pulumi.get(__ret__, 'id'),
        last_password=pulumi.get(__ret__, 'last_password'),
        last_vault_rotation=pulumi.get(__ret__, 'last_vault_rotation'),
        mount=pulumi.get(__ret__, 'mount'),
        namespace=pulumi.get(__ret__, 'namespace'),
        password=pulumi.get(__ret__, 'password'),
        role_name=pulumi.get(__ret__, 'role_name'),
        rotation_period=pulumi.get(__ret__, 'rotation_period'),
        ttl=pulumi.get(__ret__, 'ttl'),
        username=pulumi.get(__ret__, 'username'))
def get_static_credentials_output(mount: Optional[pulumi.Input[_builtins.str]] = None,
                                  namespace: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  role_name: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStaticCredentialsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['mount'] = mount
    __args__['namespace'] = namespace
    __args__['roleName'] = role_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('vault:ldap/getStaticCredentials:getStaticCredentials', __args__, opts=opts, typ=GetStaticCredentialsResult)
    return __ret__.apply(lambda __response__: GetStaticCredentialsResult(
        dn=pulumi.get(__response__, 'dn'),
        id=pulumi.get(__response__, 'id'),
        last_password=pulumi.get(__response__, 'last_password'),
        last_vault_rotation=pulumi.get(__response__, 'last_vault_rotation'),
        mount=pulumi.get(__response__, 'mount'),
        namespace=pulumi.get(__response__, 'namespace'),
        password=pulumi.get(__response__, 'password'),
        role_name=pulumi.get(__response__, 'role_name'),
        rotation_period=pulumi.get(__response__, 'rotation_period'),
        ttl=pulumi.get(__response__, 'ttl'),
        username=pulumi.get(__response__, 'username')))
