# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class SecretBackendRole(pulumi.CustomResource):
    allow_any_name: pulumi.Output[bool]
    """
    Flag to allow any name
    """
    allow_bare_domains: pulumi.Output[bool]
    """
    Flag to allow certificates matching the actual domain
    """
    allow_glob_domains: pulumi.Output[bool]
    """
    Flag to allow names containing glob patterns.
    """
    allow_ip_sans: pulumi.Output[bool]
    """
    Flag to allow IP SANs
    """
    allow_localhost: pulumi.Output[bool]
    """
    Flag to allow certificates for localhost
    """
    allow_subdomains: pulumi.Output[bool]
    """
    Flag to allow certificates matching subdomains
    """
    allowed_domains: pulumi.Output[list]
    """
    List of allowed domains for certificates 
    """
    allowed_other_sans: pulumi.Output[list]
    """
    Defines allowed custom SANs
    """
    allowed_uri_sans: pulumi.Output[list]
    """
    Defines allowed URI SANs
    """
    backend: pulumi.Output[str]
    """
    The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
    """
    basic_constraints_valid_for_non_ca: pulumi.Output[bool]
    """
    Flag to mark basic constraints valid when issuing non-CA certificates
    """
    client_flag: pulumi.Output[bool]
    """
    Flag to specify certificates for client use
    """
    code_signing_flag: pulumi.Output[bool]
    """
    Flag to specify certificates for code signing use
    """
    countries: pulumi.Output[list]
    """
    The country of generated certificates
    """
    email_protection_flag: pulumi.Output[bool]
    """
    Flag to specify certificates for email protection use
    """
    enforce_hostnames: pulumi.Output[bool]
    """
    Flag to allow only valid host names
    """
    ext_key_usages: pulumi.Output[list]
    """
    Specify the allowed extended key usage constraint on issued certificates
    """
    generate_lease: pulumi.Output[bool]
    """
    Flag to generate leases with certificates
    """
    key_bits: pulumi.Output[float]
    """
    The number of bits of generated keys
    """
    key_type: pulumi.Output[str]
    """
    The type of generated keys
    """
    key_usages: pulumi.Output[list]
    """
    Specify the allowed key usage constraint on issued certificates
    """
    localities: pulumi.Output[list]
    """
    The locality of generated certificates
    """
    max_ttl: pulumi.Output[str]
    """
    The maximum TTL
    """
    name: pulumi.Output[str]
    """
    The name to identify this role within the backend. Must be unique within the backend.
    """
    no_store: pulumi.Output[bool]
    """
    Flag to not store certificates in the storage backend
    """
    not_before_duration: pulumi.Output[str]
    """
    Specifies the duration by which to backdate the NotBefore property.
    """
    organization_unit: pulumi.Output[list]
    """
    The organization unit of generated certificates
    """
    organizations: pulumi.Output[list]
    """
    The organization of generated certificates
    """
    policy_identifiers: pulumi.Output[list]
    """
    Specify the list of allowed policies IODs
    """
    postal_codes: pulumi.Output[list]
    """
    The postal code of generated certificates
    """
    provinces: pulumi.Output[list]
    """
    The province of generated certificates
    """
    require_cn: pulumi.Output[bool]
    """
    Flag to force CN usage
    """
    server_flag: pulumi.Output[bool]
    """
    Flag to specify certificates for server use
    """
    street_addresses: pulumi.Output[list]
    """
    The street address of generated certificates
    """
    ttl: pulumi.Output[str]
    """
    The TTL
    """
    use_csr_common_name: pulumi.Output[bool]
    """
    Flag to use the CN in the CSR
    """
    use_csr_sans: pulumi.Output[bool]
    """
    Flag to use the SANs in the CSR
    """
    def __init__(__self__, resource_name, opts=None, allow_any_name=None, allow_bare_domains=None, allow_glob_domains=None, allow_ip_sans=None, allow_localhost=None, allow_subdomains=None, allowed_domains=None, allowed_other_sans=None, allowed_uri_sans=None, backend=None, basic_constraints_valid_for_non_ca=None, client_flag=None, code_signing_flag=None, countries=None, email_protection_flag=None, enforce_hostnames=None, ext_key_usages=None, generate_lease=None, key_bits=None, key_type=None, key_usages=None, localities=None, max_ttl=None, name=None, no_store=None, not_before_duration=None, organization_unit=None, organizations=None, policy_identifiers=None, postal_codes=None, provinces=None, require_cn=None, server_flag=None, street_addresses=None, ttl=None, use_csr_common_name=None, use_csr_sans=None, __props__=None, __name__=None, __opts__=None):
        """
        Creates a role on an PKI Secret Backend for Vault.



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_any_name: Flag to allow any name
        :param pulumi.Input[bool] allow_bare_domains: Flag to allow certificates matching the actual domain
        :param pulumi.Input[bool] allow_glob_domains: Flag to allow names containing glob patterns.
        :param pulumi.Input[bool] allow_ip_sans: Flag to allow IP SANs
        :param pulumi.Input[bool] allow_localhost: Flag to allow certificates for localhost
        :param pulumi.Input[bool] allow_subdomains: Flag to allow certificates matching subdomains
        :param pulumi.Input[list] allowed_domains: List of allowed domains for certificates 
        :param pulumi.Input[list] allowed_other_sans: Defines allowed custom SANs
        :param pulumi.Input[list] allowed_uri_sans: Defines allowed URI SANs
        :param pulumi.Input[str] backend: The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        :param pulumi.Input[bool] basic_constraints_valid_for_non_ca: Flag to mark basic constraints valid when issuing non-CA certificates
        :param pulumi.Input[bool] client_flag: Flag to specify certificates for client use
        :param pulumi.Input[bool] code_signing_flag: Flag to specify certificates for code signing use
        :param pulumi.Input[list] countries: The country of generated certificates
        :param pulumi.Input[bool] email_protection_flag: Flag to specify certificates for email protection use
        :param pulumi.Input[bool] enforce_hostnames: Flag to allow only valid host names
        :param pulumi.Input[list] ext_key_usages: Specify the allowed extended key usage constraint on issued certificates
        :param pulumi.Input[bool] generate_lease: Flag to generate leases with certificates
        :param pulumi.Input[float] key_bits: The number of bits of generated keys
        :param pulumi.Input[str] key_type: The type of generated keys
        :param pulumi.Input[list] key_usages: Specify the allowed key usage constraint on issued certificates
        :param pulumi.Input[list] localities: The locality of generated certificates
        :param pulumi.Input[str] max_ttl: The maximum TTL
        :param pulumi.Input[str] name: The name to identify this role within the backend. Must be unique within the backend.
        :param pulumi.Input[bool] no_store: Flag to not store certificates in the storage backend
        :param pulumi.Input[str] not_before_duration: Specifies the duration by which to backdate the NotBefore property.
        :param pulumi.Input[list] organization_unit: The organization unit of generated certificates
        :param pulumi.Input[list] organizations: The organization of generated certificates
        :param pulumi.Input[list] policy_identifiers: Specify the list of allowed policies IODs
        :param pulumi.Input[list] postal_codes: The postal code of generated certificates
        :param pulumi.Input[list] provinces: The province of generated certificates
        :param pulumi.Input[bool] require_cn: Flag to force CN usage
        :param pulumi.Input[bool] server_flag: Flag to specify certificates for server use
        :param pulumi.Input[list] street_addresses: The street address of generated certificates
        :param pulumi.Input[str] ttl: The TTL
        :param pulumi.Input[bool] use_csr_common_name: Flag to use the CN in the CSR
        :param pulumi.Input[bool] use_csr_sans: Flag to use the SANs in the CSR
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_any_name'] = allow_any_name
            __props__['allow_bare_domains'] = allow_bare_domains
            __props__['allow_glob_domains'] = allow_glob_domains
            __props__['allow_ip_sans'] = allow_ip_sans
            __props__['allow_localhost'] = allow_localhost
            __props__['allow_subdomains'] = allow_subdomains
            __props__['allowed_domains'] = allowed_domains
            __props__['allowed_other_sans'] = allowed_other_sans
            __props__['allowed_uri_sans'] = allowed_uri_sans
            if backend is None:
                raise TypeError("Missing required property 'backend'")
            __props__['backend'] = backend
            __props__['basic_constraints_valid_for_non_ca'] = basic_constraints_valid_for_non_ca
            __props__['client_flag'] = client_flag
            __props__['code_signing_flag'] = code_signing_flag
            __props__['countries'] = countries
            __props__['email_protection_flag'] = email_protection_flag
            __props__['enforce_hostnames'] = enforce_hostnames
            __props__['ext_key_usages'] = ext_key_usages
            __props__['generate_lease'] = generate_lease
            __props__['key_bits'] = key_bits
            __props__['key_type'] = key_type
            __props__['key_usages'] = key_usages
            __props__['localities'] = localities
            __props__['max_ttl'] = max_ttl
            __props__['name'] = name
            __props__['no_store'] = no_store
            __props__['not_before_duration'] = not_before_duration
            __props__['organization_unit'] = organization_unit
            __props__['organizations'] = organizations
            __props__['policy_identifiers'] = policy_identifiers
            __props__['postal_codes'] = postal_codes
            __props__['provinces'] = provinces
            __props__['require_cn'] = require_cn
            __props__['server_flag'] = server_flag
            __props__['street_addresses'] = street_addresses
            __props__['ttl'] = ttl
            __props__['use_csr_common_name'] = use_csr_common_name
            __props__['use_csr_sans'] = use_csr_sans
        super(SecretBackendRole, __self__).__init__(
            'vault:pkiSecret/secretBackendRole:SecretBackendRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, allow_any_name=None, allow_bare_domains=None, allow_glob_domains=None, allow_ip_sans=None, allow_localhost=None, allow_subdomains=None, allowed_domains=None, allowed_other_sans=None, allowed_uri_sans=None, backend=None, basic_constraints_valid_for_non_ca=None, client_flag=None, code_signing_flag=None, countries=None, email_protection_flag=None, enforce_hostnames=None, ext_key_usages=None, generate_lease=None, key_bits=None, key_type=None, key_usages=None, localities=None, max_ttl=None, name=None, no_store=None, not_before_duration=None, organization_unit=None, organizations=None, policy_identifiers=None, postal_codes=None, provinces=None, require_cn=None, server_flag=None, street_addresses=None, ttl=None, use_csr_common_name=None, use_csr_sans=None):
        """
        Get an existing SecretBackendRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_any_name: Flag to allow any name
        :param pulumi.Input[bool] allow_bare_domains: Flag to allow certificates matching the actual domain
        :param pulumi.Input[bool] allow_glob_domains: Flag to allow names containing glob patterns.
        :param pulumi.Input[bool] allow_ip_sans: Flag to allow IP SANs
        :param pulumi.Input[bool] allow_localhost: Flag to allow certificates for localhost
        :param pulumi.Input[bool] allow_subdomains: Flag to allow certificates matching subdomains
        :param pulumi.Input[list] allowed_domains: List of allowed domains for certificates 
        :param pulumi.Input[list] allowed_other_sans: Defines allowed custom SANs
        :param pulumi.Input[list] allowed_uri_sans: Defines allowed URI SANs
        :param pulumi.Input[str] backend: The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        :param pulumi.Input[bool] basic_constraints_valid_for_non_ca: Flag to mark basic constraints valid when issuing non-CA certificates
        :param pulumi.Input[bool] client_flag: Flag to specify certificates for client use
        :param pulumi.Input[bool] code_signing_flag: Flag to specify certificates for code signing use
        :param pulumi.Input[list] countries: The country of generated certificates
        :param pulumi.Input[bool] email_protection_flag: Flag to specify certificates for email protection use
        :param pulumi.Input[bool] enforce_hostnames: Flag to allow only valid host names
        :param pulumi.Input[list] ext_key_usages: Specify the allowed extended key usage constraint on issued certificates
        :param pulumi.Input[bool] generate_lease: Flag to generate leases with certificates
        :param pulumi.Input[float] key_bits: The number of bits of generated keys
        :param pulumi.Input[str] key_type: The type of generated keys
        :param pulumi.Input[list] key_usages: Specify the allowed key usage constraint on issued certificates
        :param pulumi.Input[list] localities: The locality of generated certificates
        :param pulumi.Input[str] max_ttl: The maximum TTL
        :param pulumi.Input[str] name: The name to identify this role within the backend. Must be unique within the backend.
        :param pulumi.Input[bool] no_store: Flag to not store certificates in the storage backend
        :param pulumi.Input[str] not_before_duration: Specifies the duration by which to backdate the NotBefore property.
        :param pulumi.Input[list] organization_unit: The organization unit of generated certificates
        :param pulumi.Input[list] organizations: The organization of generated certificates
        :param pulumi.Input[list] policy_identifiers: Specify the list of allowed policies IODs
        :param pulumi.Input[list] postal_codes: The postal code of generated certificates
        :param pulumi.Input[list] provinces: The province of generated certificates
        :param pulumi.Input[bool] require_cn: Flag to force CN usage
        :param pulumi.Input[bool] server_flag: Flag to specify certificates for server use
        :param pulumi.Input[list] street_addresses: The street address of generated certificates
        :param pulumi.Input[str] ttl: The TTL
        :param pulumi.Input[bool] use_csr_common_name: Flag to use the CN in the CSR
        :param pulumi.Input[bool] use_csr_sans: Flag to use the SANs in the CSR
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allow_any_name"] = allow_any_name
        __props__["allow_bare_domains"] = allow_bare_domains
        __props__["allow_glob_domains"] = allow_glob_domains
        __props__["allow_ip_sans"] = allow_ip_sans
        __props__["allow_localhost"] = allow_localhost
        __props__["allow_subdomains"] = allow_subdomains
        __props__["allowed_domains"] = allowed_domains
        __props__["allowed_other_sans"] = allowed_other_sans
        __props__["allowed_uri_sans"] = allowed_uri_sans
        __props__["backend"] = backend
        __props__["basic_constraints_valid_for_non_ca"] = basic_constraints_valid_for_non_ca
        __props__["client_flag"] = client_flag
        __props__["code_signing_flag"] = code_signing_flag
        __props__["countries"] = countries
        __props__["email_protection_flag"] = email_protection_flag
        __props__["enforce_hostnames"] = enforce_hostnames
        __props__["ext_key_usages"] = ext_key_usages
        __props__["generate_lease"] = generate_lease
        __props__["key_bits"] = key_bits
        __props__["key_type"] = key_type
        __props__["key_usages"] = key_usages
        __props__["localities"] = localities
        __props__["max_ttl"] = max_ttl
        __props__["name"] = name
        __props__["no_store"] = no_store
        __props__["not_before_duration"] = not_before_duration
        __props__["organization_unit"] = organization_unit
        __props__["organizations"] = organizations
        __props__["policy_identifiers"] = policy_identifiers
        __props__["postal_codes"] = postal_codes
        __props__["provinces"] = provinces
        __props__["require_cn"] = require_cn
        __props__["server_flag"] = server_flag
        __props__["street_addresses"] = street_addresses
        __props__["ttl"] = ttl
        __props__["use_csr_common_name"] = use_csr_common_name
        __props__["use_csr_sans"] = use_csr_sans
        return SecretBackendRole(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

