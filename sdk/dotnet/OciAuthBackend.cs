// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Vault.OciAuthBackend("example", new()
    ///     {
    ///         Path = exampleVaultAuthBackend.Path,
    ///         HomeTenancyId = "ocid1.tenancy.oc1..aaaaaaaah7zkvaffv26pzyauoe2zbnionqvhvsexamplee557wakiofi4ysgqq",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OCI auth backends can be imported using the backend's `path`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:index/ociAuthBackend:OciAuthBackend example oci
    /// ```
    /// </summary>
    [VaultResourceType("vault:index/ociAuthBackend:OciAuthBackend")]
    public partial class OciAuthBackend : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The accessor of the auth backend
        /// </summary>
        [Output("accessor")]
        public Output<string> Accessor { get; private set; } = null!;

        /// <summary>
        /// A description of the auth backend.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Stops rotation of the root credential until set to false.
        /// </summary>
        [Output("disableAutomatedRotation")]
        public Output<bool?> DisableAutomatedRotation { get; private set; } = null!;

        /// <summary>
        /// If set, opts out of mount migration on path updates.
        /// </summary>
        [Output("disableRemount")]
        public Output<bool?> DisableRemount { get; private set; } = null!;

        /// <summary>
        /// The Tenancy OCID of your OCI account.
        /// </summary>
        [Output("homeTenancyId")]
        public Output<string> HomeTenancyId { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
        /// </summary>
        [Output("rotationPeriod")]
        public Output<int?> RotationPeriod { get; private set; } = null!;

        /// <summary>
        /// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
        /// </summary>
        [Output("rotationSchedule")]
        public Output<string?> RotationSchedule { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
        /// </summary>
        [Output("rotationWindow")]
        public Output<int?> RotationWindow { get; private set; } = null!;

        /// <summary>
        /// Extra configuration block. Structure is documented below.
        /// 
        /// The `Tune` block is used to tune the auth backend:
        /// </summary>
        [Output("tune")]
        public Output<Outputs.OciAuthBackendTune> Tune { get; private set; } = null!;


        /// <summary>
        /// Create a OciAuthBackend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OciAuthBackend(string name, OciAuthBackendArgs args, CustomResourceOptions? options = null)
            : base("vault:index/ociAuthBackend:OciAuthBackend", name, args ?? new OciAuthBackendArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OciAuthBackend(string name, Input<string> id, OciAuthBackendState? state = null, CustomResourceOptions? options = null)
            : base("vault:index/ociAuthBackend:OciAuthBackend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "homeTenancyId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OciAuthBackend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OciAuthBackend Get(string name, Input<string> id, OciAuthBackendState? state = null, CustomResourceOptions? options = null)
        {
            return new OciAuthBackend(name, id, state, options);
        }
    }

    public sealed class OciAuthBackendArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the auth backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Stops rotation of the root credential until set to false.
        /// </summary>
        [Input("disableAutomatedRotation")]
        public Input<bool>? DisableAutomatedRotation { get; set; }

        /// <summary>
        /// If set, opts out of mount migration on path updates.
        /// </summary>
        [Input("disableRemount")]
        public Input<bool>? DisableRemount { get; set; }

        [Input("homeTenancyId", required: true)]
        private Input<string>? _homeTenancyId;

        /// <summary>
        /// The Tenancy OCID of your OCI account.
        /// </summary>
        public Input<string>? HomeTenancyId
        {
            get => _homeTenancyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _homeTenancyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
        /// </summary>
        [Input("rotationPeriod")]
        public Input<int>? RotationPeriod { get; set; }

        /// <summary>
        /// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
        /// </summary>
        [Input("rotationSchedule")]
        public Input<string>? RotationSchedule { get; set; }

        /// <summary>
        /// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
        /// </summary>
        [Input("rotationWindow")]
        public Input<int>? RotationWindow { get; set; }

        /// <summary>
        /// Extra configuration block. Structure is documented below.
        /// 
        /// The `Tune` block is used to tune the auth backend:
        /// </summary>
        [Input("tune")]
        public Input<Inputs.OciAuthBackendTuneArgs>? Tune { get; set; }

        public OciAuthBackendArgs()
        {
        }
        public static new OciAuthBackendArgs Empty => new OciAuthBackendArgs();
    }

    public sealed class OciAuthBackendState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The accessor of the auth backend
        /// </summary>
        [Input("accessor")]
        public Input<string>? Accessor { get; set; }

        /// <summary>
        /// A description of the auth backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Stops rotation of the root credential until set to false.
        /// </summary>
        [Input("disableAutomatedRotation")]
        public Input<bool>? DisableAutomatedRotation { get; set; }

        /// <summary>
        /// If set, opts out of mount migration on path updates.
        /// </summary>
        [Input("disableRemount")]
        public Input<bool>? DisableRemount { get; set; }

        [Input("homeTenancyId")]
        private Input<string>? _homeTenancyId;

        /// <summary>
        /// The Tenancy OCID of your OCI account.
        /// </summary>
        public Input<string>? HomeTenancyId
        {
            get => _homeTenancyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _homeTenancyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
        /// </summary>
        [Input("rotationPeriod")]
        public Input<int>? RotationPeriod { get; set; }

        /// <summary>
        /// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
        /// </summary>
        [Input("rotationSchedule")]
        public Input<string>? RotationSchedule { get; set; }

        /// <summary>
        /// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
        /// </summary>
        [Input("rotationWindow")]
        public Input<int>? RotationWindow { get; set; }

        /// <summary>
        /// Extra configuration block. Structure is documented below.
        /// 
        /// The `Tune` block is used to tune the auth backend:
        /// </summary>
        [Input("tune")]
        public Input<Inputs.OciAuthBackendTuneGetArgs>? Tune { get; set; }

        public OciAuthBackendState()
        {
        }
        public static new OciAuthBackendState Empty => new OciAuthBackendState();
    }
}
