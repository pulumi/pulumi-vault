// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Database
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var db = new Vault.Database.SecretsMount("db", new()
    ///     {
    ///         Path = "db",
    ///         Mssqls = new[]
    ///         {
    ///             new Vault.Database.Inputs.SecretsMountMssqlArgs
    ///             {
    ///                 Name = "db1",
    ///                 Username = "sa",
    ///                 Password = "super_secret_1",
    ///                 ConnectionUrl = "sqlserver://{{username}}:{{password}}@127.0.0.1:1433",
    ///                 AllowedRoles = new[]
    ///                 {
    ///                     "dev1",
    ///                 },
    ///             },
    ///         },
    ///         Postgresqls = new[]
    ///         {
    ///             new Vault.Database.Inputs.SecretsMountPostgresqlArgs
    ///             {
    ///                 Name = "db2",
    ///                 Username = "postgres",
    ///                 Password = "super_secret_2",
    ///                 ConnectionUrl = "postgresql://{{username}}:{{password}}@127.0.0.1:5432/postgres",
    ///                 VerifyConnection = true,
    ///                 AllowedRoles = new[]
    ///                 {
    ///                     "dev2",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var dev1 = new Vault.Database.SecretBackendRole("dev1", new()
    ///     {
    ///         Backend = db.Path,
    ///         DbName = db.Mssqls.Apply(mssqls =&gt; mssqls[0]?.Name),
    ///         CreationStatements = new[]
    ///         {
    ///             "CREATE LOGIN [{{name}}] WITH PASSWORD = '{{password}}';",
    ///             "CREATE USER [{{name}}] FOR LOGIN [{{name}}];",
    ///             "GRANT SELECT ON SCHEMA::dbo TO [{{name}}];",
    ///         },
    ///     });
    /// 
    ///     var dev2 = new Vault.Database.SecretBackendRole("dev2", new()
    ///     {
    ///         Backend = db.Path,
    ///         DbName = db.Postgresqls.Apply(postgresqls =&gt; postgresqls[0]?.Name),
    ///         CreationStatements = new[]
    ///         {
    ///             "CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';",
    ///             "GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"{{name}}\";",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Database secret backend connections can be imported using the `path` e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:database/secretsMount:SecretsMount db db
    /// ```
    /// </summary>
    [VaultResourceType("vault:database/secretsMount:SecretsMount")]
    public partial class SecretsMount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Accessor of the mount
        /// </summary>
        [Output("accessor")]
        public Output<string> Accessor { get; private set; } = null!;

        /// <summary>
        /// Set of managed key registry entry names that the mount in question is allowed to access
        /// 
        /// The following arguments are common to all database engines:
        /// </summary>
        [Output("allowedManagedKeys")]
        public Output<ImmutableArray<string>> AllowedManagedKeys { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
        /// </summary>
        [Output("auditNonHmacRequestKeys")]
        public Output<ImmutableArray<string>> AuditNonHmacRequestKeys { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
        /// </summary>
        [Output("auditNonHmacResponseKeys")]
        public Output<ImmutableArray<string>> AuditNonHmacResponseKeys { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Cassandra connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("cassandras")]
        public Output<ImmutableArray<Outputs.SecretsMountCassandra>> Cassandras { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Couchbase connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("couchbases")]
        public Output<ImmutableArray<Outputs.SecretsMountCouchbase>> Couchbases { get; private set; } = null!;

        /// <summary>
        /// Default lease duration for tokens and secrets in seconds
        /// </summary>
        [Output("defaultLeaseTtlSeconds")]
        public Output<int> DefaultLeaseTtlSeconds { get; private set; } = null!;

        /// <summary>
        /// Human-friendly description of the mount
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Elasticsearch connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("elasticsearches")]
        public Output<ImmutableArray<Outputs.SecretsMountElasticsearch>> Elasticsearches { get; private set; } = null!;

        /// <summary>
        /// The total number of database secrets engines configured.
        /// </summary>
        [Output("engineCount")]
        public Output<int> EngineCount { get; private set; } = null!;

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
        /// </summary>
        [Output("externalEntropyAccess")]
        public Output<bool?> ExternalEntropyAccess { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for SAP HanaDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("hanas")]
        public Output<ImmutableArray<Outputs.SecretsMountHana>> Hanas { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for InfluxDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("influxdbs")]
        public Output<ImmutableArray<Outputs.SecretsMountInfluxdb>> Influxdbs { get; private set; } = null!;

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
        /// </summary>
        [Output("local")]
        public Output<bool?> Local { get; private set; } = null!;

        /// <summary>
        /// Maximum possible lease duration for tokens and secrets in seconds
        /// </summary>
        [Output("maxLeaseTtlSeconds")]
        public Output<int> MaxLeaseTtlSeconds { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for MongoDB Atlas connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("mongodbatlas")]
        public Output<ImmutableArray<Outputs.SecretsMountMongodbatla>> Mongodbatlas { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for MongoDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("mongodbs")]
        public Output<ImmutableArray<Outputs.SecretsMountMongodb>> Mongodbs { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for MSSQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("mssqls")]
        public Output<ImmutableArray<Outputs.SecretsMountMssql>> Mssqls { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Aurora MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("mysqlAuroras")]
        public Output<ImmutableArray<Outputs.SecretsMountMysqlAurora>> MysqlAuroras { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for legacy MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("mysqlLegacies")]
        public Output<ImmutableArray<Outputs.SecretsMountMysqlLegacy>> MysqlLegacies { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for RDS MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("mysqlRds")]
        public Output<ImmutableArray<Outputs.SecretsMountMysqlRd>> MysqlRds { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("mysqls")]
        public Output<ImmutableArray<Outputs.SecretsMountMysql>> Mysqls { get; private set; } = null!;

        /// <summary>
        /// Target namespace. (requires Enterprise)
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies mount type specific options that are passed to the backend
        /// </summary>
        [Output("options")]
        public Output<ImmutableDictionary<string, object>?> Options { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Oracle connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("oracles")]
        public Output<ImmutableArray<Outputs.SecretsMountOracle>> Oracles { get; private set; } = null!;

        /// <summary>
        /// Where the secret backend will be mounted
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for PostgreSQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("postgresqls")]
        public Output<ImmutableArray<Outputs.SecretsMountPostgresql>> Postgresqls { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Redis connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("redis")]
        public Output<ImmutableArray<Outputs.SecretsMountRedi>> Redis { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Redis ElastiCache connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("redisElasticaches")]
        public Output<ImmutableArray<Outputs.SecretsMountRedisElasticach>> RedisElasticaches { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for AWS Redshift connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("redshifts")]
        public Output<ImmutableArray<Outputs.SecretsMountRedshift>> Redshifts { get; private set; } = null!;

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
        /// </summary>
        [Output("sealWrap")]
        public Output<bool> SealWrap { get; private set; } = null!;

        /// <summary>
        /// A nested block containing configuration options for Snowflake connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        [Output("snowflakes")]
        public Output<ImmutableArray<Outputs.SecretsMountSnowflake>> Snowflakes { get; private set; } = null!;


        /// <summary>
        /// Create a SecretsMount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretsMount(string name, SecretsMountArgs args, CustomResourceOptions? options = null)
            : base("vault:database/secretsMount:SecretsMount", name, args ?? new SecretsMountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretsMount(string name, Input<string> id, SecretsMountState? state = null, CustomResourceOptions? options = null)
            : base("vault:database/secretsMount:SecretsMount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretsMount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretsMount Get(string name, Input<string> id, SecretsMountState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretsMount(name, id, state, options);
        }
    }

    public sealed class SecretsMountArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedManagedKeys")]
        private InputList<string>? _allowedManagedKeys;

        /// <summary>
        /// Set of managed key registry entry names that the mount in question is allowed to access
        /// 
        /// The following arguments are common to all database engines:
        /// </summary>
        public InputList<string> AllowedManagedKeys
        {
            get => _allowedManagedKeys ?? (_allowedManagedKeys = new InputList<string>());
            set => _allowedManagedKeys = value;
        }

        [Input("auditNonHmacRequestKeys")]
        private InputList<string>? _auditNonHmacRequestKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
        /// </summary>
        public InputList<string> AuditNonHmacRequestKeys
        {
            get => _auditNonHmacRequestKeys ?? (_auditNonHmacRequestKeys = new InputList<string>());
            set => _auditNonHmacRequestKeys = value;
        }

        [Input("auditNonHmacResponseKeys")]
        private InputList<string>? _auditNonHmacResponseKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
        /// </summary>
        public InputList<string> AuditNonHmacResponseKeys
        {
            get => _auditNonHmacResponseKeys ?? (_auditNonHmacResponseKeys = new InputList<string>());
            set => _auditNonHmacResponseKeys = value;
        }

        [Input("cassandras")]
        private InputList<Inputs.SecretsMountCassandraArgs>? _cassandras;

        /// <summary>
        /// A nested block containing configuration options for Cassandra connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountCassandraArgs> Cassandras
        {
            get => _cassandras ?? (_cassandras = new InputList<Inputs.SecretsMountCassandraArgs>());
            set => _cassandras = value;
        }

        [Input("couchbases")]
        private InputList<Inputs.SecretsMountCouchbaseArgs>? _couchbases;

        /// <summary>
        /// A nested block containing configuration options for Couchbase connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountCouchbaseArgs> Couchbases
        {
            get => _couchbases ?? (_couchbases = new InputList<Inputs.SecretsMountCouchbaseArgs>());
            set => _couchbases = value;
        }

        /// <summary>
        /// Default lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("defaultLeaseTtlSeconds")]
        public Input<int>? DefaultLeaseTtlSeconds { get; set; }

        /// <summary>
        /// Human-friendly description of the mount
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("elasticsearches")]
        private InputList<Inputs.SecretsMountElasticsearchArgs>? _elasticsearches;

        /// <summary>
        /// A nested block containing configuration options for Elasticsearch connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountElasticsearchArgs> Elasticsearches
        {
            get => _elasticsearches ?? (_elasticsearches = new InputList<Inputs.SecretsMountElasticsearchArgs>());
            set => _elasticsearches = value;
        }

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
        /// </summary>
        [Input("externalEntropyAccess")]
        public Input<bool>? ExternalEntropyAccess { get; set; }

        [Input("hanas")]
        private InputList<Inputs.SecretsMountHanaArgs>? _hanas;

        /// <summary>
        /// A nested block containing configuration options for SAP HanaDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountHanaArgs> Hanas
        {
            get => _hanas ?? (_hanas = new InputList<Inputs.SecretsMountHanaArgs>());
            set => _hanas = value;
        }

        [Input("influxdbs")]
        private InputList<Inputs.SecretsMountInfluxdbArgs>? _influxdbs;

        /// <summary>
        /// A nested block containing configuration options for InfluxDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountInfluxdbArgs> Influxdbs
        {
            get => _influxdbs ?? (_influxdbs = new InputList<Inputs.SecretsMountInfluxdbArgs>());
            set => _influxdbs = value;
        }

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// Maximum possible lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("maxLeaseTtlSeconds")]
        public Input<int>? MaxLeaseTtlSeconds { get; set; }

        [Input("mongodbatlas")]
        private InputList<Inputs.SecretsMountMongodbatlaArgs>? _mongodbatlas;

        /// <summary>
        /// A nested block containing configuration options for MongoDB Atlas connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMongodbatlaArgs> Mongodbatlas
        {
            get => _mongodbatlas ?? (_mongodbatlas = new InputList<Inputs.SecretsMountMongodbatlaArgs>());
            set => _mongodbatlas = value;
        }

        [Input("mongodbs")]
        private InputList<Inputs.SecretsMountMongodbArgs>? _mongodbs;

        /// <summary>
        /// A nested block containing configuration options for MongoDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMongodbArgs> Mongodbs
        {
            get => _mongodbs ?? (_mongodbs = new InputList<Inputs.SecretsMountMongodbArgs>());
            set => _mongodbs = value;
        }

        [Input("mssqls")]
        private InputList<Inputs.SecretsMountMssqlArgs>? _mssqls;

        /// <summary>
        /// A nested block containing configuration options for MSSQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMssqlArgs> Mssqls
        {
            get => _mssqls ?? (_mssqls = new InputList<Inputs.SecretsMountMssqlArgs>());
            set => _mssqls = value;
        }

        [Input("mysqlAuroras")]
        private InputList<Inputs.SecretsMountMysqlAuroraArgs>? _mysqlAuroras;

        /// <summary>
        /// A nested block containing configuration options for Aurora MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlAuroraArgs> MysqlAuroras
        {
            get => _mysqlAuroras ?? (_mysqlAuroras = new InputList<Inputs.SecretsMountMysqlAuroraArgs>());
            set => _mysqlAuroras = value;
        }

        [Input("mysqlLegacies")]
        private InputList<Inputs.SecretsMountMysqlLegacyArgs>? _mysqlLegacies;

        /// <summary>
        /// A nested block containing configuration options for legacy MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlLegacyArgs> MysqlLegacies
        {
            get => _mysqlLegacies ?? (_mysqlLegacies = new InputList<Inputs.SecretsMountMysqlLegacyArgs>());
            set => _mysqlLegacies = value;
        }

        [Input("mysqlRds")]
        private InputList<Inputs.SecretsMountMysqlRdArgs>? _mysqlRds;

        /// <summary>
        /// A nested block containing configuration options for RDS MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlRdArgs> MysqlRds
        {
            get => _mysqlRds ?? (_mysqlRds = new InputList<Inputs.SecretsMountMysqlRdArgs>());
            set => _mysqlRds = value;
        }

        [Input("mysqls")]
        private InputList<Inputs.SecretsMountMysqlArgs>? _mysqls;

        /// <summary>
        /// A nested block containing configuration options for MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlArgs> Mysqls
        {
            get => _mysqls ?? (_mysqls = new InputList<Inputs.SecretsMountMysqlArgs>());
            set => _mysqls = value;
        }

        /// <summary>
        /// Target namespace. (requires Enterprise)
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// Specifies mount type specific options that are passed to the backend
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        [Input("oracles")]
        private InputList<Inputs.SecretsMountOracleArgs>? _oracles;

        /// <summary>
        /// A nested block containing configuration options for Oracle connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountOracleArgs> Oracles
        {
            get => _oracles ?? (_oracles = new InputList<Inputs.SecretsMountOracleArgs>());
            set => _oracles = value;
        }

        /// <summary>
        /// Where the secret backend will be mounted
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("postgresqls")]
        private InputList<Inputs.SecretsMountPostgresqlArgs>? _postgresqls;

        /// <summary>
        /// A nested block containing configuration options for PostgreSQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountPostgresqlArgs> Postgresqls
        {
            get => _postgresqls ?? (_postgresqls = new InputList<Inputs.SecretsMountPostgresqlArgs>());
            set => _postgresqls = value;
        }

        [Input("redis")]
        private InputList<Inputs.SecretsMountRediArgs>? _redis;

        /// <summary>
        /// A nested block containing configuration options for Redis connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountRediArgs> Redis
        {
            get => _redis ?? (_redis = new InputList<Inputs.SecretsMountRediArgs>());
            set => _redis = value;
        }

        [Input("redisElasticaches")]
        private InputList<Inputs.SecretsMountRedisElasticachArgs>? _redisElasticaches;

        /// <summary>
        /// A nested block containing configuration options for Redis ElastiCache connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountRedisElasticachArgs> RedisElasticaches
        {
            get => _redisElasticaches ?? (_redisElasticaches = new InputList<Inputs.SecretsMountRedisElasticachArgs>());
            set => _redisElasticaches = value;
        }

        [Input("redshifts")]
        private InputList<Inputs.SecretsMountRedshiftArgs>? _redshifts;

        /// <summary>
        /// A nested block containing configuration options for AWS Redshift connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountRedshiftArgs> Redshifts
        {
            get => _redshifts ?? (_redshifts = new InputList<Inputs.SecretsMountRedshiftArgs>());
            set => _redshifts = value;
        }

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
        /// </summary>
        [Input("sealWrap")]
        public Input<bool>? SealWrap { get; set; }

        [Input("snowflakes")]
        private InputList<Inputs.SecretsMountSnowflakeArgs>? _snowflakes;

        /// <summary>
        /// A nested block containing configuration options for Snowflake connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountSnowflakeArgs> Snowflakes
        {
            get => _snowflakes ?? (_snowflakes = new InputList<Inputs.SecretsMountSnowflakeArgs>());
            set => _snowflakes = value;
        }

        public SecretsMountArgs()
        {
        }
        public static new SecretsMountArgs Empty => new SecretsMountArgs();
    }

    public sealed class SecretsMountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Accessor of the mount
        /// </summary>
        [Input("accessor")]
        public Input<string>? Accessor { get; set; }

        [Input("allowedManagedKeys")]
        private InputList<string>? _allowedManagedKeys;

        /// <summary>
        /// Set of managed key registry entry names that the mount in question is allowed to access
        /// 
        /// The following arguments are common to all database engines:
        /// </summary>
        public InputList<string> AllowedManagedKeys
        {
            get => _allowedManagedKeys ?? (_allowedManagedKeys = new InputList<string>());
            set => _allowedManagedKeys = value;
        }

        [Input("auditNonHmacRequestKeys")]
        private InputList<string>? _auditNonHmacRequestKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
        /// </summary>
        public InputList<string> AuditNonHmacRequestKeys
        {
            get => _auditNonHmacRequestKeys ?? (_auditNonHmacRequestKeys = new InputList<string>());
            set => _auditNonHmacRequestKeys = value;
        }

        [Input("auditNonHmacResponseKeys")]
        private InputList<string>? _auditNonHmacResponseKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
        /// </summary>
        public InputList<string> AuditNonHmacResponseKeys
        {
            get => _auditNonHmacResponseKeys ?? (_auditNonHmacResponseKeys = new InputList<string>());
            set => _auditNonHmacResponseKeys = value;
        }

        [Input("cassandras")]
        private InputList<Inputs.SecretsMountCassandraGetArgs>? _cassandras;

        /// <summary>
        /// A nested block containing configuration options for Cassandra connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountCassandraGetArgs> Cassandras
        {
            get => _cassandras ?? (_cassandras = new InputList<Inputs.SecretsMountCassandraGetArgs>());
            set => _cassandras = value;
        }

        [Input("couchbases")]
        private InputList<Inputs.SecretsMountCouchbaseGetArgs>? _couchbases;

        /// <summary>
        /// A nested block containing configuration options for Couchbase connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountCouchbaseGetArgs> Couchbases
        {
            get => _couchbases ?? (_couchbases = new InputList<Inputs.SecretsMountCouchbaseGetArgs>());
            set => _couchbases = value;
        }

        /// <summary>
        /// Default lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("defaultLeaseTtlSeconds")]
        public Input<int>? DefaultLeaseTtlSeconds { get; set; }

        /// <summary>
        /// Human-friendly description of the mount
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("elasticsearches")]
        private InputList<Inputs.SecretsMountElasticsearchGetArgs>? _elasticsearches;

        /// <summary>
        /// A nested block containing configuration options for Elasticsearch connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountElasticsearchGetArgs> Elasticsearches
        {
            get => _elasticsearches ?? (_elasticsearches = new InputList<Inputs.SecretsMountElasticsearchGetArgs>());
            set => _elasticsearches = value;
        }

        /// <summary>
        /// The total number of database secrets engines configured.
        /// </summary>
        [Input("engineCount")]
        public Input<int>? EngineCount { get; set; }

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
        /// </summary>
        [Input("externalEntropyAccess")]
        public Input<bool>? ExternalEntropyAccess { get; set; }

        [Input("hanas")]
        private InputList<Inputs.SecretsMountHanaGetArgs>? _hanas;

        /// <summary>
        /// A nested block containing configuration options for SAP HanaDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountHanaGetArgs> Hanas
        {
            get => _hanas ?? (_hanas = new InputList<Inputs.SecretsMountHanaGetArgs>());
            set => _hanas = value;
        }

        [Input("influxdbs")]
        private InputList<Inputs.SecretsMountInfluxdbGetArgs>? _influxdbs;

        /// <summary>
        /// A nested block containing configuration options for InfluxDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountInfluxdbGetArgs> Influxdbs
        {
            get => _influxdbs ?? (_influxdbs = new InputList<Inputs.SecretsMountInfluxdbGetArgs>());
            set => _influxdbs = value;
        }

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// Maximum possible lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("maxLeaseTtlSeconds")]
        public Input<int>? MaxLeaseTtlSeconds { get; set; }

        [Input("mongodbatlas")]
        private InputList<Inputs.SecretsMountMongodbatlaGetArgs>? _mongodbatlas;

        /// <summary>
        /// A nested block containing configuration options for MongoDB Atlas connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMongodbatlaGetArgs> Mongodbatlas
        {
            get => _mongodbatlas ?? (_mongodbatlas = new InputList<Inputs.SecretsMountMongodbatlaGetArgs>());
            set => _mongodbatlas = value;
        }

        [Input("mongodbs")]
        private InputList<Inputs.SecretsMountMongodbGetArgs>? _mongodbs;

        /// <summary>
        /// A nested block containing configuration options for MongoDB connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMongodbGetArgs> Mongodbs
        {
            get => _mongodbs ?? (_mongodbs = new InputList<Inputs.SecretsMountMongodbGetArgs>());
            set => _mongodbs = value;
        }

        [Input("mssqls")]
        private InputList<Inputs.SecretsMountMssqlGetArgs>? _mssqls;

        /// <summary>
        /// A nested block containing configuration options for MSSQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMssqlGetArgs> Mssqls
        {
            get => _mssqls ?? (_mssqls = new InputList<Inputs.SecretsMountMssqlGetArgs>());
            set => _mssqls = value;
        }

        [Input("mysqlAuroras")]
        private InputList<Inputs.SecretsMountMysqlAuroraGetArgs>? _mysqlAuroras;

        /// <summary>
        /// A nested block containing configuration options for Aurora MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlAuroraGetArgs> MysqlAuroras
        {
            get => _mysqlAuroras ?? (_mysqlAuroras = new InputList<Inputs.SecretsMountMysqlAuroraGetArgs>());
            set => _mysqlAuroras = value;
        }

        [Input("mysqlLegacies")]
        private InputList<Inputs.SecretsMountMysqlLegacyGetArgs>? _mysqlLegacies;

        /// <summary>
        /// A nested block containing configuration options for legacy MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlLegacyGetArgs> MysqlLegacies
        {
            get => _mysqlLegacies ?? (_mysqlLegacies = new InputList<Inputs.SecretsMountMysqlLegacyGetArgs>());
            set => _mysqlLegacies = value;
        }

        [Input("mysqlRds")]
        private InputList<Inputs.SecretsMountMysqlRdGetArgs>? _mysqlRds;

        /// <summary>
        /// A nested block containing configuration options for RDS MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlRdGetArgs> MysqlRds
        {
            get => _mysqlRds ?? (_mysqlRds = new InputList<Inputs.SecretsMountMysqlRdGetArgs>());
            set => _mysqlRds = value;
        }

        [Input("mysqls")]
        private InputList<Inputs.SecretsMountMysqlGetArgs>? _mysqls;

        /// <summary>
        /// A nested block containing configuration options for MySQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountMysqlGetArgs> Mysqls
        {
            get => _mysqls ?? (_mysqls = new InputList<Inputs.SecretsMountMysqlGetArgs>());
            set => _mysqls = value;
        }

        /// <summary>
        /// Target namespace. (requires Enterprise)
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// Specifies mount type specific options that are passed to the backend
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        [Input("oracles")]
        private InputList<Inputs.SecretsMountOracleGetArgs>? _oracles;

        /// <summary>
        /// A nested block containing configuration options for Oracle connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountOracleGetArgs> Oracles
        {
            get => _oracles ?? (_oracles = new InputList<Inputs.SecretsMountOracleGetArgs>());
            set => _oracles = value;
        }

        /// <summary>
        /// Where the secret backend will be mounted
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("postgresqls")]
        private InputList<Inputs.SecretsMountPostgresqlGetArgs>? _postgresqls;

        /// <summary>
        /// A nested block containing configuration options for PostgreSQL connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountPostgresqlGetArgs> Postgresqls
        {
            get => _postgresqls ?? (_postgresqls = new InputList<Inputs.SecretsMountPostgresqlGetArgs>());
            set => _postgresqls = value;
        }

        [Input("redis")]
        private InputList<Inputs.SecretsMountRediGetArgs>? _redis;

        /// <summary>
        /// A nested block containing configuration options for Redis connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountRediGetArgs> Redis
        {
            get => _redis ?? (_redis = new InputList<Inputs.SecretsMountRediGetArgs>());
            set => _redis = value;
        }

        [Input("redisElasticaches")]
        private InputList<Inputs.SecretsMountRedisElasticachGetArgs>? _redisElasticaches;

        /// <summary>
        /// A nested block containing configuration options for Redis ElastiCache connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountRedisElasticachGetArgs> RedisElasticaches
        {
            get => _redisElasticaches ?? (_redisElasticaches = new InputList<Inputs.SecretsMountRedisElasticachGetArgs>());
            set => _redisElasticaches = value;
        }

        [Input("redshifts")]
        private InputList<Inputs.SecretsMountRedshiftGetArgs>? _redshifts;

        /// <summary>
        /// A nested block containing configuration options for AWS Redshift connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountRedshiftGetArgs> Redshifts
        {
            get => _redshifts ?? (_redshifts = new InputList<Inputs.SecretsMountRedshiftGetArgs>());
            set => _redshifts = value;
        }

        /// <summary>
        /// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
        /// </summary>
        [Input("sealWrap")]
        public Input<bool>? SealWrap { get; set; }

        [Input("snowflakes")]
        private InputList<Inputs.SecretsMountSnowflakeGetArgs>? _snowflakes;

        /// <summary>
        /// A nested block containing configuration options for Snowflake connections.  
        /// *See Configuration Options for more info*
        /// </summary>
        public InputList<Inputs.SecretsMountSnowflakeGetArgs> Snowflakes
        {
            get => _snowflakes ?? (_snowflakes = new InputList<Inputs.SecretsMountSnowflakeGetArgs>());
            set => _snowflakes = value;
        }

        public SecretsMountState()
        {
        }
        public static new SecretsMountState Empty => new SecretsMountState();
    }
}
