// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Database.Outputs
{

    [OutputType]
    public sealed class SecretBackendConnectionPostgresql
    {
        /// <summary>
        /// Specify alternative authorization type. (Only 'gcp_iam' is valid currently)
        /// </summary>
        public readonly string? AuthType;
        /// <summary>
        /// Connection string to use to connect to the database.
        /// </summary>
        public readonly string? ConnectionUrl;
        /// <summary>
        /// Disable special character escaping in username and password
        /// </summary>
        public readonly bool? DisableEscaping;
        /// <summary>
        /// Maximum number of seconds a connection may be reused.
        /// </summary>
        public readonly int? MaxConnectionLifetime;
        /// <summary>
        /// Maximum number of idle connections to the database.
        /// </summary>
        public readonly int? MaxIdleConnections;
        /// <summary>
        /// Maximum number of open connections to the database.
        /// </summary>
        public readonly int? MaxOpenConnections;
        /// <summary>
        /// The root credential password used in the connection URL
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// When set to `scram-sha-256`, passwords will be hashed by Vault before being sent to PostgreSQL.
        /// </summary>
        public readonly string? PasswordAuthentication;
        /// <summary>
        /// The secret key used for the x509 client certificate. Must be PEM encoded.
        /// </summary>
        public readonly string? PrivateKey;
        /// <summary>
        /// If set, allows onboarding static roles with a rootless connection configuration.
        /// </summary>
        public readonly bool? SelfManaged;
        /// <summary>
        /// A JSON encoded credential for use with IAM authorization
        /// </summary>
        public readonly string? ServiceAccountJson;
        /// <summary>
        /// The x509 CA file for validating the certificate presented by the PostgreSQL server. Must be PEM encoded.
        /// </summary>
        public readonly string? TlsCa;
        /// <summary>
        /// The x509 client certificate for connecting to the database. Must be PEM encoded.
        /// </summary>
        public readonly string? TlsCertificate;
        /// <summary>
        /// The root credential username used in the connection URL
        /// </summary>
        public readonly string? Username;
        /// <summary>
        /// Username generation template.
        /// </summary>
        public readonly string? UsernameTemplate;

        [OutputConstructor]
        private SecretBackendConnectionPostgresql(
            string? authType,

            string? connectionUrl,

            bool? disableEscaping,

            int? maxConnectionLifetime,

            int? maxIdleConnections,

            int? maxOpenConnections,

            string? password,

            string? passwordAuthentication,

            string? privateKey,

            bool? selfManaged,

            string? serviceAccountJson,

            string? tlsCa,

            string? tlsCertificate,

            string? username,

            string? usernameTemplate)
        {
            AuthType = authType;
            ConnectionUrl = connectionUrl;
            DisableEscaping = disableEscaping;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
            Password = password;
            PasswordAuthentication = passwordAuthentication;
            PrivateKey = privateKey;
            SelfManaged = selfManaged;
            ServiceAccountJson = serviceAccountJson;
            TlsCa = tlsCa;
            TlsCertificate = tlsCertificate;
            Username = username;
            UsernameTemplate = usernameTemplate;
        }
    }
}
