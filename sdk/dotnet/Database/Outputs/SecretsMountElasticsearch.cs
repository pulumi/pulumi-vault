// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Database.Outputs
{

    [OutputType]
    public sealed class SecretsMountElasticsearch
    {
        /// <summary>
        /// A list of roles that are allowed to use this
        /// connection.
        /// </summary>
        public readonly ImmutableArray<string> AllowedRoles;
        /// <summary>
        /// The path to a PEM-encoded CA cert file to use to verify the Elasticsearch server's identity.
        /// </summary>
        public readonly string? CaCert;
        /// <summary>
        /// The path to a directory of PEM-encoded CA cert files to use to verify the Elasticsearch server's identity.
        /// </summary>
        public readonly string? CaPath;
        /// <summary>
        /// The path to the certificate for the Elasticsearch client to present for communication.
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// The path to the key for the Elasticsearch client to use for communication.
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
        /// 
        /// Supported list of database secrets engines that can be configured:
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Data;
        /// <summary>
        /// Whether to disable certificate verification.
        /// </summary>
        public readonly bool? Insecure;
        /// <summary>
        /// Name of the database connection.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The root credential password used in the connection URL.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Specifies the name of the plugin to use.
        /// </summary>
        public readonly string? PluginName;
        /// <summary>
        /// A list of database statements to be executed to rotate the root user's credentials.
        /// </summary>
        public readonly ImmutableArray<string> RootRotationStatements;
        /// <summary>
        /// This, if set, is used to set the SNI host when connecting via TLS.
        /// </summary>
        public readonly string? TlsServerName;
        /// <summary>
        /// The URL for Elasticsearch's API. https requires certificate
        /// by trusted CA if used.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// The root credential username used in the connection URL.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// [Template](https://www.vaultproject.io/docs/concepts/username-templating) describing how dynamic usernames are generated.
        /// </summary>
        public readonly string? UsernameTemplate;
        /// <summary>
        /// Whether the connection should be verified on
        /// initial configuration or not.
        /// </summary>
        public readonly bool? VerifyConnection;

        [OutputConstructor]
        private SecretsMountElasticsearch(
            ImmutableArray<string> allowedRoles,

            string? caCert,

            string? caPath,

            string? clientCert,

            string? clientKey,

            ImmutableDictionary<string, object>? data,

            bool? insecure,

            string name,

            string password,

            string? pluginName,

            ImmutableArray<string> rootRotationStatements,

            string? tlsServerName,

            string url,

            string username,

            string? usernameTemplate,

            bool? verifyConnection)
        {
            AllowedRoles = allowedRoles;
            CaCert = caCert;
            CaPath = caPath;
            ClientCert = clientCert;
            ClientKey = clientKey;
            Data = data;
            Insecure = insecure;
            Name = name;
            Password = password;
            PluginName = pluginName;
            RootRotationStatements = rootRotationStatements;
            TlsServerName = tlsServerName;
            Url = url;
            Username = username;
            UsernameTemplate = usernameTemplate;
            VerifyConnection = verifyConnection;
        }
    }
}
