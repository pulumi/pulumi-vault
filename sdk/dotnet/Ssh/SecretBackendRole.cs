// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Ssh
{
    /// <summary>
    /// Provides a resource to manage roles in an SSH secret backend
    /// [SSH secret backend within Vault](https://www.vaultproject.io/docs/secrets/ssh/index.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Vault.Mount("example", new()
    ///     {
    ///         Type = "ssh",
    ///     });
    /// 
    ///     var foo = new Vault.Ssh.SecretBackendRole("foo", new()
    ///     {
    ///         Backend = example.Path,
    ///         KeyType = "ca",
    ///         AllowUserCertificates = true,
    ///     });
    /// 
    ///     var bar = new Vault.Ssh.SecretBackendRole("bar", new()
    ///     {
    ///         Backend = example.Path,
    ///         KeyType = "otp",
    ///         DefaultUser = "default",
    ///         AllowedUsers = "default,baz",
    ///         CidrList = "0.0.0.0/0",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SSH secret backend roles can be imported using the `path`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import vault:ssh/secretBackendRole:SecretBackendRole foo ssh/roles/my-role
    /// ```
    /// </summary>
    [VaultResourceType("vault:ssh/secretBackendRole:SecretBackendRole")]
    public partial class SecretBackendRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
        /// </summary>
        [Output("algorithmSigner")]
        public Output<string> AlgorithmSigner { get; private set; } = null!;

        /// <summary>
        /// Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
        /// </summary>
        [Output("allowBareDomains")]
        public Output<bool?> AllowBareDomains { get; private set; } = null!;

        /// <summary>
        /// Specifies if certificates are allowed to be signed for use as a 'host'.
        /// </summary>
        [Output("allowHostCertificates")]
        public Output<bool?> AllowHostCertificates { get; private set; } = null!;

        /// <summary>
        /// Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
        /// </summary>
        [Output("allowSubdomains")]
        public Output<bool?> AllowSubdomains { get; private set; } = null!;

        /// <summary>
        /// Specifies if certificates are allowed to be signed for use as a 'user'.
        /// </summary>
        [Output("allowUserCertificates")]
        public Output<bool?> AllowUserCertificates { get; private set; } = null!;

        /// <summary>
        /// Specifies if users can override the key ID for a signed certificate with the `key_id` field.
        /// </summary>
        [Output("allowUserKeyIds")]
        public Output<bool?> AllowUserKeyIds { get; private set; } = null!;

        /// <summary>
        /// Specifies a comma-separated list of critical options that certificates can have when signed.
        /// </summary>
        [Output("allowedCriticalOptions")]
        public Output<string?> AllowedCriticalOptions { get; private set; } = null!;

        /// <summary>
        /// The list of domains for which a client can request a host certificate.
        /// </summary>
        [Output("allowedDomains")]
        public Output<string?> AllowedDomains { get; private set; } = null!;

        /// <summary>
        /// Specifies if `allowed_domains` can be declared using
        /// identity template policies. Non-templated domains are also permitted.
        /// </summary>
        [Output("allowedDomainsTemplate")]
        public Output<bool> AllowedDomainsTemplate { get; private set; } = null!;

        /// <summary>
        /// Specifies a comma-separated list of extensions that certificates can have when signed.
        /// </summary>
        [Output("allowedExtensions")]
        public Output<string?> AllowedExtensions { get; private set; } = null!;

        /// <summary>
        /// Set of configuration blocks to define allowed  
        /// user key configuration, like key type and their lengths. Can be specified multiple times.
        /// *See Configuration-Options for more info*
        /// </summary>
        [Output("allowedUserKeyConfigs")]
        public Output<ImmutableArray<Outputs.SecretBackendRoleAllowedUserKeyConfig>> AllowedUserKeyConfigs { get; private set; } = null!;

        /// <summary>
        /// Specifies a map of ssh key types and their expected sizes which 
        /// are allowed to be signed by the CA type.
        /// *Deprecated: use* allowed_user_key_config *instead*
        /// </summary>
        [Output("allowedUserKeyLengths")]
        public Output<ImmutableDictionary<string, int>?> AllowedUserKeyLengths { get; private set; } = null!;

        /// <summary>
        /// Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
        /// </summary>
        [Output("allowedUsers")]
        public Output<string?> AllowedUsers { get; private set; } = null!;

        /// <summary>
        /// Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
        /// </summary>
        [Output("allowedUsersTemplate")]
        public Output<bool?> AllowedUsersTemplate { get; private set; } = null!;

        /// <summary>
        /// The path where the SSH secret backend is mounted.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// The comma-separated string of CIDR blocks for which this role is applicable.
        /// </summary>
        [Output("cidrList")]
        public Output<string?> CidrList { get; private set; } = null!;

        /// <summary>
        /// Specifies a map of critical options that certificates have when signed.
        /// </summary>
        [Output("defaultCriticalOptions")]
        public Output<ImmutableDictionary<string, object>?> DefaultCriticalOptions { get; private set; } = null!;

        /// <summary>
        /// Specifies a map of extensions that certificates have when signed.
        /// </summary>
        [Output("defaultExtensions")]
        public Output<ImmutableDictionary<string, object>?> DefaultExtensions { get; private set; } = null!;

        /// <summary>
        /// Specifies the default username for which a credential will be generated.
        /// </summary>
        [Output("defaultUser")]
        public Output<string?> DefaultUser { get; private set; } = null!;

        /// <summary>
        /// If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
        /// </summary>
        [Output("defaultUserTemplate")]
        public Output<bool?> DefaultUserTemplate { get; private set; } = null!;

        /// <summary>
        /// Specifies a custom format for the key id of a signed certificate.
        /// </summary>
        [Output("keyIdFormat")]
        public Output<string?> KeyIdFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum Time To Live value.
        /// </summary>
        [Output("maxTtl")]
        public Output<string> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the role to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
        /// </summary>
        [Output("notBeforeDuration")]
        public Output<string> NotBeforeDuration { get; private set; } = null!;

        /// <summary>
        /// Specifies the Time To Live value.
        /// </summary>
        [Output("ttl")]
        public Output<string> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a SecretBackendRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretBackendRole(string name, SecretBackendRoleArgs args, CustomResourceOptions? options = null)
            : base("vault:ssh/secretBackendRole:SecretBackendRole", name, args ?? new SecretBackendRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretBackendRole(string name, Input<string> id, SecretBackendRoleState? state = null, CustomResourceOptions? options = null)
            : base("vault:ssh/secretBackendRole:SecretBackendRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretBackendRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretBackendRole Get(string name, Input<string> id, SecretBackendRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretBackendRole(name, id, state, options);
        }
    }

    public sealed class SecretBackendRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
        /// </summary>
        [Input("algorithmSigner")]
        public Input<string>? AlgorithmSigner { get; set; }

        /// <summary>
        /// Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
        /// </summary>
        [Input("allowBareDomains")]
        public Input<bool>? AllowBareDomains { get; set; }

        /// <summary>
        /// Specifies if certificates are allowed to be signed for use as a 'host'.
        /// </summary>
        [Input("allowHostCertificates")]
        public Input<bool>? AllowHostCertificates { get; set; }

        /// <summary>
        /// Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
        /// </summary>
        [Input("allowSubdomains")]
        public Input<bool>? AllowSubdomains { get; set; }

        /// <summary>
        /// Specifies if certificates are allowed to be signed for use as a 'user'.
        /// </summary>
        [Input("allowUserCertificates")]
        public Input<bool>? AllowUserCertificates { get; set; }

        /// <summary>
        /// Specifies if users can override the key ID for a signed certificate with the `key_id` field.
        /// </summary>
        [Input("allowUserKeyIds")]
        public Input<bool>? AllowUserKeyIds { get; set; }

        /// <summary>
        /// Specifies a comma-separated list of critical options that certificates can have when signed.
        /// </summary>
        [Input("allowedCriticalOptions")]
        public Input<string>? AllowedCriticalOptions { get; set; }

        /// <summary>
        /// The list of domains for which a client can request a host certificate.
        /// </summary>
        [Input("allowedDomains")]
        public Input<string>? AllowedDomains { get; set; }

        /// <summary>
        /// Specifies if `allowed_domains` can be declared using
        /// identity template policies. Non-templated domains are also permitted.
        /// </summary>
        [Input("allowedDomainsTemplate")]
        public Input<bool>? AllowedDomainsTemplate { get; set; }

        /// <summary>
        /// Specifies a comma-separated list of extensions that certificates can have when signed.
        /// </summary>
        [Input("allowedExtensions")]
        public Input<string>? AllowedExtensions { get; set; }

        [Input("allowedUserKeyConfigs")]
        private InputList<Inputs.SecretBackendRoleAllowedUserKeyConfigArgs>? _allowedUserKeyConfigs;

        /// <summary>
        /// Set of configuration blocks to define allowed  
        /// user key configuration, like key type and their lengths. Can be specified multiple times.
        /// *See Configuration-Options for more info*
        /// </summary>
        public InputList<Inputs.SecretBackendRoleAllowedUserKeyConfigArgs> AllowedUserKeyConfigs
        {
            get => _allowedUserKeyConfigs ?? (_allowedUserKeyConfigs = new InputList<Inputs.SecretBackendRoleAllowedUserKeyConfigArgs>());
            set => _allowedUserKeyConfigs = value;
        }

        [Input("allowedUserKeyLengths")]
        private InputMap<int>? _allowedUserKeyLengths;

        /// <summary>
        /// Specifies a map of ssh key types and their expected sizes which 
        /// are allowed to be signed by the CA type.
        /// *Deprecated: use* allowed_user_key_config *instead*
        /// </summary>
        [Obsolete(@"Set in allowed_user_key_config")]
        public InputMap<int> AllowedUserKeyLengths
        {
            get => _allowedUserKeyLengths ?? (_allowedUserKeyLengths = new InputMap<int>());
            set => _allowedUserKeyLengths = value;
        }

        /// <summary>
        /// Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
        /// </summary>
        [Input("allowedUsers")]
        public Input<string>? AllowedUsers { get; set; }

        /// <summary>
        /// Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
        /// </summary>
        [Input("allowedUsersTemplate")]
        public Input<bool>? AllowedUsersTemplate { get; set; }

        /// <summary>
        /// The path where the SSH secret backend is mounted.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// The comma-separated string of CIDR blocks for which this role is applicable.
        /// </summary>
        [Input("cidrList")]
        public Input<string>? CidrList { get; set; }

        [Input("defaultCriticalOptions")]
        private InputMap<object>? _defaultCriticalOptions;

        /// <summary>
        /// Specifies a map of critical options that certificates have when signed.
        /// </summary>
        public InputMap<object> DefaultCriticalOptions
        {
            get => _defaultCriticalOptions ?? (_defaultCriticalOptions = new InputMap<object>());
            set => _defaultCriticalOptions = value;
        }

        [Input("defaultExtensions")]
        private InputMap<object>? _defaultExtensions;

        /// <summary>
        /// Specifies a map of extensions that certificates have when signed.
        /// </summary>
        public InputMap<object> DefaultExtensions
        {
            get => _defaultExtensions ?? (_defaultExtensions = new InputMap<object>());
            set => _defaultExtensions = value;
        }

        /// <summary>
        /// Specifies the default username for which a credential will be generated.
        /// </summary>
        [Input("defaultUser")]
        public Input<string>? DefaultUser { get; set; }

        /// <summary>
        /// If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
        /// </summary>
        [Input("defaultUserTemplate")]
        public Input<bool>? DefaultUserTemplate { get; set; }

        /// <summary>
        /// Specifies a custom format for the key id of a signed certificate.
        /// </summary>
        [Input("keyIdFormat")]
        public Input<string>? KeyIdFormat { get; set; }

        /// <summary>
        /// Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
        /// </summary>
        [Input("keyType", required: true)]
        public Input<string> KeyType { get; set; } = null!;

        /// <summary>
        /// Specifies the maximum Time To Live value.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// Specifies the name of the role to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
        /// </summary>
        [Input("notBeforeDuration")]
        public Input<string>? NotBeforeDuration { get; set; }

        /// <summary>
        /// Specifies the Time To Live value.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public SecretBackendRoleArgs()
        {
        }
        public static new SecretBackendRoleArgs Empty => new SecretBackendRoleArgs();
    }

    public sealed class SecretBackendRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
        /// </summary>
        [Input("algorithmSigner")]
        public Input<string>? AlgorithmSigner { get; set; }

        /// <summary>
        /// Specifies if host certificates that are requested are allowed to use the base domains listed in `allowed_domains`.
        /// </summary>
        [Input("allowBareDomains")]
        public Input<bool>? AllowBareDomains { get; set; }

        /// <summary>
        /// Specifies if certificates are allowed to be signed for use as a 'host'.
        /// </summary>
        [Input("allowHostCertificates")]
        public Input<bool>? AllowHostCertificates { get; set; }

        /// <summary>
        /// Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowed_domains`.
        /// </summary>
        [Input("allowSubdomains")]
        public Input<bool>? AllowSubdomains { get; set; }

        /// <summary>
        /// Specifies if certificates are allowed to be signed for use as a 'user'.
        /// </summary>
        [Input("allowUserCertificates")]
        public Input<bool>? AllowUserCertificates { get; set; }

        /// <summary>
        /// Specifies if users can override the key ID for a signed certificate with the `key_id` field.
        /// </summary>
        [Input("allowUserKeyIds")]
        public Input<bool>? AllowUserKeyIds { get; set; }

        /// <summary>
        /// Specifies a comma-separated list of critical options that certificates can have when signed.
        /// </summary>
        [Input("allowedCriticalOptions")]
        public Input<string>? AllowedCriticalOptions { get; set; }

        /// <summary>
        /// The list of domains for which a client can request a host certificate.
        /// </summary>
        [Input("allowedDomains")]
        public Input<string>? AllowedDomains { get; set; }

        /// <summary>
        /// Specifies if `allowed_domains` can be declared using
        /// identity template policies. Non-templated domains are also permitted.
        /// </summary>
        [Input("allowedDomainsTemplate")]
        public Input<bool>? AllowedDomainsTemplate { get; set; }

        /// <summary>
        /// Specifies a comma-separated list of extensions that certificates can have when signed.
        /// </summary>
        [Input("allowedExtensions")]
        public Input<string>? AllowedExtensions { get; set; }

        [Input("allowedUserKeyConfigs")]
        private InputList<Inputs.SecretBackendRoleAllowedUserKeyConfigGetArgs>? _allowedUserKeyConfigs;

        /// <summary>
        /// Set of configuration blocks to define allowed  
        /// user key configuration, like key type and their lengths. Can be specified multiple times.
        /// *See Configuration-Options for more info*
        /// </summary>
        public InputList<Inputs.SecretBackendRoleAllowedUserKeyConfigGetArgs> AllowedUserKeyConfigs
        {
            get => _allowedUserKeyConfigs ?? (_allowedUserKeyConfigs = new InputList<Inputs.SecretBackendRoleAllowedUserKeyConfigGetArgs>());
            set => _allowedUserKeyConfigs = value;
        }

        [Input("allowedUserKeyLengths")]
        private InputMap<int>? _allowedUserKeyLengths;

        /// <summary>
        /// Specifies a map of ssh key types and their expected sizes which 
        /// are allowed to be signed by the CA type.
        /// *Deprecated: use* allowed_user_key_config *instead*
        /// </summary>
        [Obsolete(@"Set in allowed_user_key_config")]
        public InputMap<int> AllowedUserKeyLengths
        {
            get => _allowedUserKeyLengths ?? (_allowedUserKeyLengths = new InputMap<int>());
            set => _allowedUserKeyLengths = value;
        }

        /// <summary>
        /// Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
        /// </summary>
        [Input("allowedUsers")]
        public Input<string>? AllowedUsers { get; set; }

        /// <summary>
        /// Specifies if `allowed_users` can be declared using identity template policies. Non-templated users are also permitted.
        /// </summary>
        [Input("allowedUsersTemplate")]
        public Input<bool>? AllowedUsersTemplate { get; set; }

        /// <summary>
        /// The path where the SSH secret backend is mounted.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// The comma-separated string of CIDR blocks for which this role is applicable.
        /// </summary>
        [Input("cidrList")]
        public Input<string>? CidrList { get; set; }

        [Input("defaultCriticalOptions")]
        private InputMap<object>? _defaultCriticalOptions;

        /// <summary>
        /// Specifies a map of critical options that certificates have when signed.
        /// </summary>
        public InputMap<object> DefaultCriticalOptions
        {
            get => _defaultCriticalOptions ?? (_defaultCriticalOptions = new InputMap<object>());
            set => _defaultCriticalOptions = value;
        }

        [Input("defaultExtensions")]
        private InputMap<object>? _defaultExtensions;

        /// <summary>
        /// Specifies a map of extensions that certificates have when signed.
        /// </summary>
        public InputMap<object> DefaultExtensions
        {
            get => _defaultExtensions ?? (_defaultExtensions = new InputMap<object>());
            set => _defaultExtensions = value;
        }

        /// <summary>
        /// Specifies the default username for which a credential will be generated.
        /// </summary>
        [Input("defaultUser")]
        public Input<string>? DefaultUser { get; set; }

        /// <summary>
        /// If set, `default_users` can be specified using identity template values. A non-templated user is also permitted.
        /// </summary>
        [Input("defaultUserTemplate")]
        public Input<bool>? DefaultUserTemplate { get; set; }

        /// <summary>
        /// Specifies a custom format for the key id of a signed certificate.
        /// </summary>
        [Input("keyIdFormat")]
        public Input<string>? KeyIdFormat { get; set; }

        /// <summary>
        /// Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// Specifies the maximum Time To Live value.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// Specifies the name of the role to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
        /// </summary>
        [Input("notBeforeDuration")]
        public Input<string>? NotBeforeDuration { get; set; }

        /// <summary>
        /// Specifies the Time To Live value.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public SecretBackendRoleState()
        {
        }
        public static new SecretBackendRoleState Empty => new SecretBackendRoleState();
    }
}
