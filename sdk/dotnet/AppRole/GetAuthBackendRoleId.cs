// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.AppRole
{
    public static class GetAuthBackendRoleId
    {
        /// <summary>
        /// Reads the Role ID of an AppRole from a Vault server.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var role = Vault.AppRole.GetAuthBackendRoleId.Invoke(new()
        ///     {
        ///         Backend = "my-approle-backend",
        ///         RoleName = "my-role",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["role-id"] = role.Apply(getAuthBackendRoleIdResult =&gt; getAuthBackendRoleIdResult.RoleId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthBackendRoleIdResult> InvokeAsync(GetAuthBackendRoleIdArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthBackendRoleIdResult>("vault:appRole/getAuthBackendRoleId:getAuthBackendRoleId", args ?? new GetAuthBackendRoleIdArgs(), options.WithDefaults());

        /// <summary>
        /// Reads the Role ID of an AppRole from a Vault server.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var role = Vault.AppRole.GetAuthBackendRoleId.Invoke(new()
        ///     {
        ///         Backend = "my-approle-backend",
        ///         RoleName = "my-role",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["role-id"] = role.Apply(getAuthBackendRoleIdResult =&gt; getAuthBackendRoleIdResult.RoleId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuthBackendRoleIdResult> Invoke(GetAuthBackendRoleIdInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthBackendRoleIdResult>("vault:appRole/getAuthBackendRoleId:getAuthBackendRoleId", args ?? new GetAuthBackendRoleIdInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthBackendRoleIdArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique name for the AppRole backend the role to
        /// retrieve a RoleID for resides in. Defaults to "approle".
        /// </summary>
        [Input("backend")]
        public string? Backend { get; set; }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured namespace.
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The name of the role to retrieve the Role ID for.
        /// </summary>
        [Input("roleName", required: true)]
        public string RoleName { get; set; } = null!;

        public GetAuthBackendRoleIdArgs()
        {
        }
        public static new GetAuthBackendRoleIdArgs Empty => new GetAuthBackendRoleIdArgs();
    }

    public sealed class GetAuthBackendRoleIdInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique name for the AppRole backend the role to
        /// retrieve a RoleID for resides in. Defaults to "approle".
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured namespace.
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the role to retrieve the Role ID for.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        public GetAuthBackendRoleIdInvokeArgs()
        {
        }
        public static new GetAuthBackendRoleIdInvokeArgs Empty => new GetAuthBackendRoleIdInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthBackendRoleIdResult
    {
        public readonly string? Backend;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Namespace;
        /// <summary>
        /// The RoleID of the role.
        /// </summary>
        public readonly string RoleId;
        public readonly string RoleName;

        [OutputConstructor]
        private GetAuthBackendRoleIdResult(
            string? backend,

            string id,

            string? @namespace,

            string roleId,

            string roleName)
        {
            Backend = backend;
            Id = id;
            Namespace = @namespace;
            RoleId = roleId;
            RoleName = roleName;
        }
    }
}
