// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.AppRole
{
    /// <summary>
    /// Manages an AppRole auth backend SecretID in a Vault server. See the [Vault
    /// documentation](https://www.vaultproject.io/docs/auth/approle) for more
    /// information.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var approle = new Vault.AuthBackend("approle", new()
    ///     {
    ///         Type = "approle",
    ///     });
    /// 
    ///     var example = new Vault.AppRole.AuthBackendRole("example", new()
    ///     {
    ///         Backend = approle.Path,
    ///         RoleName = "test-role",
    ///         TokenPolicies = new[]
    ///         {
    ///             "default",
    ///             "dev",
    ///             "prod",
    ///         },
    ///     });
    /// 
    ///     var id = new Vault.AppRole.AuthBackendRoleSecretId("id", new()
    ///     {
    ///         Backend = approle.Path,
    ///         RoleName = example.RoleName,
    ///         Metadata = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["hello"] = "world",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [VaultResourceType("vault:appRole/authBackendRoleSecretId:AuthBackendRoleSecretId")]
    public partial class AuthBackendRoleSecretId : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique ID for this SecretID that can be safely logged.
        /// </summary>
        [Output("accessor")]
        public Output<string> Accessor { get; private set; } = null!;

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Output("backend")]
        public Output<string?> Backend { get; private set; } = null!;

        /// <summary>
        /// If set, specifies blocks of IP addresses which can
        /// perform the login operation using this SecretID.
        /// </summary>
        [Output("cidrLists")]
        public Output<ImmutableArray<string>> CidrLists { get; private set; } = null!;

        /// <summary>
        /// A JSON-encoded string containing metadata in
        /// key-value pairs to be set on tokens issued with this SecretID.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The name of the role to create the SecretID for.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;

        /// <summary>
        /// The SecretID to be created. If set, uses "Push"
        /// mode.  Defaults to Vault auto-generating SecretIDs.
        /// </summary>
        [Output("secretId")]
        public Output<string> SecretId { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to use the wrapped secret-id accessor as the resource ID.
        /// If `false` (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
        /// invalidated through unwrapping.
        /// </summary>
        [Output("withWrappedAccessor")]
        public Output<bool?> WithWrappedAccessor { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the response-wrapped SecretID that can
        /// be safely logged.
        /// </summary>
        [Output("wrappingAccessor")]
        public Output<string> WrappingAccessor { get; private set; } = null!;

        /// <summary>
        /// The token used to retrieve a response-wrapped SecretID.
        /// </summary>
        [Output("wrappingToken")]
        public Output<string> WrappingToken { get; private set; } = null!;

        /// <summary>
        /// If set, the SecretID response will be
        /// [response-wrapped](https://www.vaultproject.io/docs/concepts/response-wrapping)
        /// and available for the duration specified. Only a single unwrapping of the
        /// token is allowed.
        /// </summary>
        [Output("wrappingTtl")]
        public Output<string?> WrappingTtl { get; private set; } = null!;


        /// <summary>
        /// Create a AuthBackendRoleSecretId resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthBackendRoleSecretId(string name, AuthBackendRoleSecretIdArgs args, CustomResourceOptions? options = null)
            : base("vault:appRole/authBackendRoleSecretId:AuthBackendRoleSecretId", name, args ?? new AuthBackendRoleSecretIdArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthBackendRoleSecretId(string name, Input<string> id, AuthBackendRoleSecretIdState? state = null, CustomResourceOptions? options = null)
            : base("vault:appRole/authBackendRoleSecretId:AuthBackendRoleSecretId", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "vault:appRole/authBackendRoleSecretID:AuthBackendRoleSecretID" },
                },
                AdditionalSecretOutputs =
                {
                    "secretId",
                    "wrappingToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthBackendRoleSecretId resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthBackendRoleSecretId Get(string name, Input<string> id, AuthBackendRoleSecretIdState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthBackendRoleSecretId(name, id, state, options);
        }
    }

    public sealed class AuthBackendRoleSecretIdArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        [Input("cidrLists")]
        private InputList<string>? _cidrLists;

        /// <summary>
        /// If set, specifies blocks of IP addresses which can
        /// perform the login operation using this SecretID.
        /// </summary>
        public InputList<string> CidrLists
        {
            get => _cidrLists ?? (_cidrLists = new InputList<string>());
            set => _cidrLists = value;
        }

        /// <summary>
        /// A JSON-encoded string containing metadata in
        /// key-value pairs to be set on tokens issued with this SecretID.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the role to create the SecretID for.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        [Input("secretId")]
        private Input<string>? _secretId;

        /// <summary>
        /// The SecretID to be created. If set, uses "Push"
        /// mode.  Defaults to Vault auto-generating SecretIDs.
        /// </summary>
        public Input<string>? SecretId
        {
            get => _secretId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Set to `true` to use the wrapped secret-id accessor as the resource ID.
        /// If `false` (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
        /// invalidated through unwrapping.
        /// </summary>
        [Input("withWrappedAccessor")]
        public Input<bool>? WithWrappedAccessor { get; set; }

        /// <summary>
        /// If set, the SecretID response will be
        /// [response-wrapped](https://www.vaultproject.io/docs/concepts/response-wrapping)
        /// and available for the duration specified. Only a single unwrapping of the
        /// token is allowed.
        /// </summary>
        [Input("wrappingTtl")]
        public Input<string>? WrappingTtl { get; set; }

        public AuthBackendRoleSecretIdArgs()
        {
        }
        public static new AuthBackendRoleSecretIdArgs Empty => new AuthBackendRoleSecretIdArgs();
    }

    public sealed class AuthBackendRoleSecretIdState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique ID for this SecretID that can be safely logged.
        /// </summary>
        [Input("accessor")]
        public Input<string>? Accessor { get; set; }

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        [Input("cidrLists")]
        private InputList<string>? _cidrLists;

        /// <summary>
        /// If set, specifies blocks of IP addresses which can
        /// perform the login operation using this SecretID.
        /// </summary>
        public InputList<string> CidrLists
        {
            get => _cidrLists ?? (_cidrLists = new InputList<string>());
            set => _cidrLists = value;
        }

        /// <summary>
        /// A JSON-encoded string containing metadata in
        /// key-value pairs to be set on tokens issued with this SecretID.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the role to create the SecretID for.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        [Input("secretId")]
        private Input<string>? _secretId;

        /// <summary>
        /// The SecretID to be created. If set, uses "Push"
        /// mode.  Defaults to Vault auto-generating SecretIDs.
        /// </summary>
        public Input<string>? SecretId
        {
            get => _secretId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Set to `true` to use the wrapped secret-id accessor as the resource ID.
        /// If `false` (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or
        /// invalidated through unwrapping.
        /// </summary>
        [Input("withWrappedAccessor")]
        public Input<bool>? WithWrappedAccessor { get; set; }

        /// <summary>
        /// The unique ID for the response-wrapped SecretID that can
        /// be safely logged.
        /// </summary>
        [Input("wrappingAccessor")]
        public Input<string>? WrappingAccessor { get; set; }

        [Input("wrappingToken")]
        private Input<string>? _wrappingToken;

        /// <summary>
        /// The token used to retrieve a response-wrapped SecretID.
        /// </summary>
        public Input<string>? WrappingToken
        {
            get => _wrappingToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _wrappingToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// If set, the SecretID response will be
        /// [response-wrapped](https://www.vaultproject.io/docs/concepts/response-wrapping)
        /// and available for the duration specified. Only a single unwrapping of the
        /// token is allowed.
        /// </summary>
        [Input("wrappingTtl")]
        public Input<string>? WrappingTtl { get; set; }

        public AuthBackendRoleSecretIdState()
        {
        }
        public static new AuthBackendRoleSecretIdState Empty => new AuthBackendRoleSecretIdState();
    }
}
