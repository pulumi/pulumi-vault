// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault
{
    /// <summary>
    /// Provides a resource to manage [PingID MFA](https://www.vaultproject.io/docs/enterprise/mfa/mfa-pingid).
    /// 
    /// **Note** this feature is available only with Vault Enterprise.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var settingsFile = config.RequireObject&lt;dynamic&gt;("settingsFile");
    ///     var userpass = new Vault.AuthBackend("userpass", new()
    ///     {
    ///         Type = "userpass",
    ///         Path = "userpass",
    ///     });
    /// 
    ///     var myPingid = new Vault.MfaPingid("myPingid", new()
    ///     {
    ///         MountAccessor = userpass.Accessor,
    ///         UsernameFormat = "user@example.com",
    ///         SettingsFileBase64 = settingsFile,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Mounts can be imported using the `path`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:index/mfaPingid:MfaPingid my_pingid my_pingid
    /// ```
    /// </summary>
    [VaultResourceType("vault:index/mfaPingid:MfaPingid")]
    public partial class MfaPingid : global::Pulumi.CustomResource
    {
        /// <summary>
        /// `(string)` – Admin URL computed by Vault
        /// </summary>
        [Output("adminUrl")]
        public Output<string> AdminUrl { get; private set; } = null!;

        /// <summary>
        /// `(string)` – Authenticator URL computed by Vault
        /// </summary>
        [Output("authenticatorUrl")]
        public Output<string> AuthenticatorUrl { get; private set; } = null!;

        /// <summary>
        /// `(string)` – IDP URL computed by Vault
        /// </summary>
        [Output("idpUrl")]
        public Output<string> IdpUrl { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - The mount to tie this method to for use in automatic mappings. 
        /// The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
        /// </summary>
        [Output("mountAccessor")]
        public Output<string> MountAccessor { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` – Name of the MFA method.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// `(string)` – Namespace ID computed by Vault
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// `(string)` – Org Alias computed by Vault
        /// </summary>
        [Output("orgAlias")]
        public Output<string> OrgAlias { get; private set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` - A base64-encoded third-party settings file retrieved
        /// from PingID's configuration page.
        /// </summary>
        [Output("settingsFileBase64")]
        public Output<string> SettingsFileBase64 { get; private set; } = null!;

        /// <summary>
        /// `(string)` – Type of configuration computed by Vault
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// `(string)` – If set to true, enables use of PingID signature. Computed by Vault
        /// </summary>
        [Output("useSignature")]
        public Output<bool> UseSignature { get; private set; } = null!;

        /// <summary>
        /// `(string)` - A format string for mapping Identity names to MFA method names. 
        /// Values to substitute should be placed in `{{}}`. For example, `"{{alias.name}}@example.com"`.
        /// If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
        /// - alias.name: The name returned by the mount configured via the `mount_accessor` parameter
        /// - entity.name: The name configured for the Entity
        /// - alias.metadata.`&lt;key&gt;`: The value of the Alias's metadata parameter
        /// - entity.metadata.`&lt;key&gt;`: The value of the Entity's metadata parameter
        /// </summary>
        [Output("usernameFormat")]
        public Output<string?> UsernameFormat { get; private set; } = null!;


        /// <summary>
        /// Create a MfaPingid resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MfaPingid(string name, MfaPingidArgs args, CustomResourceOptions? options = null)
            : base("vault:index/mfaPingid:MfaPingid", name, args ?? new MfaPingidArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MfaPingid(string name, Input<string> id, MfaPingidState? state = null, CustomResourceOptions? options = null)
            : base("vault:index/mfaPingid:MfaPingid", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MfaPingid resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MfaPingid Get(string name, Input<string> id, MfaPingidState? state = null, CustomResourceOptions? options = null)
        {
            return new MfaPingid(name, id, state, options);
        }
    }

    public sealed class MfaPingidArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `(string: &lt;required&gt;)` - The mount to tie this method to for use in automatic mappings. 
        /// The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
        /// </summary>
        [Input("mountAccessor", required: true)]
        public Input<string> MountAccessor { get; set; } = null!;

        /// <summary>
        /// `(string: &lt;required&gt;)` – Name of the MFA method.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A base64-encoded third-party settings file retrieved
        /// from PingID's configuration page.
        /// </summary>
        [Input("settingsFileBase64", required: true)]
        public Input<string> SettingsFileBase64 { get; set; } = null!;

        /// <summary>
        /// `(string)` - A format string for mapping Identity names to MFA method names. 
        /// Values to substitute should be placed in `{{}}`. For example, `"{{alias.name}}@example.com"`.
        /// If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
        /// - alias.name: The name returned by the mount configured via the `mount_accessor` parameter
        /// - entity.name: The name configured for the Entity
        /// - alias.metadata.`&lt;key&gt;`: The value of the Alias's metadata parameter
        /// - entity.metadata.`&lt;key&gt;`: The value of the Entity's metadata parameter
        /// </summary>
        [Input("usernameFormat")]
        public Input<string>? UsernameFormat { get; set; }

        public MfaPingidArgs()
        {
        }
        public static new MfaPingidArgs Empty => new MfaPingidArgs();
    }

    public sealed class MfaPingidState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// `(string)` – Admin URL computed by Vault
        /// </summary>
        [Input("adminUrl")]
        public Input<string>? AdminUrl { get; set; }

        /// <summary>
        /// `(string)` – Authenticator URL computed by Vault
        /// </summary>
        [Input("authenticatorUrl")]
        public Input<string>? AuthenticatorUrl { get; set; }

        /// <summary>
        /// `(string)` – IDP URL computed by Vault
        /// </summary>
        [Input("idpUrl")]
        public Input<string>? IdpUrl { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - The mount to tie this method to for use in automatic mappings. 
        /// The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
        /// </summary>
        [Input("mountAccessor")]
        public Input<string>? MountAccessor { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` – Name of the MFA method.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// `(string)` – Namespace ID computed by Vault
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// `(string)` – Org Alias computed by Vault
        /// </summary>
        [Input("orgAlias")]
        public Input<string>? OrgAlias { get; set; }

        /// <summary>
        /// `(string: &lt;required&gt;)` - A base64-encoded third-party settings file retrieved
        /// from PingID's configuration page.
        /// </summary>
        [Input("settingsFileBase64")]
        public Input<string>? SettingsFileBase64 { get; set; }

        /// <summary>
        /// `(string)` – Type of configuration computed by Vault
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// `(string)` – If set to true, enables use of PingID signature. Computed by Vault
        /// </summary>
        [Input("useSignature")]
        public Input<bool>? UseSignature { get; set; }

        /// <summary>
        /// `(string)` - A format string for mapping Identity names to MFA method names. 
        /// Values to substitute should be placed in `{{}}`. For example, `"{{alias.name}}@example.com"`.
        /// If blank, the Alias's Name field will be used as-is. Currently-supported mappings:
        /// - alias.name: The name returned by the mount configured via the `mount_accessor` parameter
        /// - entity.name: The name configured for the Entity
        /// - alias.metadata.`&lt;key&gt;`: The value of the Alias's metadata parameter
        /// - entity.metadata.`&lt;key&gt;`: The value of the Entity's metadata parameter
        /// </summary>
        [Input("usernameFormat")]
        public Input<string>? UsernameFormat { get; set; }

        public MfaPingidState()
        {
        }
        public static new MfaPingidState Empty => new MfaPingidState();
    }
}
