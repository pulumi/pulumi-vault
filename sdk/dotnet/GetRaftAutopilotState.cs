// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault
{
    public static class GetRaftAutopilotState
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vault.GetRaftAutopilotState.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["failure-tolerance"] = main.Apply(getRaftAutopilotStateResult =&gt; getRaftAutopilotStateResult.FailureTolerance),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRaftAutopilotStateResult> InvokeAsync(GetRaftAutopilotStateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRaftAutopilotStateResult>("vault:index/getRaftAutopilotState:getRaftAutopilotState", args ?? new GetRaftAutopilotStateArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vault.GetRaftAutopilotState.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["failure-tolerance"] = main.Apply(getRaftAutopilotStateResult =&gt; getRaftAutopilotStateResult.FailureTolerance),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRaftAutopilotStateResult> Invoke(GetRaftAutopilotStateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRaftAutopilotStateResult>("vault:index/getRaftAutopilotState:getRaftAutopilotState", args ?? new GetRaftAutopilotStateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRaftAutopilotStateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetRaftAutopilotStateArgs()
        {
        }
        public static new GetRaftAutopilotStateArgs Empty => new GetRaftAutopilotStateArgs();
    }

    public sealed class GetRaftAutopilotStateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetRaftAutopilotStateInvokeArgs()
        {
        }
        public static new GetRaftAutopilotStateInvokeArgs Empty => new GetRaftAutopilotStateInvokeArgs();
    }


    [OutputType]
    public sealed class GetRaftAutopilotStateResult
    {
        /// <summary>
        /// How many nodes could fail before the cluster becomes unhealthy.
        /// </summary>
        public readonly int FailureTolerance;
        /// <summary>
        /// Cluster health status.
        /// </summary>
        public readonly bool Healthy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current leader of Vault.
        /// </summary>
        public readonly string Leader;
        public readonly string? Namespace;
        /// <summary>
        /// The cluster-level optimistic failure tolerance.
        /// </summary>
        public readonly int OptimisticFailureTolerance;
        /// <summary>
        /// Additional output related to redundancy zones stored as a serialized map of strings.
        /// </summary>
        public readonly ImmutableDictionary<string, object> RedundancyZones;
        /// <summary>
        /// Additional output related to redundancy zones.
        /// </summary>
        public readonly string RedundancyZonesJson;
        /// <summary>
        /// Additionaly output related to servers in the cluster stored as a serialized map of strings.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Servers;
        /// <summary>
        /// Additionaly output related to servers in the cluster.
        /// </summary>
        public readonly string ServersJson;
        /// <summary>
        /// Additional output related to upgrade information stored as a serialized map of strings.
        /// </summary>
        public readonly ImmutableDictionary<string, object> UpgradeInfo;
        /// <summary>
        /// Additional output related to upgrade information.
        /// </summary>
        public readonly string UpgradeInfoJson;
        /// <summary>
        /// The voters in the Vault cluster.
        /// </summary>
        public readonly ImmutableArray<string> Voters;

        [OutputConstructor]
        private GetRaftAutopilotStateResult(
            int failureTolerance,

            bool healthy,

            string id,

            string leader,

            string? @namespace,

            int optimisticFailureTolerance,

            ImmutableDictionary<string, object> redundancyZones,

            string redundancyZonesJson,

            ImmutableDictionary<string, object> servers,

            string serversJson,

            ImmutableDictionary<string, object> upgradeInfo,

            string upgradeInfoJson,

            ImmutableArray<string> voters)
        {
            FailureTolerance = failureTolerance;
            Healthy = healthy;
            Id = id;
            Leader = leader;
            Namespace = @namespace;
            OptimisticFailureTolerance = optimisticFailureTolerance;
            RedundancyZones = redundancyZones;
            RedundancyZonesJson = redundancyZonesJson;
            Servers = servers;
            ServersJson = serversJson;
            UpgradeInfo = upgradeInfo;
            UpgradeInfoJson = upgradeInfoJson;
            Voters = voters;
        }
    }
}
