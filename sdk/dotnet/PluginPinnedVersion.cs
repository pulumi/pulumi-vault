// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var jwt = new Vault.Plugin("jwt", new()
    ///     {
    ///         Type = "auth",
    ///         Name = "jwt",
    ///         Command = "vault-plugin-auth-jwt",
    ///         Version = "v0.17.0",
    ///         Sha256 = "6bd0a803ed742aa3ce35e4fa23d2c8d550e6c1567bf63410cec489c28b68b0fc",
    ///         Envs = new[]
    ///         {
    ///             "HTTP_PROXY=http://proxy.example.com:8080",
    ///         },
    ///     });
    /// 
    ///     var jwtPin = new Vault.PluginPinnedVersion("jwt_pin", new()
    ///     {
    ///         Type = jwt.Type,
    ///         Name = jwt.Name,
    ///         Version = jwt.Version,
    ///     });
    /// 
    ///     var jwtAuth = new Vault.AuthBackend("jwt_auth", new()
    ///     {
    ///         Type = jwtPin.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Pinned plugin versions can be imported using `type/name` as the ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:index/pluginPinnedVersion:PluginPinnedVersion jwt_pin auth/jwt
    /// ```
    /// </summary>
    [VaultResourceType("vault:index/pluginPinnedVersion:PluginPinnedVersion")]
    public partial class PluginPinnedVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the plugin.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Type of plugin; one of "auth", "secret", or "database".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Semantic version of the plugin to pin.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a PluginPinnedVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PluginPinnedVersion(string name, PluginPinnedVersionArgs args, CustomResourceOptions? options = null)
            : base("vault:index/pluginPinnedVersion:PluginPinnedVersion", name, args ?? new PluginPinnedVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PluginPinnedVersion(string name, Input<string> id, PluginPinnedVersionState? state = null, CustomResourceOptions? options = null)
            : base("vault:index/pluginPinnedVersion:PluginPinnedVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PluginPinnedVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PluginPinnedVersion Get(string name, Input<string> id, PluginPinnedVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new PluginPinnedVersion(name, id, state, options);
        }
    }

    public sealed class PluginPinnedVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the plugin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of plugin; one of "auth", "secret", or "database".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Semantic version of the plugin to pin.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public PluginPinnedVersionArgs()
        {
        }
        public static new PluginPinnedVersionArgs Empty => new PluginPinnedVersionArgs();
    }

    public sealed class PluginPinnedVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the plugin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of plugin; one of "auth", "secret", or "database".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Semantic version of the plugin to pin.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public PluginPinnedVersionState()
        {
        }
        public static new PluginPinnedVersionState Empty => new PluginPinnedVersionState();
    }
}
