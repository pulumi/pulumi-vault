// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Identity
{
    /// <summary>
    /// Resource for configuring the pingid MFA method.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Vault.Identity.MfaPingid("example", new()
    ///     {
    ///         SettingsFileBase64 = "CnVzZV9iYXNlNjR[...]HBtCg==",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Resource can be imported using its `uuid` field, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import vault:identity/mfaPingid:MfaPingid example 0d89c36a-4ff5-4d70-8749-bb6a5598aeec
    /// ```
    /// </summary>
    [VaultResourceType("vault:identity/mfaPingid:MfaPingid")]
    public partial class MfaPingid : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The admin URL, derived from "settings_file_base64"
        /// </summary>
        [Output("adminUrl")]
        public Output<string> AdminUrl { get; private set; } = null!;

        /// <summary>
        /// A unique identifier of the organization, derived from "settings_file_base64"
        /// </summary>
        [Output("authenticatorUrl")]
        public Output<string> AuthenticatorUrl { get; private set; } = null!;

        /// <summary>
        /// The IDP URL, derived from "settings_file_base64"
        /// </summary>
        [Output("idpUrl")]
        public Output<string> IdpUrl { get; private set; } = null!;

        /// <summary>
        /// Method ID.
        /// </summary>
        [Output("methodId")]
        public Output<string> MethodId { get; private set; } = null!;

        /// <summary>
        /// Mount accessor.
        /// </summary>
        [Output("mountAccessor")]
        public Output<string> MountAccessor { get; private set; } = null!;

        /// <summary>
        /// Method name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Target namespace. (requires Enterprise)
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Method's namespace ID.
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// Method's namespace path.
        /// </summary>
        [Output("namespacePath")]
        public Output<string> NamespacePath { get; private set; } = null!;

        /// <summary>
        /// The name of the PingID client organization, derived from "settings_file_base64"
        /// </summary>
        [Output("orgAlias")]
        public Output<string> OrgAlias { get; private set; } = null!;

        /// <summary>
        /// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
        /// </summary>
        [Output("settingsFileBase64")]
        public Output<string> SettingsFileBase64 { get; private set; } = null!;

        /// <summary>
        /// MFA type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Use signature value, derived from "settings_file_base64"
        /// </summary>
        [Output("useSignature")]
        public Output<bool> UseSignature { get; private set; } = null!;

        /// <summary>
        /// A template string for mapping Identity names to MFA methods.
        /// </summary>
        [Output("usernameFormat")]
        public Output<string?> UsernameFormat { get; private set; } = null!;

        /// <summary>
        /// Resource UUID.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a MfaPingid resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MfaPingid(string name, MfaPingidArgs args, CustomResourceOptions? options = null)
            : base("vault:identity/mfaPingid:MfaPingid", name, args ?? new MfaPingidArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MfaPingid(string name, Input<string> id, MfaPingidState? state = null, CustomResourceOptions? options = null)
            : base("vault:identity/mfaPingid:MfaPingid", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MfaPingid resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MfaPingid Get(string name, Input<string> id, MfaPingidState? state = null, CustomResourceOptions? options = null)
        {
            return new MfaPingid(name, id, state, options);
        }
    }

    public sealed class MfaPingidArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Target namespace. (requires Enterprise)
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
        /// </summary>
        [Input("settingsFileBase64", required: true)]
        public Input<string> SettingsFileBase64 { get; set; } = null!;

        /// <summary>
        /// A template string for mapping Identity names to MFA methods.
        /// </summary>
        [Input("usernameFormat")]
        public Input<string>? UsernameFormat { get; set; }

        public MfaPingidArgs()
        {
        }
        public static new MfaPingidArgs Empty => new MfaPingidArgs();
    }

    public sealed class MfaPingidState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The admin URL, derived from "settings_file_base64"
        /// </summary>
        [Input("adminUrl")]
        public Input<string>? AdminUrl { get; set; }

        /// <summary>
        /// A unique identifier of the organization, derived from "settings_file_base64"
        /// </summary>
        [Input("authenticatorUrl")]
        public Input<string>? AuthenticatorUrl { get; set; }

        /// <summary>
        /// The IDP URL, derived from "settings_file_base64"
        /// </summary>
        [Input("idpUrl")]
        public Input<string>? IdpUrl { get; set; }

        /// <summary>
        /// Method ID.
        /// </summary>
        [Input("methodId")]
        public Input<string>? MethodId { get; set; }

        /// <summary>
        /// Mount accessor.
        /// </summary>
        [Input("mountAccessor")]
        public Input<string>? MountAccessor { get; set; }

        /// <summary>
        /// Method name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Target namespace. (requires Enterprise)
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Method's namespace ID.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// Method's namespace path.
        /// </summary>
        [Input("namespacePath")]
        public Input<string>? NamespacePath { get; set; }

        /// <summary>
        /// The name of the PingID client organization, derived from "settings_file_base64"
        /// </summary>
        [Input("orgAlias")]
        public Input<string>? OrgAlias { get; set; }

        /// <summary>
        /// A base64-encoded third-party settings contents as retrieved from PingID's configuration page.
        /// </summary>
        [Input("settingsFileBase64")]
        public Input<string>? SettingsFileBase64 { get; set; }

        /// <summary>
        /// MFA type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Use signature value, derived from "settings_file_base64"
        /// </summary>
        [Input("useSignature")]
        public Input<bool>? UseSignature { get; set; }

        /// <summary>
        /// A template string for mapping Identity names to MFA methods.
        /// </summary>
        [Input("usernameFormat")]
        public Input<string>? UsernameFormat { get; set; }

        /// <summary>
        /// Resource UUID.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public MfaPingidState()
        {
        }
        public static new MfaPingidState Empty => new MfaPingidState();
    }
}
