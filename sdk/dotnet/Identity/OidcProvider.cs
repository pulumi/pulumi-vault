// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Identity
{
    /// <summary>
    /// Manages OIDC Providers in a Vault server. See the [Vault documentation](https://www.vaultproject.io/api-docs/secret/identity/oidc-provider#create-or-update-an-assignment)
    /// for more information.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testOidcKey = new Vault.Identity.OidcKey("testOidcKey", new()
    ///     {
    ///         AllowedClientIds = new[]
    ///         {
    ///             "*",
    ///         },
    ///         RotationPeriod = 3600,
    ///         VerificationTtl = 3600,
    ///     });
    /// 
    ///     var testOidcAssignment = new Vault.Identity.OidcAssignment("testOidcAssignment", new()
    ///     {
    ///         EntityIds = new[]
    ///         {
    ///             "fake-ascbascas-2231a-sdfaa",
    ///         },
    ///         GroupIds = new[]
    ///         {
    ///             "fake-sajkdsad-32414-sfsada",
    ///         },
    ///     });
    /// 
    ///     var testOidcClient = new Vault.Identity.OidcClient("testOidcClient", new()
    ///     {
    ///         Key = testOidcKey.Name,
    ///         RedirectUris = new[]
    ///         {
    ///             "http://127.0.0.1:9200/v1/auth-methods/oidc:authenticate:callback",
    ///             "http://127.0.0.1:8251/callback",
    ///             "http://127.0.0.1:8080/callback",
    ///         },
    ///         Assignments = new[]
    ///         {
    ///             testOidcAssignment.Name,
    ///         },
    ///         IdTokenTtl = 2400,
    ///         AccessTokenTtl = 7200,
    ///     });
    /// 
    ///     var testOidcScope = new Vault.Identity.OidcScope("testOidcScope", new()
    ///     {
    ///         Template = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["groups"] = "{{identity.entity.groups.names}}",
    ///         }),
    ///         Description = "Groups scope.",
    ///     });
    /// 
    ///     var testOidcProvider = new Vault.Identity.OidcProvider("testOidcProvider", new()
    ///     {
    ///         HttpsEnabled = false,
    ///         IssuerHost = "127.0.0.1:8200",
    ///         AllowedClientIds = new[]
    ///         {
    ///             testOidcClient.ClientId,
    ///         },
    ///         ScopesSupporteds = new[]
    ///         {
    ///             testOidcScope.Name,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OIDC Providers can be imported using the `name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import vault:identity/oidcProvider:OidcProvider test my-provider
    /// ```
    /// </summary>
    [VaultResourceType("vault:identity/oidcProvider:OidcProvider")]
    public partial class OidcProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The client IDs that are permitted to use the provider. 
        /// If empty, no clients are allowed. If `*`, all clients are allowed.
        /// </summary>
        [Output("allowedClientIds")]
        public Output<ImmutableArray<string>> AllowedClientIds { get; private set; } = null!;

        /// <summary>
        /// Set to true if the issuer endpoint uses HTTPS.
        /// </summary>
        [Output("httpsEnabled")]
        public Output<bool?> HttpsEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies what will be used as the `scheme://host:port`
        /// component for the `iss` claim of ID tokens. This value is computed using the
        /// `issuer_host` and `https_enabled` fields.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// The host for the issuer. Can be either host or host:port.
        /// </summary>
        [Output("issuerHost")]
        public Output<string?> IssuerHost { get; private set; } = null!;

        /// <summary>
        /// The name of the provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The scopes available for requesting on the provider.
        /// </summary>
        [Output("scopesSupporteds")]
        public Output<ImmutableArray<string>> ScopesSupporteds { get; private set; } = null!;


        /// <summary>
        /// Create a OidcProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OidcProvider(string name, OidcProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("vault:identity/oidcProvider:OidcProvider", name, args ?? new OidcProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OidcProvider(string name, Input<string> id, OidcProviderState? state = null, CustomResourceOptions? options = null)
            : base("vault:identity/oidcProvider:OidcProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OidcProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OidcProvider Get(string name, Input<string> id, OidcProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new OidcProvider(name, id, state, options);
        }
    }

    public sealed class OidcProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedClientIds")]
        private InputList<string>? _allowedClientIds;

        /// <summary>
        /// The client IDs that are permitted to use the provider. 
        /// If empty, no clients are allowed. If `*`, all clients are allowed.
        /// </summary>
        public InputList<string> AllowedClientIds
        {
            get => _allowedClientIds ?? (_allowedClientIds = new InputList<string>());
            set => _allowedClientIds = value;
        }

        /// <summary>
        /// Set to true if the issuer endpoint uses HTTPS.
        /// </summary>
        [Input("httpsEnabled")]
        public Input<bool>? HttpsEnabled { get; set; }

        /// <summary>
        /// The host for the issuer. Can be either host or host:port.
        /// </summary>
        [Input("issuerHost")]
        public Input<string>? IssuerHost { get; set; }

        /// <summary>
        /// The name of the provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("scopesSupporteds")]
        private InputList<string>? _scopesSupporteds;

        /// <summary>
        /// The scopes available for requesting on the provider.
        /// </summary>
        public InputList<string> ScopesSupporteds
        {
            get => _scopesSupporteds ?? (_scopesSupporteds = new InputList<string>());
            set => _scopesSupporteds = value;
        }

        public OidcProviderArgs()
        {
        }
        public static new OidcProviderArgs Empty => new OidcProviderArgs();
    }

    public sealed class OidcProviderState : global::Pulumi.ResourceArgs
    {
        [Input("allowedClientIds")]
        private InputList<string>? _allowedClientIds;

        /// <summary>
        /// The client IDs that are permitted to use the provider. 
        /// If empty, no clients are allowed. If `*`, all clients are allowed.
        /// </summary>
        public InputList<string> AllowedClientIds
        {
            get => _allowedClientIds ?? (_allowedClientIds = new InputList<string>());
            set => _allowedClientIds = value;
        }

        /// <summary>
        /// Set to true if the issuer endpoint uses HTTPS.
        /// </summary>
        [Input("httpsEnabled")]
        public Input<bool>? HttpsEnabled { get; set; }

        /// <summary>
        /// Specifies what will be used as the `scheme://host:port`
        /// component for the `iss` claim of ID tokens. This value is computed using the
        /// `issuer_host` and `https_enabled` fields.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// The host for the issuer. Can be either host or host:port.
        /// </summary>
        [Input("issuerHost")]
        public Input<string>? IssuerHost { get; set; }

        /// <summary>
        /// The name of the provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("scopesSupporteds")]
        private InputList<string>? _scopesSupporteds;

        /// <summary>
        /// The scopes available for requesting on the provider.
        /// </summary>
        public InputList<string> ScopesSupporteds
        {
            get => _scopesSupporteds ?? (_scopesSupporteds = new InputList<string>());
            set => _scopesSupporteds = value;
        }

        public OidcProviderState()
        {
        }
        public static new OidcProviderState Empty => new OidcProviderState();
    }
}
