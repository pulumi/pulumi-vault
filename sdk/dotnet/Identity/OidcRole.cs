// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Identity
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// You need to create a role with a named key.
    /// At creation time, the key can be created independently of the role. However, the key must
    /// exist before the role can be used to issue tokens. You must also configure the key with the
    /// role's Client ID to allow the role to use the key.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var key = config.Get("key") ?? "key";
    ///     var role = new Vault.Identity.OidcRole("role", new()
    ///     {
    ///         Key = key,
    ///     });
    /// 
    ///     var keyOidcKey = new Vault.Identity.OidcKey("keyOidcKey", new()
    ///     {
    ///         Algorithm = "RS256",
    ///         AllowedClientIds = new[]
    ///         {
    ///             role.ClientId,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// If you want to create the key first before creating the role, you can use a separate
    /// resource to configure the allowed Client ID on
    /// the key.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var key = new Vault.Identity.OidcKey("key", new()
    ///     {
    ///         Algorithm = "RS256",
    ///     });
    /// 
    ///     var roleOidcRole = new Vault.Identity.OidcRole("roleOidcRole", new()
    ///     {
    ///         Key = key.Name,
    ///     });
    /// 
    ///     var roleOidcKeyAllowedClientID = new Vault.Identity.OidcKeyAllowedClientID("roleOidcKeyAllowedClientID", new()
    ///     {
    ///         KeyName = key.Name,
    ///         AllowedClientId = roleOidcRole.ClientId,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// The key can be imported with the role name, for example:
    /// 
    /// ```sh
    /// $ pulumi import vault:identity/oidcRole:OidcRole role role
    /// ```
    /// </summary>
    [VaultResourceType("vault:identity/oidcRole:OidcRole")]
    public partial class OidcRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The value that will be included in the `aud` field of all the OIDC identity
        /// tokens issued by this role
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// A configured named key, the key must already exist
        /// before tokens can be issued.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Name of the OIDC Role to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The template string to use for generating tokens. This may be in
        /// string-ified JSON or base64 format. See the
        /// [documentation](https://www.vaultproject.io/docs/secrets/identity/index.html#token-contents-and-templates)
        /// for the template format.
        /// </summary>
        [Output("template")]
        public Output<string?> Template { get; private set; } = null!;

        /// <summary>
        /// TTL of the tokens generated against the role in number of seconds.
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a OidcRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OidcRole(string name, OidcRoleArgs args, CustomResourceOptions? options = null)
            : base("vault:identity/oidcRole:OidcRole", name, args ?? new OidcRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OidcRole(string name, Input<string> id, OidcRoleState? state = null, CustomResourceOptions? options = null)
            : base("vault:identity/oidcRole:OidcRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OidcRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OidcRole Get(string name, Input<string> id, OidcRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new OidcRole(name, id, state, options);
        }
    }

    public sealed class OidcRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value that will be included in the `aud` field of all the OIDC identity
        /// tokens issued by this role
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// A configured named key, the key must already exist
        /// before tokens can be issued.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Name of the OIDC Role to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The template string to use for generating tokens. This may be in
        /// string-ified JSON or base64 format. See the
        /// [documentation](https://www.vaultproject.io/docs/secrets/identity/index.html#token-contents-and-templates)
        /// for the template format.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// TTL of the tokens generated against the role in number of seconds.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public OidcRoleArgs()
        {
        }
        public static new OidcRoleArgs Empty => new OidcRoleArgs();
    }

    public sealed class OidcRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value that will be included in the `aud` field of all the OIDC identity
        /// tokens issued by this role
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// A configured named key, the key must already exist
        /// before tokens can be issued.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Name of the OIDC Role to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The template string to use for generating tokens. This may be in
        /// string-ified JSON or base64 format. See the
        /// [documentation](https://www.vaultproject.io/docs/secrets/identity/index.html#token-contents-and-templates)
        /// for the template format.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// TTL of the tokens generated against the role in number of seconds.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public OidcRoleState()
        {
        }
        public static new OidcRoleState Empty => new OidcRoleState();
    }
}
