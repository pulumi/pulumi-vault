// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Identity
{
    /// <summary>
    /// Manages policies for an Identity Group for Vault. The [Identity secrets engine](https://www.vaultproject.io/docs/secrets/identity/index.html) is the identity management solution for Vault.
    /// 
    /// ## Example Usage
    /// 
    /// ### Exclusive Policies
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @internal = new Vault.Identity.Group("internal", new()
    ///     {
    ///         Type = "internal",
    ///         ExternalPolicies = true,
    ///         Metadata = 
    ///         {
    ///             { "version", "2" },
    ///         },
    ///     });
    /// 
    ///     var policies = new Vault.Identity.GroupPolicies("policies", new()
    ///     {
    ///         Policies = new[]
    ///         {
    ///             "default",
    ///             "test",
    ///         },
    ///         Exclusive = true,
    ///         GroupId = @internal.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Non-exclusive Policies
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @internal = new Vault.Identity.Group("internal", new()
    ///     {
    ///         Type = "internal",
    ///         ExternalPolicies = true,
    ///         Metadata = 
    ///         {
    ///             { "version", "2" },
    ///         },
    ///     });
    /// 
    ///     var @default = new Vault.Identity.GroupPolicies("default", new()
    ///     {
    ///         Policies = new[]
    ///         {
    ///             "default",
    ///             "test",
    ///         },
    ///         Exclusive = false,
    ///         GroupId = @internal.Id,
    ///     });
    /// 
    ///     var others = new Vault.Identity.GroupPolicies("others", new()
    ///     {
    ///         Policies = new[]
    ///         {
    ///             "others",
    ///         },
    ///         Exclusive = false,
    ///         GroupId = @internal.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [VaultResourceType("vault:identity/groupPolicies:GroupPolicies")]
    public partial class GroupPolicies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defaults to `true`.
        /// 
        /// If `true`, this resource will take exclusive control of the policies assigned to the group and will set it equal to what is specified in the resource.
        /// 
        /// If set to `false`, this resource will simply ensure that the policies specified in the resource are present in the group. When destroying the resource, the resource will ensure that the policies specified in the resource are removed.
        /// </summary>
        [Output("exclusive")]
        public Output<bool?> Exclusive { get; private set; } = null!;

        /// <summary>
        /// Group ID to assign policies to.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the group that are assigned the policies.
        /// </summary>
        [Output("groupName")]
        public Output<string> GroupName { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// List of policies to assign to the group
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;


        /// <summary>
        /// Create a GroupPolicies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupPolicies(string name, GroupPoliciesArgs args, CustomResourceOptions? options = null)
            : base("vault:identity/groupPolicies:GroupPolicies", name, args ?? new GroupPoliciesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupPolicies(string name, Input<string> id, GroupPoliciesState? state = null, CustomResourceOptions? options = null)
            : base("vault:identity/groupPolicies:GroupPolicies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupPolicies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupPolicies Get(string name, Input<string> id, GroupPoliciesState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupPolicies(name, id, state, options);
        }
    }

    public sealed class GroupPoliciesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defaults to `true`.
        /// 
        /// If `true`, this resource will take exclusive control of the policies assigned to the group and will set it equal to what is specified in the resource.
        /// 
        /// If set to `false`, this resource will simply ensure that the policies specified in the resource are present in the group. When destroying the resource, the resource will ensure that the policies specified in the resource are removed.
        /// </summary>
        [Input("exclusive")]
        public Input<bool>? Exclusive { get; set; }

        /// <summary>
        /// Group ID to assign policies to.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("policies", required: true)]
        private InputList<string>? _policies;

        /// <summary>
        /// List of policies to assign to the group
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public GroupPoliciesArgs()
        {
        }
        public static new GroupPoliciesArgs Empty => new GroupPoliciesArgs();
    }

    public sealed class GroupPoliciesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defaults to `true`.
        /// 
        /// If `true`, this resource will take exclusive control of the policies assigned to the group and will set it equal to what is specified in the resource.
        /// 
        /// If set to `false`, this resource will simply ensure that the policies specified in the resource are present in the group. When destroying the resource, the resource will ensure that the policies specified in the resource are removed.
        /// </summary>
        [Input("exclusive")]
        public Input<bool>? Exclusive { get; set; }

        /// <summary>
        /// Group ID to assign policies to.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The name of the group that are assigned the policies.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// List of policies to assign to the group
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public GroupPoliciesState()
        {
        }
        public static new GroupPoliciesState Empty => new GroupPoliciesState();
    }
}
