// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Transform
{
    public partial class Transformation : Pulumi.CustomResource
    {
        /// <summary>
        /// The set of roles allowed to perform this transformation.
        /// </summary>
        [Output("allowedRoles")]
        public Output<ImmutableArray<string>> AllowedRoles { get; private set; } = null!;

        /// <summary>
        /// The character used to replace data when in masking mode
        /// </summary>
        [Output("maskingCharacter")]
        public Output<string?> MaskingCharacter { get; private set; } = null!;

        /// <summary>
        /// The name of the transformation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The name of the template to use.
        /// </summary>
        [Output("template")]
        public Output<string?> Template { get; private set; } = null!;

        /// <summary>
        /// Templates configured for transformation.
        /// </summary>
        [Output("templates")]
        public Output<ImmutableArray<string>> Templates { get; private set; } = null!;

        /// <summary>
        /// The source of where the tweak value comes from. Only valid when in FPE mode.
        /// </summary>
        [Output("tweakSource")]
        public Output<string?> TweakSource { get; private set; } = null!;

        /// <summary>
        /// The type of transformation to perform.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Transformation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Transformation(string name, TransformationArgs args, CustomResourceOptions? options = null)
            : base("vault:transform/transformation:Transformation", name, args ?? new TransformationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Transformation(string name, Input<string> id, TransformationState? state = null, CustomResourceOptions? options = null)
            : base("vault:transform/transformation:Transformation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Transformation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Transformation Get(string name, Input<string> id, TransformationState? state = null, CustomResourceOptions? options = null)
        {
            return new Transformation(name, id, state, options);
        }
    }

    public sealed class TransformationArgs : Pulumi.ResourceArgs
    {
        [Input("allowedRoles")]
        private InputList<string>? _allowedRoles;

        /// <summary>
        /// The set of roles allowed to perform this transformation.
        /// </summary>
        public InputList<string> AllowedRoles
        {
            get => _allowedRoles ?? (_allowedRoles = new InputList<string>());
            set => _allowedRoles = value;
        }

        /// <summary>
        /// The character used to replace data when in masking mode
        /// </summary>
        [Input("maskingCharacter")]
        public Input<string>? MaskingCharacter { get; set; }

        /// <summary>
        /// The name of the transformation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// The name of the template to use.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        [Input("templates")]
        private InputList<string>? _templates;

        /// <summary>
        /// Templates configured for transformation.
        /// </summary>
        public InputList<string> Templates
        {
            get => _templates ?? (_templates = new InputList<string>());
            set => _templates = value;
        }

        /// <summary>
        /// The source of where the tweak value comes from. Only valid when in FPE mode.
        /// </summary>
        [Input("tweakSource")]
        public Input<string>? TweakSource { get; set; }

        /// <summary>
        /// The type of transformation to perform.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TransformationArgs()
        {
        }
    }

    public sealed class TransformationState : Pulumi.ResourceArgs
    {
        [Input("allowedRoles")]
        private InputList<string>? _allowedRoles;

        /// <summary>
        /// The set of roles allowed to perform this transformation.
        /// </summary>
        public InputList<string> AllowedRoles
        {
            get => _allowedRoles ?? (_allowedRoles = new InputList<string>());
            set => _allowedRoles = value;
        }

        /// <summary>
        /// The character used to replace data when in masking mode
        /// </summary>
        [Input("maskingCharacter")]
        public Input<string>? MaskingCharacter { get; set; }

        /// <summary>
        /// The name of the transformation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The name of the template to use.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        [Input("templates")]
        private InputList<string>? _templates;

        /// <summary>
        /// Templates configured for transformation.
        /// </summary>
        public InputList<string> Templates
        {
            get => _templates ?? (_templates = new InputList<string>());
            set => _templates = value;
        }

        /// <summary>
        /// The source of where the tweak value comes from. Only valid when in FPE mode.
        /// </summary>
        [Input("tweakSource")]
        public Input<string>? TweakSource { get; set; }

        /// <summary>
        /// The type of transformation to perform.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TransformationState()
        {
        }
    }
}
