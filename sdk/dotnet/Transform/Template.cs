// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Transform
{
    /// <summary>
    /// This resource supports the `/transform/template/{name}` Vault endpoint.
    /// 
    /// It creates or updates a template with the given name. If a template with the name does not exist,
    /// it will be created. If the template exists, it will be updated with the new attributes.
    /// 
    /// &gt; Requires _Vault Enterprise with the Advanced Data Protection Transform Module_.
    /// See [Transform Secrets Engine](https://www.vaultproject.io/docs/secrets/transform)
    /// for more information.
    /// 
    /// ## Example Usage
    /// 
    /// Please note that the `pattern` below holds a regex. The regex shown
    /// is identical to the one in our [Setup](https://www.vaultproject.io/docs/secrets/transform#setup)
    /// docs, `(\d{4})-(\d{4})-(\d{4})-(\d{4})`. However, due to HCL, the
    /// backslashes must be escaped to appear correctly in Vault. For further
    /// assistance escaping your own custom regex, see String Literals.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var transform = new Vault.Mount("transform", new()
    ///     {
    ///         Path = "transform",
    ///         Type = "transform",
    ///     });
    /// 
    ///     var numerics = new Vault.Transform.Alphabet("numerics", new()
    ///     {
    ///         Path = transform.Path,
    ///         AlphabetSet = "0123456789",
    ///     });
    /// 
    ///     var test = new Vault.Transform.Template("test", new()
    ///     {
    ///         Path = numerics.Path,
    ///         Type = "regex",
    ///         Pattern = "(\\d{4})[- ](\\d{4})[- ](\\d{4})[- ](\\d{4})",
    ///         Alphabet = "numerics",
    ///         EncodeFormat = "$1-$2-$3-$4",
    ///         DecodeFormats = 
    ///         {
    ///             { "last-four-digits", "$4" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [VaultResourceType("vault:transform/template:Template")]
    public partial class Template : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The alphabet to use for this template. This is only used during FPE transformations.
        /// </summary>
        [Output("alphabet")]
        public Output<string?> Alphabet { get; private set; } = null!;

        /// <summary>
        /// Optional mapping of name to regular expression template, used to customize
        /// the decoded output. (requires Vault Enterprise 1.9+)
        /// </summary>
        [Output("decodeFormats")]
        public Output<ImmutableDictionary<string, object>?> DecodeFormats { get; private set; } = null!;

        /// <summary>
        /// The regular expression template used to format encoded values.
        /// (requires Vault Enterprise 1.9+)
        /// </summary>
        [Output("encodeFormat")]
        public Output<string?> EncodeFormat { get; private set; } = null!;

        /// <summary>
        /// The name of the template.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Path to where the back-end is mounted within Vault.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The pattern used for matching. Currently, only regular expression pattern is supported.
        /// </summary>
        [Output("pattern")]
        public Output<string?> Pattern { get; private set; } = null!;

        /// <summary>
        /// The pattern type to use for match detection. Currently, only regex is supported.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Template resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Template(string name, TemplateArgs args, CustomResourceOptions? options = null)
            : base("vault:transform/template:Template", name, args ?? new TemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Template(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
            : base("vault:transform/template:Template", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Template resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Template Get(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new Template(name, id, state, options);
        }
    }

    public sealed class TemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alphabet to use for this template. This is only used during FPE transformations.
        /// </summary>
        [Input("alphabet")]
        public Input<string>? Alphabet { get; set; }

        [Input("decodeFormats")]
        private InputMap<object>? _decodeFormats;

        /// <summary>
        /// Optional mapping of name to regular expression template, used to customize
        /// the decoded output. (requires Vault Enterprise 1.9+)
        /// </summary>
        public InputMap<object> DecodeFormats
        {
            get => _decodeFormats ?? (_decodeFormats = new InputMap<object>());
            set => _decodeFormats = value;
        }

        /// <summary>
        /// The regular expression template used to format encoded values.
        /// (requires Vault Enterprise 1.9+)
        /// </summary>
        [Input("encodeFormat")]
        public Input<string>? EncodeFormat { get; set; }

        /// <summary>
        /// The name of the template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Path to where the back-end is mounted within Vault.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// The pattern used for matching. Currently, only regular expression pattern is supported.
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        /// <summary>
        /// The pattern type to use for match detection. Currently, only regex is supported.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TemplateArgs()
        {
        }
        public static new TemplateArgs Empty => new TemplateArgs();
    }

    public sealed class TemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alphabet to use for this template. This is only used during FPE transformations.
        /// </summary>
        [Input("alphabet")]
        public Input<string>? Alphabet { get; set; }

        [Input("decodeFormats")]
        private InputMap<object>? _decodeFormats;

        /// <summary>
        /// Optional mapping of name to regular expression template, used to customize
        /// the decoded output. (requires Vault Enterprise 1.9+)
        /// </summary>
        public InputMap<object> DecodeFormats
        {
            get => _decodeFormats ?? (_decodeFormats = new InputMap<object>());
            set => _decodeFormats = value;
        }

        /// <summary>
        /// The regular expression template used to format encoded values.
        /// (requires Vault Enterprise 1.9+)
        /// </summary>
        [Input("encodeFormat")]
        public Input<string>? EncodeFormat { get; set; }

        /// <summary>
        /// The name of the template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Path to where the back-end is mounted within Vault.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The pattern used for matching. Currently, only regular expression pattern is supported.
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        /// <summary>
        /// The pattern type to use for match detection. Currently, only regex is supported.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TemplateState()
        {
        }
        public static new TemplateState Empty => new TemplateState();
    }
}
