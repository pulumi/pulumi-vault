// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Secrets
{
    /// <summary>
    /// Configures the secret sync global config.
    /// The config is global and can only be managed in the root namespace.
    /// 
    /// &gt; **Important** The config is global so the vault.secrets.SyncConfig resource must not be defined
    /// multiple times for the same Vault server. If multiple definition exists, the last one applied will be
    /// effective.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var globalConfig = new Vault.Secrets.SyncConfig("globalConfig", new()
    ///     {
    ///         Disabled = true,
    ///         QueueCapacity = 500000,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import vault:secrets/syncConfig:SyncConfig config global_config
    /// ```
    /// </summary>
    [VaultResourceType("vault:secrets/syncConfig:SyncConfig")]
    public partial class SyncConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Disables the syncing process between Vault and external destinations. Defaults to `false`.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// This resource can only be configured in the root namespace.
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
        /// </summary>
        [Output("queueCapacity")]
        public Output<int?> QueueCapacity { get; private set; } = null!;


        /// <summary>
        /// Create a SyncConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyncConfig(string name, SyncConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("vault:secrets/syncConfig:SyncConfig", name, args ?? new SyncConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyncConfig(string name, Input<string> id, SyncConfigState? state = null, CustomResourceOptions? options = null)
            : base("vault:secrets/syncConfig:SyncConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyncConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyncConfig Get(string name, Input<string> id, SyncConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new SyncConfig(name, id, state, options);
        }
    }

    public sealed class SyncConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Disables the syncing process between Vault and external destinations. Defaults to `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// This resource can only be configured in the root namespace.
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
        /// </summary>
        [Input("queueCapacity")]
        public Input<int>? QueueCapacity { get; set; }

        public SyncConfigArgs()
        {
        }
        public static new SyncConfigArgs Empty => new SyncConfigArgs();
    }

    public sealed class SyncConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Disables the syncing process between Vault and external destinations. Defaults to `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// This resource can only be configured in the root namespace.
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Maximum number of pending sync operations allowed on the queue. Defaults to `1000000`.
        /// </summary>
        [Input("queueCapacity")]
        public Input<int>? QueueCapacity { get; set; }

        public SyncConfigState()
        {
        }
        public static new SyncConfigState Empty => new SyncConfigState();
    }
}
