// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Secrets
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var gcp = new Vault.Secrets.SyncGcpDestination("gcp", new()
    ///     {
    ///         ProjectId = "gcp-project-id",
    ///         Credentials = File.ReadAllText(@var.Credentials_file),
    ///         SecretNameTemplate = "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}",
    ///         CustomTags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// GCP Secrets sync destinations can be imported using the `name`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:secrets/syncGcpDestination:SyncGcpDestination gcp gcp-dest
    /// ```
    /// </summary>
    [VaultResourceType("vault:secrets/syncGcpDestination:SyncGcpDestination")]
    public partial class SyncGcpDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// JSON-encoded credentials to use to connect to GCP.
        /// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
        /// variable.
        /// </summary>
        [Output("credentials")]
        public Output<string?> Credentials { get; private set; } = null!;

        /// <summary>
        /// Custom tags to set on the secret managed at the destination.
        /// </summary>
        [Output("customTags")]
        public Output<ImmutableDictionary<string, object>?> CustomTags { get; private set; } = null!;

        /// <summary>
        /// Determines what level of information is synced as a distinct resource
        /// at the destination. Supports `secret-path` and `secret-key`.
        /// </summary>
        [Output("granularity")]
        public Output<string?> Granularity { get; private set; } = null!;

        /// <summary>
        /// Unique name of the GCP destination.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The target project to manage secrets in. If set,
        /// overrides the project ID derived from the service account JSON credentials or application
        /// default credentials. The service account must be [authorized](https://cloud.google.com/iam/docs/service-account-overview#locations)
        /// to perform Secret Manager actions in the target project.
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Template describing how to generate external secret names.
        /// Supports a subset of the Go Template syntax.
        /// </summary>
        [Output("secretNameTemplate")]
        public Output<string> SecretNameTemplate { get; private set; } = null!;

        /// <summary>
        /// The type of the secrets destination (`gcp-sm`).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SyncGcpDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyncGcpDestination(string name, SyncGcpDestinationArgs? args = null, CustomResourceOptions? options = null)
            : base("vault:secrets/syncGcpDestination:SyncGcpDestination", name, args ?? new SyncGcpDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyncGcpDestination(string name, Input<string> id, SyncGcpDestinationState? state = null, CustomResourceOptions? options = null)
            : base("vault:secrets/syncGcpDestination:SyncGcpDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "credentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyncGcpDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyncGcpDestination Get(string name, Input<string> id, SyncGcpDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new SyncGcpDestination(name, id, state, options);
        }
    }

    public sealed class SyncGcpDestinationArgs : global::Pulumi.ResourceArgs
    {
        [Input("credentials")]
        private Input<string>? _credentials;

        /// <summary>
        /// JSON-encoded credentials to use to connect to GCP.
        /// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
        /// variable.
        /// </summary>
        public Input<string>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("customTags")]
        private InputMap<object>? _customTags;

        /// <summary>
        /// Custom tags to set on the secret managed at the destination.
        /// </summary>
        public InputMap<object> CustomTags
        {
            get => _customTags ?? (_customTags = new InputMap<object>());
            set => _customTags = value;
        }

        /// <summary>
        /// Determines what level of information is synced as a distinct resource
        /// at the destination. Supports `secret-path` and `secret-key`.
        /// </summary>
        [Input("granularity")]
        public Input<string>? Granularity { get; set; }

        /// <summary>
        /// Unique name of the GCP destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The target project to manage secrets in. If set,
        /// overrides the project ID derived from the service account JSON credentials or application
        /// default credentials. The service account must be [authorized](https://cloud.google.com/iam/docs/service-account-overview#locations)
        /// to perform Secret Manager actions in the target project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Template describing how to generate external secret names.
        /// Supports a subset of the Go Template syntax.
        /// </summary>
        [Input("secretNameTemplate")]
        public Input<string>? SecretNameTemplate { get; set; }

        public SyncGcpDestinationArgs()
        {
        }
        public static new SyncGcpDestinationArgs Empty => new SyncGcpDestinationArgs();
    }

    public sealed class SyncGcpDestinationState : global::Pulumi.ResourceArgs
    {
        [Input("credentials")]
        private Input<string>? _credentials;

        /// <summary>
        /// JSON-encoded credentials to use to connect to GCP.
        /// Can be omitted and directly provided to Vault using the `GOOGLE_APPLICATION_CREDENTIALS` environment
        /// variable.
        /// </summary>
        public Input<string>? Credentials
        {
            get => _credentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentials = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("customTags")]
        private InputMap<object>? _customTags;

        /// <summary>
        /// Custom tags to set on the secret managed at the destination.
        /// </summary>
        public InputMap<object> CustomTags
        {
            get => _customTags ?? (_customTags = new InputMap<object>());
            set => _customTags = value;
        }

        /// <summary>
        /// Determines what level of information is synced as a distinct resource
        /// at the destination. Supports `secret-path` and `secret-key`.
        /// </summary>
        [Input("granularity")]
        public Input<string>? Granularity { get; set; }

        /// <summary>
        /// Unique name of the GCP destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The target project to manage secrets in. If set,
        /// overrides the project ID derived from the service account JSON credentials or application
        /// default credentials. The service account must be [authorized](https://cloud.google.com/iam/docs/service-account-overview#locations)
        /// to perform Secret Manager actions in the target project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Template describing how to generate external secret names.
        /// Supports a subset of the Go Template syntax.
        /// </summary>
        [Input("secretNameTemplate")]
        public Input<string>? SecretNameTemplate { get; set; }

        /// <summary>
        /// The type of the secrets destination (`gcp-sm`).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SyncGcpDestinationState()
        {
        }
        public static new SyncGcpDestinationState Empty => new SyncGcpDestinationState();
    }
}
