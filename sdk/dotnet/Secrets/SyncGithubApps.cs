// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Secrets
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var github_apps = new Vault.Secrets.SyncGithubApps("github-apps", new()
    ///     {
    ///         AppId = @var.App_id,
    ///         PrivateKey = File.ReadAllText(@var.Privatekey_file),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// GitHub Apps Secrets sync configuration endpoint can be imported using the `name`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:secrets/syncGithubApps:SyncGithubApps gh github-apps
    /// ```
    /// </summary>
    [VaultResourceType("vault:secrets/syncGithubApps:SyncGithubApps")]
    public partial class SyncGithubApps : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The GitHub application ID.
        /// </summary>
        [Output("appId")]
        public Output<int> AppId { get; private set; } = null!;

        /// <summary>
        /// A fingerprint of a private key.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The user-defined name of the GitHub App configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The content of a PEM formatted private key generated on GitHub for the app.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;


        /// <summary>
        /// Create a SyncGithubApps resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyncGithubApps(string name, SyncGithubAppsArgs args, CustomResourceOptions? options = null)
            : base("vault:secrets/syncGithubApps:SyncGithubApps", name, args ?? new SyncGithubAppsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyncGithubApps(string name, Input<string> id, SyncGithubAppsState? state = null, CustomResourceOptions? options = null)
            : base("vault:secrets/syncGithubApps:SyncGithubApps", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyncGithubApps resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyncGithubApps Get(string name, Input<string> id, SyncGithubAppsState? state = null, CustomResourceOptions? options = null)
        {
            return new SyncGithubApps(name, id, state, options);
        }
    }

    public sealed class SyncGithubAppsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The GitHub application ID.
        /// </summary>
        [Input("appId", required: true)]
        public Input<int> AppId { get; set; } = null!;

        /// <summary>
        /// The user-defined name of the GitHub App configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;

        /// <summary>
        /// The content of a PEM formatted private key generated on GitHub for the app.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SyncGithubAppsArgs()
        {
        }
        public static new SyncGithubAppsArgs Empty => new SyncGithubAppsArgs();
    }

    public sealed class SyncGithubAppsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The GitHub application ID.
        /// </summary>
        [Input("appId")]
        public Input<int>? AppId { get; set; }

        /// <summary>
        /// A fingerprint of a private key.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The user-defined name of the GitHub App configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The content of a PEM formatted private key generated on GitHub for the app.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SyncGithubAppsState()
        {
        }
        public static new SyncGithubAppsState Empty => new SyncGithubAppsState();
    }
}
