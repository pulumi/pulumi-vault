// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Secrets
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vercel = new Vault.Secrets.SyncVercelDestination("vercel", new()
    ///     {
    ///         AccessToken = @var.Access_token,
    ///         ProjectId = @var.Project_id,
    ///         DeploymentEnvironments = new[]
    ///         {
    ///             "development",
    ///             "preview",
    ///             "production",
    ///         },
    ///         SecretNameTemplate = "vault_{{ .MountAccessor | lowercase }}_{{ .SecretPath | lowercase }}",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// GitHub Secrets sync destinations can be imported using the `name`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:secrets/syncVercelDestination:SyncVercelDestination vercel vercel-dest
    /// ```
    /// </summary>
    [VaultResourceType("vault:secrets/syncVercelDestination:SyncVercelDestination")]
    public partial class SyncVercelDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Vercel API access token with the permissions to manage environment
        /// variables.
        /// </summary>
        [Output("accessToken")]
        public Output<string> AccessToken { get; private set; } = null!;

        /// <summary>
        /// Deployment environments where the environment variables
        /// are available. Accepts `development`, `preview` and `production`.
        /// </summary>
        [Output("deploymentEnvironments")]
        public Output<ImmutableArray<string>> DeploymentEnvironments { get; private set; } = null!;

        /// <summary>
        /// Unique name of the GitHub destination.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Project ID where to manage environment variables.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Template describing how to generate external secret names.
        /// Supports a subset of the Go Template syntax.
        /// </summary>
        [Output("secretNameTemplate")]
        public Output<string> SecretNameTemplate { get; private set; } = null!;

        /// <summary>
        /// Team ID where to manage environment variables.
        /// </summary>
        [Output("teamId")]
        public Output<string?> TeamId { get; private set; } = null!;

        /// <summary>
        /// The type of the secrets destination (`vercel-project`).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SyncVercelDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyncVercelDestination(string name, SyncVercelDestinationArgs args, CustomResourceOptions? options = null)
            : base("vault:secrets/syncVercelDestination:SyncVercelDestination", name, args ?? new SyncVercelDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyncVercelDestination(string name, Input<string> id, SyncVercelDestinationState? state = null, CustomResourceOptions? options = null)
            : base("vault:secrets/syncVercelDestination:SyncVercelDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accessToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyncVercelDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyncVercelDestination Get(string name, Input<string> id, SyncVercelDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new SyncVercelDestination(name, id, state, options);
        }
    }

    public sealed class SyncVercelDestinationArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessToken", required: true)]
        private Input<string>? _accessToken;

        /// <summary>
        /// Vercel API access token with the permissions to manage environment
        /// variables.
        /// </summary>
        public Input<string>? AccessToken
        {
            get => _accessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("deploymentEnvironments", required: true)]
        private InputList<string>? _deploymentEnvironments;

        /// <summary>
        /// Deployment environments where the environment variables
        /// are available. Accepts `development`, `preview` and `production`.
        /// </summary>
        public InputList<string> DeploymentEnvironments
        {
            get => _deploymentEnvironments ?? (_deploymentEnvironments = new InputList<string>());
            set => _deploymentEnvironments = value;
        }

        /// <summary>
        /// Unique name of the GitHub destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Project ID where to manage environment variables.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Template describing how to generate external secret names.
        /// Supports a subset of the Go Template syntax.
        /// </summary>
        [Input("secretNameTemplate")]
        public Input<string>? SecretNameTemplate { get; set; }

        /// <summary>
        /// Team ID where to manage environment variables.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public SyncVercelDestinationArgs()
        {
        }
        public static new SyncVercelDestinationArgs Empty => new SyncVercelDestinationArgs();
    }

    public sealed class SyncVercelDestinationState : global::Pulumi.ResourceArgs
    {
        [Input("accessToken")]
        private Input<string>? _accessToken;

        /// <summary>
        /// Vercel API access token with the permissions to manage environment
        /// variables.
        /// </summary>
        public Input<string>? AccessToken
        {
            get => _accessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("deploymentEnvironments")]
        private InputList<string>? _deploymentEnvironments;

        /// <summary>
        /// Deployment environments where the environment variables
        /// are available. Accepts `development`, `preview` and `production`.
        /// </summary>
        public InputList<string> DeploymentEnvironments
        {
            get => _deploymentEnvironments ?? (_deploymentEnvironments = new InputList<string>());
            set => _deploymentEnvironments = value;
        }

        /// <summary>
        /// Unique name of the GitHub destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Project ID where to manage environment variables.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Template describing how to generate external secret names.
        /// Supports a subset of the Go Template syntax.
        /// </summary>
        [Input("secretNameTemplate")]
        public Input<string>? SecretNameTemplate { get; set; }

        /// <summary>
        /// Team ID where to manage environment variables.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// The type of the secrets destination (`vercel-project`).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SyncVercelDestinationState()
        {
        }
        public static new SyncVercelDestinationState Empty => new SyncVercelDestinationState();
    }
}
