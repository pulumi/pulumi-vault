// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Vault.AuthBackend("example", new Vault.AuthBackendArgs
    ///         {
    ///             Tune = new Vault.Inputs.AuthBackendTuneArgs
    ///             {
    ///                 ListingVisibility = "unauth",
    ///                 MaxLeaseTtl = "90000s",
    ///             },
    ///             Type = "github",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class AuthBackend : Pulumi.CustomResource
    {
        /// <summary>
        /// The accessor for this auth method
        /// </summary>
        [Output("accessor")]
        public Output<string> Accessor { get; private set; } = null!;

        /// <summary>
        /// (Optional; Deprecated, use `tune.default_lease_ttl` if you are using Vault provider version &gt;= 1.8) The default lease duration in seconds.
        /// </summary>
        [Output("defaultLeaseTtlSeconds")]
        public Output<int> DefaultLeaseTtlSeconds { get; private set; } = null!;

        /// <summary>
        /// A description of the auth method
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to show this mount in
        /// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
        /// </summary>
        [Output("listingVisibility")]
        public Output<string> ListingVisibility { get; private set; } = null!;

        /// <summary>
        /// Specifies if the auth method is local only.
        /// </summary>
        [Output("local")]
        public Output<bool?> Local { get; private set; } = null!;

        /// <summary>
        /// (Optional; Deprecated, use `tune.max_lease_ttl` if you are using Vault provider version &gt;= 1.8) The maximum lease duration in seconds.
        /// </summary>
        [Output("maxLeaseTtlSeconds")]
        public Output<int> MaxLeaseTtlSeconds { get; private set; } = null!;

        /// <summary>
        /// The path to mount the auth method — this defaults to the name of the type
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Extra configuration block. Structure is documented below.
        /// </summary>
        [Output("tune")]
        public Output<Outputs.AuthBackendTune> Tune { get; private set; } = null!;

        /// <summary>
        /// The name of the auth method type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AuthBackend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthBackend(string name, AuthBackendArgs args, CustomResourceOptions? options = null)
            : base("vault:index/authBackend:AuthBackend", name, args ?? new AuthBackendArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthBackend(string name, Input<string> id, AuthBackendState? state = null, CustomResourceOptions? options = null)
            : base("vault:index/authBackend:AuthBackend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthBackend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthBackend Get(string name, Input<string> id, AuthBackendState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthBackend(name, id, state, options);
        }
    }

    public sealed class AuthBackendArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional; Deprecated, use `tune.default_lease_ttl` if you are using Vault provider version &gt;= 1.8) The default lease duration in seconds.
        /// </summary>
        [Input("defaultLeaseTtlSeconds")]
        public Input<int>? DefaultLeaseTtlSeconds { get; set; }

        /// <summary>
        /// A description of the auth method
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether to show this mount in
        /// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
        /// </summary>
        [Input("listingVisibility")]
        public Input<string>? ListingVisibility { get; set; }

        /// <summary>
        /// Specifies if the auth method is local only.
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// (Optional; Deprecated, use `tune.max_lease_ttl` if you are using Vault provider version &gt;= 1.8) The maximum lease duration in seconds.
        /// </summary>
        [Input("maxLeaseTtlSeconds")]
        public Input<int>? MaxLeaseTtlSeconds { get; set; }

        /// <summary>
        /// The path to mount the auth method — this defaults to the name of the type
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Extra configuration block. Structure is documented below.
        /// </summary>
        [Input("tune")]
        public Input<Inputs.AuthBackendTuneArgs>? Tune { get; set; }

        /// <summary>
        /// The name of the auth method type
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AuthBackendArgs()
        {
        }
    }

    public sealed class AuthBackendState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The accessor for this auth method
        /// </summary>
        [Input("accessor")]
        public Input<string>? Accessor { get; set; }

        /// <summary>
        /// (Optional; Deprecated, use `tune.default_lease_ttl` if you are using Vault provider version &gt;= 1.8) The default lease duration in seconds.
        /// </summary>
        [Input("defaultLeaseTtlSeconds")]
        public Input<int>? DefaultLeaseTtlSeconds { get; set; }

        /// <summary>
        /// A description of the auth method
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether to show this mount in
        /// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
        /// </summary>
        [Input("listingVisibility")]
        public Input<string>? ListingVisibility { get; set; }

        /// <summary>
        /// Specifies if the auth method is local only.
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// (Optional; Deprecated, use `tune.max_lease_ttl` if you are using Vault provider version &gt;= 1.8) The maximum lease duration in seconds.
        /// </summary>
        [Input("maxLeaseTtlSeconds")]
        public Input<int>? MaxLeaseTtlSeconds { get; set; }

        /// <summary>
        /// The path to mount the auth method — this defaults to the name of the type
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Extra configuration block. Structure is documented below.
        /// </summary>
        [Input("tune")]
        public Input<Inputs.AuthBackendTuneGetArgs>? Tune { get; set; }

        /// <summary>
        /// The name of the auth method type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AuthBackendState()
        {
        }
    }
}
