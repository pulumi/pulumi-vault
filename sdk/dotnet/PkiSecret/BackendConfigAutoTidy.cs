// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    /// <summary>
    /// Allows setting the Auto Tidy configuration on a PKI Secret Backend
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pki = new Vault.Mount("pki", new()
    ///     {
    ///         Path = "pki",
    ///         Type = "pki",
    ///         DefaultLeaseTtlSeconds = 3600,
    ///         MaxLeaseTtlSeconds = 86400,
    ///     });
    /// 
    ///     var test = new Vault.PkiSecret.BackendConfigAutoTidy("test", new()
    ///     {
    ///         Backend = pki.Path,
    ///         Enabled = true,
    ///         TidyCertStore = true,
    ///         IntervalDuration = "1h",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [VaultResourceType("vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy")]
    public partial class BackendConfigAutoTidy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of
        /// time after being marked revoked or deactivated.
        /// </summary>
        [Output("acmeAccountSafetyBuffer")]
        public Output<string> AcmeAccountSafetyBuffer { get; private set; } = null!;

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Specifies whether automatic tidy is enabled or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Interval at which to run an auto-tidy operation. This is the time
        /// between tidy invocations (after one finishes to the start of the next).
        /// </summary>
        [Output("intervalDuration")]
        public Output<string> IntervalDuration { get; private set; } = null!;

        /// <summary>
        /// The amount of extra time that must have passed beyond issuer's
        /// expiration before it is removed from the backend storage.
        /// </summary>
        [Output("issuerSafetyBuffer")]
        public Output<string> IssuerSafetyBuffer { get; private set; } = null!;

        /// <summary>
        /// This configures whether stored certificate are
        /// counted upon initialization of the backend, and whether during normal operation, a running count
        /// of certificates stored is maintained.
        /// </summary>
        [Output("maintainStoredCertificateCounts")]
        public Output<bool?> MaintainStoredCertificateCounts { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of time auto-tidy will be delayed
        /// after startup.
        /// </summary>
        [Output("maxStartupBackoffDuration")]
        public Output<string> MaxStartupBackoffDuration { get; private set; } = null!;

        /// <summary>
        /// The minimum amount of time auto-tidy will be delayed
        /// after startup.
        /// </summary>
        [Output("minStartupBackoffDuration")]
        public Output<string> MinStartupBackoffDuration { get; private set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// The amount of time to wait between processing certificates.
        /// </summary>
        [Output("pauseDuration")]
        public Output<string> PauseDuration { get; private set; } = null!;

        /// <summary>
        /// This configures whether the stored
        /// certificate count is published to the metrics consumer.
        /// </summary>
        [Output("publishStoredCertificateCountMetrics")]
        public Output<bool?> PublishStoredCertificateCountMetrics { get; private set; } = null!;

        /// <summary>
        /// The amount of time that must pass from the
        /// cross-cluster revocation request being initiated to when it will be slated for removal.
        /// </summary>
        [Output("revocationQueueSafetyBuffer")]
        public Output<string> RevocationQueueSafetyBuffer { get; private set; } = null!;

        /// <summary>
        /// The amount of extra time that must have passed beyond certificate
        /// expiration before it is removed from the backend storage and/or revocation list.
        /// </summary>
        [Output("safetyBuffer")]
        public Output<string> SafetyBuffer { get; private set; } = null!;

        /// <summary>
        /// Set to true to enable tidying ACME accounts, orders and authorizations.
        /// </summary>
        [Output("tidyAcme")]
        public Output<bool?> TidyAcme { get; private set; } = null!;

        /// <summary>
        /// Set to true to enable tidying up certificate metadata.
        /// </summary>
        [Output("tidyCertMetadata")]
        public Output<bool?> TidyCertMetadata { get; private set; } = null!;

        /// <summary>
        /// Set to true to enable tidying up the certificate store
        /// </summary>
        [Output("tidyCertStore")]
        public Output<bool?> TidyCertStore { get; private set; } = null!;

        /// <summary>
        /// Set to true to enable tidying up the CMPv2 nonce store.
        /// </summary>
        [Output("tidyCmpv2NonceStore")]
        public Output<bool?> TidyCmpv2NonceStore { get; private set; } = null!;

        /// <summary>
        /// Set to true to enable tidying up the cross-cluster
        /// revoked certificate store.
        /// </summary>
        [Output("tidyCrossClusterRevokedCerts")]
        public Output<bool?> TidyCrossClusterRevokedCerts { get; private set; } = null!;

        /// <summary>
        /// Set to true to automatically remove expired issuers past the
        /// `issuer_safety_buffer`. No keys will be removed as part of this operation.
        /// </summary>
        [Output("tidyExpiredIssuers")]
        public Output<bool?> TidyExpiredIssuers { get; private set; } = null!;

        /// <summary>
        /// Set to true to move the legacy `ca_bundle` from
        /// `/config/ca_bundle` to `/config/ca_bundle.bak`.
        /// </summary>
        [Output("tidyMoveLegacyCaBundle")]
        public Output<bool?> TidyMoveLegacyCaBundle { get; private set; } = null!;

        /// <summary>
        /// Set to true to remove stale revocation queue entries that
        /// haven't been confirmed by any active cluster.
        /// </summary>
        [Output("tidyRevocationQueue")]
        public Output<bool?> TidyRevocationQueue { get; private set; } = null!;

        /// <summary>
        /// Set to true to validate issuer associations
        /// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
        /// </summary>
        [Output("tidyRevokedCertIssuerAssociations")]
        public Output<bool?> TidyRevokedCertIssuerAssociations { get; private set; } = null!;

        /// <summary>
        /// Set to true to remove all invalid and expired certificates from
        /// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
        /// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
        /// the CRL, and the CRL will be rotated.
        /// </summary>
        [Output("tidyRevokedCerts")]
        public Output<bool?> TidyRevokedCerts { get; private set; } = null!;


        /// <summary>
        /// Create a BackendConfigAutoTidy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendConfigAutoTidy(string name, BackendConfigAutoTidyArgs args, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy", name, args ?? new BackendConfigAutoTidyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendConfigAutoTidy(string name, Input<string> id, BackendConfigAutoTidyState? state = null, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigAutoTidy:BackendConfigAutoTidy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendConfigAutoTidy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendConfigAutoTidy Get(string name, Input<string> id, BackendConfigAutoTidyState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendConfigAutoTidy(name, id, state, options);
        }
    }

    public sealed class BackendConfigAutoTidyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of
        /// time after being marked revoked or deactivated.
        /// </summary>
        [Input("acmeAccountSafetyBuffer")]
        public Input<string>? AcmeAccountSafetyBuffer { get; set; }

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Specifies whether automatic tidy is enabled or not.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Interval at which to run an auto-tidy operation. This is the time
        /// between tidy invocations (after one finishes to the start of the next).
        /// </summary>
        [Input("intervalDuration")]
        public Input<string>? IntervalDuration { get; set; }

        /// <summary>
        /// The amount of extra time that must have passed beyond issuer's
        /// expiration before it is removed from the backend storage.
        /// </summary>
        [Input("issuerSafetyBuffer")]
        public Input<string>? IssuerSafetyBuffer { get; set; }

        /// <summary>
        /// This configures whether stored certificate are
        /// counted upon initialization of the backend, and whether during normal operation, a running count
        /// of certificates stored is maintained.
        /// </summary>
        [Input("maintainStoredCertificateCounts")]
        public Input<bool>? MaintainStoredCertificateCounts { get; set; }

        /// <summary>
        /// The maximum amount of time auto-tidy will be delayed
        /// after startup.
        /// </summary>
        [Input("maxStartupBackoffDuration")]
        public Input<string>? MaxStartupBackoffDuration { get; set; }

        /// <summary>
        /// The minimum amount of time auto-tidy will be delayed
        /// after startup.
        /// </summary>
        [Input("minStartupBackoffDuration")]
        public Input<string>? MinStartupBackoffDuration { get; set; }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The amount of time to wait between processing certificates.
        /// </summary>
        [Input("pauseDuration")]
        public Input<string>? PauseDuration { get; set; }

        /// <summary>
        /// This configures whether the stored
        /// certificate count is published to the metrics consumer.
        /// </summary>
        [Input("publishStoredCertificateCountMetrics")]
        public Input<bool>? PublishStoredCertificateCountMetrics { get; set; }

        /// <summary>
        /// The amount of time that must pass from the
        /// cross-cluster revocation request being initiated to when it will be slated for removal.
        /// </summary>
        [Input("revocationQueueSafetyBuffer")]
        public Input<string>? RevocationQueueSafetyBuffer { get; set; }

        /// <summary>
        /// The amount of extra time that must have passed beyond certificate
        /// expiration before it is removed from the backend storage and/or revocation list.
        /// </summary>
        [Input("safetyBuffer")]
        public Input<string>? SafetyBuffer { get; set; }

        /// <summary>
        /// Set to true to enable tidying ACME accounts, orders and authorizations.
        /// </summary>
        [Input("tidyAcme")]
        public Input<bool>? TidyAcme { get; set; }

        /// <summary>
        /// Set to true to enable tidying up certificate metadata.
        /// </summary>
        [Input("tidyCertMetadata")]
        public Input<bool>? TidyCertMetadata { get; set; }

        /// <summary>
        /// Set to true to enable tidying up the certificate store
        /// </summary>
        [Input("tidyCertStore")]
        public Input<bool>? TidyCertStore { get; set; }

        /// <summary>
        /// Set to true to enable tidying up the CMPv2 nonce store.
        /// </summary>
        [Input("tidyCmpv2NonceStore")]
        public Input<bool>? TidyCmpv2NonceStore { get; set; }

        /// <summary>
        /// Set to true to enable tidying up the cross-cluster
        /// revoked certificate store.
        /// </summary>
        [Input("tidyCrossClusterRevokedCerts")]
        public Input<bool>? TidyCrossClusterRevokedCerts { get; set; }

        /// <summary>
        /// Set to true to automatically remove expired issuers past the
        /// `issuer_safety_buffer`. No keys will be removed as part of this operation.
        /// </summary>
        [Input("tidyExpiredIssuers")]
        public Input<bool>? TidyExpiredIssuers { get; set; }

        /// <summary>
        /// Set to true to move the legacy `ca_bundle` from
        /// `/config/ca_bundle` to `/config/ca_bundle.bak`.
        /// </summary>
        [Input("tidyMoveLegacyCaBundle")]
        public Input<bool>? TidyMoveLegacyCaBundle { get; set; }

        /// <summary>
        /// Set to true to remove stale revocation queue entries that
        /// haven't been confirmed by any active cluster.
        /// </summary>
        [Input("tidyRevocationQueue")]
        public Input<bool>? TidyRevocationQueue { get; set; }

        /// <summary>
        /// Set to true to validate issuer associations
        /// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
        /// </summary>
        [Input("tidyRevokedCertIssuerAssociations")]
        public Input<bool>? TidyRevokedCertIssuerAssociations { get; set; }

        /// <summary>
        /// Set to true to remove all invalid and expired certificates from
        /// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
        /// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
        /// the CRL, and the CRL will be rotated.
        /// </summary>
        [Input("tidyRevokedCerts")]
        public Input<bool>? TidyRevokedCerts { get; set; }

        public BackendConfigAutoTidyArgs()
        {
        }
        public static new BackendConfigAutoTidyArgs Empty => new BackendConfigAutoTidyArgs();
    }

    public sealed class BackendConfigAutoTidyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of time that must pass after creation that an account with no orders is marked revoked, and the amount of
        /// time after being marked revoked or deactivated.
        /// </summary>
        [Input("acmeAccountSafetyBuffer")]
        public Input<string>? AcmeAccountSafetyBuffer { get; set; }

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Specifies whether automatic tidy is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Interval at which to run an auto-tidy operation. This is the time
        /// between tidy invocations (after one finishes to the start of the next).
        /// </summary>
        [Input("intervalDuration")]
        public Input<string>? IntervalDuration { get; set; }

        /// <summary>
        /// The amount of extra time that must have passed beyond issuer's
        /// expiration before it is removed from the backend storage.
        /// </summary>
        [Input("issuerSafetyBuffer")]
        public Input<string>? IssuerSafetyBuffer { get; set; }

        /// <summary>
        /// This configures whether stored certificate are
        /// counted upon initialization of the backend, and whether during normal operation, a running count
        /// of certificates stored is maintained.
        /// </summary>
        [Input("maintainStoredCertificateCounts")]
        public Input<bool>? MaintainStoredCertificateCounts { get; set; }

        /// <summary>
        /// The maximum amount of time auto-tidy will be delayed
        /// after startup.
        /// </summary>
        [Input("maxStartupBackoffDuration")]
        public Input<string>? MaxStartupBackoffDuration { get; set; }

        /// <summary>
        /// The minimum amount of time auto-tidy will be delayed
        /// after startup.
        /// </summary>
        [Input("minStartupBackoffDuration")]
        public Input<string>? MinStartupBackoffDuration { get; set; }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The amount of time to wait between processing certificates.
        /// </summary>
        [Input("pauseDuration")]
        public Input<string>? PauseDuration { get; set; }

        /// <summary>
        /// This configures whether the stored
        /// certificate count is published to the metrics consumer.
        /// </summary>
        [Input("publishStoredCertificateCountMetrics")]
        public Input<bool>? PublishStoredCertificateCountMetrics { get; set; }

        /// <summary>
        /// The amount of time that must pass from the
        /// cross-cluster revocation request being initiated to when it will be slated for removal.
        /// </summary>
        [Input("revocationQueueSafetyBuffer")]
        public Input<string>? RevocationQueueSafetyBuffer { get; set; }

        /// <summary>
        /// The amount of extra time that must have passed beyond certificate
        /// expiration before it is removed from the backend storage and/or revocation list.
        /// </summary>
        [Input("safetyBuffer")]
        public Input<string>? SafetyBuffer { get; set; }

        /// <summary>
        /// Set to true to enable tidying ACME accounts, orders and authorizations.
        /// </summary>
        [Input("tidyAcme")]
        public Input<bool>? TidyAcme { get; set; }

        /// <summary>
        /// Set to true to enable tidying up certificate metadata.
        /// </summary>
        [Input("tidyCertMetadata")]
        public Input<bool>? TidyCertMetadata { get; set; }

        /// <summary>
        /// Set to true to enable tidying up the certificate store
        /// </summary>
        [Input("tidyCertStore")]
        public Input<bool>? TidyCertStore { get; set; }

        /// <summary>
        /// Set to true to enable tidying up the CMPv2 nonce store.
        /// </summary>
        [Input("tidyCmpv2NonceStore")]
        public Input<bool>? TidyCmpv2NonceStore { get; set; }

        /// <summary>
        /// Set to true to enable tidying up the cross-cluster
        /// revoked certificate store.
        /// </summary>
        [Input("tidyCrossClusterRevokedCerts")]
        public Input<bool>? TidyCrossClusterRevokedCerts { get; set; }

        /// <summary>
        /// Set to true to automatically remove expired issuers past the
        /// `issuer_safety_buffer`. No keys will be removed as part of this operation.
        /// </summary>
        [Input("tidyExpiredIssuers")]
        public Input<bool>? TidyExpiredIssuers { get; set; }

        /// <summary>
        /// Set to true to move the legacy `ca_bundle` from
        /// `/config/ca_bundle` to `/config/ca_bundle.bak`.
        /// </summary>
        [Input("tidyMoveLegacyCaBundle")]
        public Input<bool>? TidyMoveLegacyCaBundle { get; set; }

        /// <summary>
        /// Set to true to remove stale revocation queue entries that
        /// haven't been confirmed by any active cluster.
        /// </summary>
        [Input("tidyRevocationQueue")]
        public Input<bool>? TidyRevocationQueue { get; set; }

        /// <summary>
        /// Set to true to validate issuer associations
        /// on revocation entries. This helps increase the performance of CRL building and OCSP responses.
        /// </summary>
        [Input("tidyRevokedCertIssuerAssociations")]
        public Input<bool>? TidyRevokedCertIssuerAssociations { get; set; }

        /// <summary>
        /// Set to true to remove all invalid and expired certificates from
        /// storage. A revoked storage entry is considered invalid if the entry is empty, or the value within
        /// the entry is empty. If a certificate is removed due to expiry, the entry will also be removed from
        /// the CRL, and the CRL will be rotated.
        /// </summary>
        [Input("tidyRevokedCerts")]
        public Input<bool>? TidyRevokedCerts { get; set; }

        public BackendConfigAutoTidyState()
        {
        }
        public static new BackendConfigAutoTidyState Empty => new BackendConfigAutoTidyState();
    }
}
