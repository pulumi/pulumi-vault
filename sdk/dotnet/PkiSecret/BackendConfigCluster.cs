// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    /// <summary>
    /// Allows setting the cluster-local's API mount path and AIA distribution point on a particular performance replication cluster.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var root = new Vault.Mount("root", new()
    ///     {
    ///         Path = "pki-root",
    ///         Type = "pki",
    ///         Description = "root PKI",
    ///         DefaultLeaseTtlSeconds = 8640000,
    ///         MaxLeaseTtlSeconds = 8640000,
    ///     });
    /// 
    ///     var example = new Vault.PkiSecret.BackendConfigCluster("example", new()
    ///     {
    ///         Backend = root.Path,
    ///         Path = "http://127.0.0.1:8200/v1/pki-root",
    ///         AiaPath = "http://127.0.0.1:8200/v1/pki-root",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// The PKI config cluster can be imported using the resource's `id`.
    /// In the case of the example above the `id` would be `pki-root/config/cluster`,
    /// where the `pki-root` component is the resource's `backend`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:pkiSecret/backendConfigCluster:BackendConfigCluster example pki-root/config/cluster
    /// ```
    /// </summary>
    [VaultResourceType("vault:pkiSecret/backendConfigCluster:BackendConfigCluster")]
    public partial class BackendConfigCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the path to this performance replication cluster's AIA distribution point.
        /// </summary>
        [Output("aiaPath")]
        public Output<string?> AiaPath { get; private set; } = null!;

        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the path to this performance replication cluster's API mount path.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;


        /// <summary>
        /// Create a BackendConfigCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendConfigCluster(string name, BackendConfigClusterArgs args, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigCluster:BackendConfigCluster", name, args ?? new BackendConfigClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendConfigCluster(string name, Input<string> id, BackendConfigClusterState? state = null, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigCluster:BackendConfigCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendConfigCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendConfigCluster Get(string name, Input<string> id, BackendConfigClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendConfigCluster(name, id, state, options);
        }
    }

    public sealed class BackendConfigClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the path to this performance replication cluster's AIA distribution point.
        /// </summary>
        [Input("aiaPath")]
        public Input<string>? AiaPath { get; set; }

        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the path to this performance replication cluster's API mount path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        public BackendConfigClusterArgs()
        {
        }
        public static new BackendConfigClusterArgs Empty => new BackendConfigClusterArgs();
    }

    public sealed class BackendConfigClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the path to this performance replication cluster's AIA distribution point.
        /// </summary>
        [Input("aiaPath")]
        public Input<string>? AiaPath { get; set; }

        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the path to this performance replication cluster's API mount path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        public BackendConfigClusterState()
        {
        }
        public static new BackendConfigClusterState Empty => new BackendConfigClusterState();
    }
}
