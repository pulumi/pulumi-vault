// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    /// <summary>
    /// Allows setting the ACME server configuration used by specified mount.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pki = new Vault.Mount("pki", new()
    ///     {
    ///         Path = "pki",
    ///         Type = "pki",
    ///         DefaultLeaseTtlSeconds = 3600,
    ///         MaxLeaseTtlSeconds = 86400,
    ///     });
    /// 
    ///     var pkiConfigCluster = new Vault.PkiSecret.BackendConfigCluster("pki_config_cluster", new()
    ///     {
    ///         Backend = pki.Path,
    ///         Path = "http://127.0.0.1:8200/v1/pki",
    ///         AiaPath = "http://127.0.0.1:8200/v1/pki",
    ///     });
    /// 
    ///     var example = new Vault.PkiSecret.BackendConfigAcme("example", new()
    ///     {
    ///         Backend = pki.Path,
    ///         Enabled = true,
    ///         AllowedIssuers = new[]
    ///         {
    ///             "*",
    ///         },
    ///         AllowedRoles = new[]
    ///         {
    ///             "*",
    ///         },
    ///         AllowRoleExtKeyUsage = false,
    ///         DefaultDirectoryPolicy = "sign-verbatim",
    ///         DnsResolver = "",
    ///         EabPolicy = "not-required",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The ACME configuration can be imported using the resource's `id`.
    /// In the case of the example above the `id` would be `pki/config/acme`,
    /// where the `pki` component is the resource's `backend`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:pkiSecret/backendConfigAcme:BackendConfigAcme example pki/config/acme
    /// ```
    /// </summary>
    [VaultResourceType("vault:pkiSecret/backendConfigAcme:BackendConfigAcme")]
    public partial class BackendConfigAcme : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
        /// </summary>
        [Output("allowRoleExtKeyUsage")]
        public Output<bool?> AllowRoleExtKeyUsage { get; private set; } = null!;

        /// <summary>
        /// Specifies which issuers are allowed for use with ACME.
        /// </summary>
        [Output("allowedIssuers")]
        public Output<ImmutableArray<string>> AllowedIssuers { get; private set; } = null!;

        /// <summary>
        /// Specifies which roles are allowed for use with ACME.
        /// </summary>
        [Output("allowedRoles")]
        public Output<ImmutableArray<string>> AllowedRoles { get; private set; } = null!;

        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Specifies the policy to be used for non-role-qualified ACME requests.
        /// Allowed values are `Forbid`, `sign-verbatim`, `role:&lt;role_name&gt;`, `external-policy` or `external-policy:&lt;policy&gt;`.
        /// </summary>
        [Output("defaultDirectoryPolicy")]
        public Output<string> DefaultDirectoryPolicy { get; private set; } = null!;

        /// <summary>
        /// DNS resolver to use for domain resolution on this mount.
        /// Must be in the format `&lt;host&gt;:&lt;port&gt;`, with both parts mandatory.
        /// </summary>
        [Output("dnsResolver")]
        public Output<string?> DnsResolver { get; private set; } = null!;

        /// <summary>
        /// Specifies the policy to use for external account binding behaviour.
        /// Allowed values are `not-required`, `new-account-required` or `always-required`.
        /// </summary>
        [Output("eabPolicy")]
        public Output<string> EabPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether ACME is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
        /// </summary>
        [Output("maxTtl")]
        public Output<int> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;


        /// <summary>
        /// Create a BackendConfigAcme resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendConfigAcme(string name, BackendConfigAcmeArgs args, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigAcme:BackendConfigAcme", name, args ?? new BackendConfigAcmeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendConfigAcme(string name, Input<string> id, BackendConfigAcmeState? state = null, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigAcme:BackendConfigAcme", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendConfigAcme resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendConfigAcme Get(string name, Input<string> id, BackendConfigAcmeState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendConfigAcme(name, id, state, options);
        }
    }

    public sealed class BackendConfigAcmeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
        /// </summary>
        [Input("allowRoleExtKeyUsage")]
        public Input<bool>? AllowRoleExtKeyUsage { get; set; }

        [Input("allowedIssuers")]
        private InputList<string>? _allowedIssuers;

        /// <summary>
        /// Specifies which issuers are allowed for use with ACME.
        /// </summary>
        public InputList<string> AllowedIssuers
        {
            get => _allowedIssuers ?? (_allowedIssuers = new InputList<string>());
            set => _allowedIssuers = value;
        }

        [Input("allowedRoles")]
        private InputList<string>? _allowedRoles;

        /// <summary>
        /// Specifies which roles are allowed for use with ACME.
        /// </summary>
        public InputList<string> AllowedRoles
        {
            get => _allowedRoles ?? (_allowedRoles = new InputList<string>());
            set => _allowedRoles = value;
        }

        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Specifies the policy to be used for non-role-qualified ACME requests.
        /// Allowed values are `Forbid`, `sign-verbatim`, `role:&lt;role_name&gt;`, `external-policy` or `external-policy:&lt;policy&gt;`.
        /// </summary>
        [Input("defaultDirectoryPolicy")]
        public Input<string>? DefaultDirectoryPolicy { get; set; }

        /// <summary>
        /// DNS resolver to use for domain resolution on this mount.
        /// Must be in the format `&lt;host&gt;:&lt;port&gt;`, with both parts mandatory.
        /// </summary>
        [Input("dnsResolver")]
        public Input<string>? DnsResolver { get; set; }

        /// <summary>
        /// Specifies the policy to use for external account binding behaviour.
        /// Allowed values are `not-required`, `new-account-required` or `always-required`.
        /// </summary>
        [Input("eabPolicy")]
        public Input<string>? EabPolicy { get; set; }

        /// <summary>
        /// Specifies whether ACME is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
        /// </summary>
        [Input("maxTtl")]
        public Input<int>? MaxTtl { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public BackendConfigAcmeArgs()
        {
        }
        public static new BackendConfigAcmeArgs Empty => new BackendConfigAcmeArgs();
    }

    public sealed class BackendConfigAcmeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the ExtKeyUsage field from a role is used. **Vault 1.14.1+**
        /// </summary>
        [Input("allowRoleExtKeyUsage")]
        public Input<bool>? AllowRoleExtKeyUsage { get; set; }

        [Input("allowedIssuers")]
        private InputList<string>? _allowedIssuers;

        /// <summary>
        /// Specifies which issuers are allowed for use with ACME.
        /// </summary>
        public InputList<string> AllowedIssuers
        {
            get => _allowedIssuers ?? (_allowedIssuers = new InputList<string>());
            set => _allowedIssuers = value;
        }

        [Input("allowedRoles")]
        private InputList<string>? _allowedRoles;

        /// <summary>
        /// Specifies which roles are allowed for use with ACME.
        /// </summary>
        public InputList<string> AllowedRoles
        {
            get => _allowedRoles ?? (_allowedRoles = new InputList<string>());
            set => _allowedRoles = value;
        }

        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Specifies the policy to be used for non-role-qualified ACME requests.
        /// Allowed values are `Forbid`, `sign-verbatim`, `role:&lt;role_name&gt;`, `external-policy` or `external-policy:&lt;policy&gt;`.
        /// </summary>
        [Input("defaultDirectoryPolicy")]
        public Input<string>? DefaultDirectoryPolicy { get; set; }

        /// <summary>
        /// DNS resolver to use for domain resolution on this mount.
        /// Must be in the format `&lt;host&gt;:&lt;port&gt;`, with both parts mandatory.
        /// </summary>
        [Input("dnsResolver")]
        public Input<string>? DnsResolver { get; set; }

        /// <summary>
        /// Specifies the policy to use for external account binding behaviour.
        /// Allowed values are `not-required`, `new-account-required` or `always-required`.
        /// </summary>
        [Input("eabPolicy")]
        public Input<string>? EabPolicy { get; set; }

        /// <summary>
        /// Specifies whether ACME is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The maximum TTL in seconds for certificates issued by ACME. **Vault 1.17.0+**
        /// </summary>
        [Input("maxTtl")]
        public Input<int>? MaxTtl { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public BackendConfigAcmeState()
        {
        }
        public static new BackendConfigAcmeState Empty => new BackendConfigAcmeState();
    }
}
