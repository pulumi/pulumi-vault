// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    public static class GetBackendKey
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var key = new Vault.PkiSecret.SecretBackendKey("key", new()
        ///     {
        ///         Backend = pki.Path,
        ///         Type = "internal",
        ///         KeyName = "example",
        ///         KeyType = "rsa",
        ///         KeyBits = 4096,
        ///     });
        /// 
        ///     var example = Vault.PkiSecret.GetBackendKey.Invoke(new()
        ///     {
        ///         Backend = vault_mount.Key.Path,
        ///         KeyRef = key.KeyId,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetBackendKeyResult> InvokeAsync(GetBackendKeyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackendKeyResult>("vault:pkiSecret/getBackendKey:getBackendKey", args ?? new GetBackendKeyArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var key = new Vault.PkiSecret.SecretBackendKey("key", new()
        ///     {
        ///         Backend = pki.Path,
        ///         Type = "internal",
        ///         KeyName = "example",
        ///         KeyType = "rsa",
        ///         KeyBits = 4096,
        ///     });
        /// 
        ///     var example = Vault.PkiSecret.GetBackendKey.Invoke(new()
        ///     {
        ///         Backend = vault_mount.Key.Path,
        ///         KeyRef = key.KeyId,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetBackendKeyResult> Invoke(GetBackendKeyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendKeyResult>("vault:pkiSecret/getBackendKey:getBackendKey", args ?? new GetBackendKeyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackendKeyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the PKI secret backend to
        /// read the key from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public string Backend { get; set; } = null!;

        /// <summary>
        /// Reference to an existing key.
        /// </summary>
        [Input("keyRef", required: true)]
        public string KeyRef { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetBackendKeyArgs()
        {
        }
        public static new GetBackendKeyArgs Empty => new GetBackendKeyArgs();
    }

    public sealed class GetBackendKeyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the PKI secret backend to
        /// read the key from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Reference to an existing key.
        /// </summary>
        [Input("keyRef", required: true)]
        public Input<string> KeyRef { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetBackendKeyInvokeArgs()
        {
        }
        public static new GetBackendKeyInvokeArgs Empty => new GetBackendKeyInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackendKeyResult
    {
        public readonly string Backend;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the key.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// Name of the key.
        /// </summary>
        public readonly string KeyName;
        public readonly string KeyRef;
        /// <summary>
        /// Type of the key.
        /// </summary>
        public readonly string KeyType;
        public readonly string? Namespace;

        [OutputConstructor]
        private GetBackendKeyResult(
            string backend,

            string id,

            string keyId,

            string keyName,

            string keyRef,

            string keyType,

            string? @namespace)
        {
            Backend = backend;
            Id = id;
            KeyId = keyId;
            KeyName = keyName;
            KeyRef = keyRef;
            KeyType = keyType;
            Namespace = @namespace;
        }
    }
}
