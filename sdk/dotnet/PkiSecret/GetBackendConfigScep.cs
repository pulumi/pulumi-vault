// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    public static class GetBackendConfigScep
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var scepConfig = Vault.PkiSecret.GetBackendConfigScep.Invoke(new()
        ///     {
        ///         Backend = pki.Path,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackendConfigScepResult> InvokeAsync(GetBackendConfigScepArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackendConfigScepResult>("vault:pkiSecret/getBackendConfigScep:getBackendConfigScep", args ?? new GetBackendConfigScepArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var scepConfig = Vault.PkiSecret.GetBackendConfigScep.Invoke(new()
        ///     {
        ///         Backend = pki.Path,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackendConfigScepResult> Invoke(GetBackendConfigScepInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendConfigScepResult>("vault:pkiSecret/getBackendConfigScep:getBackendConfigScep", args ?? new GetBackendConfigScepInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var scepConfig = Vault.PkiSecret.GetBackendConfigScep.Invoke(new()
        ///     {
        ///         Backend = pki.Path,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackendConfigScepResult> Invoke(GetBackendConfigScepInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendConfigScepResult>("vault:pkiSecret/getBackendConfigScep:getBackendConfigScep", args ?? new GetBackendConfigScepInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackendConfigScepArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the PKI secret backend to
        /// read the SCEP configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public string Backend { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetBackendConfigScepArgs()
        {
        }
        public static new GetBackendConfigScepArgs Empty => new GetBackendConfigScepArgs();
    }

    public sealed class GetBackendConfigScepInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the PKI secret backend to
        /// read the SCEP configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetBackendConfigScepInvokeArgs()
        {
        }
        public static new GetBackendConfigScepInvokeArgs Empty => new GetBackendConfigScepInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackendConfigScepResult
    {
        /// <summary>
        /// List of allowed digest algorithms for SCEP requests.
        /// </summary>
        public readonly ImmutableArray<string> AllowedDigestAlgorithms;
        /// <summary>
        /// List of allowed encryption algorithms for SCEP requests.
        /// </summary>
        public readonly ImmutableArray<string> AllowedEncryptionAlgorithms;
        /// <summary>
        /// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendConfigScepAuthenticatorResult> Authenticators;
        public readonly string Backend;
        /// <summary>
        /// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:&lt;role_name&gt;" to specify a role to use as this policy.
        /// </summary>
        public readonly string DefaultPathPolicy;
        /// <summary>
        /// Specifies whether SCEP is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Lists the 3rd party validation of SCEP requests (see below for nested schema).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendConfigScepExternalValidationResult> ExternalValidations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A read-only timestamp representing the last time the configuration was updated.
        /// </summary>
        public readonly string LastUpdated;
        public readonly string? Namespace;
        /// <summary>
        /// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
        /// </summary>
        public readonly bool RestrictCaChainToIssuer;

        [OutputConstructor]
        private GetBackendConfigScepResult(
            ImmutableArray<string> allowedDigestAlgorithms,

            ImmutableArray<string> allowedEncryptionAlgorithms,

            ImmutableArray<Outputs.GetBackendConfigScepAuthenticatorResult> authenticators,

            string backend,

            string defaultPathPolicy,

            bool enabled,

            ImmutableArray<Outputs.GetBackendConfigScepExternalValidationResult> externalValidations,

            string id,

            string lastUpdated,

            string? @namespace,

            bool restrictCaChainToIssuer)
        {
            AllowedDigestAlgorithms = allowedDigestAlgorithms;
            AllowedEncryptionAlgorithms = allowedEncryptionAlgorithms;
            Authenticators = authenticators;
            Backend = backend;
            DefaultPathPolicy = defaultPathPolicy;
            Enabled = enabled;
            ExternalValidations = externalValidations;
            Id = id;
            LastUpdated = lastUpdated;
            Namespace = @namespace;
            RestrictCaChainToIssuer = restrictCaChainToIssuer;
        }
    }
}
