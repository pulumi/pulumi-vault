// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    public static class GetBackendConfigEst
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var estConfig = Vault.PkiSecret.GetBackendConfigEst.Invoke(new()
        ///     {
        ///         Backend = pki.Path,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackendConfigEstResult> InvokeAsync(GetBackendConfigEstArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackendConfigEstResult>("vault:pkiSecret/getBackendConfigEst:getBackendConfigEst", args ?? new GetBackendConfigEstArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var estConfig = Vault.PkiSecret.GetBackendConfigEst.Invoke(new()
        ///     {
        ///         Backend = pki.Path,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackendConfigEstResult> Invoke(GetBackendConfigEstInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendConfigEstResult>("vault:pkiSecret/getBackendConfigEst:getBackendConfigEst", args ?? new GetBackendConfigEstInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackendConfigEstArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the PKI secret backend to
        /// read the EST configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public string Backend { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetBackendConfigEstArgs()
        {
        }
        public static new GetBackendConfigEstArgs Empty => new GetBackendConfigEstArgs();
    }

    public sealed class GetBackendConfigEstInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the PKI secret backend to
        /// read the EST configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetBackendConfigEstInvokeArgs()
        {
        }
        public static new GetBackendConfigEstInvokeArgs Empty => new GetBackendConfigEstInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackendConfigEstResult
    {
        /// <summary>
        /// Fields parsed from the CSR that appear in the audit and can be used by sentinel policies.
        /// </summary>
        public readonly ImmutableArray<string> AuditFields;
        /// <summary>
        /// Lists the mount accessors EST should delegate authentication requests towards (see below for nested schema).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendConfigEstAuthenticatorResult> Authenticators;
        public readonly string Backend;
        /// <summary>
        /// If set, this mount is registered as the default `.well-known/est` URL path. Only a single mount can enable this across a Vault cluster.
        /// </summary>
        public readonly bool DefaultMount;
        /// <summary>
        /// Required to be set if default_mount is enabled. Specifies the behavior for requests using the default EST label. Can be sign-verbatim or a role given by role:&lt;role_name&gt;.
        /// </summary>
        public readonly string DefaultPathPolicy;
        /// <summary>
        /// If set, parse out fields from the provided CSR making them available for Sentinel policies.
        /// </summary>
        public readonly bool EnableSentinelParsing;
        /// <summary>
        /// Specifies whether EST is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A pairing of an EST label with the redirected behavior for requests hitting that role. The path policy can be sign-verbatim or a role given by role:&lt;role_name&gt;. Labels must be unique across Vault cluster, and will register .well-known/est/&lt;label&gt; URL paths.
        /// </summary>
        public readonly ImmutableDictionary<string, string> LabelToPathPolicy;
        /// <summary>
        /// A read-only timestamp representing the last time the configuration was updated.
        /// </summary>
        public readonly string LastUpdated;
        public readonly string? Namespace;

        [OutputConstructor]
        private GetBackendConfigEstResult(
            ImmutableArray<string> auditFields,

            ImmutableArray<Outputs.GetBackendConfigEstAuthenticatorResult> authenticators,

            string backend,

            bool defaultMount,

            string defaultPathPolicy,

            bool enableSentinelParsing,

            bool enabled,

            string id,

            ImmutableDictionary<string, string> labelToPathPolicy,

            string lastUpdated,

            string? @namespace)
        {
            AuditFields = auditFields;
            Authenticators = authenticators;
            Backend = backend;
            DefaultMount = defaultMount;
            DefaultPathPolicy = defaultPathPolicy;
            EnableSentinelParsing = enableSentinelParsing;
            Enabled = enabled;
            Id = id;
            LabelToPathPolicy = labelToPathPolicy;
            LastUpdated = lastUpdated;
            Namespace = @namespace;
        }
    }
}
