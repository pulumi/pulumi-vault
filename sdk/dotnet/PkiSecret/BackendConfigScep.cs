// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    /// <summary>
    /// Allows setting the SCEP configuration on a PKI Secret Backend.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var scep = new Vault.AuthBackend("scep", new()
    ///     {
    ///         Path = "scep-auth",
    ///         Type = "scep",
    ///     });
    /// 
    ///     var scepChallenge = new Vault.ScepAuthBackendRole("scep_challenge", new()
    ///     {
    ///         Backend = scep.Id,
    ///         Name = "scep-auth",
    ///         DisplayName = "Static challenge for SCEP clients",
    ///         AuthType = "static-challenge",
    ///         Challenge = "ac7e4ada-c8ef-4393-9098-d69d08736833",
    ///     });
    /// 
    ///     var pki = new Vault.Mount("pki", new()
    ///     {
    ///         Path = "pki_scep",
    ///         Type = "pki",
    ///         Description = "PKI secret engine mount",
    ///     });
    /// 
    ///     var test = new Vault.PkiSecret.BackendConfigScep("test", new()
    ///     {
    ///         Backend = pki.Path,
    ///         Enabled = true,
    ///         DefaultPathPolicy = "sign-verbatim",
    ///         RestrictCaChainToIssuer = true,
    ///         Authenticators = new Vault.PkiSecret.Inputs.BackendConfigScepAuthenticatorsArgs
    ///         {
    ///             Scep = 
    ///             {
    ///                 { "accessor", scep.Accessor },
    ///                 { "scep_role", scepChallenge.Name },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The PKI config cluster can be imported using the resource's `id`.
    /// In the case of the example above the `id` would be `pki-root/config/scep`,
    /// where the `pki-root` component is the resource's `backend`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:pkiSecret/backendConfigScep:BackendConfigScep example pki-root/config/scep
    /// ```
    /// </summary>
    [VaultResourceType("vault:pkiSecret/backendConfigScep:BackendConfigScep")]
    public partial class BackendConfigScep : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of allowed digest algorithms for SCEP requests.
        /// </summary>
        [Output("allowedDigestAlgorithms")]
        public Output<ImmutableArray<string>> AllowedDigestAlgorithms { get; private set; } = null!;

        /// <summary>
        /// List of allowed encryption algorithms for SCEP requests.
        /// </summary>
        [Output("allowedEncryptionAlgorithms")]
        public Output<ImmutableArray<string>> AllowedEncryptionAlgorithms { get; private set; } = null!;

        /// <summary>
        /// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
        /// </summary>
        [Output("authenticators")]
        public Output<Outputs.BackendConfigScepAuthenticators> Authenticators { get; private set; } = null!;

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the SCEP configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:&lt;role_name&gt;" to specify a role to use as this policy.
        /// </summary>
        [Output("defaultPathPolicy")]
        public Output<string?> DefaultPathPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether SCEP is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Lists the 3rd party validation of SCEP requests (see below for nested schema).
        /// </summary>
        [Output("externalValidations")]
        public Output<ImmutableArray<Outputs.BackendConfigScepExternalValidation>> ExternalValidations { get; private set; } = null!;

        /// <summary>
        /// A read-only timestamp representing the last time the configuration was updated.
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
        /// 
        /// 
        /// &lt;a id="nestedatt--authenticators"&gt;&lt;/a&gt;
        /// </summary>
        [Output("restrictCaChainToIssuer")]
        public Output<bool?> RestrictCaChainToIssuer { get; private set; } = null!;


        /// <summary>
        /// Create a BackendConfigScep resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendConfigScep(string name, BackendConfigScepArgs args, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigScep:BackendConfigScep", name, args ?? new BackendConfigScepArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendConfigScep(string name, Input<string> id, BackendConfigScepState? state = null, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendConfigScep:BackendConfigScep", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendConfigScep resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendConfigScep Get(string name, Input<string> id, BackendConfigScepState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendConfigScep(name, id, state, options);
        }
    }

    public sealed class BackendConfigScepArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedDigestAlgorithms")]
        private InputList<string>? _allowedDigestAlgorithms;

        /// <summary>
        /// List of allowed digest algorithms for SCEP requests.
        /// </summary>
        public InputList<string> AllowedDigestAlgorithms
        {
            get => _allowedDigestAlgorithms ?? (_allowedDigestAlgorithms = new InputList<string>());
            set => _allowedDigestAlgorithms = value;
        }

        [Input("allowedEncryptionAlgorithms")]
        private InputList<string>? _allowedEncryptionAlgorithms;

        /// <summary>
        /// List of allowed encryption algorithms for SCEP requests.
        /// </summary>
        public InputList<string> AllowedEncryptionAlgorithms
        {
            get => _allowedEncryptionAlgorithms ?? (_allowedEncryptionAlgorithms = new InputList<string>());
            set => _allowedEncryptionAlgorithms = value;
        }

        /// <summary>
        /// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
        /// </summary>
        [Input("authenticators")]
        public Input<Inputs.BackendConfigScepAuthenticatorsArgs>? Authenticators { get; set; }

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the SCEP configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:&lt;role_name&gt;" to specify a role to use as this policy.
        /// </summary>
        [Input("defaultPathPolicy")]
        public Input<string>? DefaultPathPolicy { get; set; }

        /// <summary>
        /// Specifies whether SCEP is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("externalValidations")]
        private InputList<Inputs.BackendConfigScepExternalValidationArgs>? _externalValidations;

        /// <summary>
        /// Lists the 3rd party validation of SCEP requests (see below for nested schema).
        /// </summary>
        public InputList<Inputs.BackendConfigScepExternalValidationArgs> ExternalValidations
        {
            get => _externalValidations ?? (_externalValidations = new InputList<Inputs.BackendConfigScepExternalValidationArgs>());
            set => _externalValidations = value;
        }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
        /// 
        /// 
        /// &lt;a id="nestedatt--authenticators"&gt;&lt;/a&gt;
        /// </summary>
        [Input("restrictCaChainToIssuer")]
        public Input<bool>? RestrictCaChainToIssuer { get; set; }

        public BackendConfigScepArgs()
        {
        }
        public static new BackendConfigScepArgs Empty => new BackendConfigScepArgs();
    }

    public sealed class BackendConfigScepState : global::Pulumi.ResourceArgs
    {
        [Input("allowedDigestAlgorithms")]
        private InputList<string>? _allowedDigestAlgorithms;

        /// <summary>
        /// List of allowed digest algorithms for SCEP requests.
        /// </summary>
        public InputList<string> AllowedDigestAlgorithms
        {
            get => _allowedDigestAlgorithms ?? (_allowedDigestAlgorithms = new InputList<string>());
            set => _allowedDigestAlgorithms = value;
        }

        [Input("allowedEncryptionAlgorithms")]
        private InputList<string>? _allowedEncryptionAlgorithms;

        /// <summary>
        /// List of allowed encryption algorithms for SCEP requests.
        /// </summary>
        public InputList<string> AllowedEncryptionAlgorithms
        {
            get => _allowedEncryptionAlgorithms ?? (_allowedEncryptionAlgorithms = new InputList<string>());
            set => _allowedEncryptionAlgorithms = value;
        }

        /// <summary>
        /// Lists the mount accessors SCEP should delegate authentication requests towards (see below for nested schema).
        /// </summary>
        [Input("authenticators")]
        public Input<Inputs.BackendConfigScepAuthenticatorsGetArgs>? Authenticators { get; set; }

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the SCEP configuration from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Specifies the policy to be used for non-role-qualified SCEP requests; valid values are 'sign-verbatim', or "role:&lt;role_name&gt;" to specify a role to use as this policy.
        /// </summary>
        [Input("defaultPathPolicy")]
        public Input<string>? DefaultPathPolicy { get; set; }

        /// <summary>
        /// Specifies whether SCEP is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("externalValidations")]
        private InputList<Inputs.BackendConfigScepExternalValidationGetArgs>? _externalValidations;

        /// <summary>
        /// Lists the 3rd party validation of SCEP requests (see below for nested schema).
        /// </summary>
        public InputList<Inputs.BackendConfigScepExternalValidationGetArgs> ExternalValidations
        {
            get => _externalValidations ?? (_externalValidations = new InputList<Inputs.BackendConfigScepExternalValidationGetArgs>());
            set => _externalValidations = value;
        }

        /// <summary>
        /// A read-only timestamp representing the last time the configuration was updated.
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// If true, only return the issuer CA, otherwise the entire CA certificate chain will be returned if available from the PKI mount.
        /// 
        /// 
        /// &lt;a id="nestedatt--authenticators"&gt;&lt;/a&gt;
        /// </summary>
        [Input("restrictCaChainToIssuer")]
        public Input<bool>? RestrictCaChainToIssuer { get; set; }

        public BackendConfigScepState()
        {
        }
        public static new BackendConfigScepState Empty => new BackendConfigScepState();
    }
}
