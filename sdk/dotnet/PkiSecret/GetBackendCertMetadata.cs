// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    public static class GetBackendCertMetadata
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var root = new Vault.PkiSecret.SecretBackendRootCert("root", new()
        ///     {
        ///         Backend = pki.Path,
        ///         Type = "internal",
        ///         CommonName = "example",
        ///         Ttl = "86400",
        ///         IssuerName = "example",
        ///     });
        /// 
        ///     var testSecretBackendRole = new Vault.PkiSecret.SecretBackendRole("test", new()
        ///     {
        ///         Backend = testVaultPkiSecretBackendRootCert.Backend,
        ///         Name = "test",
        ///         AllowedDomains = new[]
        ///         {
        ///             "test.my.domain",
        ///         },
        ///         AllowSubdomains = true,
        ///         MaxTtl = "3600",
        ///         KeyUsages = new[]
        ///         {
        ///             "DigitalSignature",
        ///             "KeyAgreement",
        ///             "KeyEncipherment",
        ///         },
        ///         NoStoreMetadata = false,
        ///     });
        /// 
        ///     var testSecretBackendCert = new Vault.PkiSecret.SecretBackendCert("test", new()
        ///     {
        ///         Backend = testSecretBackendRole.Backend,
        ///         Name = testSecretBackendRole.Name,
        ///         CommonName = "cert.test.my.domain",
        ///         Ttl = "720h",
        ///         MinSecondsRemaining = 60,
        ///         CertMetadata = "dGVzdCBtZXRhZGF0YQ==",
        ///     });
        /// 
        ///     var test = Vault.PkiSecret.GetBackendCertMetadata.Invoke(new()
        ///     {
        ///         Path = test_root.Path,
        ///         Serial = testSecretBackendCert.SerialNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackendCertMetadataResult> InvokeAsync(GetBackendCertMetadataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackendCertMetadataResult>("vault:pkiSecret/getBackendCertMetadata:getBackendCertMetadata", args ?? new GetBackendCertMetadataArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var root = new Vault.PkiSecret.SecretBackendRootCert("root", new()
        ///     {
        ///         Backend = pki.Path,
        ///         Type = "internal",
        ///         CommonName = "example",
        ///         Ttl = "86400",
        ///         IssuerName = "example",
        ///     });
        /// 
        ///     var testSecretBackendRole = new Vault.PkiSecret.SecretBackendRole("test", new()
        ///     {
        ///         Backend = testVaultPkiSecretBackendRootCert.Backend,
        ///         Name = "test",
        ///         AllowedDomains = new[]
        ///         {
        ///             "test.my.domain",
        ///         },
        ///         AllowSubdomains = true,
        ///         MaxTtl = "3600",
        ///         KeyUsages = new[]
        ///         {
        ///             "DigitalSignature",
        ///             "KeyAgreement",
        ///             "KeyEncipherment",
        ///         },
        ///         NoStoreMetadata = false,
        ///     });
        /// 
        ///     var testSecretBackendCert = new Vault.PkiSecret.SecretBackendCert("test", new()
        ///     {
        ///         Backend = testSecretBackendRole.Backend,
        ///         Name = testSecretBackendRole.Name,
        ///         CommonName = "cert.test.my.domain",
        ///         Ttl = "720h",
        ///         MinSecondsRemaining = 60,
        ///         CertMetadata = "dGVzdCBtZXRhZGF0YQ==",
        ///     });
        /// 
        ///     var test = Vault.PkiSecret.GetBackendCertMetadata.Invoke(new()
        ///     {
        ///         Path = test_root.Path,
        ///         Serial = testSecretBackendCert.SerialNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackendCertMetadataResult> Invoke(GetBackendCertMetadataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendCertMetadataResult>("vault:pkiSecret/getBackendCertMetadata:getBackendCertMetadata", args ?? new GetBackendCertMetadataInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pki = new Vault.Mount("pki", new()
        ///     {
        ///         Path = "pki",
        ///         Type = "pki",
        ///         Description = "PKI secret engine mount",
        ///     });
        /// 
        ///     var root = new Vault.PkiSecret.SecretBackendRootCert("root", new()
        ///     {
        ///         Backend = pki.Path,
        ///         Type = "internal",
        ///         CommonName = "example",
        ///         Ttl = "86400",
        ///         IssuerName = "example",
        ///     });
        /// 
        ///     var testSecretBackendRole = new Vault.PkiSecret.SecretBackendRole("test", new()
        ///     {
        ///         Backend = testVaultPkiSecretBackendRootCert.Backend,
        ///         Name = "test",
        ///         AllowedDomains = new[]
        ///         {
        ///             "test.my.domain",
        ///         },
        ///         AllowSubdomains = true,
        ///         MaxTtl = "3600",
        ///         KeyUsages = new[]
        ///         {
        ///             "DigitalSignature",
        ///             "KeyAgreement",
        ///             "KeyEncipherment",
        ///         },
        ///         NoStoreMetadata = false,
        ///     });
        /// 
        ///     var testSecretBackendCert = new Vault.PkiSecret.SecretBackendCert("test", new()
        ///     {
        ///         Backend = testSecretBackendRole.Backend,
        ///         Name = testSecretBackendRole.Name,
        ///         CommonName = "cert.test.my.domain",
        ///         Ttl = "720h",
        ///         MinSecondsRemaining = 60,
        ///         CertMetadata = "dGVzdCBtZXRhZGF0YQ==",
        ///     });
        /// 
        ///     var test = Vault.PkiSecret.GetBackendCertMetadata.Invoke(new()
        ///     {
        ///         Path = test_root.Path,
        ///         Serial = testSecretBackendCert.SerialNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackendCertMetadataResult> Invoke(GetBackendCertMetadataInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendCertMetadataResult>("vault:pkiSecret/getBackendCertMetadata:getBackendCertMetadata", args ?? new GetBackendCertMetadataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackendCertMetadataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the cert metadata from, with no leading or trailing `/`s.
        /// </summary>
        [Input("path", required: true)]
        public string Path { get; set; } = null!;

        /// <summary>
        /// Specifies the serial of the certificate whose metadata to read.
        /// </summary>
        [Input("serial", required: true)]
        public string Serial { get; set; } = null!;

        public GetBackendCertMetadataArgs()
        {
        }
        public static new GetBackendCertMetadataArgs Empty => new GetBackendCertMetadataArgs();
    }

    public sealed class GetBackendCertMetadataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The path to the PKI secret backend to
        /// read the cert metadata from, with no leading or trailing `/`s.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Specifies the serial of the certificate whose metadata to read.
        /// </summary>
        [Input("serial", required: true)]
        public Input<string> Serial { get; set; } = null!;

        public GetBackendCertMetadataInvokeArgs()
        {
        }
        public static new GetBackendCertMetadataInvokeArgs Empty => new GetBackendCertMetadataInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackendCertMetadataResult
    {
        /// <summary>
        /// The metadata associated with the certificate
        /// </summary>
        public readonly string CertMetadata;
        /// <summary>
        /// The expiration date of the certificate in unix epoch format
        /// </summary>
        public readonly string Expiration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the issuer.
        /// </summary>
        public readonly string IssuerId;
        public readonly string? Namespace;
        public readonly string Path;
        /// <summary>
        /// The role used to create the certificate
        /// </summary>
        public readonly string Role;
        public readonly string Serial;
        /// <summary>
        /// The serial number
        /// </summary>
        public readonly string SerialNumber;

        [OutputConstructor]
        private GetBackendCertMetadataResult(
            string certMetadata,

            string expiration,

            string id,

            string issuerId,

            string? @namespace,

            string path,

            string role,

            string serial,

            string serialNumber)
        {
            CertMetadata = certMetadata;
            Expiration = expiration;
            Id = id;
            IssuerId = issuerId;
            Namespace = @namespace;
            Path = path;
            Role = role;
            Serial = serial;
            SerialNumber = serialNumber;
        }
    }
}
