// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    /// <summary>
    /// Creates a key on a PKI Secret Backend for Vault.
    /// 
    /// ## Import
    /// 
    /// PKI secret backend key can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import vault:pkiSecret/secretBackendKey:SecretBackendKey key pki/key/bf9b0d48-d0dd-652c-30be-77d04fc7e94d
    /// ```
    /// </summary>
    [VaultResourceType("vault:pkiSecret/secretBackendKey:SecretBackendKey")]
    public partial class SecretBackendKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of bits to use for the generated keys. 
        /// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
        /// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
        /// 384, or 521; ignored with `key_type=ed25519`.
        /// </summary>
        [Output("keyBits")]
        public Output<int> KeyBits { get; private set; } = null!;

        /// <summary>
        /// ID of the generated key.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// When a new key is created with this request, optionally specifies the name for this. 
        /// The global ref `default` may not be used as a name.
        /// </summary>
        [Output("keyName")]
        public Output<string?> KeyName { get; private set; } = null!;

        /// <summary>
        /// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        /// <summary>
        /// The managed key's UUID.
        /// </summary>
        [Output("managedKeyId")]
        public Output<string?> ManagedKeyId { get; private set; } = null!;

        /// <summary>
        /// The managed key's configured name.
        /// </summary>
        [Output("managedKeyName")]
        public Output<string?> ManagedKeyName { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SecretBackendKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretBackendKey(string name, SecretBackendKeyArgs args, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/secretBackendKey:SecretBackendKey", name, args ?? new SecretBackendKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretBackendKey(string name, Input<string> id, SecretBackendKeyState? state = null, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/secretBackendKey:SecretBackendKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretBackendKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretBackendKey Get(string name, Input<string> id, SecretBackendKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretBackendKey(name, id, state, options);
        }
    }

    public sealed class SecretBackendKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Specifies the number of bits to use for the generated keys. 
        /// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
        /// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
        /// 384, or 521; ignored with `key_type=ed25519`.
        /// </summary>
        [Input("keyBits")]
        public Input<int>? KeyBits { get; set; }

        /// <summary>
        /// When a new key is created with this request, optionally specifies the name for this. 
        /// The global ref `default` may not be used as a name.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// The managed key's UUID.
        /// </summary>
        [Input("managedKeyId")]
        public Input<string>? ManagedKeyId { get; set; }

        /// <summary>
        /// The managed key's configured name.
        /// </summary>
        [Input("managedKeyName")]
        public Input<string>? ManagedKeyName { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public SecretBackendKeyArgs()
        {
        }
        public static new SecretBackendKeyArgs Empty => new SecretBackendKeyArgs();
    }

    public sealed class SecretBackendKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path the PKI secret backend is mounted at, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Specifies the number of bits to use for the generated keys. 
        /// Allowed values are 0 (universal default); with `key_type=rsa`, allowed values are:
        /// 2048 (default), 3072, or 4096; with `key_type=ec`, allowed values are: 224, 256 (default),
        /// 384, or 521; ignored with `key_type=ed25519`.
        /// </summary>
        [Input("keyBits")]
        public Input<int>? KeyBits { get; set; }

        /// <summary>
        /// ID of the generated key.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// When a new key is created with this request, optionally specifies the name for this. 
        /// The global ref `default` may not be used as a name.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Specifies the desired key type; must be `rsa`, `ed25519` or `ec`.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// The managed key's UUID.
        /// </summary>
        [Input("managedKeyId")]
        public Input<string>? ManagedKeyId { get; set; }

        /// <summary>
        /// The managed key's configured name.
        /// </summary>
        [Input("managedKeyName")]
        public Input<string>? ManagedKeyName { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the type of the key to create. Can be `exported`,`internal` or `kms`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SecretBackendKeyState()
        {
        }
        public static new SecretBackendKeyState Empty => new SecretBackendKeyState();
    }
}
