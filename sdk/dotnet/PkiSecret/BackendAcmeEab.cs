// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.PkiSecret
{
    /// <summary>
    /// Allows creating ACME EAB (External Account Binding) tokens and deleting unused ones.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Vault.Mount("test", new()
    ///     {
    ///         Path = "pki",
    ///         Type = "pki",
    ///         Description = "PKI secret engine mount",
    ///     });
    /// 
    ///     var testBackendAcmeEab = new Vault.PkiSecret.BackendAcmeEab("test", new()
    ///     {
    ///         Backend = test.Path,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// As EAB tokens are only available on initial creation there is no possibility to
    /// 
    /// import or update this resource.
    /// </summary>
    [VaultResourceType("vault:pkiSecret/backendAcmeEab:BackendAcmeEab")]
    public partial class BackendAcmeEab : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ACME directory to which the key belongs
        /// </summary>
        [Output("acmeDirectory")]
        public Output<string> AcmeDirectory { get; private set; } = null!;

        /// <summary>
        /// The path to the PKI secret backend to
        /// create the EAB token within, with no leading or trailing `/`s.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// An RFC3339 formatted date time when the EAB token was created
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The identifier of a specific ACME EAB token
        /// </summary>
        [Output("eabId")]
        public Output<string> EabId { get; private set; } = null!;

        /// <summary>
        /// Create an EAB token that is specific to an issuer's ACME directory.
        /// </summary>
        [Output("issuer")]
        public Output<string?> Issuer { get; private set; } = null!;

        /// <summary>
        /// The EAB token
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The key type of the EAB key
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Create an EAB token that is specific to a role's ACME directory.
        /// 
        /// **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
        /// 
        /// 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
        /// 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
        /// 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
        /// 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;


        /// <summary>
        /// Create a BackendAcmeEab resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendAcmeEab(string name, BackendAcmeEabArgs args, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendAcmeEab:BackendAcmeEab", name, args ?? new BackendAcmeEabArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendAcmeEab(string name, Input<string> id, BackendAcmeEabState? state = null, CustomResourceOptions? options = null)
            : base("vault:pkiSecret/backendAcmeEab:BackendAcmeEab", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "key",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendAcmeEab resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendAcmeEab Get(string name, Input<string> id, BackendAcmeEabState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendAcmeEab(name, id, state, options);
        }
    }

    public sealed class BackendAcmeEabArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path to the PKI secret backend to
        /// create the EAB token within, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Create an EAB token that is specific to an issuer's ACME directory.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Create an EAB token that is specific to a role's ACME directory.
        /// 
        /// **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
        /// 
        /// 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
        /// 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
        /// 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
        /// 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public BackendAcmeEabArgs()
        {
        }
        public static new BackendAcmeEabArgs Empty => new BackendAcmeEabArgs();
    }

    public sealed class BackendAcmeEabState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ACME directory to which the key belongs
        /// </summary>
        [Input("acmeDirectory")]
        public Input<string>? AcmeDirectory { get; set; }

        /// <summary>
        /// The path to the PKI secret backend to
        /// create the EAB token within, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// An RFC3339 formatted date time when the EAB token was created
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// The identifier of a specific ACME EAB token
        /// </summary>
        [Input("eabId")]
        public Input<string>? EabId { get; set; }

        /// <summary>
        /// Create an EAB token that is specific to an issuer's ACME directory.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// The EAB token
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The key type of the EAB key
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Create an EAB token that is specific to a role's ACME directory.
        /// 
        /// **NOTE**: Within Vault ACME there are different ACME directories which an EAB token is associated with;
        /// 
        /// 1. Default directory (`pki/acme/`) - Do not specify a value for issuer nor role parameters.
        /// 2. Issuer specific (`pki/issuer/:issuer_ref/acme/`) - Specify a value for the issuer parameter
        /// 3. Role specific (`pki/roles/:role/acme/`) - Specify a value for the role parameter
        /// 4. Issuer and Role specific (`pki/issuer/:issuer_ref/roles/:role/acme/`) - Specify a value for both the issuer and role parameters
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public BackendAcmeEabState()
        {
        }
        public static new BackendAcmeEabState Empty => new BackendAcmeEabState();
    }
}
