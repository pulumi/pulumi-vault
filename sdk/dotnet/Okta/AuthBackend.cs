// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Okta
{
    /// <summary>
    /// Provides a resource for managing an
    /// [Okta auth backend within Vault](https://www.vaultproject.io/docs/auth/okta.html).
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/okta_auth_backend.html.md.
    /// </summary>
    public partial class AuthBackend : Pulumi.CustomResource
    {
        /// <summary>
        /// The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
        /// </summary>
        [Output("accessor")]
        public Output<string> Accessor { get; private set; } = null!;

        /// <summary>
        /// The Okta url. Examples: oktapreview.com, okta.com
        /// </summary>
        [Output("baseUrl")]
        public Output<string?> BaseUrl { get; private set; } = null!;

        /// <summary>
        /// When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
        /// </summary>
        [Output("bypassOktaMfa")]
        public Output<bool?> BypassOktaMfa { get; private set; } = null!;

        /// <summary>
        /// The description of the auth backend
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Associate Okta groups with policies within Vault.
        /// See below for more details.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.AuthBackendGroups>> Groups { get; private set; } = null!;

        /// <summary>
        /// Maximum duration after which authentication will be expired
        /// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
        /// </summary>
        [Output("maxTtl")]
        public Output<string?> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// The Okta organization. This will be the first part of the url `https://XXX.okta.com`
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// Path to mount the Okta auth backend
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// The Okta API token. This is required to query Okta for user group membership.
        /// If this is not supplied only locally configured groups will be enabled.
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// Duration after which authentication will be expired.
        /// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
        /// </summary>
        [Output("ttl")]
        public Output<string?> Ttl { get; private set; } = null!;

        /// <summary>
        /// Associate Okta users with groups or policies within Vault.
        /// See below for more details.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.AuthBackendUsers>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a AuthBackend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthBackend(string name, AuthBackendArgs args, CustomResourceOptions? options = null)
            : base("vault:okta/authBackend:AuthBackend", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private AuthBackend(string name, Input<string> id, AuthBackendState? state = null, CustomResourceOptions? options = null)
            : base("vault:okta/authBackend:AuthBackend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthBackend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthBackend Get(string name, Input<string> id, AuthBackendState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthBackend(name, id, state, options);
        }
    }

    public sealed class AuthBackendArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Okta url. Examples: oktapreview.com, okta.com
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
        /// </summary>
        [Input("bypassOktaMfa")]
        public Input<bool>? BypassOktaMfa { get; set; }

        /// <summary>
        /// The description of the auth backend
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groups")]
        private InputList<Inputs.AuthBackendGroupsArgs>? _groups;

        /// <summary>
        /// Associate Okta groups with policies within Vault.
        /// See below for more details.
        /// </summary>
        public InputList<Inputs.AuthBackendGroupsArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.AuthBackendGroupsArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Maximum duration after which authentication will be expired
        /// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// The Okta organization. This will be the first part of the url `https://XXX.okta.com`
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// Path to mount the Okta auth backend
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The Okta API token. This is required to query Okta for user group membership.
        /// If this is not supplied only locally configured groups will be enabled.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Duration after which authentication will be expired.
        /// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        [Input("users")]
        private InputList<Inputs.AuthBackendUsersArgs>? _users;

        /// <summary>
        /// Associate Okta users with groups or policies within Vault.
        /// See below for more details.
        /// </summary>
        public InputList<Inputs.AuthBackendUsersArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.AuthBackendUsersArgs>());
            set => _users = value;
        }

        public AuthBackendArgs()
        {
        }
    }

    public sealed class AuthBackendState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
        /// </summary>
        [Input("accessor")]
        public Input<string>? Accessor { get; set; }

        /// <summary>
        /// The Okta url. Examples: oktapreview.com, okta.com
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
        /// </summary>
        [Input("bypassOktaMfa")]
        public Input<bool>? BypassOktaMfa { get; set; }

        /// <summary>
        /// The description of the auth backend
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groups")]
        private InputList<Inputs.AuthBackendGroupsGetArgs>? _groups;

        /// <summary>
        /// Associate Okta groups with policies within Vault.
        /// See below for more details.
        /// </summary>
        public InputList<Inputs.AuthBackendGroupsGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.AuthBackendGroupsGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Maximum duration after which authentication will be expired
        /// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// The Okta organization. This will be the first part of the url `https://XXX.okta.com`
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// Path to mount the Okta auth backend
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The Okta API token. This is required to query Okta for user group membership.
        /// If this is not supplied only locally configured groups will be enabled.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Duration after which authentication will be expired.
        /// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        [Input("users")]
        private InputList<Inputs.AuthBackendUsersGetArgs>? _users;

        /// <summary>
        /// Associate Okta users with groups or policies within Vault.
        /// See below for more details.
        /// </summary>
        public InputList<Inputs.AuthBackendUsersGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.AuthBackendUsersGetArgs>());
            set => _users = value;
        }

        public AuthBackendState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class AuthBackendGroupsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the group within the Okta
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        [Input("policies", required: true)]
        private InputList<string>? _policies;

        /// <summary>
        /// List of Vault policies to associate with this user
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public AuthBackendGroupsArgs()
        {
        }
    }

    public sealed class AuthBackendGroupsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the group within the Okta
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        [Input("policies", required: true)]
        private InputList<string>? _policies;

        /// <summary>
        /// List of Vault policies to associate with this user
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public AuthBackendGroupsGetArgs()
        {
        }
    }

    public sealed class AuthBackendUsersArgs : Pulumi.ResourceArgs
    {
        [Input("groups", required: true)]
        private InputList<string>? _groups;

        /// <summary>
        /// List of Okta groups to associate with this user
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// List of Vault policies to associate with this user
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        /// <summary>
        /// Name of the user within Okta
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public AuthBackendUsersArgs()
        {
        }
    }

    public sealed class AuthBackendUsersGetArgs : Pulumi.ResourceArgs
    {
        [Input("groups", required: true)]
        private InputList<string>? _groups;

        /// <summary>
        /// List of Okta groups to associate with this user
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// List of Vault policies to associate with this user
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        /// <summary>
        /// Name of the user within Okta
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public AuthBackendUsersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class AuthBackendGroups
    {
        /// <summary>
        /// Name of the group within the Okta
        /// </summary>
        public readonly string GroupName;
        /// <summary>
        /// List of Vault policies to associate with this user
        /// </summary>
        public readonly ImmutableArray<string> Policies;

        [OutputConstructor]
        private AuthBackendGroups(
            string groupName,
            ImmutableArray<string> policies)
        {
            GroupName = groupName;
            Policies = policies;
        }
    }

    [OutputType]
    public sealed class AuthBackendUsers
    {
        /// <summary>
        /// List of Okta groups to associate with this user
        /// </summary>
        public readonly ImmutableArray<string> Groups;
        /// <summary>
        /// List of Vault policies to associate with this user
        /// </summary>
        public readonly ImmutableArray<string> Policies;
        /// <summary>
        /// Name of the user within Okta
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private AuthBackendUsers(
            ImmutableArray<string> groups,
            ImmutableArray<string> policies,
            string username)
        {
            Groups = groups;
            Policies = policies;
            Username = username;
        }
    }
    }
}
