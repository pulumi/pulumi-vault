// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var jwt = new Vault.Plugin("jwt", new()
    ///     {
    ///         Type = "auth",
    ///         Name = "jwt",
    ///         Command = "vault-plugin-auth-jwt",
    ///         Version = "v0.17.0",
    ///         Sha256 = "6bd0a803ed742aa3ce35e4fa23d2c8d550e6c1567bf63410cec489c28b68b0fc",
    ///         Envs = new[]
    ///         {
    ///             "HTTP_PROXY=http://proxy.example.com:8080",
    ///         },
    ///     });
    /// 
    ///     var jwtAuth = new Vault.AuthBackend("jwt_auth", new()
    ///     {
    ///         Type = jwt.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Plugins can be imported using `:type/name/:name` or `:type/version/:version/name/:name` as the ID if the version is non-empty, e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:index/plugin:Plugin jwt auth/name/jwt
    /// ```
    /// ```sh
    /// $ pulumi import vault:index/plugin:Plugin jwt auth/version/v0.17.0/name/jwt
    /// ```
    /// </summary>
    [VaultResourceType("vault:index/plugin:Plugin")]
    public partial class Plugin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of additional args to pass to the plugin.
        /// </summary>
        [Output("args")]
        public Output<ImmutableArray<string>> Args { get; private set; } = null!;

        /// <summary>
        /// Command to execute the plugin, relative to the server's configured `plugin_directory`.
        /// </summary>
        [Output("command")]
        public Output<string> Command { get; private set; } = null!;

        /// <summary>
        /// List of additional environment variables to run the plugin with in KEY=VALUE form.
        /// </summary>
        [Output("envs")]
        public Output<ImmutableArray<string>> Envs { get; private set; } = null!;

        /// <summary>
        /// Name of the plugin.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies OCI image to run. If specified, setting
        /// `command`, `args`, and `env` will update the container's entrypoint, args, and
        /// environment variables (append-only) respectively.
        /// </summary>
        [Output("ociImage")]
        public Output<string?> OciImage { get; private set; } = null!;

        /// <summary>
        /// Vault plugin runtime to use if `oci_image` is specified.
        /// </summary>
        [Output("runtime")]
        public Output<string?> Runtime { get; private set; } = null!;

        /// <summary>
        /// SHA256 sum of the plugin binary.
        /// </summary>
        [Output("sha256")]
        public Output<string> Sha256 { get; private set; } = null!;

        /// <summary>
        /// Type of plugin; one of "auth", "secret", or "database".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Semantic version of the plugin.
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Plugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Plugin(string name, PluginArgs args, CustomResourceOptions? options = null)
            : base("vault:index/plugin:Plugin", name, args ?? new PluginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Plugin(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
            : base("vault:index/plugin:Plugin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "envs",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Plugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Plugin Get(string name, Input<string> id, PluginState? state = null, CustomResourceOptions? options = null)
        {
            return new Plugin(name, id, state, options);
        }
    }

    public sealed class PluginArgs : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// List of additional args to pass to the plugin.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        /// <summary>
        /// Command to execute the plugin, relative to the server's configured `plugin_directory`.
        /// </summary>
        [Input("command", required: true)]
        public Input<string> Command { get; set; } = null!;

        [Input("envs")]
        private InputList<string>? _envs;

        /// <summary>
        /// List of additional environment variables to run the plugin with in KEY=VALUE form.
        /// </summary>
        public InputList<string> Envs
        {
            get => _envs ?? (_envs = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _envs = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Name of the plugin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies OCI image to run. If specified, setting
        /// `command`, `args`, and `env` will update the container's entrypoint, args, and
        /// environment variables (append-only) respectively.
        /// </summary>
        [Input("ociImage")]
        public Input<string>? OciImage { get; set; }

        /// <summary>
        /// Vault plugin runtime to use if `oci_image` is specified.
        /// </summary>
        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        /// <summary>
        /// SHA256 sum of the plugin binary.
        /// </summary>
        [Input("sha256", required: true)]
        public Input<string> Sha256 { get; set; } = null!;

        /// <summary>
        /// Type of plugin; one of "auth", "secret", or "database".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Semantic version of the plugin.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public PluginArgs()
        {
        }
        public static new PluginArgs Empty => new PluginArgs();
    }

    public sealed class PluginState : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// List of additional args to pass to the plugin.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        /// <summary>
        /// Command to execute the plugin, relative to the server's configured `plugin_directory`.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        [Input("envs")]
        private InputList<string>? _envs;

        /// <summary>
        /// List of additional environment variables to run the plugin with in KEY=VALUE form.
        /// </summary>
        public InputList<string> Envs
        {
            get => _envs ?? (_envs = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _envs = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Name of the plugin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies OCI image to run. If specified, setting
        /// `command`, `args`, and `env` will update the container's entrypoint, args, and
        /// environment variables (append-only) respectively.
        /// </summary>
        [Input("ociImage")]
        public Input<string>? OciImage { get; set; }

        /// <summary>
        /// Vault plugin runtime to use if `oci_image` is specified.
        /// </summary>
        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        /// <summary>
        /// SHA256 sum of the plugin binary.
        /// </summary>
        [Input("sha256")]
        public Input<string>? Sha256 { get; set; }

        /// <summary>
        /// Type of plugin; one of "auth", "secret", or "database".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Semantic version of the plugin.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public PluginState()
        {
        }
        public static new PluginState Empty => new PluginState();
    }
}
