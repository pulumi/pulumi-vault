// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Managed.Outputs
{

    [OutputType]
    public sealed class KeysPkc
    {
        /// <summary>
        /// If no existing key can be found in 
        /// the referenced backend, instructs Vault to generate a key within the backend.
        /// </summary>
        public readonly bool? AllowGenerateKey;
        /// <summary>
        /// Controls the ability for Vault to replace through
        /// generation or importing a key into the configured backend even
        /// if a key is present, if set to `false` those operations are forbidden
        /// if a key exists.
        /// </summary>
        public readonly bool? AllowReplaceKey;
        /// <summary>
        /// Controls the ability for Vault to import a key to the
        /// configured backend, if `false`, those operations will be forbidden.
        /// </summary>
        public readonly bool? AllowStoreKey;
        /// <summary>
        /// If `true`, allows usage from any mount point within the
        /// namespace.
        /// </summary>
        public readonly bool? AnyMount;
        /// <summary>
        /// The curve to use for an ECDSA key. Used when `key_type` 
        /// is `ECDSA`. Required if `allow_generate_key` is `true`.
        /// </summary>
        public readonly string? Curve;
        /// <summary>
        /// Force all operations to open up a read-write session to
        /// the HSM.
        /// </summary>
        public readonly string? ForceRwSession;
        /// <summary>
        /// The size in bits for an RSA key.
        /// </summary>
        public readonly string? KeyBits;
        /// <summary>
        /// The id of a PKCS#11 key to use.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// The label of the key to use.
        /// </summary>
        public readonly string KeyLabel;
        /// <summary>
        /// The name of the kms_library stanza to use from Vault's config
        /// to lookup the local library path.
        /// </summary>
        public readonly string Library;
        /// <summary>
        /// The encryption/decryption mechanism to use, specified as a
        /// hexadecimal (prefixed by 0x) string.
        /// </summary>
        public readonly string Mechanism;
        /// <summary>
        /// A unique lowercase name that serves as identifying the key.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The PIN for login.
        /// </summary>
        public readonly string Pin;
        /// <summary>
        /// The slot number to use, specified as a string in a decimal format
        /// (e.g. `2305843009213693953`).
        /// </summary>
        public readonly string? Slot;
        /// <summary>
        /// The slot token label to use.
        /// </summary>
        public readonly string? TokenLabel;
        /// <summary>
        /// ID of the managed key read from Vault
        /// </summary>
        public readonly string? Uuid;

        [OutputConstructor]
        private KeysPkc(
            bool? allowGenerateKey,

            bool? allowReplaceKey,

            bool? allowStoreKey,

            bool? anyMount,

            string? curve,

            string? forceRwSession,

            string? keyBits,

            string keyId,

            string keyLabel,

            string library,

            string mechanism,

            string name,

            string pin,

            string? slot,

            string? tokenLabel,

            string? uuid)
        {
            AllowGenerateKey = allowGenerateKey;
            AllowReplaceKey = allowReplaceKey;
            AllowStoreKey = allowStoreKey;
            AnyMount = anyMount;
            Curve = curve;
            ForceRwSession = forceRwSession;
            KeyBits = keyBits;
            KeyId = keyId;
            KeyLabel = keyLabel;
            Library = library;
            Mechanism = mechanism;
            Name = name;
            Pin = pin;
            Slot = slot;
            TokenLabel = tokenLabel;
            Uuid = uuid;
        }
    }
}
