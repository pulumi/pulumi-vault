// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Aws
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aws = new Vault.Aws.SecretBackend("aws", new()
    ///     {
    ///         Path = "my-aws",
    ///         Description = "Obtain AWS credentials.",
    ///     });
    /// 
    ///     var role = new Vault.Aws.SecretBackendStaticRole("role", new()
    ///     {
    ///         Backend = aws.Path,
    ///         Username = "my-test-user",
    ///         RotationPeriod = 3600,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// AWS secret backend static role can be imported using the full path to the role
    /// of the form: `&lt;mount_path&gt;/static-roles/&lt;role_name&gt;` e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:aws/secretBackendStaticRole:SecretBackendStaticRole role aws/static-roles/example-role
    /// ```
    /// </summary>
    [VaultResourceType("vault:aws/secretBackendStaticRole:SecretBackendStaticRole")]
    public partial class SecretBackendStaticRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique path this backend should be mounted at. Must
        /// not begin or end with a `/`. Defaults to `aws`
        /// </summary>
        [Output("backend")]
        public Output<string?> Backend { get; private set; } = null!;

        /// <summary>
        /// The name to identify this role within the backend.
        /// Must be unique within the backend.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// How often Vault should rotate the password of the user entry.
        /// </summary>
        [Output("rotationPeriod")]
        public Output<int> RotationPeriod { get; private set; } = null!;

        /// <summary>
        /// The username of the existing AWS IAM to manage password rotation for.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a SecretBackendStaticRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretBackendStaticRole(string name, SecretBackendStaticRoleArgs args, CustomResourceOptions? options = null)
            : base("vault:aws/secretBackendStaticRole:SecretBackendStaticRole", name, args ?? new SecretBackendStaticRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretBackendStaticRole(string name, Input<string> id, SecretBackendStaticRoleState? state = null, CustomResourceOptions? options = null)
            : base("vault:aws/secretBackendStaticRole:SecretBackendStaticRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretBackendStaticRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretBackendStaticRole Get(string name, Input<string> id, SecretBackendStaticRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretBackendStaticRole(name, id, state, options);
        }
    }

    public sealed class SecretBackendStaticRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique path this backend should be mounted at. Must
        /// not begin or end with a `/`. Defaults to `aws`
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// The name to identify this role within the backend.
        /// Must be unique within the backend.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// How often Vault should rotate the password of the user entry.
        /// </summary>
        [Input("rotationPeriod", required: true)]
        public Input<int> RotationPeriod { get; set; } = null!;

        /// <summary>
        /// The username of the existing AWS IAM to manage password rotation for.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public SecretBackendStaticRoleArgs()
        {
        }
        public static new SecretBackendStaticRoleArgs Empty => new SecretBackendStaticRoleArgs();
    }

    public sealed class SecretBackendStaticRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique path this backend should be mounted at. Must
        /// not begin or end with a `/`. Defaults to `aws`
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// The name to identify this role within the backend.
        /// Must be unique within the backend.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// How often Vault should rotate the password of the user entry.
        /// </summary>
        [Input("rotationPeriod")]
        public Input<int>? RotationPeriod { get; set; }

        /// <summary>
        /// The username of the existing AWS IAM to manage password rotation for.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public SecretBackendStaticRoleState()
        {
        }
        public static new SecretBackendStaticRoleState Empty => new SecretBackendStaticRoleState();
    }
}
