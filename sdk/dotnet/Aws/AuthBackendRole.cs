// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Aws
{
    /// <summary>
    /// Manages an AWS auth backend role in a Vault server. Roles constrain the
    /// instances or principals that can perform the login operation against the
    /// backend. See the [Vault
    /// documentation](https://www.vaultproject.io/docs/auth/aws.html) for more
    /// information.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/aws_auth_backend_role.html.md.
    /// </summary>
    public partial class AuthBackendRole : Pulumi.CustomResource
    {
        /// <summary>
        /// If set to `true`, allows migration of
        /// the underlying instance where the client resides.
        /// </summary>
        [Output("allowInstanceMigration")]
        public Output<bool?> AllowInstanceMigration { get; private set; } = null!;

        /// <summary>
        /// The auth type permitted for this role. Valid choices
        /// are `ec2` and `iam`. Defaults to `iam`.
        /// </summary>
        [Output("authType")]
        public Output<string?> AuthType { get; private set; } = null!;

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Output("backend")]
        public Output<string?> Backend { get; private set; } = null!;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they should be using the
        /// account ID specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        [Output("boundAccountIds")]
        public Output<ImmutableArray<string>> BoundAccountIds { get; private set; } = null!;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that they should be using the AMI ID
        /// specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        [Output("boundAmiIds")]
        public Output<ImmutableArray<string>> BoundAmiIds { get; private set; } = null!;

        /// <summary>
        /// Only EC2 instances that match this instance ID will be permitted to log in.
        /// </summary>
        [Output("boundEc2InstanceIds")]
        public Output<ImmutableArray<string>> BoundEc2InstanceIds { get; private set; } = null!;

        /// <summary>
        /// If set, defines a constraint on
        /// the EC2 instances that can perform the login operation that they must be
        /// associated with an IAM instance profile ARN which has a prefix that matches
        /// the value specified by this field. The value is prefix-matched as though it
        /// were a glob ending in `*`. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        [Output("boundIamInstanceProfileArns")]
        public Output<ImmutableArray<string>> BoundIamInstanceProfileArns { get; private set; } = null!;

        /// <summary>
        /// If set, defines the IAM principal that
        /// must be authenticated when `auth_type` is set to `iam`. Wildcards are
        /// supported at the end of the ARN.
        /// </summary>
        [Output("boundIamPrincipalArns")]
        public Output<ImmutableArray<string>> BoundIamPrincipalArns { get; private set; } = null!;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they must match the IAM
        /// role ARN specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        [Output("boundIamRoleArns")]
        public Output<ImmutableArray<string>> BoundIamRoleArns { get; private set; } = null!;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that the region in their identity
        /// document must match the one specified by this field. `auth_type` must be set
        /// to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
        /// constraint.
        /// </summary>
        [Output("boundRegions")]
        public Output<ImmutableArray<string>> BoundRegions { get; private set; } = null!;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they be associated with
        /// the subnet ID that matches the value specified by this field. `auth_type`
        /// must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
        /// to use this constraint.
        /// </summary>
        [Output("boundSubnetIds")]
        public Output<ImmutableArray<string>> BoundSubnetIds { get; private set; } = null!;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that they be associated with the VPC ID
        /// that matches the value specified by this field. `auth_type` must be set to
        /// `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
        /// constraint.
        /// </summary>
        [Output("boundVpcIds")]
        public Output<ImmutableArray<string>> BoundVpcIds { get; private set; } = null!;

        /// <summary>
        /// IF set to `true`, only allows a
        /// single token to be granted per instance ID. This can only be set when
        /// `auth_type` is set to `ec2`.
        /// </summary>
        [Output("disallowReauthentication")]
        public Output<bool?> DisallowReauthentication { get; private set; } = null!;

        /// <summary>
        /// When `inferred_entity_type` is set, this
        /// is the region to search for the inferred entities. Required if
        /// `inferred_entity_type` is set. This only applies when `auth_type` is set to
        /// `iam`.
        /// </summary>
        [Output("inferredAwsRegion")]
        public Output<string?> InferredAwsRegion { get; private set; } = null!;

        /// <summary>
        /// If set, instructs Vault to turn on
        /// inferencing. The only valid value is `ec2_instance`, which instructs Vault to
        /// infer that the role comes from an EC2 instance in an IAM instance profile.
        /// This only applies when `auth_type` is set to `iam`.
        /// </summary>
        [Output("inferredEntityType")]
        public Output<string?> InferredEntityType { get; private set; } = null!;

        /// <summary>
        /// The maximum allowed lifetime of tokens
        /// issued using this role, provided as a number of seconds.
        /// </summary>
        [Output("maxTtl")]
        public Output<int?> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// If set, indicates that the
        /// token generated using this role should never expire. The token should be renewed within the
        /// duration specified by this value. At each renewal, the token's TTL will be set to the
        /// value of this field. Specified in seconds.
        /// </summary>
        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        /// <summary>
        /// An array of strings
        /// specifying the policies to be set on tokens issued using this role.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;

        /// <summary>
        /// If set to `true`, the
        /// `bound_iam_principal_arns` are resolved to [AWS Unique
        /// IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
        /// for the bound principal ARN. This field is ignored when a
        /// `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more
        /// closely mimics the behavior of AWS services in that if an IAM user or role is
        /// deleted and a new one is recreated with the same name, those new users or
        /// roles won't get access to roles in Vault that were permissioned to the prior
        /// principals of the same name. Defaults to `true`.
        /// Once set to `true`, this cannot be changed to `false` without recreating the role.
        /// </summary>
        [Output("resolveAwsUniqueIds")]
        public Output<bool?> ResolveAwsUniqueIds { get; private set; } = null!;

        /// <summary>
        /// The name of the role.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// If set, enable role tags for this role. The value set
        /// for this field should be the key of the tag on the EC2 instance. `auth_type`
        /// must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
        /// to use this constraint.
        /// </summary>
        [Output("roleTag")]
        public Output<string?> RoleTag { get; private set; } = null!;

        /// <summary>
        /// List of CIDR blocks; if set, specifies blocks of IP
        /// addresses which can authenticate successfully, and ties the resulting token to these blocks
        /// as well.
        /// </summary>
        [Output("tokenBoundCidrs")]
        public Output<ImmutableArray<string>> TokenBoundCidrs { get; private set; } = null!;

        /// <summary>
        /// If set, will encode an
        /// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
        /// onto the token in number of seconds. This is a hard cap even if `token_ttl` and
        /// `token_max_ttl` would otherwise allow a renewal.
        /// </summary>
        [Output("tokenExplicitMaxTtl")]
        public Output<int?> TokenExplicitMaxTtl { get; private set; } = null!;

        /// <summary>
        /// The maximum lifetime for generated tokens in number of seconds.
        /// Its current value will be referenced at renewal time.
        /// </summary>
        [Output("tokenMaxTtl")]
        public Output<int?> TokenMaxTtl { get; private set; } = null!;

        /// <summary>
        /// If set, the default policy will not be set on
        /// generated tokens; otherwise it will be added to the policies set in token_policies.
        /// </summary>
        [Output("tokenNoDefaultPolicy")]
        public Output<bool?> TokenNoDefaultPolicy { get; private set; } = null!;

        /// <summary>
        /// The
        /// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
        /// if any, in number of seconds to set on the token.
        /// </summary>
        [Output("tokenNumUses")]
        public Output<int?> TokenNumUses { get; private set; } = null!;

        /// <summary>
        /// If set, indicates that the
        /// token generated using this role should never expire. The token should be renewed within the
        /// duration specified by this value. At each renewal, the token's TTL will be set to the
        /// value of this field. Specified in seconds.
        /// </summary>
        [Output("tokenPeriod")]
        public Output<int?> TokenPeriod { get; private set; } = null!;

        /// <summary>
        /// List of policies to encode onto generated tokens. Depending
        /// on the auth method, this list may be supplemented by user/group/other values.
        /// </summary>
        [Output("tokenPolicies")]
        public Output<ImmutableArray<string>> TokenPolicies { get; private set; } = null!;

        /// <summary>
        /// The incremental lifetime for generated tokens in number of seconds.
        /// Its current value will be referenced at renewal time.
        /// </summary>
        [Output("tokenTtl")]
        public Output<int?> TokenTtl { get; private set; } = null!;

        /// <summary>
        /// The type of token that should be generated. Can be `service`,
        /// `batch`, or `default` to use the mount's tuned default (which unless changed will be
        /// `service` tokens). For token store roles, there are two additional possibilities:
        /// `default-service` and `default-batch` which specify the type to return unless the client
        /// requests a different type at generation time.
        /// </summary>
        [Output("tokenType")]
        public Output<string?> TokenType { get; private set; } = null!;

        /// <summary>
        /// The TTL period of tokens issued
        /// using this role, provided as a number of seconds.
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a AuthBackendRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthBackendRole(string name, AuthBackendRoleArgs args, CustomResourceOptions? options = null)
            : base("vault:aws/authBackendRole:AuthBackendRole", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private AuthBackendRole(string name, Input<string> id, AuthBackendRoleState? state = null, CustomResourceOptions? options = null)
            : base("vault:aws/authBackendRole:AuthBackendRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthBackendRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthBackendRole Get(string name, Input<string> id, AuthBackendRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthBackendRole(name, id, state, options);
        }
    }

    public sealed class AuthBackendRoleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, allows migration of
        /// the underlying instance where the client resides.
        /// </summary>
        [Input("allowInstanceMigration")]
        public Input<bool>? AllowInstanceMigration { get; set; }

        /// <summary>
        /// The auth type permitted for this role. Valid choices
        /// are `ec2` and `iam`. Defaults to `iam`.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        [Input("boundAccountIds")]
        private InputList<string>? _boundAccountIds;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they should be using the
        /// account ID specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundAccountIds
        {
            get => _boundAccountIds ?? (_boundAccountIds = new InputList<string>());
            set => _boundAccountIds = value;
        }

        [Input("boundAmiIds")]
        private InputList<string>? _boundAmiIds;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that they should be using the AMI ID
        /// specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundAmiIds
        {
            get => _boundAmiIds ?? (_boundAmiIds = new InputList<string>());
            set => _boundAmiIds = value;
        }

        [Input("boundEc2InstanceIds")]
        private InputList<string>? _boundEc2InstanceIds;

        /// <summary>
        /// Only EC2 instances that match this instance ID will be permitted to log in.
        /// </summary>
        public InputList<string> BoundEc2InstanceIds
        {
            get => _boundEc2InstanceIds ?? (_boundEc2InstanceIds = new InputList<string>());
            set => _boundEc2InstanceIds = value;
        }

        [Input("boundIamInstanceProfileArns")]
        private InputList<string>? _boundIamInstanceProfileArns;

        /// <summary>
        /// If set, defines a constraint on
        /// the EC2 instances that can perform the login operation that they must be
        /// associated with an IAM instance profile ARN which has a prefix that matches
        /// the value specified by this field. The value is prefix-matched as though it
        /// were a glob ending in `*`. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundIamInstanceProfileArns
        {
            get => _boundIamInstanceProfileArns ?? (_boundIamInstanceProfileArns = new InputList<string>());
            set => _boundIamInstanceProfileArns = value;
        }

        [Input("boundIamPrincipalArns")]
        private InputList<string>? _boundIamPrincipalArns;

        /// <summary>
        /// If set, defines the IAM principal that
        /// must be authenticated when `auth_type` is set to `iam`. Wildcards are
        /// supported at the end of the ARN.
        /// </summary>
        public InputList<string> BoundIamPrincipalArns
        {
            get => _boundIamPrincipalArns ?? (_boundIamPrincipalArns = new InputList<string>());
            set => _boundIamPrincipalArns = value;
        }

        [Input("boundIamRoleArns")]
        private InputList<string>? _boundIamRoleArns;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they must match the IAM
        /// role ARN specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundIamRoleArns
        {
            get => _boundIamRoleArns ?? (_boundIamRoleArns = new InputList<string>());
            set => _boundIamRoleArns = value;
        }

        [Input("boundRegions")]
        private InputList<string>? _boundRegions;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that the region in their identity
        /// document must match the one specified by this field. `auth_type` must be set
        /// to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
        /// constraint.
        /// </summary>
        public InputList<string> BoundRegions
        {
            get => _boundRegions ?? (_boundRegions = new InputList<string>());
            set => _boundRegions = value;
        }

        [Input("boundSubnetIds")]
        private InputList<string>? _boundSubnetIds;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they be associated with
        /// the subnet ID that matches the value specified by this field. `auth_type`
        /// must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
        /// to use this constraint.
        /// </summary>
        public InputList<string> BoundSubnetIds
        {
            get => _boundSubnetIds ?? (_boundSubnetIds = new InputList<string>());
            set => _boundSubnetIds = value;
        }

        [Input("boundVpcIds")]
        private InputList<string>? _boundVpcIds;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that they be associated with the VPC ID
        /// that matches the value specified by this field. `auth_type` must be set to
        /// `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
        /// constraint.
        /// </summary>
        public InputList<string> BoundVpcIds
        {
            get => _boundVpcIds ?? (_boundVpcIds = new InputList<string>());
            set => _boundVpcIds = value;
        }

        /// <summary>
        /// IF set to `true`, only allows a
        /// single token to be granted per instance ID. This can only be set when
        /// `auth_type` is set to `ec2`.
        /// </summary>
        [Input("disallowReauthentication")]
        public Input<bool>? DisallowReauthentication { get; set; }

        /// <summary>
        /// When `inferred_entity_type` is set, this
        /// is the region to search for the inferred entities. Required if
        /// `inferred_entity_type` is set. This only applies when `auth_type` is set to
        /// `iam`.
        /// </summary>
        [Input("inferredAwsRegion")]
        public Input<string>? InferredAwsRegion { get; set; }

        /// <summary>
        /// If set, instructs Vault to turn on
        /// inferencing. The only valid value is `ec2_instance`, which instructs Vault to
        /// infer that the role comes from an EC2 instance in an IAM instance profile.
        /// This only applies when `auth_type` is set to `iam`.
        /// </summary>
        [Input("inferredEntityType")]
        public Input<string>? InferredEntityType { get; set; }

        /// <summary>
        /// The maximum allowed lifetime of tokens
        /// issued using this role, provided as a number of seconds.
        /// </summary>
        [Input("maxTtl")]
        public Input<int>? MaxTtl { get; set; }

        /// <summary>
        /// If set, indicates that the
        /// token generated using this role should never expire. The token should be renewed within the
        /// duration specified by this value. At each renewal, the token's TTL will be set to the
        /// value of this field. Specified in seconds.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// An array of strings
        /// specifying the policies to be set on tokens issued using this role.
        /// </summary>
        [Obsolete(@"use `token_policies` instead if you are running Vault >= 1.2")]
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        /// <summary>
        /// If set to `true`, the
        /// `bound_iam_principal_arns` are resolved to [AWS Unique
        /// IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
        /// for the bound principal ARN. This field is ignored when a
        /// `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more
        /// closely mimics the behavior of AWS services in that if an IAM user or role is
        /// deleted and a new one is recreated with the same name, those new users or
        /// roles won't get access to roles in Vault that were permissioned to the prior
        /// principals of the same name. Defaults to `true`.
        /// Once set to `true`, this cannot be changed to `false` without recreating the role.
        /// </summary>
        [Input("resolveAwsUniqueIds")]
        public Input<bool>? ResolveAwsUniqueIds { get; set; }

        /// <summary>
        /// The name of the role.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// If set, enable role tags for this role. The value set
        /// for this field should be the key of the tag on the EC2 instance. `auth_type`
        /// must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
        /// to use this constraint.
        /// </summary>
        [Input("roleTag")]
        public Input<string>? RoleTag { get; set; }

        [Input("tokenBoundCidrs")]
        private InputList<string>? _tokenBoundCidrs;

        /// <summary>
        /// List of CIDR blocks; if set, specifies blocks of IP
        /// addresses which can authenticate successfully, and ties the resulting token to these blocks
        /// as well.
        /// </summary>
        public InputList<string> TokenBoundCidrs
        {
            get => _tokenBoundCidrs ?? (_tokenBoundCidrs = new InputList<string>());
            set => _tokenBoundCidrs = value;
        }

        /// <summary>
        /// If set, will encode an
        /// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
        /// onto the token in number of seconds. This is a hard cap even if `token_ttl` and
        /// `token_max_ttl` would otherwise allow a renewal.
        /// </summary>
        [Input("tokenExplicitMaxTtl")]
        public Input<int>? TokenExplicitMaxTtl { get; set; }

        /// <summary>
        /// The maximum lifetime for generated tokens in number of seconds.
        /// Its current value will be referenced at renewal time.
        /// </summary>
        [Input("tokenMaxTtl")]
        public Input<int>? TokenMaxTtl { get; set; }

        /// <summary>
        /// If set, the default policy will not be set on
        /// generated tokens; otherwise it will be added to the policies set in token_policies.
        /// </summary>
        [Input("tokenNoDefaultPolicy")]
        public Input<bool>? TokenNoDefaultPolicy { get; set; }

        /// <summary>
        /// The
        /// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
        /// if any, in number of seconds to set on the token.
        /// </summary>
        [Input("tokenNumUses")]
        public Input<int>? TokenNumUses { get; set; }

        /// <summary>
        /// If set, indicates that the
        /// token generated using this role should never expire. The token should be renewed within the
        /// duration specified by this value. At each renewal, the token's TTL will be set to the
        /// value of this field. Specified in seconds.
        /// </summary>
        [Input("tokenPeriod")]
        public Input<int>? TokenPeriod { get; set; }

        [Input("tokenPolicies")]
        private InputList<string>? _tokenPolicies;

        /// <summary>
        /// List of policies to encode onto generated tokens. Depending
        /// on the auth method, this list may be supplemented by user/group/other values.
        /// </summary>
        public InputList<string> TokenPolicies
        {
            get => _tokenPolicies ?? (_tokenPolicies = new InputList<string>());
            set => _tokenPolicies = value;
        }

        /// <summary>
        /// The incremental lifetime for generated tokens in number of seconds.
        /// Its current value will be referenced at renewal time.
        /// </summary>
        [Input("tokenTtl")]
        public Input<int>? TokenTtl { get; set; }

        /// <summary>
        /// The type of token that should be generated. Can be `service`,
        /// `batch`, or `default` to use the mount's tuned default (which unless changed will be
        /// `service` tokens). For token store roles, there are two additional possibilities:
        /// `default-service` and `default-batch` which specify the type to return unless the client
        /// requests a different type at generation time.
        /// </summary>
        [Input("tokenType")]
        public Input<string>? TokenType { get; set; }

        /// <summary>
        /// The TTL period of tokens issued
        /// using this role, provided as a number of seconds.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public AuthBackendRoleArgs()
        {
        }
    }

    public sealed class AuthBackendRoleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `true`, allows migration of
        /// the underlying instance where the client resides.
        /// </summary>
        [Input("allowInstanceMigration")]
        public Input<bool>? AllowInstanceMigration { get; set; }

        /// <summary>
        /// The auth type permitted for this role. Valid choices
        /// are `ec2` and `iam`. Defaults to `iam`.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        [Input("boundAccountIds")]
        private InputList<string>? _boundAccountIds;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they should be using the
        /// account ID specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundAccountIds
        {
            get => _boundAccountIds ?? (_boundAccountIds = new InputList<string>());
            set => _boundAccountIds = value;
        }

        [Input("boundAmiIds")]
        private InputList<string>? _boundAmiIds;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that they should be using the AMI ID
        /// specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundAmiIds
        {
            get => _boundAmiIds ?? (_boundAmiIds = new InputList<string>());
            set => _boundAmiIds = value;
        }

        [Input("boundEc2InstanceIds")]
        private InputList<string>? _boundEc2InstanceIds;

        /// <summary>
        /// Only EC2 instances that match this instance ID will be permitted to log in.
        /// </summary>
        public InputList<string> BoundEc2InstanceIds
        {
            get => _boundEc2InstanceIds ?? (_boundEc2InstanceIds = new InputList<string>());
            set => _boundEc2InstanceIds = value;
        }

        [Input("boundIamInstanceProfileArns")]
        private InputList<string>? _boundIamInstanceProfileArns;

        /// <summary>
        /// If set, defines a constraint on
        /// the EC2 instances that can perform the login operation that they must be
        /// associated with an IAM instance profile ARN which has a prefix that matches
        /// the value specified by this field. The value is prefix-matched as though it
        /// were a glob ending in `*`. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundIamInstanceProfileArns
        {
            get => _boundIamInstanceProfileArns ?? (_boundIamInstanceProfileArns = new InputList<string>());
            set => _boundIamInstanceProfileArns = value;
        }

        [Input("boundIamPrincipalArns")]
        private InputList<string>? _boundIamPrincipalArns;

        /// <summary>
        /// If set, defines the IAM principal that
        /// must be authenticated when `auth_type` is set to `iam`. Wildcards are
        /// supported at the end of the ARN.
        /// </summary>
        public InputList<string> BoundIamPrincipalArns
        {
            get => _boundIamPrincipalArns ?? (_boundIamPrincipalArns = new InputList<string>());
            set => _boundIamPrincipalArns = value;
        }

        [Input("boundIamRoleArns")]
        private InputList<string>? _boundIamRoleArns;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they must match the IAM
        /// role ARN specified by this field. `auth_type` must be set to `ec2` or
        /// `inferred_entity_type` must be set to `ec2_instance` to use this constraint.
        /// </summary>
        public InputList<string> BoundIamRoleArns
        {
            get => _boundIamRoleArns ?? (_boundIamRoleArns = new InputList<string>());
            set => _boundIamRoleArns = value;
        }

        [Input("boundRegions")]
        private InputList<string>? _boundRegions;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that the region in their identity
        /// document must match the one specified by this field. `auth_type` must be set
        /// to `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
        /// constraint.
        /// </summary>
        public InputList<string> BoundRegions
        {
            get => _boundRegions ?? (_boundRegions = new InputList<string>());
            set => _boundRegions = value;
        }

        [Input("boundSubnetIds")]
        private InputList<string>? _boundSubnetIds;

        /// <summary>
        /// If set, defines a constraint on the EC2
        /// instances that can perform the login operation that they be associated with
        /// the subnet ID that matches the value specified by this field. `auth_type`
        /// must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
        /// to use this constraint.
        /// </summary>
        public InputList<string> BoundSubnetIds
        {
            get => _boundSubnetIds ?? (_boundSubnetIds = new InputList<string>());
            set => _boundSubnetIds = value;
        }

        [Input("boundVpcIds")]
        private InputList<string>? _boundVpcIds;

        /// <summary>
        /// If set, defines a constraint on the EC2 instances
        /// that can perform the login operation that they be associated with the VPC ID
        /// that matches the value specified by this field. `auth_type` must be set to
        /// `ec2` or `inferred_entity_type` must be set to `ec2_instance` to use this
        /// constraint.
        /// </summary>
        public InputList<string> BoundVpcIds
        {
            get => _boundVpcIds ?? (_boundVpcIds = new InputList<string>());
            set => _boundVpcIds = value;
        }

        /// <summary>
        /// IF set to `true`, only allows a
        /// single token to be granted per instance ID. This can only be set when
        /// `auth_type` is set to `ec2`.
        /// </summary>
        [Input("disallowReauthentication")]
        public Input<bool>? DisallowReauthentication { get; set; }

        /// <summary>
        /// When `inferred_entity_type` is set, this
        /// is the region to search for the inferred entities. Required if
        /// `inferred_entity_type` is set. This only applies when `auth_type` is set to
        /// `iam`.
        /// </summary>
        [Input("inferredAwsRegion")]
        public Input<string>? InferredAwsRegion { get; set; }

        /// <summary>
        /// If set, instructs Vault to turn on
        /// inferencing. The only valid value is `ec2_instance`, which instructs Vault to
        /// infer that the role comes from an EC2 instance in an IAM instance profile.
        /// This only applies when `auth_type` is set to `iam`.
        /// </summary>
        [Input("inferredEntityType")]
        public Input<string>? InferredEntityType { get; set; }

        /// <summary>
        /// The maximum allowed lifetime of tokens
        /// issued using this role, provided as a number of seconds.
        /// </summary>
        [Input("maxTtl")]
        public Input<int>? MaxTtl { get; set; }

        /// <summary>
        /// If set, indicates that the
        /// token generated using this role should never expire. The token should be renewed within the
        /// duration specified by this value. At each renewal, the token's TTL will be set to the
        /// value of this field. Specified in seconds.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// An array of strings
        /// specifying the policies to be set on tokens issued using this role.
        /// </summary>
        [Obsolete(@"use `token_policies` instead if you are running Vault >= 1.2")]
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        /// <summary>
        /// If set to `true`, the
        /// `bound_iam_principal_arns` are resolved to [AWS Unique
        /// IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
        /// for the bound principal ARN. This field is ignored when a
        /// `bound_iam_principal_arn` ends in a wildcard. Resolving to unique IDs more
        /// closely mimics the behavior of AWS services in that if an IAM user or role is
        /// deleted and a new one is recreated with the same name, those new users or
        /// roles won't get access to roles in Vault that were permissioned to the prior
        /// principals of the same name. Defaults to `true`.
        /// Once set to `true`, this cannot be changed to `false` without recreating the role.
        /// </summary>
        [Input("resolveAwsUniqueIds")]
        public Input<bool>? ResolveAwsUniqueIds { get; set; }

        /// <summary>
        /// The name of the role.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// If set, enable role tags for this role. The value set
        /// for this field should be the key of the tag on the EC2 instance. `auth_type`
        /// must be set to `ec2` or `inferred_entity_type` must be set to `ec2_instance`
        /// to use this constraint.
        /// </summary>
        [Input("roleTag")]
        public Input<string>? RoleTag { get; set; }

        [Input("tokenBoundCidrs")]
        private InputList<string>? _tokenBoundCidrs;

        /// <summary>
        /// List of CIDR blocks; if set, specifies blocks of IP
        /// addresses which can authenticate successfully, and ties the resulting token to these blocks
        /// as well.
        /// </summary>
        public InputList<string> TokenBoundCidrs
        {
            get => _tokenBoundCidrs ?? (_tokenBoundCidrs = new InputList<string>());
            set => _tokenBoundCidrs = value;
        }

        /// <summary>
        /// If set, will encode an
        /// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
        /// onto the token in number of seconds. This is a hard cap even if `token_ttl` and
        /// `token_max_ttl` would otherwise allow a renewal.
        /// </summary>
        [Input("tokenExplicitMaxTtl")]
        public Input<int>? TokenExplicitMaxTtl { get; set; }

        /// <summary>
        /// The maximum lifetime for generated tokens in number of seconds.
        /// Its current value will be referenced at renewal time.
        /// </summary>
        [Input("tokenMaxTtl")]
        public Input<int>? TokenMaxTtl { get; set; }

        /// <summary>
        /// If set, the default policy will not be set on
        /// generated tokens; otherwise it will be added to the policies set in token_policies.
        /// </summary>
        [Input("tokenNoDefaultPolicy")]
        public Input<bool>? TokenNoDefaultPolicy { get; set; }

        /// <summary>
        /// The
        /// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
        /// if any, in number of seconds to set on the token.
        /// </summary>
        [Input("tokenNumUses")]
        public Input<int>? TokenNumUses { get; set; }

        /// <summary>
        /// If set, indicates that the
        /// token generated using this role should never expire. The token should be renewed within the
        /// duration specified by this value. At each renewal, the token's TTL will be set to the
        /// value of this field. Specified in seconds.
        /// </summary>
        [Input("tokenPeriod")]
        public Input<int>? TokenPeriod { get; set; }

        [Input("tokenPolicies")]
        private InputList<string>? _tokenPolicies;

        /// <summary>
        /// List of policies to encode onto generated tokens. Depending
        /// on the auth method, this list may be supplemented by user/group/other values.
        /// </summary>
        public InputList<string> TokenPolicies
        {
            get => _tokenPolicies ?? (_tokenPolicies = new InputList<string>());
            set => _tokenPolicies = value;
        }

        /// <summary>
        /// The incremental lifetime for generated tokens in number of seconds.
        /// Its current value will be referenced at renewal time.
        /// </summary>
        [Input("tokenTtl")]
        public Input<int>? TokenTtl { get; set; }

        /// <summary>
        /// The type of token that should be generated. Can be `service`,
        /// `batch`, or `default` to use the mount's tuned default (which unless changed will be
        /// `service` tokens). For token store roles, there are two additional possibilities:
        /// `default-service` and `default-batch` which specify the type to return unless the client
        /// requests a different type at generation time.
        /// </summary>
        [Input("tokenType")]
        public Input<string>? TokenType { get; set; }

        /// <summary>
        /// The TTL period of tokens issued
        /// using this role, provided as a number of seconds.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public AuthBackendRoleState()
        {
        }
    }
}
