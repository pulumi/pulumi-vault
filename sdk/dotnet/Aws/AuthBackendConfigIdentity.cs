// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Aws
{
    /// <summary>
    /// Manages an AWS auth backend identity configuration in a Vault server. This configuration defines how Vault interacts
    /// with the identity store. See the [Vault documentation](https://www.vaultproject.io/docs/auth/aws.html) for more
    /// information.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aws = new Vault.AuthBackend("aws", new()
    ///     {
    ///         Type = "aws",
    ///     });
    /// 
    ///     var example = new Vault.Aws.AuthBackendConfigIdentity("example", new()
    ///     {
    ///         Backend = aws.Path,
    ///         IamAlias = "full_arn",
    ///         IamMetadatas = new[]
    ///         {
    ///             "canonical_arn",
    ///             "account_id",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// AWS auth backend identity config can be imported using `auth/`, the `backend` path, and `/config/identity` e.g.
    /// 
    /// ```sh
    /// $ pulumi import vault:aws/authBackendConfigIdentity:AuthBackendConfigIdentity example auth/aws/config/identity
    /// ```
    /// </summary>
    [VaultResourceType("vault:aws/authBackendConfigIdentity:AuthBackendConfigIdentity")]
    public partial class AuthBackendConfigIdentity : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Output("backend")]
        public Output<string?> Backend { get; private set; } = null!;

        /// <summary>
        /// How to generate the identity alias when using the ec2 auth method. Valid choices are
        /// `role_id`, `instance_id`, and `image_id`. Defaults to `role_id`
        /// </summary>
        [Output("ec2Alias")]
        public Output<string?> Ec2Alias { get; private set; } = null!;

        /// <summary>
        /// The metadata to include on the token returned by the `login` endpoint. This metadata will be
        /// added to both audit logs, and on the `ec2_alias`
        /// </summary>
        [Output("ec2Metadatas")]
        public Output<ImmutableArray<string>> Ec2Metadatas { get; private set; } = null!;

        /// <summary>
        /// How to generate the identity alias when using the iam auth method. Valid choices are
        /// `role_id`, `unique_id`, and `full_arn`. Defaults to `role_id`
        /// </summary>
        [Output("iamAlias")]
        public Output<string?> IamAlias { get; private set; } = null!;

        /// <summary>
        /// The metadata to include on the token returned by the `login` endpoint. This metadata will be
        /// added to both audit logs, and on the `iam_alias`
        /// </summary>
        [Output("iamMetadatas")]
        public Output<ImmutableArray<string>> IamMetadatas { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;


        /// <summary>
        /// Create a AuthBackendConfigIdentity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthBackendConfigIdentity(string name, AuthBackendConfigIdentityArgs? args = null, CustomResourceOptions? options = null)
            : base("vault:aws/authBackendConfigIdentity:AuthBackendConfigIdentity", name, args ?? new AuthBackendConfigIdentityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthBackendConfigIdentity(string name, Input<string> id, AuthBackendConfigIdentityState? state = null, CustomResourceOptions? options = null)
            : base("vault:aws/authBackendConfigIdentity:AuthBackendConfigIdentity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthBackendConfigIdentity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthBackendConfigIdentity Get(string name, Input<string> id, AuthBackendConfigIdentityState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthBackendConfigIdentity(name, id, state, options);
        }
    }

    public sealed class AuthBackendConfigIdentityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// How to generate the identity alias when using the ec2 auth method. Valid choices are
        /// `role_id`, `instance_id`, and `image_id`. Defaults to `role_id`
        /// </summary>
        [Input("ec2Alias")]
        public Input<string>? Ec2Alias { get; set; }

        [Input("ec2Metadatas")]
        private InputList<string>? _ec2Metadatas;

        /// <summary>
        /// The metadata to include on the token returned by the `login` endpoint. This metadata will be
        /// added to both audit logs, and on the `ec2_alias`
        /// </summary>
        public InputList<string> Ec2Metadatas
        {
            get => _ec2Metadatas ?? (_ec2Metadatas = new InputList<string>());
            set => _ec2Metadatas = value;
        }

        /// <summary>
        /// How to generate the identity alias when using the iam auth method. Valid choices are
        /// `role_id`, `unique_id`, and `full_arn`. Defaults to `role_id`
        /// </summary>
        [Input("iamAlias")]
        public Input<string>? IamAlias { get; set; }

        [Input("iamMetadatas")]
        private InputList<string>? _iamMetadatas;

        /// <summary>
        /// The metadata to include on the token returned by the `login` endpoint. This metadata will be
        /// added to both audit logs, and on the `iam_alias`
        /// </summary>
        public InputList<string> IamMetadatas
        {
            get => _iamMetadatas ?? (_iamMetadatas = new InputList<string>());
            set => _iamMetadatas = value;
        }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public AuthBackendConfigIdentityArgs()
        {
        }
        public static new AuthBackendConfigIdentityArgs Empty => new AuthBackendConfigIdentityArgs();
    }

    public sealed class AuthBackendConfigIdentityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// How to generate the identity alias when using the ec2 auth method. Valid choices are
        /// `role_id`, `instance_id`, and `image_id`. Defaults to `role_id`
        /// </summary>
        [Input("ec2Alias")]
        public Input<string>? Ec2Alias { get; set; }

        [Input("ec2Metadatas")]
        private InputList<string>? _ec2Metadatas;

        /// <summary>
        /// The metadata to include on the token returned by the `login` endpoint. This metadata will be
        /// added to both audit logs, and on the `ec2_alias`
        /// </summary>
        public InputList<string> Ec2Metadatas
        {
            get => _ec2Metadatas ?? (_ec2Metadatas = new InputList<string>());
            set => _ec2Metadatas = value;
        }

        /// <summary>
        /// How to generate the identity alias when using the iam auth method. Valid choices are
        /// `role_id`, `unique_id`, and `full_arn`. Defaults to `role_id`
        /// </summary>
        [Input("iamAlias")]
        public Input<string>? IamAlias { get; set; }

        [Input("iamMetadatas")]
        private InputList<string>? _iamMetadatas;

        /// <summary>
        /// The metadata to include on the token returned by the `login` endpoint. This metadata will be
        /// added to both audit logs, and on the `iam_alias`
        /// </summary>
        public InputList<string> IamMetadatas
        {
            get => _iamMetadatas ?? (_iamMetadatas = new InputList<string>());
            set => _iamMetadatas = value;
        }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public AuthBackendConfigIdentityState()
        {
        }
        public static new AuthBackendConfigIdentityState Empty => new AuthBackendConfigIdentityState();
    }
}
