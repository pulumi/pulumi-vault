// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Transit
{
    public static class GetEncrypt
    {
        /// <summary>
        /// This is a data source which can be used to encrypt plaintext using a Vault Transit key.
        /// </summary>
        public static Task<GetEncryptResult> InvokeAsync(GetEncryptArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEncryptResult>("vault:transit/getEncrypt:getEncrypt", args ?? new GetEncryptArgs(), options.WithDefaults());

        /// <summary>
        /// This is a data source which can be used to encrypt plaintext using a Vault Transit key.
        /// </summary>
        public static Output<GetEncryptResult> Invoke(GetEncryptInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptResult>("vault:transit/getEncrypt:getEncrypt", args ?? new GetEncryptInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This is a data source which can be used to encrypt plaintext using a Vault Transit key.
        /// </summary>
        public static Output<GetEncryptResult> Invoke(GetEncryptInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptResult>("vault:transit/getEncrypt:getEncrypt", args ?? new GetEncryptInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEncryptArgs : global::Pulumi.InvokeArgs
    {
        [Input("backend", required: true)]
        public string Backend { get; set; } = null!;

        [Input("context")]
        public string? Context { get; set; }

        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        [Input("keyVersion")]
        public int? KeyVersion { get; set; }

        [Input("namespace")]
        public string? Namespace { get; set; }

        [Input("plaintext", required: true)]
        private string? _plaintext;
        public string? Plaintext
        {
            get => _plaintext;
            set => _plaintext = value;
        }

        public GetEncryptArgs()
        {
        }
        public static new GetEncryptArgs Empty => new GetEncryptArgs();
    }

    public sealed class GetEncryptInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        [Input("context")]
        public Input<string>? Context { get; set; }

        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("keyVersion")]
        public Input<int>? KeyVersion { get; set; }

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("plaintext", required: true)]
        private Input<string>? _plaintext;
        public Input<string>? Plaintext
        {
            get => _plaintext;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plaintext = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetEncryptInvokeArgs()
        {
        }
        public static new GetEncryptInvokeArgs Empty => new GetEncryptInvokeArgs();
    }


    [OutputType]
    public sealed class GetEncryptResult
    {
        public readonly string Backend;
        /// <summary>
        /// Encrypted ciphertext returned from Vault
        /// </summary>
        public readonly string Ciphertext;
        public readonly string? Context;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Key;
        public readonly int? KeyVersion;
        public readonly string? Namespace;
        public readonly string Plaintext;

        [OutputConstructor]
        private GetEncryptResult(
            string backend,

            string ciphertext,

            string? context,

            string id,

            string key,

            int? keyVersion,

            string? @namespace,

            string plaintext)
        {
            Backend = backend;
            Ciphertext = ciphertext;
            Context = context;
            Id = id;
            Key = key;
            KeyVersion = keyVersion;
            Namespace = @namespace;
            Plaintext = plaintext;
        }
    }
}
