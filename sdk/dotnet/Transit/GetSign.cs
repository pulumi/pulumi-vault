// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Transit
{
    public static class GetSign
    {
        /// <summary>
        /// This is a data source which can be used to generate a signature using a Vault Transit key.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetSignResult> InvokeAsync(GetSignArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSignResult>("vault:transit/getSign:getSign", args ?? new GetSignArgs(), options.WithDefaults());

        /// <summary>
        /// This is a data source which can be used to generate a signature using a Vault Transit key.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetSignResult> Invoke(GetSignInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSignResult>("vault:transit/getSign:getSign", args ?? new GetSignInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This is a data source which can be used to generate a signature using a Vault Transit key.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetSignResult> Invoke(GetSignInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSignResult>("vault:transit/getSign:getSign", args ?? new GetSignInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSignArgs : global::Pulumi.InvokeArgs
    {
        [Input("batchInputs")]
        private List<ImmutableDictionary<string, string>>? _batchInputs;
        public List<ImmutableDictionary<string, string>> BatchInputs
        {
            get => _batchInputs ?? (_batchInputs = new List<ImmutableDictionary<string, string>>());
            set => _batchInputs = value;
        }

        [Input("batchResults")]
        private List<ImmutableDictionary<string, string>>? _batchResults;

        /// <summary>
        /// The results returned from Vault if using `BatchInput`
        /// </summary>
        public List<ImmutableDictionary<string, string>> BatchResults
        {
            get => _batchResults ?? (_batchResults = new List<ImmutableDictionary<string, string>>());
            set => _batchResults = value;
        }

        [Input("context")]
        public string? Context { get; set; }

        [Input("hashAlgorithm")]
        public string? HashAlgorithm { get; set; }

        [Input("input")]
        public string? Input { get; set; }

        [Input("keyVersion")]
        public int? KeyVersion { get; set; }

        [Input("marshalingAlgorithm")]
        public string? MarshalingAlgorithm { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("namespace")]
        public string? Namespace { get; set; }

        [Input("path", required: true)]
        public string Path { get; set; } = null!;

        [Input("prehashed")]
        public bool? Prehashed { get; set; }

        [Input("reference")]
        public string? Reference { get; set; }

        [Input("saltLength")]
        public string? SaltLength { get; set; }

        /// <summary>
        /// The signature returned from Vault if using `Input`
        /// </summary>
        [Input("signature")]
        public string? Signature { get; set; }

        [Input("signatureAlgorithm")]
        public string? SignatureAlgorithm { get; set; }

        [Input("signatureContext")]
        public string? SignatureContext { get; set; }

        public GetSignArgs()
        {
        }
        public static new GetSignArgs Empty => new GetSignArgs();
    }

    public sealed class GetSignInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("batchInputs")]
        private InputList<ImmutableDictionary<string, string>>? _batchInputs;
        public InputList<ImmutableDictionary<string, string>> BatchInputs
        {
            get => _batchInputs ?? (_batchInputs = new InputList<ImmutableDictionary<string, string>>());
            set => _batchInputs = value;
        }

        [Input("batchResults")]
        private InputList<ImmutableDictionary<string, string>>? _batchResults;

        /// <summary>
        /// The results returned from Vault if using `BatchInput`
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> BatchResults
        {
            get => _batchResults ?? (_batchResults = new InputList<ImmutableDictionary<string, string>>());
            set => _batchResults = value;
        }

        [Input("context")]
        public Input<string>? Context { get; set; }

        [Input("hashAlgorithm")]
        public Input<string>? HashAlgorithm { get; set; }

        [Input("input")]
        public Input<string>? Input { get; set; }

        [Input("keyVersion")]
        public Input<int>? KeyVersion { get; set; }

        [Input("marshalingAlgorithm")]
        public Input<string>? MarshalingAlgorithm { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("prehashed")]
        public Input<bool>? Prehashed { get; set; }

        [Input("reference")]
        public Input<string>? Reference { get; set; }

        [Input("saltLength")]
        public Input<string>? SaltLength { get; set; }

        /// <summary>
        /// The signature returned from Vault if using `Input`
        /// </summary>
        [Input("signature")]
        public Input<string>? Signature { get; set; }

        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        [Input("signatureContext")]
        public Input<string>? SignatureContext { get; set; }

        public GetSignInvokeArgs()
        {
        }
        public static new GetSignInvokeArgs Empty => new GetSignInvokeArgs();
    }


    [OutputType]
    public sealed class GetSignResult
    {
        public readonly ImmutableArray<ImmutableDictionary<string, string>> BatchInputs;
        /// <summary>
        /// The results returned from Vault if using `BatchInput`
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> BatchResults;
        public readonly string? Context;
        public readonly string? HashAlgorithm;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Input;
        public readonly int? KeyVersion;
        public readonly string? MarshalingAlgorithm;
        public readonly string Name;
        public readonly string? Namespace;
        public readonly string Path;
        public readonly bool? Prehashed;
        public readonly string? Reference;
        public readonly string? SaltLength;
        /// <summary>
        /// The signature returned from Vault if using `Input`
        /// </summary>
        public readonly string Signature;
        public readonly string? SignatureAlgorithm;
        public readonly string? SignatureContext;

        [OutputConstructor]
        private GetSignResult(
            ImmutableArray<ImmutableDictionary<string, string>> batchInputs,

            ImmutableArray<ImmutableDictionary<string, string>> batchResults,

            string? context,

            string? hashAlgorithm,

            string id,

            string? input,

            int? keyVersion,

            string? marshalingAlgorithm,

            string name,

            string? @namespace,

            string path,

            bool? prehashed,

            string? reference,

            string? saltLength,

            string signature,

            string? signatureAlgorithm,

            string? signatureContext)
        {
            BatchInputs = batchInputs;
            BatchResults = batchResults;
            Context = context;
            HashAlgorithm = hashAlgorithm;
            Id = id;
            Input = input;
            KeyVersion = keyVersion;
            MarshalingAlgorithm = marshalingAlgorithm;
            Name = name;
            Namespace = @namespace;
            Path = path;
            Prehashed = prehashed;
            Reference = reference;
            SaltLength = saltLength;
            Signature = signature;
            SignatureAlgorithm = signatureAlgorithm;
            SignatureContext = signatureContext;
        }
    }
}
