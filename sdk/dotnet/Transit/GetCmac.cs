// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Transit
{
    public static class GetCmac
    {
        /// <summary>
        /// This is a data source which can be used to generate a CMAC using a Vault Transit key.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Vault.Transit.GetCmac.Invoke(new()
        ///     {
        ///         Path = "transit",
        ///         Name = "test",
        ///         Input = "aGVsbG8gd29ybGQ=",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCmacResult> InvokeAsync(GetCmacArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCmacResult>("vault:transit/getCmac:getCmac", args ?? new GetCmacArgs(), options.WithDefaults());

        /// <summary>
        /// This is a data source which can be used to generate a CMAC using a Vault Transit key.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Vault.Transit.GetCmac.Invoke(new()
        ///     {
        ///         Path = "transit",
        ///         Name = "test",
        ///         Input = "aGVsbG8gd29ybGQ=",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCmacResult> Invoke(GetCmacInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCmacResult>("vault:transit/getCmac:getCmac", args ?? new GetCmacInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This is a data source which can be used to generate a CMAC using a Vault Transit key.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Vault.Transit.GetCmac.Invoke(new()
        ///     {
        ///         Path = "transit",
        ///         Name = "test",
        ///         Input = "aGVsbG8gd29ybGQ=",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCmacResult> Invoke(GetCmacInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCmacResult>("vault:transit/getCmac:getCmac", args ?? new GetCmacInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCmacArgs : global::Pulumi.InvokeArgs
    {
        [Input("batchInputs")]
        private List<ImmutableDictionary<string, string>>? _batchInputs;
        public List<ImmutableDictionary<string, string>> BatchInputs
        {
            get => _batchInputs ?? (_batchInputs = new List<ImmutableDictionary<string, string>>());
            set => _batchInputs = value;
        }

        [Input("batchResults")]
        private List<ImmutableDictionary<string, string>>? _batchResults;

        /// <summary>
        /// The results returned from Vault if using `batch_input`
        /// </summary>
        public List<ImmutableDictionary<string, string>> BatchResults
        {
            get => _batchResults ?? (_batchResults = new List<ImmutableDictionary<string, string>>());
            set => _batchResults = value;
        }

        /// <summary>
        /// The CMAC returned from Vault if using `input`
        /// </summary>
        [Input("cmac")]
        public string? Cmac { get; set; }

        [Input("input")]
        public string? Input { get; set; }

        [Input("keyVersion")]
        public int? KeyVersion { get; set; }

        [Input("macLength")]
        public int? MacLength { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("namespace")]
        public string? Namespace { get; set; }

        [Input("path", required: true)]
        public string Path { get; set; } = null!;

        [Input("urlMacLength")]
        public int? UrlMacLength { get; set; }

        public GetCmacArgs()
        {
        }
        public static new GetCmacArgs Empty => new GetCmacArgs();
    }

    public sealed class GetCmacInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("batchInputs")]
        private InputList<ImmutableDictionary<string, string>>? _batchInputs;
        public InputList<ImmutableDictionary<string, string>> BatchInputs
        {
            get => _batchInputs ?? (_batchInputs = new InputList<ImmutableDictionary<string, string>>());
            set => _batchInputs = value;
        }

        [Input("batchResults")]
        private InputList<ImmutableDictionary<string, string>>? _batchResults;

        /// <summary>
        /// The results returned from Vault if using `batch_input`
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> BatchResults
        {
            get => _batchResults ?? (_batchResults = new InputList<ImmutableDictionary<string, string>>());
            set => _batchResults = value;
        }

        /// <summary>
        /// The CMAC returned from Vault if using `input`
        /// </summary>
        [Input("cmac")]
        public Input<string>? Cmac { get; set; }

        [Input("input")]
        public Input<string>? Input { get; set; }

        [Input("keyVersion")]
        public Input<int>? KeyVersion { get; set; }

        [Input("macLength")]
        public Input<int>? MacLength { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("urlMacLength")]
        public Input<int>? UrlMacLength { get; set; }

        public GetCmacInvokeArgs()
        {
        }
        public static new GetCmacInvokeArgs Empty => new GetCmacInvokeArgs();
    }


    [OutputType]
    public sealed class GetCmacResult
    {
        public readonly ImmutableArray<ImmutableDictionary<string, string>> BatchInputs;
        /// <summary>
        /// The results returned from Vault if using `batch_input`
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> BatchResults;
        /// <summary>
        /// The CMAC returned from Vault if using `input`
        /// </summary>
        public readonly string Cmac;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Input;
        public readonly int? KeyVersion;
        public readonly int? MacLength;
        public readonly string Name;
        public readonly string? Namespace;
        public readonly string Path;
        public readonly int? UrlMacLength;

        [OutputConstructor]
        private GetCmacResult(
            ImmutableArray<ImmutableDictionary<string, string>> batchInputs,

            ImmutableArray<ImmutableDictionary<string, string>> batchResults,

            string cmac,

            string id,

            string? input,

            int? keyVersion,

            int? macLength,

            string name,

            string? @namespace,

            string path,

            int? urlMacLength)
        {
            BatchInputs = batchInputs;
            BatchResults = batchResults;
            Cmac = cmac;
            Id = id;
            Input = input;
            KeyVersion = keyVersion;
            MacLength = macLength;
            Name = name;
            Namespace = @namespace;
            Path = path;
            UrlMacLength = urlMacLength;
        }
    }
}
