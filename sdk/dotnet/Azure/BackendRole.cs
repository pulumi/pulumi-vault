// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Azure
{
    public partial class BackendRole : Pulumi.CustomResource
    {
        /// <summary>
        /// Application Object ID for an existing service principal that will be used instead of creating dynamic service
        /// principals.
        /// </summary>
        [Output("applicationObjectId")]
        public Output<string?> ApplicationObjectId { get; private set; } = null!;

        [Output("azureGroups")]
        public Output<ImmutableArray<Outputs.BackendRoleAzureGroup>> AzureGroups { get; private set; } = null!;

        [Output("azureRoles")]
        public Output<ImmutableArray<Outputs.BackendRoleAzureRole>> AzureRoles { get; private set; } = null!;

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Output("backend")]
        public Output<string?> Backend { get; private set; } = null!;

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Output("maxTtl")]
        public Output<string?> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// Name of the role to create
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Output("ttl")]
        public Output<string?> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a BackendRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendRole(string name, BackendRoleArgs args, CustomResourceOptions? options = null)
            : base("vault:azure/backendRole:BackendRole", name, args ?? new BackendRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendRole(string name, Input<string> id, BackendRoleState? state = null, CustomResourceOptions? options = null)
            : base("vault:azure/backendRole:BackendRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendRole Get(string name, Input<string> id, BackendRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendRole(name, id, state, options);
        }
    }

    public sealed class BackendRoleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Application Object ID for an existing service principal that will be used instead of creating dynamic service
        /// principals.
        /// </summary>
        [Input("applicationObjectId")]
        public Input<string>? ApplicationObjectId { get; set; }

        [Input("azureGroups")]
        private InputList<Inputs.BackendRoleAzureGroupArgs>? _azureGroups;
        public InputList<Inputs.BackendRoleAzureGroupArgs> AzureGroups
        {
            get => _azureGroups ?? (_azureGroups = new InputList<Inputs.BackendRoleAzureGroupArgs>());
            set => _azureGroups = value;
        }

        [Input("azureRoles")]
        private InputList<Inputs.BackendRoleAzureRoleArgs>? _azureRoles;
        public InputList<Inputs.BackendRoleAzureRoleArgs> AzureRoles
        {
            get => _azureRoles ?? (_azureRoles = new InputList<Inputs.BackendRoleAzureRoleArgs>());
            set => _azureRoles = value;
        }

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// Name of the role to create
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public BackendRoleArgs()
        {
        }
    }

    public sealed class BackendRoleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Application Object ID for an existing service principal that will be used instead of creating dynamic service
        /// principals.
        /// </summary>
        [Input("applicationObjectId")]
        public Input<string>? ApplicationObjectId { get; set; }

        [Input("azureGroups")]
        private InputList<Inputs.BackendRoleAzureGroupGetArgs>? _azureGroups;
        public InputList<Inputs.BackendRoleAzureGroupGetArgs> AzureGroups
        {
            get => _azureGroups ?? (_azureGroups = new InputList<Inputs.BackendRoleAzureGroupGetArgs>());
            set => _azureGroups = value;
        }

        [Input("azureRoles")]
        private InputList<Inputs.BackendRoleAzureRoleGetArgs>? _azureRoles;
        public InputList<Inputs.BackendRoleAzureRoleGetArgs> AzureRoles
        {
            get => _azureRoles ?? (_azureRoles = new InputList<Inputs.BackendRoleAzureRoleGetArgs>());
            set => _azureRoles = value;
        }

        /// <summary>
        /// Unique name of the auth backend to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// Name of the role to create
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public BackendRoleState()
        {
        }
    }
}
