// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Azure
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var azure = new Vault.Azure.Backend("azure", new()
    ///     {
    ///         SubscriptionId = @var.Subscription_id,
    ///         TenantId = @var.Tenant_id,
    ///         ClientSecret = @var.Client_secret,
    ///         ClientId = @var.Client_id,
    ///     });
    /// 
    ///     var generatedRole = new Vault.Azure.BackendRole("generatedRole", new()
    ///     {
    ///         Backend = azure.Path,
    ///         Role = "generated_role",
    ///         SignInAudience = "AzureADMyOrg",
    ///         Tags = new[]
    ///         {
    ///             "team:engineering",
    ///             "environment:development",
    ///         },
    ///         Ttl = "300",
    ///         MaxTtl = "600",
    ///         AzureRoles = new[]
    ///         {
    ///             new Vault.Azure.Inputs.BackendRoleAzureRoleArgs
    ///             {
    ///                 RoleName = "Reader",
    ///                 Scope = $"/subscriptions/{@var.Subscription_id}/resourceGroups/azure-vault-group",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var existingObjectId = new Vault.Azure.BackendRole("existingObjectId", new()
    ///     {
    ///         Backend = azure.Path,
    ///         Role = "existing_object_id",
    ///         ApplicationObjectId = "11111111-2222-3333-4444-44444444444",
    ///         Ttl = "300",
    ///         MaxTtl = "600",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [VaultResourceType("vault:azure/backendRole:BackendRole")]
    public partial class BackendRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Application Object ID for an existing service principal that will
        /// be used instead of creating dynamic service principals. If present, `azure_roles` and `permanently_delete` will be ignored.
        /// </summary>
        [Output("applicationObjectId")]
        public Output<string?> ApplicationObjectId { get; private set; } = null!;

        /// <summary>
        /// List of Azure groups to be assigned to the generated service principal.
        /// </summary>
        [Output("azureGroups")]
        public Output<ImmutableArray<Outputs.BackendRoleAzureGroup>> AzureGroups { get; private set; } = null!;

        /// <summary>
        /// List of Azure roles to be assigned to the generated service principal.
        /// </summary>
        [Output("azureRoles")]
        public Output<ImmutableArray<Outputs.BackendRoleAzureRole>> AzureRoles { get; private set; } = null!;

        /// <summary>
        /// Path to the mounted Azure auth backend
        /// </summary>
        [Output("backend")]
        public Output<string?> Backend { get; private set; } = null!;

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum TTL for service principals generated using this role. Accepts time
        /// suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine max TTL time.
        /// </summary>
        [Output("maxTtl")]
        public Output<string?> MaxTtl { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the applications and service principals created by Vault will be permanently
        /// deleted when the corresponding leases expire. Defaults to `false`. For Vault v1.12+.
        /// </summary>
        [Output("permanentlyDelete")]
        public Output<bool> PermanentlyDelete { get; private set; } = null!;

        /// <summary>
        /// Name of the Azure role
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Specifies the security principal types that are allowed to sign in to the application.
        /// Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount. Requires Vault 1.16+.
        /// </summary>
        [Output("signInAudience")]
        public Output<string?> SignInAudience { get; private set; } = null!;

        /// <summary>
        /// A list of Azure tags to attach to an application. Requires Vault 1.16+.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the default TTL for service principals generated using this role.
        /// Accepts time suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine default TTL time.
        /// </summary>
        [Output("ttl")]
        public Output<string?> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a BackendRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendRole(string name, BackendRoleArgs args, CustomResourceOptions? options = null)
            : base("vault:azure/backendRole:BackendRole", name, args ?? new BackendRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendRole(string name, Input<string> id, BackendRoleState? state = null, CustomResourceOptions? options = null)
            : base("vault:azure/backendRole:BackendRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendRole Get(string name, Input<string> id, BackendRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendRole(name, id, state, options);
        }
    }

    public sealed class BackendRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Application Object ID for an existing service principal that will
        /// be used instead of creating dynamic service principals. If present, `azure_roles` and `permanently_delete` will be ignored.
        /// </summary>
        [Input("applicationObjectId")]
        public Input<string>? ApplicationObjectId { get; set; }

        [Input("azureGroups")]
        private InputList<Inputs.BackendRoleAzureGroupArgs>? _azureGroups;

        /// <summary>
        /// List of Azure groups to be assigned to the generated service principal.
        /// </summary>
        public InputList<Inputs.BackendRoleAzureGroupArgs> AzureGroups
        {
            get => _azureGroups ?? (_azureGroups = new InputList<Inputs.BackendRoleAzureGroupArgs>());
            set => _azureGroups = value;
        }

        [Input("azureRoles")]
        private InputList<Inputs.BackendRoleAzureRoleArgs>? _azureRoles;

        /// <summary>
        /// List of Azure roles to be assigned to the generated service principal.
        /// </summary>
        public InputList<Inputs.BackendRoleAzureRoleArgs> AzureRoles
        {
            get => _azureRoles ?? (_azureRoles = new InputList<Inputs.BackendRoleAzureRoleArgs>());
            set => _azureRoles = value;
        }

        /// <summary>
        /// Path to the mounted Azure auth backend
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the maximum TTL for service principals generated using this role. Accepts time
        /// suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine max TTL time.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Indicates whether the applications and service principals created by Vault will be permanently
        /// deleted when the corresponding leases expire. Defaults to `false`. For Vault v1.12+.
        /// </summary>
        [Input("permanentlyDelete")]
        public Input<bool>? PermanentlyDelete { get; set; }

        /// <summary>
        /// Name of the Azure role
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// Specifies the security principal types that are allowed to sign in to the application.
        /// Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount. Requires Vault 1.16+.
        /// </summary>
        [Input("signInAudience")]
        public Input<string>? SignInAudience { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of Azure tags to attach to an application. Requires Vault 1.16+.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the default TTL for service principals generated using this role.
        /// Accepts time suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine default TTL time.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public BackendRoleArgs()
        {
        }
        public static new BackendRoleArgs Empty => new BackendRoleArgs();
    }

    public sealed class BackendRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Application Object ID for an existing service principal that will
        /// be used instead of creating dynamic service principals. If present, `azure_roles` and `permanently_delete` will be ignored.
        /// </summary>
        [Input("applicationObjectId")]
        public Input<string>? ApplicationObjectId { get; set; }

        [Input("azureGroups")]
        private InputList<Inputs.BackendRoleAzureGroupGetArgs>? _azureGroups;

        /// <summary>
        /// List of Azure groups to be assigned to the generated service principal.
        /// </summary>
        public InputList<Inputs.BackendRoleAzureGroupGetArgs> AzureGroups
        {
            get => _azureGroups ?? (_azureGroups = new InputList<Inputs.BackendRoleAzureGroupGetArgs>());
            set => _azureGroups = value;
        }

        [Input("azureRoles")]
        private InputList<Inputs.BackendRoleAzureRoleGetArgs>? _azureRoles;

        /// <summary>
        /// List of Azure roles to be assigned to the generated service principal.
        /// </summary>
        public InputList<Inputs.BackendRoleAzureRoleGetArgs> AzureRoles
        {
            get => _azureRoles ?? (_azureRoles = new InputList<Inputs.BackendRoleAzureRoleGetArgs>());
            set => _azureRoles = value;
        }

        /// <summary>
        /// Path to the mounted Azure auth backend
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the maximum TTL for service principals generated using this role. Accepts time
        /// suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine max TTL time.
        /// </summary>
        [Input("maxTtl")]
        public Input<string>? MaxTtl { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Indicates whether the applications and service principals created by Vault will be permanently
        /// deleted when the corresponding leases expire. Defaults to `false`. For Vault v1.12+.
        /// </summary>
        [Input("permanentlyDelete")]
        public Input<bool>? PermanentlyDelete { get; set; }

        /// <summary>
        /// Name of the Azure role
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Specifies the security principal types that are allowed to sign in to the application.
        /// Valid values are: AzureADMyOrg, AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount. Requires Vault 1.16+.
        /// </summary>
        [Input("signInAudience")]
        public Input<string>? SignInAudience { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of Azure tags to attach to an application. Requires Vault 1.16+.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the default TTL for service principals generated using this role.
        /// Accepts time suffixed strings ("1h") or an integer number of seconds. Defaults to the system/engine default TTL time.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public BackendRoleState()
        {
        }
        public static new BackendRoleState Empty => new BackendRoleState();
    }
}
