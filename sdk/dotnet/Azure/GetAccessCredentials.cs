// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Azure
{
    public static class GetAccessCredentials
    {
        public static Task<GetAccessCredentialsResult> InvokeAsync(GetAccessCredentialsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccessCredentialsResult>("vault:azure/getAccessCredentials:getAccessCredentials", args ?? new GetAccessCredentialsArgs(), options.WithDefaults());

        public static Output<GetAccessCredentialsResult> Invoke(GetAccessCredentialsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAccessCredentialsResult>("vault:azure/getAccessCredentials:getAccessCredentials", args ?? new GetAccessCredentialsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessCredentialsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the Azure secret backend to
        /// read credentials from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public string Backend { get; set; } = null!;

        /// <summary>
        /// If 'validate_creds' is true, 
        /// the number of seconds after which to give up validating credentials. Defaults
        /// to 300.
        /// </summary>
        [Input("maxCredValidationSeconds")]
        public int? MaxCredValidationSeconds { get; set; }

        /// <summary>
        /// If 'validate_creds' is true, 
        /// the number of seconds to wait between each test of generated credentials.
        /// Defaults to 1.
        /// </summary>
        [Input("numSecondsBetweenTests")]
        public int? NumSecondsBetweenTests { get; set; }

        /// <summary>
        /// If 'validate_creds' is true, 
        /// the number of sequential successes required to validate generated
        /// credentials. Defaults to 8.
        /// </summary>
        [Input("numSequentialSuccesses")]
        public int? NumSequentialSuccesses { get; set; }

        /// <summary>
        /// The name of the Azure secret backend role to read
        /// credentials from, with no leading or trailing `/`s.
        /// </summary>
        [Input("role", required: true)]
        public string Role { get; set; } = null!;

        /// <summary>
        /// The subscription ID to use during credential
        /// validation. Defaults to the subscription ID configured in the Vault `backend`.
        /// </summary>
        [Input("subscriptionId")]
        public string? SubscriptionId { get; set; }

        /// <summary>
        /// The tenant ID to use during credential validation.
        /// Defaults to the tenant ID configured in the Vault `backend`.
        /// </summary>
        [Input("tenantId")]
        public string? TenantId { get; set; }

        /// <summary>
        /// Whether generated credentials should be 
        /// validated before being returned. Defaults to `false`, which returns
        /// credentials without checking whether they have fully propagated throughout
        /// Azure Active Directory. Designating `true` activates testing.
        /// </summary>
        [Input("validateCreds")]
        public bool? ValidateCreds { get; set; }

        public GetAccessCredentialsArgs()
        {
        }
    }

    public sealed class GetAccessCredentialsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the Azure secret backend to
        /// read credentials from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// If 'validate_creds' is true, 
        /// the number of seconds after which to give up validating credentials. Defaults
        /// to 300.
        /// </summary>
        [Input("maxCredValidationSeconds")]
        public Input<int>? MaxCredValidationSeconds { get; set; }

        /// <summary>
        /// If 'validate_creds' is true, 
        /// the number of seconds to wait between each test of generated credentials.
        /// Defaults to 1.
        /// </summary>
        [Input("numSecondsBetweenTests")]
        public Input<int>? NumSecondsBetweenTests { get; set; }

        /// <summary>
        /// If 'validate_creds' is true, 
        /// the number of sequential successes required to validate generated
        /// credentials. Defaults to 8.
        /// </summary>
        [Input("numSequentialSuccesses")]
        public Input<int>? NumSequentialSuccesses { get; set; }

        /// <summary>
        /// The name of the Azure secret backend role to read
        /// credentials from, with no leading or trailing `/`s.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// The subscription ID to use during credential
        /// validation. Defaults to the subscription ID configured in the Vault `backend`.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        /// <summary>
        /// The tenant ID to use during credential validation.
        /// Defaults to the tenant ID configured in the Vault `backend`.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Whether generated credentials should be 
        /// validated before being returned. Defaults to `false`, which returns
        /// credentials without checking whether they have fully propagated throughout
        /// Azure Active Directory. Designating `true` activates testing.
        /// </summary>
        [Input("validateCreds")]
        public Input<bool>? ValidateCreds { get; set; }

        public GetAccessCredentialsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAccessCredentialsResult
    {
        public readonly string Backend;
        /// <summary>
        /// The client id for credentials to query the Azure APIs.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The client secret for credentials to query the Azure APIs.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The duration of the secret lease, in seconds relative
        /// to the time the data was requested. Once this time has passed any plan
        /// generated with this data may fail to apply.
        /// </summary>
        public readonly int LeaseDuration;
        /// <summary>
        /// The lease identifier assigned by Vault.
        /// </summary>
        public readonly string LeaseId;
        public readonly bool LeaseRenewable;
        public readonly string LeaseStartTime;
        public readonly int? MaxCredValidationSeconds;
        public readonly int? NumSecondsBetweenTests;
        public readonly int? NumSequentialSuccesses;
        public readonly string Role;
        public readonly string? SubscriptionId;
        public readonly string? TenantId;
        public readonly bool? ValidateCreds;

        [OutputConstructor]
        private GetAccessCredentialsResult(
            string backend,

            string clientId,

            string clientSecret,

            string id,

            int leaseDuration,

            string leaseId,

            bool leaseRenewable,

            string leaseStartTime,

            int? maxCredValidationSeconds,

            int? numSecondsBetweenTests,

            int? numSequentialSuccesses,

            string role,

            string? subscriptionId,

            string? tenantId,

            bool? validateCreds)
        {
            Backend = backend;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Id = id;
            LeaseDuration = leaseDuration;
            LeaseId = leaseId;
            LeaseRenewable = leaseRenewable;
            LeaseStartTime = leaseStartTime;
            MaxCredValidationSeconds = maxCredValidationSeconds;
            NumSecondsBetweenTests = numSecondsBetweenTests;
            NumSequentialSuccesses = numSequentialSuccesses;
            Role = role;
            SubscriptionId = subscriptionId;
            TenantId = tenantId;
            ValidateCreds = validateCreds;
        }
    }
}
