// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Azure
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### 
    /// 
    /// You can setup the Azure secrets engine with Workload Identity Federation (WIF) for a secret-less configuration:
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var azure = new Vault.Azure.Backend("azure", new()
    ///     {
    ///         SubscriptionId = "11111111-2222-3333-4444-111111111111",
    ///         TenantId = "11111111-2222-3333-4444-222222222222",
    ///         ClientId = "11111111-2222-3333-4444-333333333333",
    ///         IdentityTokenAudience = "&lt;TOKEN_AUDIENCE&gt;",
    ///         IdentityTokenTtl = "&lt;TOKEN_TTL&gt;",
    ///         RotationSchedule = "0 * * * SAT",
    ///         RotationWindow = 3600,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vault = Pulumi.Vault;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var azure = new Vault.Azure.Backend("azure", new()
    ///     {
    ///         SubscriptionId = "11111111-2222-3333-4444-111111111111",
    ///         TenantId = "11111111-2222-3333-4444-222222222222",
    ///         ClientId = "11111111-2222-3333-4444-333333333333",
    ///         ClientSecret = "12345678901234567890",
    ///         Environment = "AzurePublicCloud",
    ///         RotationSchedule = "0 * * * SAT",
    ///         RotationWindow = 3600,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [VaultResourceType("vault:azure/backend:Backend")]
    public partial class Backend : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Accessor of the mount
        /// </summary>
        [Output("accessor")]
        public Output<string> Accessor { get; private set; } = null!;

        /// <summary>
        /// List of managed key registry entry names that the mount in question is allowed to access
        /// </summary>
        [Output("allowedManagedKeys")]
        public Output<ImmutableArray<string>> AllowedManagedKeys { get; private set; } = null!;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        [Output("allowedResponseHeaders")]
        public Output<ImmutableArray<string>> AllowedResponseHeaders { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
        /// </summary>
        [Output("auditNonHmacRequestKeys")]
        public Output<ImmutableArray<string>> AuditNonHmacRequestKeys { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
        /// </summary>
        [Output("auditNonHmacResponseKeys")]
        public Output<ImmutableArray<string>> AuditNonHmacResponseKeys { get; private set; } = null!;

        /// <summary>
        /// The OAuth2 client id to connect to Azure.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// The OAuth2 client secret to connect to Azure.
        /// </summary>
        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Default lease duration for tokens and secrets in seconds
        /// </summary>
        [Output("defaultLeaseTtlSeconds")]
        public Output<int> DefaultLeaseTtlSeconds { get; private set; } = null!;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        [Output("delegatedAuthAccessors")]
        public Output<ImmutableArray<string>> DelegatedAuthAccessors { get; private set; } = null!;

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Output("disableAutomatedRotation")]
        public Output<bool?> DisableAutomatedRotation { get; private set; } = null!;

        /// <summary>
        /// If set, opts out of mount migration on path updates.
        /// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
        /// </summary>
        [Output("disableRemount")]
        public Output<bool?> DisableRemount { get; private set; } = null!;

        /// <summary>
        /// The Azure environment.
        /// </summary>
        [Output("environment")]
        public Output<string?> Environment { get; private set; } = null!;

        /// <summary>
        /// Enable the secrets engine to access Vault's external entropy source
        /// </summary>
        [Output("externalEntropyAccess")]
        public Output<bool?> ExternalEntropyAccess { get; private set; } = null!;

        /// <summary>
        /// If set to true, disables caching.
        /// </summary>
        [Output("forceNoCache")]
        public Output<bool> ForceNoCache { get; private set; } = null!;

        /// <summary>
        /// The audience claim value. Requires Vault 1.17+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Output("identityTokenAudience")]
        public Output<string?> IdentityTokenAudience { get; private set; } = null!;

        /// <summary>
        /// The key to use for signing identity tokens.
        /// </summary>
        [Output("identityTokenKey")]
        public Output<string?> IdentityTokenKey { get; private set; } = null!;

        /// <summary>
        /// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Output("identityTokenTtl")]
        public Output<int> IdentityTokenTtl { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to show this mount in the UI-specific listing endpoint
        /// </summary>
        [Output("listingVisibility")]
        public Output<string?> ListingVisibility { get; private set; } = null!;

        /// <summary>
        /// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
        /// </summary>
        [Output("local")]
        public Output<bool?> Local { get; private set; } = null!;

        /// <summary>
        /// Maximum possible lease duration for tokens and secrets in seconds
        /// </summary>
        [Output("maxLeaseTtlSeconds")]
        public Output<int> MaxLeaseTtlSeconds { get; private set; } = null!;

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies mount type specific options that are passed to the backend
        /// </summary>
        [Output("options")]
        public Output<ImmutableDictionary<string, string>?> Options { get; private set; } = null!;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        [Output("passthroughRequestHeaders")]
        public Output<ImmutableArray<string>> PassthroughRequestHeaders { get; private set; } = null!;

        /// <summary>
        /// The unique path this backend should be mounted at. Defaults to `Azure`.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
        /// </summary>
        [Output("pluginVersion")]
        public Output<string?> PluginVersion { get; private set; } = null!;

        /// <summary>
        /// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
        /// </summary>
        [Output("rootPasswordTtl")]
        public Output<int> RootPasswordTtl { get; private set; } = null!;

        /// <summary>
        /// The amount of time in seconds Vault should wait before rotating the root credential.
        /// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Output("rotationPeriod")]
        public Output<int?> RotationPeriod { get; private set; } = null!;

        /// <summary>
        /// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
        /// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Output("rotationSchedule")]
        public Output<string?> RotationSchedule { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of time in seconds allowed to complete
        /// a rotation when a scheduled token rotation occurs. The default rotation window is
        /// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
        /// </summary>
        [Output("rotationWindow")]
        public Output<int?> RotationWindow { get; private set; } = null!;

        /// <summary>
        /// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
        /// </summary>
        [Output("sealWrap")]
        public Output<bool> SealWrap { get; private set; } = null!;

        /// <summary>
        /// The subscription id for the Azure Active Directory.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string> SubscriptionId { get; private set; } = null!;

        /// <summary>
        /// The tenant id for the Azure Active Directory.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a Backend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Backend(string name, BackendArgs args, CustomResourceOptions? options = null)
            : base("vault:azure/backend:Backend", name, args ?? new BackendArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Backend(string name, Input<string> id, BackendState? state = null, CustomResourceOptions? options = null)
            : base("vault:azure/backend:Backend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clientId",
                    "clientSecret",
                    "subscriptionId",
                    "tenantId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Backend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Backend Get(string name, Input<string> id, BackendState? state = null, CustomResourceOptions? options = null)
        {
            return new Backend(name, id, state, options);
        }
    }

    public sealed class BackendArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedManagedKeys")]
        private InputList<string>? _allowedManagedKeys;

        /// <summary>
        /// List of managed key registry entry names that the mount in question is allowed to access
        /// </summary>
        public InputList<string> AllowedManagedKeys
        {
            get => _allowedManagedKeys ?? (_allowedManagedKeys = new InputList<string>());
            set => _allowedManagedKeys = value;
        }

        [Input("allowedResponseHeaders")]
        private InputList<string>? _allowedResponseHeaders;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        public InputList<string> AllowedResponseHeaders
        {
            get => _allowedResponseHeaders ?? (_allowedResponseHeaders = new InputList<string>());
            set => _allowedResponseHeaders = value;
        }

        [Input("auditNonHmacRequestKeys")]
        private InputList<string>? _auditNonHmacRequestKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
        /// </summary>
        public InputList<string> AuditNonHmacRequestKeys
        {
            get => _auditNonHmacRequestKeys ?? (_auditNonHmacRequestKeys = new InputList<string>());
            set => _auditNonHmacRequestKeys = value;
        }

        [Input("auditNonHmacResponseKeys")]
        private InputList<string>? _auditNonHmacResponseKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
        /// </summary>
        public InputList<string> AuditNonHmacResponseKeys
        {
            get => _auditNonHmacResponseKeys ?? (_auditNonHmacResponseKeys = new InputList<string>());
            set => _auditNonHmacResponseKeys = value;
        }

        [Input("clientId")]
        private Input<string>? _clientId;

        /// <summary>
        /// The OAuth2 client id to connect to Azure.
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The OAuth2 client secret to connect to Azure.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Default lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("defaultLeaseTtlSeconds")]
        public Input<int>? DefaultLeaseTtlSeconds { get; set; }

        [Input("delegatedAuthAccessors")]
        private InputList<string>? _delegatedAuthAccessors;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        public InputList<string> DelegatedAuthAccessors
        {
            get => _delegatedAuthAccessors ?? (_delegatedAuthAccessors = new InputList<string>());
            set => _delegatedAuthAccessors = value;
        }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("disableAutomatedRotation")]
        public Input<bool>? DisableAutomatedRotation { get; set; }

        /// <summary>
        /// If set, opts out of mount migration on path updates.
        /// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
        /// </summary>
        [Input("disableRemount")]
        public Input<bool>? DisableRemount { get; set; }

        /// <summary>
        /// The Azure environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Enable the secrets engine to access Vault's external entropy source
        /// </summary>
        [Input("externalEntropyAccess")]
        public Input<bool>? ExternalEntropyAccess { get; set; }

        /// <summary>
        /// If set to true, disables caching.
        /// </summary>
        [Input("forceNoCache")]
        public Input<bool>? ForceNoCache { get; set; }

        /// <summary>
        /// The audience claim value. Requires Vault 1.17+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("identityTokenAudience")]
        public Input<string>? IdentityTokenAudience { get; set; }

        /// <summary>
        /// The key to use for signing identity tokens.
        /// </summary>
        [Input("identityTokenKey")]
        public Input<string>? IdentityTokenKey { get; set; }

        /// <summary>
        /// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("identityTokenTtl")]
        public Input<int>? IdentityTokenTtl { get; set; }

        /// <summary>
        /// Specifies whether to show this mount in the UI-specific listing endpoint
        /// </summary>
        [Input("listingVisibility")]
        public Input<string>? ListingVisibility { get; set; }

        /// <summary>
        /// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// Maximum possible lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("maxLeaseTtlSeconds")]
        public Input<int>? MaxLeaseTtlSeconds { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// Specifies mount type specific options that are passed to the backend
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        [Input("passthroughRequestHeaders")]
        private InputList<string>? _passthroughRequestHeaders;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        public InputList<string> PassthroughRequestHeaders
        {
            get => _passthroughRequestHeaders ?? (_passthroughRequestHeaders = new InputList<string>());
            set => _passthroughRequestHeaders = value;
        }

        /// <summary>
        /// The unique path this backend should be mounted at. Defaults to `Azure`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
        /// </summary>
        [Input("pluginVersion")]
        public Input<string>? PluginVersion { get; set; }

        /// <summary>
        /// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
        /// </summary>
        [Input("rootPasswordTtl")]
        public Input<int>? RootPasswordTtl { get; set; }

        /// <summary>
        /// The amount of time in seconds Vault should wait before rotating the root credential.
        /// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("rotationPeriod")]
        public Input<int>? RotationPeriod { get; set; }

        /// <summary>
        /// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
        /// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("rotationSchedule")]
        public Input<string>? RotationSchedule { get; set; }

        /// <summary>
        /// The maximum amount of time in seconds allowed to complete
        /// a rotation when a scheduled token rotation occurs. The default rotation window is
        /// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
        /// </summary>
        [Input("rotationWindow")]
        public Input<int>? RotationWindow { get; set; }

        /// <summary>
        /// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
        /// </summary>
        [Input("sealWrap")]
        public Input<bool>? SealWrap { get; set; }

        [Input("subscriptionId", required: true)]
        private Input<string>? _subscriptionId;

        /// <summary>
        /// The subscription id for the Azure Active Directory.
        /// </summary>
        public Input<string>? SubscriptionId
        {
            get => _subscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _subscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tenantId", required: true)]
        private Input<string>? _tenantId;

        /// <summary>
        /// The tenant id for the Azure Active Directory.
        /// </summary>
        public Input<string>? TenantId
        {
            get => _tenantId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tenantId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public BackendArgs()
        {
        }
        public static new BackendArgs Empty => new BackendArgs();
    }

    public sealed class BackendState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Accessor of the mount
        /// </summary>
        [Input("accessor")]
        public Input<string>? Accessor { get; set; }

        [Input("allowedManagedKeys")]
        private InputList<string>? _allowedManagedKeys;

        /// <summary>
        /// List of managed key registry entry names that the mount in question is allowed to access
        /// </summary>
        public InputList<string> AllowedManagedKeys
        {
            get => _allowedManagedKeys ?? (_allowedManagedKeys = new InputList<string>());
            set => _allowedManagedKeys = value;
        }

        [Input("allowedResponseHeaders")]
        private InputList<string>? _allowedResponseHeaders;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        public InputList<string> AllowedResponseHeaders
        {
            get => _allowedResponseHeaders ?? (_allowedResponseHeaders = new InputList<string>());
            set => _allowedResponseHeaders = value;
        }

        [Input("auditNonHmacRequestKeys")]
        private InputList<string>? _auditNonHmacRequestKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
        /// </summary>
        public InputList<string> AuditNonHmacRequestKeys
        {
            get => _auditNonHmacRequestKeys ?? (_auditNonHmacRequestKeys = new InputList<string>());
            set => _auditNonHmacRequestKeys = value;
        }

        [Input("auditNonHmacResponseKeys")]
        private InputList<string>? _auditNonHmacResponseKeys;

        /// <summary>
        /// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
        /// </summary>
        public InputList<string> AuditNonHmacResponseKeys
        {
            get => _auditNonHmacResponseKeys ?? (_auditNonHmacResponseKeys = new InputList<string>());
            set => _auditNonHmacResponseKeys = value;
        }

        [Input("clientId")]
        private Input<string>? _clientId;

        /// <summary>
        /// The OAuth2 client id to connect to Azure.
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The OAuth2 client secret to connect to Azure.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Default lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("defaultLeaseTtlSeconds")]
        public Input<int>? DefaultLeaseTtlSeconds { get; set; }

        [Input("delegatedAuthAccessors")]
        private InputList<string>? _delegatedAuthAccessors;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        public InputList<string> DelegatedAuthAccessors
        {
            get => _delegatedAuthAccessors ?? (_delegatedAuthAccessors = new InputList<string>());
            set => _delegatedAuthAccessors = value;
        }

        /// <summary>
        /// Human-friendly description of the mount for the backend.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("disableAutomatedRotation")]
        public Input<bool>? DisableAutomatedRotation { get; set; }

        /// <summary>
        /// If set, opts out of mount migration on path updates.
        /// See here for more info on [Mount Migration](https://www.vaultproject.io/docs/concepts/mount-migration)
        /// </summary>
        [Input("disableRemount")]
        public Input<bool>? DisableRemount { get; set; }

        /// <summary>
        /// The Azure environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Enable the secrets engine to access Vault's external entropy source
        /// </summary>
        [Input("externalEntropyAccess")]
        public Input<bool>? ExternalEntropyAccess { get; set; }

        /// <summary>
        /// If set to true, disables caching.
        /// </summary>
        [Input("forceNoCache")]
        public Input<bool>? ForceNoCache { get; set; }

        /// <summary>
        /// The audience claim value. Requires Vault 1.17+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("identityTokenAudience")]
        public Input<string>? IdentityTokenAudience { get; set; }

        /// <summary>
        /// The key to use for signing identity tokens.
        /// </summary>
        [Input("identityTokenKey")]
        public Input<string>? IdentityTokenKey { get; set; }

        /// <summary>
        /// The TTL of generated identity tokens in seconds. Requires Vault 1.17+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("identityTokenTtl")]
        public Input<int>? IdentityTokenTtl { get; set; }

        /// <summary>
        /// Specifies whether to show this mount in the UI-specific listing endpoint
        /// </summary>
        [Input("listingVisibility")]
        public Input<string>? ListingVisibility { get; set; }

        /// <summary>
        /// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
        /// </summary>
        [Input("local")]
        public Input<bool>? Local { get; set; }

        /// <summary>
        /// Maximum possible lease duration for tokens and secrets in seconds
        /// </summary>
        [Input("maxLeaseTtlSeconds")]
        public Input<int>? MaxLeaseTtlSeconds { get; set; }

        /// <summary>
        /// The namespace to provision the resource in.
        /// The value should not contain leading or trailing forward slashes.
        /// The `Namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault/index.html#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// Specifies mount type specific options that are passed to the backend
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        [Input("passthroughRequestHeaders")]
        private InputList<string>? _passthroughRequestHeaders;

        /// <summary>
        /// List of headers to allow and pass from the request to the plugin
        /// </summary>
        public InputList<string> PassthroughRequestHeaders
        {
            get => _passthroughRequestHeaders ?? (_passthroughRequestHeaders = new InputList<string>());
            set => _passthroughRequestHeaders = value;
        }

        /// <summary>
        /// The unique path this backend should be mounted at. Defaults to `Azure`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
        /// </summary>
        [Input("pluginVersion")]
        public Input<string>? PluginVersion { get; set; }

        /// <summary>
        /// The TTL in seconds of the root password in Azure when rotate-root generates a new client secret
        /// </summary>
        [Input("rootPasswordTtl")]
        public Input<int>? RootPasswordTtl { get; set; }

        /// <summary>
        /// The amount of time in seconds Vault should wait before rotating the root credential.
        /// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("rotationPeriod")]
        public Input<int>? RotationPeriod { get; set; }

        /// <summary>
        /// The schedule, in [cron-style time format](https://en.wikipedia.org/wiki/Cron),
        /// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
        /// *Available only for Vault Enterprise*
        /// </summary>
        [Input("rotationSchedule")]
        public Input<string>? RotationSchedule { get; set; }

        /// <summary>
        /// The maximum amount of time in seconds allowed to complete
        /// a rotation when a scheduled token rotation occurs. The default rotation window is
        /// unbound and the minimum allowable window is `3600`. Requires Vault Enterprise 1.19+. *Available only for Vault Enterprise*
        /// </summary>
        [Input("rotationWindow")]
        public Input<int>? RotationWindow { get; set; }

        /// <summary>
        /// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
        /// </summary>
        [Input("sealWrap")]
        public Input<bool>? SealWrap { get; set; }

        [Input("subscriptionId")]
        private Input<string>? _subscriptionId;

        /// <summary>
        /// The subscription id for the Azure Active Directory.
        /// </summary>
        public Input<string>? SubscriptionId
        {
            get => _subscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _subscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tenantId")]
        private Input<string>? _tenantId;

        /// <summary>
        /// The tenant id for the Azure Active Directory.
        /// </summary>
        public Input<string>? TenantId
        {
            get => _tenantId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tenantId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public BackendState()
        {
        }
        public static new BackendState Empty => new BackendState();
    }
}
