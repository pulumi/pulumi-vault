// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault
{
    public static class GetNomadAccessToken
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Vault.NomadSecretBackend("config", new()
        ///     {
        ///         Backend = "nomad",
        ///         Description = "test description",
        ///         DefaultLeaseTtlSeconds = 3600,
        ///         MaxLeaseTtlSeconds = 7200,
        ///         Address = "https://127.0.0.1:4646",
        ///         Token = "ae20ceaa-...",
        ///     });
        /// 
        ///     var test = new Vault.NomadSecretRole("test", new()
        ///     {
        ///         Backend = config.Backend,
        ///         Role = "test",
        ///         Type = "client",
        ///         Policies = new[]
        ///         {
        ///             "readonly",
        ///         },
        ///     });
        /// 
        ///     var token = Vault.GetNomadAccessToken.Invoke(new()
        ///     {
        ///         Backend = config.Backend,
        ///         Role = test.Role,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetNomadAccessTokenResult> InvokeAsync(GetNomadAccessTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNomadAccessTokenResult>("vault:index/getNomadAccessToken:getNomadAccessToken", args ?? new GetNomadAccessTokenArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vault = Pulumi.Vault;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Vault.NomadSecretBackend("config", new()
        ///     {
        ///         Backend = "nomad",
        ///         Description = "test description",
        ///         DefaultLeaseTtlSeconds = 3600,
        ///         MaxLeaseTtlSeconds = 7200,
        ///         Address = "https://127.0.0.1:4646",
        ///         Token = "ae20ceaa-...",
        ///     });
        /// 
        ///     var test = new Vault.NomadSecretRole("test", new()
        ///     {
        ///         Backend = config.Backend,
        ///         Role = "test",
        ///         Type = "client",
        ///         Policies = new[]
        ///         {
        ///             "readonly",
        ///         },
        ///     });
        /// 
        ///     var token = Vault.GetNomadAccessToken.Invoke(new()
        ///     {
        ///         Backend = config.Backend,
        ///         Role = test.Role,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetNomadAccessTokenResult> Invoke(GetNomadAccessTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNomadAccessTokenResult>("vault:index/getNomadAccessToken:getNomadAccessToken", args ?? new GetNomadAccessTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNomadAccessTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the Nomad secret backend to
        /// read credentials from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public string Backend { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// The name of the Nomad secret backend role to generate
        /// a token for, with no leading or trailing `/`s.
        /// </summary>
        [Input("role", required: true)]
        public string Role { get; set; } = null!;

        public GetNomadAccessTokenArgs()
        {
        }
        public static new GetNomadAccessTokenArgs Empty => new GetNomadAccessTokenArgs();
    }

    public sealed class GetNomadAccessTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The path to the Nomad secret backend to
        /// read credentials from, with no leading or trailing `/`s.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// The namespace of the target resource.
        /// The value should not contain leading or trailing forward slashes.
        /// The `namespace` is always relative to the provider's configured [namespace](https://www.terraform.io/docs/providers/vault#namespace).
        /// *Available only for Vault Enterprise*.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The name of the Nomad secret backend role to generate
        /// a token for, with no leading or trailing `/`s.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        public GetNomadAccessTokenInvokeArgs()
        {
        }
        public static new GetNomadAccessTokenInvokeArgs Empty => new GetNomadAccessTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetNomadAccessTokenResult
    {
        /// <summary>
        /// The public identifier for a specific token. It can be used 
        /// to look up information about a token or to revoke a token.
        /// </summary>
        public readonly string AccessorId;
        public readonly string Backend;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Namespace;
        public readonly string Role;
        /// <summary>
        /// The token to be used when making requests to Nomad and should be kept private.
        /// </summary>
        public readonly string SecretId;

        [OutputConstructor]
        private GetNomadAccessTokenResult(
            string accessorId,

            string backend,

            string id,

            string? @namespace,

            string role,

            string secretId)
        {
            AccessorId = accessorId;
            Backend = backend;
            Id = id;
            Namespace = @namespace;
            Role = role;
            SecretId = secretId;
        }
    }
}
