// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Namespace
{
    [Obsolete(@"vault.namespace/get.get has been deprecated in favor of vault.index/getnamespace.getNamespace")]
    public static class Get
    {
        public static Task<GetResult> InvokeAsync(GetArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResult>("vault:namespace/get:get", args ?? new GetArgs(), options.WithDefaults());

        public static Output<GetResult> Invoke(GetInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResult>("vault:namespace/get:get", args ?? new GetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetArgs : global::Pulumi.InvokeArgs
    {
        [Input("namespace")]
        public string? Namespace { get; set; }

        [Input("path")]
        public string? Path { get; set; }

        public GetArgs()
        {
        }
        public static new GetArgs Empty => new GetArgs();
    }

    public sealed class GetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        public GetInvokeArgs()
        {
        }
        public static new GetInvokeArgs Empty => new GetInvokeArgs();
    }


    [OutputType]
    public sealed class GetResult
    {
        public readonly ImmutableDictionary<string, object> CustomMetadata;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Namespace;
        public readonly string NamespaceId;
        public readonly string? Path;
        public readonly string PathFq;

        [OutputConstructor]
        private GetResult(
            ImmutableDictionary<string, object> customMetadata,

            string id,

            string? @namespace,

            string namespaceId,

            string? path,

            string pathFq)
        {
            CustomMetadata = customMetadata;
            Id = id;
            Namespace = @namespace;
            NamespaceId = namespaceId;
            Path = path;
            PathFq = pathFq;
        }
    }
}
