// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Namespace
{
    [Obsolete(@"vault.namespace/gets.getS has been deprecated in favor of vault.index/getnamespaces.getNamespaces")]
    public static class GetS
    {
        public static Task<GetSResult> InvokeAsync(GetSArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSResult>("vault:namespace/getS:getS", args ?? new GetSArgs(), options.WithDefaults());

        public static Output<GetSResult> Invoke(GetSInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSResult>("vault:namespace/getS:getS", args ?? new GetSInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSArgs : global::Pulumi.InvokeArgs
    {
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetSArgs()
        {
        }
        public static new GetSArgs Empty => new GetSArgs();
    }

    public sealed class GetSInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetSInvokeArgs()
        {
        }
        public static new GetSInvokeArgs Empty => new GetSInvokeArgs();
    }


    [OutputType]
    public sealed class GetSResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Namespace;
        public readonly ImmutableArray<string> Paths;

        [OutputConstructor]
        private GetSResult(
            string id,

            string? @namespace,

            ImmutableArray<string> paths)
        {
            Id = id;
            Namespace = @namespace;
            Paths = paths;
        }
    }
}
